Index: node_modules/postgresql-client/typings/data-types/int8-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/int8-type.d.ts b/node_modules/postgresql-client/typings/data-types/int8-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/int8-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const Int8Type: DataType;
-export declare const ArrayInt8Type: DataType;
Index: node_modules/postgresql-client/cjs/constants.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/constants.js b/node_modules/postgresql-client/cjs/constants.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/constants.js	
+++ /dev/null	
@@ -1,250 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.DataTypeNames = exports.DataTypeOIDs = exports.ConnectionState = exports.DEFAULT_COLUMN_FORMAT = exports.DataFormat = void 0;
-const protocol_js_1 = require("./protocol/protocol.js");
-var DataFormat = protocol_js_1.Protocol.DataFormat;
-exports.DataFormat = DataFormat;
-// @ts-ignore
-Symbol.asyncDispose ?? (Symbol.asyncDispose = Symbol('Symbol.asyncDispose'));
-exports.DEFAULT_COLUMN_FORMAT = DataFormat.binary;
-var ConnectionState;
-(function (ConnectionState) {
-    ConnectionState[ConnectionState["CLOSED"] = 0] = "CLOSED";
-    ConnectionState[ConnectionState["CONNECTING"] = 1] = "CONNECTING";
-    ConnectionState[ConnectionState["AUTHORIZING"] = 3] = "AUTHORIZING";
-    ConnectionState[ConnectionState["READY"] = 2] = "READY";
-    ConnectionState[ConnectionState["CLOSING"] = 10] = "CLOSING";
-})(ConnectionState || (exports.ConnectionState = ConnectionState = {}));
-exports.DataTypeOIDs = {
-    bool: 16,
-    bytea: 17,
-    char: 18,
-    name: 19,
-    int8: 20,
-    int2: 21,
-    int2vector: 22,
-    int4: 23,
-    regproc: 24,
-    text: 25,
-    oid: 26,
-    tid: 27,
-    xid: 28,
-    cid: 29,
-    oidvector: 30,
-    json: 114,
-    xml: 142,
-    point: 600,
-    lseg: 601,
-    path: 602,
-    box: 603,
-    polygon: 604,
-    line: 628,
-    cidr: 650,
-    float4: 700,
-    float8: 701,
-    unknown: 705,
-    circle: 718,
-    macaddr8: 774,
-    money: 790,
-    macaddr: 829,
-    inet: 869,
-    bpchar: 1042,
-    varchar: 1043,
-    date: 1082,
-    time: 1083,
-    timestamp: 1114,
-    timestamptz: 1184,
-    interval: 1186,
-    timetz: 1266,
-    bit: 1560,
-    varbit: 1562,
-    numeric: 1700,
-    refcursor: 1790,
-    regprocedure: 2202,
-    regoper: 2203,
-    regoperator: 2204,
-    regclass: 2205,
-    regtype: 2206,
-    record: 2249,
-    cstring: 2275,
-    any: 2276,
-    anyarray: 2277,
-    void: 2278,
-    trigger: 2279,
-    // eslint-disable-next-line camelcase
-    language_handler: 2280,
-    internal: 2281,
-    anyelement: 2283,
-    anynonarray: 2776,
-    uuid: 2950,
-    jsonb: 3802,
-    anyrange: 3831,
-    int4range: 3904,
-    numrange: 3906,
-    tsrange: 3908,
-    rstzrange: 3910,
-    daterange: 3912,
-    int8range: 3926,
-    _xml: 143,
-    _json: 199,
-    _xid8: 271,
-    _line: 629,
-    _cidr: 651,
-    _circle: 719,
-    _macaddr8: 775,
-    _money: 791,
-    _bool: 1000,
-    _bytea: 1001,
-    _char: 1002,
-    _name: 1003,
-    _int2: 1005,
-    _int2vector: 1006,
-    _int4: 1007,
-    _regproc: 1008,
-    _text: 1009,
-    _tid: 1010,
-    _xid: 1011,
-    _cid: 1012,
-    _oidvector: 1013,
-    _bpchar: 1014,
-    _varchar: 1015,
-    _int8: 1016,
-    _point: 1017,
-    _lseg: 1018,
-    _path: 1019,
-    _box: 1020,
-    _float4: 1021,
-    _float8: 1022,
-    _polygon: 1027,
-    _oid: 1028,
-    _macaddr: 1040,
-    _inet: 1041,
-    _timestamp: 1115,
-    _date: 1182,
-    _time: 1183,
-    _timestamptz: 1185,
-    _interval: 1187,
-    _numeric: 1231,
-    _cstring: 1263,
-    _timetz: 1270,
-    _bit: 1561,
-    _varbit: 1563,
-    _uuid: 2951,
-    _jsonb: 3807,
-};
-exports.DataTypeNames = {
-    [exports.DataTypeOIDs.bool]: 'bool',
-    [exports.DataTypeOIDs.bytea]: 'bytea',
-    [exports.DataTypeOIDs.char]: 'char',
-    [exports.DataTypeOIDs.name]: 'name',
-    [exports.DataTypeOIDs.int8]: 'int8',
-    [exports.DataTypeOIDs.int2]: 'int2',
-    [exports.DataTypeOIDs.int2vector]: 'int2vector',
-    [exports.DataTypeOIDs.int4]: 'int4',
-    [exports.DataTypeOIDs.regproc]: 'regproc',
-    [exports.DataTypeOIDs.text]: 'text',
-    [exports.DataTypeOIDs.oid]: 'oid',
-    [exports.DataTypeOIDs.tid]: 'tid',
-    [exports.DataTypeOIDs.xid]: 'xid',
-    [exports.DataTypeOIDs.cid]: 'cid',
-    [exports.DataTypeOIDs.oidvector]: 'oidvector',
-    [exports.DataTypeOIDs.json]: 'json',
-    [exports.DataTypeOIDs.xml]: 'xml',
-    [exports.DataTypeOIDs.point]: 'point',
-    [exports.DataTypeOIDs.lseg]: 'lseg',
-    [exports.DataTypeOIDs.path]: 'path',
-    [exports.DataTypeOIDs.box]: 'box',
-    [exports.DataTypeOIDs.polygon]: 'polygon',
-    [exports.DataTypeOIDs.line]: 'line',
-    [exports.DataTypeOIDs.cidr]: 'cidr',
-    [exports.DataTypeOIDs.float4]: 'float4',
-    [exports.DataTypeOIDs.float8]: 'float8',
-    [exports.DataTypeOIDs.unknown]: 'unknown',
-    [exports.DataTypeOIDs.circle]: 'circle',
-    [exports.DataTypeOIDs.macaddr8]: 'macaddr8',
-    [exports.DataTypeOIDs.money]: 'money',
-    [exports.DataTypeOIDs.macaddr]: 'macaddr',
-    [exports.DataTypeOIDs.inet]: 'inet',
-    [exports.DataTypeOIDs.bpchar]: 'bpchar',
-    [exports.DataTypeOIDs.varchar]: 'varchar',
-    [exports.DataTypeOIDs.date]: 'date',
-    [exports.DataTypeOIDs.time]: 'time',
-    [exports.DataTypeOIDs.timestamp]: 'timestamp',
-    [exports.DataTypeOIDs.timestamptz]: 'timestamptz',
-    [exports.DataTypeOIDs.interval]: 'interval',
-    [exports.DataTypeOIDs.timetz]: 'timetz',
-    [exports.DataTypeOIDs.bit]: 'bit',
-    [exports.DataTypeOIDs.varbit]: 'varbit',
-    [exports.DataTypeOIDs.numeric]: 'numeric',
-    [exports.DataTypeOIDs.refcursor]: 'refcursor',
-    [exports.DataTypeOIDs.regprocedure]: 'regprocedure',
-    [exports.DataTypeOIDs.regoper]: 'regoper',
-    [exports.DataTypeOIDs.regoperator]: 'regoperator',
-    [exports.DataTypeOIDs.regclass]: 'regclass',
-    [exports.DataTypeOIDs.regtype]: 'regtype',
-    [exports.DataTypeOIDs.record]: 'record',
-    [exports.DataTypeOIDs.cstring]: 'cstring',
-    [exports.DataTypeOIDs.any]: 'any',
-    [exports.DataTypeOIDs.anyarray]: 'anyarray',
-    [exports.DataTypeOIDs.void]: 'void',
-    [exports.DataTypeOIDs.trigger]: 'trigger',
-    [exports.DataTypeOIDs.language_handler]: 'language_handler',
-    [exports.DataTypeOIDs.internal]: 'internal',
-    [exports.DataTypeOIDs.anyelement]: 'anyelement',
-    [exports.DataTypeOIDs.anynonarray]: 'anynonarray',
-    [exports.DataTypeOIDs.uuid]: 'uuid',
-    [exports.DataTypeOIDs.jsonb]: 'jsonb',
-    [exports.DataTypeOIDs.anyrange]: 'anyrange',
-    [exports.DataTypeOIDs.int4range]: 'int4range',
-    [exports.DataTypeOIDs.numrange]: 'numrange',
-    [exports.DataTypeOIDs.tsrange]: 'tsrange',
-    [exports.DataTypeOIDs.rstzrange]: 'rstzrange',
-    [exports.DataTypeOIDs.daterange]: 'daterange',
-    [exports.DataTypeOIDs.int8range]: 'int8range',
-    [exports.DataTypeOIDs._xml]: '_xml',
-    [exports.DataTypeOIDs._json]: '_json',
-    [exports.DataTypeOIDs._xid8]: '_xid8',
-    [exports.DataTypeOIDs._line]: '_line',
-    [exports.DataTypeOIDs._cidr]: '_cidr',
-    [exports.DataTypeOIDs._circle]: '_circle',
-    [exports.DataTypeOIDs._macaddr8]: '_macaddr8',
-    [exports.DataTypeOIDs._money]: '_money',
-    [exports.DataTypeOIDs._bool]: '_bool',
-    [exports.DataTypeOIDs._bytea]: '_bytea',
-    [exports.DataTypeOIDs._char]: '_char',
-    [exports.DataTypeOIDs._name]: '_name',
-    [exports.DataTypeOIDs._int2]: '_int2',
-    [exports.DataTypeOIDs._int2vector]: '_int2vector',
-    [exports.DataTypeOIDs._int4]: '_int4',
-    [exports.DataTypeOIDs._regproc]: '_regproc',
-    [exports.DataTypeOIDs._text]: '_text',
-    [exports.DataTypeOIDs._tid]: '_tid',
-    [exports.DataTypeOIDs._xid]: '_xid',
-    [exports.DataTypeOIDs._cid]: '_cid',
-    [exports.DataTypeOIDs._oidvector]: '_oidvector',
-    [exports.DataTypeOIDs._bpchar]: '_bpchar',
-    [exports.DataTypeOIDs._varchar]: '_varchar',
-    [exports.DataTypeOIDs._int8]: '_int8',
-    [exports.DataTypeOIDs._point]: '_point',
-    [exports.DataTypeOIDs._lseg]: '_lseg',
-    [exports.DataTypeOIDs._path]: '_path',
-    [exports.DataTypeOIDs._box]: '_box',
-    [exports.DataTypeOIDs._float4]: '_float4',
-    [exports.DataTypeOIDs._float8]: '_float8',
-    [exports.DataTypeOIDs._polygon]: '_polygon',
-    [exports.DataTypeOIDs._oid]: '_oid',
-    [exports.DataTypeOIDs._macaddr]: '_macaddr',
-    [exports.DataTypeOIDs._inet]: '_inet',
-    [exports.DataTypeOIDs._timestamp]: '_timestamp',
-    [exports.DataTypeOIDs._date]: '_date',
-    [exports.DataTypeOIDs._time]: '_time',
-    [exports.DataTypeOIDs._timestamptz]: '_timestamptz',
-    [exports.DataTypeOIDs._interval]: '_interval',
-    [exports.DataTypeOIDs._numeric]: '_numeric',
-    [exports.DataTypeOIDs._cstring]: '_cstring',
-    [exports.DataTypeOIDs._timetz]: '_timetz',
-    [exports.DataTypeOIDs._bit]: '_bit',
-    [exports.DataTypeOIDs._varbit]: '_varbit',
-    [exports.DataTypeOIDs._uuid]: '_uuid',
-    [exports.DataTypeOIDs._jsonb]: '_jsonb',
-};
Index: node_modules/express/Readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/express/Readme.md b/node_modules/express/Readme.md
--- a/node_modules/express/Readme.md	
+++ b/node_modules/express/Readme.md	
@@ -1,10 +1,29 @@
 [![Express Logo](https://i.cloudup.com/zfY6lL7eFa-3000x3000.png)](http://expressjs.com/)
 
-  Fast, unopinionated, minimalist web framework for [Node.js](http://nodejs.org).
+**Fast, unopinionated, minimalist web framework for [Node.js](http://nodejs.org).**
+
+**This project has a [Code of Conduct][].**
+
+## Table of contents
+
+* [Installation](#Installation)
+* [Features](#Features)
+* [Docs & Community](#docs--community)
+* [Quick Start](#Quick-Start)
+* [Running Tests](#Running-Tests)
+* [Philosophy](#Philosophy)
+* [Examples](#Examples)
+* [Contributing to Express](#Contributing)
+* [TC (Technical Committee)](#tc-technical-committee)
+* [Triagers](#triagers)
+* [License](#license)
+
 
-  [![NPM Version][npm-version-image]][npm-url]
-  [![NPM Install Size][npm-install-size-image]][npm-install-size-url]
-  [![NPM Downloads][npm-downloads-image]][npm-downloads-url]
+[![NPM Version][npm-version-image]][npm-url]
+[![NPM Install Size][npm-install-size-image]][npm-install-size-url]
+[![NPM Downloads][npm-downloads-image]][npm-downloads-url]
+[![OpenSSF Scorecard Badge][ossf-scorecard-badge]][ossf-scorecard-visualizer]
+
 
 ```js
 const express = require('express')
@@ -144,10 +163,82 @@
 
 The original author of Express is [TJ Holowaychuk](https://github.com/tj)
 
-The current lead maintainer is [Douglas Christopher Wilson](https://github.com/dougwilson)
-
 [List of all contributors](https://github.com/expressjs/express/graphs/contributors)
 
+### TC (Technical Committee)
+
+* [UlisesGascon](https://github.com/UlisesGascon) - **Ulises Gascón** (he/him)
+* [jonchurch](https://github.com/jonchurch) - **Jon Church**
+* [wesleytodd](https://github.com/wesleytodd) - **Wes Todd**
+* [LinusU](https://github.com/LinusU) - **Linus Unnebäck**
+* [blakeembrey](https://github.com/blakeembrey) - **Blake Embrey**
+* [sheplu](https://github.com/sheplu) - **Jean Burellier**
+* [crandmck](https://github.com/crandmck) - **Rand McKinney**
+* [ctcpip](https://github.com/ctcpip) - **Chris de Almeida**
+
+<details>
+<summary>TC emeriti members</summary>
+
+#### TC emeriti members
+
+  * [dougwilson](https://github.com/dougwilson) - **Douglas Wilson**
+  * [hacksparrow](https://github.com/hacksparrow) - **Hage Yaapa**
+  * [jonathanong](https://github.com/jonathanong) - **jongleberry**
+  * [niftylettuce](https://github.com/niftylettuce) - **niftylettuce**
+  * [troygoode](https://github.com/troygoode) - **Troy Goode**
+</details>
+
+
+### Triagers
+
+* [aravindvnair99](https://github.com/aravindvnair99) - **Aravind Nair**
+* [carpasse](https://github.com/carpasse) - **Carlos Serrano**
+* [CBID2](https://github.com/CBID2) - **Christine Belzie**
+* [enyoghasim](https://github.com/enyoghasim) - **David Enyoghasim**
+* [UlisesGascon](https://github.com/UlisesGascon) - **Ulises Gascón** (he/him)
+* [mertcanaltin](https://github.com/mertcanaltin) - **Mert Can Altin**
+* [0ss](https://github.com/0ss) - **Salah**
+* [import-brain](https://github.com/import-brain) - **Eric Cheng** (he/him)
+* [3imed-jaberi](https://github.com/3imed-jaberi) - **Imed Jaberi**
+* [dakshkhetan](https://github.com/dakshkhetan) - **Daksh Khetan** (he/him)
+* [lucasraziel](https://github.com/lucasraziel) - **Lucas Soares Do Rego**
+* [IamLizu](https://github.com/IamLizu) - **S M Mahmudul Hasan** (he/him)
+* [Sushmeet](https://github.com/Sushmeet) - **Sushmeet Sunger**
+
+<details>
+<summary>Triagers emeriti members</summary>
+
+#### Emeritus Triagers
+
+  * [AuggieH](https://github.com/AuggieH) - **Auggie Hudak**
+  * [G-Rath](https://github.com/G-Rath) - **Gareth Jones**
+  * [MohammadXroid](https://github.com/MohammadXroid) - **Mohammad Ayashi**
+  * [NawafSwe](https://github.com/NawafSwe) - **Nawaf Alsharqi**
+  * [NotMoni](https://github.com/NotMoni) - **Moni**
+  * [VigneshMurugan](https://github.com/VigneshMurugan) - **Vignesh Murugan**
+  * [davidmashe](https://github.com/davidmashe) - **David Ashe**
+  * [digitaIfabric](https://github.com/digitaIfabric) - **David**
+  * [e-l-i-s-e](https://github.com/e-l-i-s-e) - **Elise Bonner**
+  * [fed135](https://github.com/fed135) - **Frederic Charette**
+  * [firmanJS](https://github.com/firmanJS) - **Firman Abdul Hakim**
+  * [getspooky](https://github.com/getspooky) - **Yasser Ameur**
+  * [ghinks](https://github.com/ghinks) - **Glenn**
+  * [ghousemohamed](https://github.com/ghousemohamed) - **Ghouse Mohamed**
+  * [gireeshpunathil](https://github.com/gireeshpunathil) - **Gireesh Punathil**
+  * [jake32321](https://github.com/jake32321) - **Jake Reed**
+  * [jonchurch](https://github.com/jonchurch) - **Jon Church**
+  * [lekanikotun](https://github.com/lekanikotun) - **Troy Goode**
+  * [marsonya](https://github.com/marsonya) - **Lekan Ikotun**
+  * [mastermatt](https://github.com/mastermatt) - **Matt R. Wilson**
+  * [maxakuru](https://github.com/maxakuru) - **Max Edell**
+  * [mlrawlings](https://github.com/mlrawlings) - **Michael Rawlings**
+  * [rodion-arr](https://github.com/rodion-arr) - **Rodion Abdurakhimov**
+  * [sheplu](https://github.com/sheplu) - **Jean Burellier**
+  * [tarunyadav1](https://github.com/tarunyadav1) - **Tarun yadav**
+  * [tunniclm](https://github.com/tunniclm) - **Mike Tunnicliffe**
+</details>
+
+
 ## License
 
   [MIT](LICENSE)
@@ -164,3 +255,6 @@
 [npm-install-size-url]: https://packagephobia.com/result?p=express
 [npm-url]: https://npmjs.org/package/express
 [npm-version-image]: https://badgen.net/npm/v/express
+[ossf-scorecard-badge]: https://api.scorecard.dev/projects/github.com/expressjs/express/badge
+[ossf-scorecard-visualizer]: https://ossf.github.io/scorecard-visualizer/#/projects/github.com/expressjs/express
+[Code of Conduct]: https://github.com/expressjs/express/blob/master/Code-Of-Conduct.md
Index: node_modules/lightning-pool/cjs/pool-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/cjs/pool-options.js b/node_modules/lightning-pool/cjs/pool-options.js
--- a/node_modules/lightning-pool/cjs/pool-options.js	
+++ b/node_modules/lightning-pool/cjs/pool-options.js	
@@ -13,7 +13,7 @@
     minIdle: 0,
     max: 10,
     maxQueue: 1000,
-    validation: true
+    validation: true,
 };
 class PoolOptions extends events_1.EventEmitter {
     constructor(pool) {
@@ -50,7 +50,8 @@
         return this._acquireTimeoutMillis;
     }
     set acquireTimeoutMillis(val) {
-        this._acquireTimeoutMillis = val >= 0 ? val : defaultValues.acquireTimeoutMillis;
+        this._acquireTimeoutMillis =
+            val >= 0 ? val : defaultValues.acquireTimeoutMillis;
         this.emit('change', 'acquireTimeoutMillis', this._acquireTimeoutMillis);
     }
     get fifo() {
Index: node_modules/fill-range/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/fill-range/package.json b/node_modules/fill-range/package.json
--- a/node_modules/fill-range/package.json	
+++ b/node_modules/fill-range/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "fill-range",
   "description": "Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`",
-  "version": "7.0.1",
+  "version": "7.1.1",
   "homepage": "https://github.com/jonschlinkert/fill-range",
   "author": "Jon Schlinkert (https://github.com/jonschlinkert)",
   "contributors": [
@@ -24,14 +24,19 @@
     "node": ">=8"
   },
   "scripts": {
-    "test": "mocha"
+    "lint": "eslint --cache --cache-location node_modules/.cache/.eslintcache --report-unused-disable-directives --ignore-path .gitignore .",
+    "mocha": "mocha --reporter dot",
+    "test": "npm run lint && npm run mocha",
+    "test:ci": "npm run test:cover",
+    "test:cover": "nyc npm run mocha"
   },
   "dependencies": {
     "to-regex-range": "^5.0.1"
   },
   "devDependencies": {
     "gulp-format-md": "^2.0.0",
-    "mocha": "^6.1.1"
+    "mocha": "^6.1.1",
+    "nyc": "^15.1.0"
   },
   "keywords": [
     "alpha",
Index: node_modules/nodemon/lib/cli/parse.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/lib/cli/parse.js b/node_modules/nodemon/lib/cli/parse.js
--- a/node_modules/nodemon/lib/cli/parse.js	
+++ b/node_modules/nodemon/lib/cli/parse.js	
@@ -25,7 +25,7 @@
  * Parses the command line arguments `process.argv` and returns the
  * nodemon options, the user script and the executable script.
  *
- * @param  {Array} full process arguments, including `node` leading arg
+ * @param  {Array<string> | string} argv full process arguments, including `node` leading arg
  * @return {Object} { options, script, args }
  */
 function parse(argv) {
@@ -97,9 +97,9 @@
  * Given an argument (ie. from process.argv), sets nodemon
  * options and can eat up the argument value
  *
- * @param {Object} options object that will be updated
- * @param {Sting} current argument from argv
- * @param {Function} the callback to eat up the next argument in argv
+ * @param {import('../..').NodemonSettings} options object that will be updated
+ * @param {String} arg current argument from argv
+ * @param {Function} eatNext the callback to eat up the next argument in argv
  * @return {Boolean} false if argument was not a nodemon arg
  */
 function nodemonOption(options, arg, eatNext) {
@@ -161,7 +161,7 @@
   } else
 
   if (arg === '--exitcrash') {
-    options.exitcrash = true;
+    options.exitCrash = true;
   } else
 
   if (arg === '--delay' || arg === '-d') {
@@ -210,7 +210,7 @@
  * Given an argument (ie. from nodemonOption()), will parse and return the
  * equivalent millisecond value or 0 if the argument cannot be parsed
  *
- * @param {String} argument value given to the --delay option
+ * @param {String} value argument value given to the --delay option
  * @return {Number} millisecond equivalent of the argument
  */
 function parseDelay(value) {
Index: node_modules/pg-pool/test/connection-timeout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/connection-timeout.js b/node_modules/pg-pool/test/connection-timeout.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/connection-timeout.js	
+++ /dev/null	
@@ -1,229 +0,0 @@
-'use strict'
-const net = require('net')
-const co = require('co')
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-const before = require('mocha').before
-const after = require('mocha').after
-
-const Pool = require('../')
-
-describe('connection timeout', () => {
-  const connectionFailure = new Error('Temporary connection failure')
-
-  before((done) => {
-    this.server = net.createServer((socket) => {
-      socket.on('data', () => {
-        // discard any buffered data or the server wont terminate
-      })
-    })
-
-    this.server.listen(() => {
-      this.port = this.server.address().port
-      done()
-    })
-  })
-
-  after((done) => {
-    this.server.close(done)
-  })
-
-  it('should callback with an error if timeout is passed', (done) => {
-    const pool = new Pool({ connectionTimeoutMillis: 10, port: this.port, host: 'localhost' })
-    pool.connect((err, client, release) => {
-      expect(err).to.be.an(Error)
-      expect(err.message).to.contain('timeout')
-      expect(client).to.equal(undefined)
-      expect(pool.idleCount).to.equal(0)
-      done()
-    })
-  })
-
-  it('should reject promise with an error if timeout is passed', (done) => {
-    const pool = new Pool({ connectionTimeoutMillis: 10, port: this.port, host: 'localhost' })
-    pool.connect().catch((err) => {
-      expect(err).to.be.an(Error)
-      expect(err.message).to.contain('timeout')
-      expect(pool.idleCount).to.equal(0)
-      done()
-    })
-  })
-
-  it(
-    'should handle multiple timeouts',
-    co.wrap(
-      function* () {
-        const errors = []
-        const pool = new Pool({ connectionTimeoutMillis: 1, port: this.port, host: 'localhost' })
-        for (var i = 0; i < 15; i++) {
-          try {
-            yield pool.connect()
-          } catch (e) {
-            errors.push(e)
-          }
-        }
-        expect(errors).to.have.length(15)
-      }.bind(this)
-    )
-  )
-
-  it('should timeout on checkout of used connection', (done) => {
-    const pool = new Pool({ connectionTimeoutMillis: 100, max: 1 })
-    pool.connect((err, client, release) => {
-      expect(err).to.be(undefined)
-      expect(client).to.not.be(undefined)
-      pool.connect((err, client) => {
-        expect(err).to.be.an(Error)
-        expect(client).to.be(undefined)
-        release()
-        pool.end(done)
-      })
-    })
-  })
-
-  it('should not break further pending checkouts on a timeout', (done) => {
-    const pool = new Pool({ connectionTimeoutMillis: 200, max: 1 })
-    pool.connect((err, client, releaseOuter) => {
-      expect(err).to.be(undefined)
-
-      pool.connect((err, client) => {
-        expect(err).to.be.an(Error)
-        expect(client).to.be(undefined)
-        releaseOuter()
-      })
-
-      setTimeout(() => {
-        pool.connect((err, client, releaseInner) => {
-          expect(err).to.be(undefined)
-          expect(client).to.not.be(undefined)
-          releaseInner()
-          pool.end(done)
-        })
-      }, 100)
-    })
-  })
-
-  it('should timeout on query if all clients are busy', (done) => {
-    const pool = new Pool({ connectionTimeoutMillis: 100, max: 1 })
-    pool.connect((err, client, release) => {
-      expect(err).to.be(undefined)
-      expect(client).to.not.be(undefined)
-      pool.query('select now()', (err, result) => {
-        expect(err).to.be.an(Error)
-        expect(result).to.be(undefined)
-        release()
-        pool.end(done)
-      })
-    })
-  })
-
-  it('should recover from timeout errors', (done) => {
-    const pool = new Pool({ connectionTimeoutMillis: 100, max: 1 })
-    pool.connect((err, client, release) => {
-      expect(err).to.be(undefined)
-      expect(client).to.not.be(undefined)
-      pool.query('select now()', (err, result) => {
-        expect(err).to.be.an(Error)
-        expect(result).to.be(undefined)
-        release()
-        pool.query('select $1::text as name', ['brianc'], (err, res) => {
-          expect(err).to.be(undefined)
-          expect(res.rows).to.have.length(1)
-          pool.end(done)
-        })
-      })
-    })
-  })
-
-  it('continues processing after a connection failure', (done) => {
-    const Client = require('pg').Client
-    const orgConnect = Client.prototype.connect
-    let called = false
-
-    Client.prototype.connect = function (cb) {
-      // Simulate a failure on first call
-      if (!called) {
-        called = true
-
-        return setTimeout(() => {
-          cb(connectionFailure)
-        }, 100)
-      }
-      // And pass-through the second call
-      orgConnect.call(this, cb)
-    }
-
-    const pool = new Pool({
-      Client: Client,
-      connectionTimeoutMillis: 1000,
-      max: 1,
-    })
-
-    pool.connect((err, client, release) => {
-      expect(err).to.be(connectionFailure)
-
-      pool.query('select $1::text as name', ['brianc'], (err, res) => {
-        expect(err).to.be(undefined)
-        expect(res.rows).to.have.length(1)
-        pool.end(done)
-      })
-    })
-  })
-
-  it('releases newly connected clients if the queued already timed out', (done) => {
-    const Client = require('pg').Client
-
-    const orgConnect = Client.prototype.connect
-
-    let connection = 0
-
-    Client.prototype.connect = function (cb) {
-      // Simulate a failure on first call
-      if (connection === 0) {
-        connection++
-
-        return setTimeout(() => {
-          cb(connectionFailure)
-        }, 300)
-      }
-
-      // And second connect taking > connection timeout
-      if (connection === 1) {
-        connection++
-
-        return setTimeout(() => {
-          orgConnect.call(this, cb)
-        }, 1000)
-      }
-
-      orgConnect.call(this, cb)
-    }
-
-    const pool = new Pool({
-      Client: Client,
-      connectionTimeoutMillis: 1000,
-      max: 1,
-    })
-
-    // Direct connect
-    pool.connect((err, client, release) => {
-      expect(err).to.be(connectionFailure)
-    })
-
-    // Queued
-    let called = 0
-    pool.connect((err, client, release) => {
-      // Verify the callback is only called once
-      expect(called++).to.be(0)
-      expect(err).to.be.an(Error)
-
-      pool.query('select $1::text as name', ['brianc'], (err, res) => {
-        expect(err).to.be(undefined)
-        expect(res.rows).to.have.length(1)
-        pool.end(done)
-      })
-    })
-  })
-})
Index: node_modules/nodemon/node_modules/debug/src/common.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/debug/src/common.js b/node_modules/nodemon/node_modules/debug/src/common.js
--- a/node_modules/nodemon/node_modules/debug/src/common.js	
+++ b/node_modules/nodemon/node_modules/debug/src/common.js	
@@ -166,24 +166,62 @@
 		createDebug.names = [];
 		createDebug.skips = [];
 
-		let i;
-		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
-		const len = split.length;
+		const split = (typeof namespaces === 'string' ? namespaces : '')
+			.trim()
+			.replace(/\s+/g, ',')
+			.split(',')
+			.filter(Boolean);
 
-		for (i = 0; i < len; i++) {
-			if (!split[i]) {
-				// ignore empty strings
-				continue;
+		for (const ns of split) {
+			if (ns[0] === '-') {
+				createDebug.skips.push(ns.slice(1));
+			} else {
+				createDebug.names.push(ns);
 			}
+		}
+	}
 
-			namespaces = split[i].replace(/\*/g, '.*?');
+	/**
+	 * Checks if the given string matches a namespace template, honoring
+	 * asterisks as wildcards.
+	 *
+	 * @param {String} search
+	 * @param {String} template
+	 * @return {Boolean}
+	 */
+	function matchesTemplate(search, template) {
+		let searchIndex = 0;
+		let templateIndex = 0;
+		let starIndex = -1;
+		let matchIndex = 0;
 
-			if (namespaces[0] === '-') {
-				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
+		while (searchIndex < search.length) {
+			if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
+				// Match character or proceed with wildcard
+				if (template[templateIndex] === '*') {
+					starIndex = templateIndex;
+					matchIndex = searchIndex;
+					templateIndex++; // Skip the '*'
+				} else {
+					searchIndex++;
+					templateIndex++;
+				}
+			} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition
+				// Backtrack to the last '*' and try to match more characters
+				templateIndex = starIndex + 1;
+				matchIndex++;
+				searchIndex = matchIndex;
 			} else {
-				createDebug.names.push(new RegExp('^' + namespaces + '$'));
+				return false; // No match
 			}
 		}
+
+		// Handle trailing '*' in template
+		while (templateIndex < template.length && template[templateIndex] === '*') {
+			templateIndex++;
+		}
+
+		return templateIndex === template.length;
 	}
 
 	/**
@@ -194,8 +232,8 @@
 	*/
 	function disable() {
 		const namespaces = [
-			...createDebug.names.map(toNamespace),
-			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
+			...createDebug.names,
+			...createDebug.skips.map(namespace => '-' + namespace)
 		].join(',');
 		createDebug.enable('');
 		return namespaces;
@@ -209,21 +247,14 @@
 	* @api public
 	*/
 	function enabled(name) {
-		if (name[name.length - 1] === '*') {
-			return true;
-		}
-
-		let i;
-		let len;
-
-		for (i = 0, len = createDebug.skips.length; i < len; i++) {
-			if (createDebug.skips[i].test(name)) {
+		for (const skip of createDebug.skips) {
+			if (matchesTemplate(name, skip)) {
 				return false;
 			}
 		}
 
-		for (i = 0, len = createDebug.names.length; i < len; i++) {
-			if (createDebug.names[i].test(name)) {
+		for (const ns of createDebug.names) {
+			if (matchesTemplate(name, ns)) {
 				return true;
 			}
 		}
@@ -231,19 +262,6 @@
 		return false;
 	}
 
-	/**
-	* Convert regexp to namespace
-	*
-	* @param {RegExp} regxep
-	* @return {String} namespace
-	* @api private
-	*/
-	function toNamespace(regexp) {
-		return regexp.toString()
-			.substring(2, regexp.toString().length - 2)
-			.replace(/\.\*\?$/, '*');
-	}
-
 	/**
 	* Coerce `val`.
 	*
Index: models/User.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/User.js b/models/User.js
--- a/models/User.js	
+++ b/models/User.js	
@@ -1,6 +1,17 @@
 // import postgres from 'postgres'
-const { dbPool } = require('../db/connectDb')
+const { dbPool, sqlPool} = require('../db/connectDb')
+
 
+
+
+
+const  getUserById  =async (id) => {
+  const  user = await  sqlPool.query(`SELECT * FROM users WHERE id='${id}' `)
+  if(!user.length) {
+    return {}
+  }
+
+}
 const createUserTable = async () => {
   const query = `CREATE TABLE users(
   id SERIAL PRIMARY KEY,
Index: node_modules/qs/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/package.json b/node_modules/qs/package.json
--- a/node_modules/qs/package.json	
+++ b/node_modules/qs/package.json	
@@ -2,7 +2,7 @@
     "name": "qs",
     "description": "A querystring parser that supports nesting and arrays, with a depth limit",
     "homepage": "https://github.com/ljharb/qs",
-    "version": "6.11.0",
+    "version": "6.13.0",
     "repository": {
         "type": "git",
         "url": "https://github.com/ljharb/qs.git"
@@ -11,6 +11,7 @@
         "url": "https://github.com/sponsors/ljharb"
     },
     "main": "lib/index.js",
+    "sideEffects": false,
     "contributors": [
         {
             "name": "Jordan Harband",
@@ -30,40 +31,51 @@
         "node": ">=0.6"
     },
     "dependencies": {
-        "side-channel": "^1.0.4"
+        "side-channel": "^1.0.6"
     },
     "devDependencies": {
-        "@ljharb/eslint-config": "^21.0.0",
-        "aud": "^2.0.0",
+        "@browserify/envify": "^6.0.0",
+        "@browserify/uglifyify": "^6.0.0",
+        "@ljharb/eslint-config": "^21.1.1",
         "browserify": "^16.5.2",
+        "bundle-collapser": "^1.4.0",
+        "common-shakeify": "~1.0.0",
         "eclint": "^2.8.1",
+        "es-value-fixtures": "^1.4.2",
         "eslint": "=8.8.0",
         "evalmd": "^0.0.19",
         "for-each": "^0.3.3",
+        "glob": "=10.3.7",
+        "has-override-mistake": "^1.0.1",
+        "has-property-descriptors": "^1.0.2",
         "has-symbols": "^1.0.3",
         "iconv-lite": "^0.5.1",
         "in-publish": "^2.0.1",
+        "jackspeak": "=2.1.1",
         "mkdirp": "^0.5.5",
-        "npmignore": "^0.3.0",
+        "mock-property": "^1.0.3",
+        "module-deps": "^6.2.3",
+        "npmignore": "^0.3.1",
         "nyc": "^10.3.2",
-        "object-inspect": "^1.12.2",
+        "object-inspect": "^1.13.2",
         "qs-iconv": "^1.0.4",
         "safe-publish-latest": "^2.0.0",
         "safer-buffer": "^2.1.2",
-        "tape": "^5.5.3"
+        "tape": "^5.8.1",
+        "unassertify": "^3.0.1"
     },
     "scripts": {
-        "prepack": "npmignore --auto --commentLines=autogenerated",
-        "prepublishOnly": "safe-publish-latest && npm run dist",
+        "prepack": "npmignore --auto --commentLines=autogenerated && npm run dist",
+        "prepublishOnly": "safe-publish-latest",
         "prepublish": "not-in-publish || npm run prepublishOnly",
         "pretest": "npm run --silent readme && npm run --silent lint",
         "test": "npm run tests-only",
         "tests-only": "nyc tape 'test/**/*.js'",
-        "posttest": "aud --production",
+        "posttest": "npx npm@'>=10.2' audit --production",
         "readme": "evalmd README.md",
         "postlint": "eclint check $(git ls-files | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' | grep -v dist/)",
         "lint": "eslint --ext=js,mjs .",
-        "dist": "mkdirp dist && browserify --standalone Qs lib/index.js > dist/qs.js"
+        "dist": "mkdirp dist && browserify --standalone Qs -g unassertify -g @browserify/envify -g [@browserify/uglifyify --mangle.keep_fnames --compress.keep_fnames --format.indent_level=1 --compress.arrows=false --compress.passes=4 --compress.typeofs=false] -p common-shakeify -p bundle-collapser/plugin lib/index.js > dist/qs.js"
     },
     "license": "BSD-3-Clause",
     "publishConfig": {
@@ -71,7 +83,9 @@
             "!dist/*",
             "bower.json",
             "component.json",
-            ".github/workflows"
+            ".github/workflows",
+            "logos",
+            "tea.yaml"
         ]
     }
 }
Index: node_modules/side-channel/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/.eslintrc b/node_modules/side-channel/.eslintrc
--- a/node_modules/side-channel/.eslintrc	
+++ b/node_modules/side-channel/.eslintrc	
@@ -4,6 +4,7 @@
 	"extends": "@ljharb",
 
 	"rules": {
+		"id-length": 0,
 		"max-lines-per-function": 0,
 		"multiline-comment-style": 1,
 		"new-cap": [2, { "capIsNewExceptions": ["GetIntrinsic"] }],
Index: node_modules/pg-protocol/src/buffer-reader.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/buffer-reader.ts b/node_modules/pg-protocol/src/buffer-reader.ts
--- a/node_modules/pg-protocol/src/buffer-reader.ts	
+++ b/node_modules/pg-protocol/src/buffer-reader.ts	
@@ -31,6 +31,12 @@
     return result
   }
 
+  public uint32(): number {
+    const result = this.buffer.readUInt32BE(this.offset)
+    this.offset += 4
+    return result
+  }
+
   public string(length: number): string {
     const result = this.buffer.toString(this.encoding, this.offset, this.offset + length)
     this.offset += length
@@ -40,6 +46,7 @@
   public cstring(): string {
     const start = this.offset
     let end = start
+    // eslint-disable-next-line no-empty
     while (this.buffer[end++] !== 0) {}
     this.offset = end
     return this.buffer.toString(this.encoding, start, end - 1)
Index: node_modules/pg-pool/test/connection-strings.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/connection-strings.js b/node_modules/pg-pool/test/connection-strings.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/connection-strings.js	
+++ /dev/null	
@@ -1,29 +0,0 @@
-const expect = require('expect.js')
-const describe = require('mocha').describe
-const it = require('mocha').it
-const Pool = require('../')
-
-describe('Connection strings', function () {
-  it('pool delegates connectionString property to client', function (done) {
-    const connectionString = 'postgres://foo:bar@baz:1234/xur'
-
-    const pool = new Pool({
-      // use a fake client so we can check we're passed the connectionString
-      Client: function (args) {
-        expect(args.connectionString).to.equal(connectionString)
-        return {
-          connect: function (cb) {
-            cb(new Error('testing'))
-          },
-          on: function () {},
-        }
-      },
-      connectionString: connectionString,
-    })
-
-    pool.connect(function (err, client) {
-      expect(err).to.not.be(undefined)
-      done()
-    })
-  })
-})
Index: node_modules/postgresql-client/esm/util/decode-binaryarray.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/decode-binaryarray.js b/node_modules/postgresql-client/esm/util/decode-binaryarray.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/decode-binaryarray.js	
+++ /dev/null	
@@ -1,35 +0,0 @@
-import { BufferReader } from '../protocol/buffer-reader.js';
-export function decodeBinaryArray(buf, decoder, options = {}) {
-    if (!buf.length)
-        return null;
-    const io = new BufferReader(buf);
-    const ndims = io.readInt32BE();
-    io.readInt32BE(); // hasNulls
-    const elementOID = io.readInt32BE(); // element oid
-    if (ndims === 0)
-        return [];
-    const dims = [];
-    const readDim = (level) => {
-        const elemCount = dims[level];
-        const target = new Array(elemCount);
-        for (let i = 0; i < elemCount; i++) {
-            if (level < dims.length - 1) {
-                target[i] = readDim(level + 1);
-                continue;
-            }
-            const len = io.readInt32BE();
-            if (len === -1)
-                target[i] = null;
-            else {
-                const b = io.readBuffer(len);
-                target[i] = decoder(b, { ...options, elementOID });
-            }
-        }
-        return target;
-    };
-    for (let d = 0; d < ndims; d++) {
-        dims[d] = io.readInt32BE();
-        io.readInt32BE(); // LBound
-    }
-    return readDim(0);
-}
Index: node_modules/postgresql-client/cjs/data-types/date-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/date-type.js b/node_modules/postgresql-client/cjs/data-types/date-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/date-type.js	
+++ /dev/null	
@@ -1,67 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayDateType = exports.DateType = void 0;
-const constants_js_1 = require("../constants.js");
-const parse_datetime_js_1 = require("../util/parse-datetime.js");
-const timeShift = 946684800000;
-exports.DateType = {
-    name: 'date',
-    oid: constants_js_1.DataTypeOIDs.date,
-    jsType: 'Date',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.date);
-        const t = v.readInt32BE();
-        if (t === 0x7fffffff)
-            return fetchAsString ? 'infinity' : Infinity;
-        if (t === -0x80000000)
-            return fetchAsString ? '-infinity' : -Infinity;
-        // Shift from 2000 to 1970
-        let d = new Date(t * 1000 * 86400 + timeShift);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
-        return fetchAsString ? dateToDateString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = (0, parse_datetime_js_1.parseDateTime)(v, false, false, options.utcDates);
-        if (v === Infinity) {
-            buf.writeInt32BE(0x7fffffff);
-            return;
-        }
-        if (v === -Infinity) {
-            buf.writeInt32BE(-0x80000000);
-            return;
-        }
-        if (!(v instanceof Date))
-            v = new Date(v);
-        let n = options.utcDates ? v.getTime() : v.getTime() - v.getTimezoneOffset() * 60 * 1000;
-        n = (n - timeShift) / 1000 / 86400;
-        const t = Math.trunc(n + Number.EPSILON);
-        buf.writeInt32BE(t);
-    },
-    parseText(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.date);
-        if (fetchAsString)
-            return v;
-        return (0, parse_datetime_js_1.parseDateTime)(v, false, false, options.utcDates);
-    },
-    isType(v) {
-        return (v instanceof Date &&
-            v.getHours() === 0 &&
-            v.getMinutes() === 0 &&
-            v.getSeconds() === 0 &&
-            v.getMilliseconds() === 0);
-    },
-};
-function padZero(v) {
-    return v < 9 ? '0' + v : '' + v;
-}
-function dateToDateString(d) {
-    return d.getFullYear() + '-' + padZero(d.getMonth() + 1) + '-' + padZero(d.getDate());
-}
-exports.ArrayDateType = {
-    ...exports.DateType,
-    name: '_date',
-    oid: constants_js_1.DataTypeOIDs._date,
-    elementsOID: constants_js_1.DataTypeOIDs.date,
-};
Index: node_modules/pg/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/package.json b/node_modules/pg/package.json
--- a/node_modules/pg/package.json	
+++ b/node_modules/pg/package.json	
@@ -1,6 +1,6 @@
 {
   "name": "pg",
-  "version": "8.11.5",
+  "version": "8.16.3",
   "description": "PostgreSQL client - pure javascript & libpq with the same API",
   "keywords": [
     "database",
@@ -19,25 +19,38 @@
   },
   "author": "Brian Carlson <brian.m.carlson@gmail.com>",
   "main": "./lib",
+  "exports": {
+    ".": {
+      "import": "./esm/index.mjs",
+      "require": "./lib/index.js",
+      "default": "./lib/index.js"
+    },
+    "./package.json": {
+      "default": "./package.json"
+    },
+    "./lib/*": "./lib/*.js",
+    "./lib/*.js": "./lib/*.js"
+  },
   "dependencies": {
-    "pg-connection-string": "^2.6.4",
-    "pg-pool": "^3.6.2",
-    "pg-protocol": "^1.6.1",
-    "pg-types": "^2.1.0",
-    "pgpass": "1.x"
+    "pg-connection-string": "^2.9.1",
+    "pg-pool": "^3.10.1",
+    "pg-protocol": "^1.10.3",
+    "pg-types": "2.2.0",
+    "pgpass": "1.0.5"
   },
   "devDependencies": {
+    "@cloudflare/vitest-pool-workers": "0.8.23",
     "@cloudflare/workers-types": "^4.20230404.0",
     "async": "2.6.4",
-    "bluebird": "3.5.2",
+    "bluebird": "3.7.2",
     "co": "4.6.0",
     "pg-copy-streams": "0.3.0",
     "typescript": "^4.0.3",
-    "workerd": "^1.20230419.0",
-    "wrangler": "^2.16.0"
+    "vitest": "~3.0.9",
+    "wrangler": "^3.x"
   },
   "optionalDependencies": {
-    "pg-cloudflare": "^1.1.1"
+    "pg-cloudflare": "^1.2.7"
   },
   "peerDependencies": {
     "pg-native": ">=3.0.1"
@@ -52,11 +65,12 @@
   },
   "files": [
     "lib",
+    "esm",
     "SPONSORS.md"
   ],
   "license": "MIT",
   "engines": {
-    "node": ">= 8.0.0"
+    "node": ">= 16.0.0"
   },
-  "gitHead": "a37a93bf7990220517a40cf16b8e72d4c3e6cef5"
+  "gitHead": "8f8e7315e8f7c1bb01e98fdb41c8c92585510782"
 }
Index: node_modules/postgresql-client/typings/util/connection-config.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/connection-config.d.ts b/node_modules/postgresql-client/typings/util/connection-config.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/connection-config.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { ConnectionConfiguration } from '../interfaces/database-connection-params.js';
-export declare function getConnectionConfig(config?: ConnectionConfiguration | string): ConnectionConfiguration;
-export declare function parseConnectionString(str: string): ConnectionConfiguration;
Index: node_modules/postgresql-client/esm/data-types/lseg-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/lseg-type.js b/node_modules/postgresql-client/esm/data-types/lseg-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/lseg-type.js	
+++ /dev/null	
@@ -1,49 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-const LSEG_PATTERN1 = /^\[ *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *]$/;
-const LSEG_PATTERN2 = /^\( *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *\)$/;
-const LSEG_PATTERN3 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\)$/;
-const LSEG_PATTERN4 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-export const LsegType = {
-    name: 'lseg',
-    oid: DataTypeOIDs.lseg,
-    jsType: 'object',
-    parseBinary(v) {
-        return {
-            x1: v.readDoubleBE(0),
-            y1: v.readDoubleBE(8),
-            x2: v.readDoubleBE(16),
-            y2: v.readDoubleBE(24),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x1);
-        buf.writeDoubleBE(v.y1);
-        buf.writeDoubleBE(v.x2);
-        buf.writeDoubleBE(v.y2);
-    },
-    parseText(v) {
-        const m = v.match(LSEG_PATTERN1) || v.match(LSEG_PATTERN2) || v.match(LSEG_PATTERN3) || v.match(LSEG_PATTERN4);
-        if (!m)
-            return undefined;
-        return {
-            x1: parseFloat(m[1]),
-            y1: parseFloat(m[2]),
-            x2: parseFloat(m[3]),
-            y2: parseFloat(m[4]),
-        };
-    },
-    isType(v) {
-        return (typeof v === 'object' &&
-            Object.keys(v).length === 4 &&
-            typeof v.x1 === 'number' &&
-            typeof v.y1 === 'number' &&
-            typeof v.x2 === 'number' &&
-            typeof v.y2 === 'number');
-    },
-};
-export const ArrayLsegType = {
-    ...LsegType,
-    name: '_lseg',
-    oid: DataTypeOIDs._lseg,
-    elementsOID: DataTypeOIDs.lseg,
-};
Index: node_modules/qs/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/README.md b/node_modules/qs/README.md
--- a/node_modules/qs/README.md	
+++ b/node_modules/qs/README.md	
@@ -1,11 +1,14 @@
+<p align="center">
+    <img alt="qs" src="./logos/banner_default.png" width="800" />
+</p>
+
 # qs <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
 
 [![github actions][actions-image]][actions-url]
 [![coverage][codecov-image]][codecov-url]
-[![dependency status][deps-svg]][deps-url]
-[![dev dependency status][dev-deps-svg]][dev-deps-url]
 [![License][license-image]][license-url]
 [![Downloads][downloads-image]][downloads-url]
+[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/9058/badge)](https://bestpractices.coreinfrastructure.org/projects/9058)
 
 [![npm badge][npm-badge-png]][package-url]
 
@@ -53,7 +56,9 @@
 assert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });
 ```
 
-By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.
+By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties.
+*WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten.
+Always be careful with this option.
 
 ```javascript
 var protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });
@@ -80,8 +85,8 @@
 });
 ```
 
-By default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like
-`'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:
+By default, when nesting objects **qs** will only parse up to 5 children deep.
+This means if you attempt to parse a string like `'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:
 
 ```javascript
 var expected = {
@@ -110,7 +115,18 @@
 assert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });
 ```
 
-The depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number.
+You can configure **qs** to throw an error when parsing nested input beyond this depth using the `strictDepth` option (defaulted to false):
+
+```javascript
+try {
+    qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1, strictDepth: true });
+} catch (err) {
+    assert(err instanceof RangeError);
+    assert.strictEqual(err.message, 'Input depth exceeded depth option of 1 and strictDepth is true');
+}
+```
+
+The depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number. The strictDepth option adds a layer of protection by throwing an error when the limit is exceeded, allowing you to catch and handle such cases.
 
 For similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:
 
@@ -147,32 +163,44 @@
 assert.deepEqual(withDots, { a: { b: 'c' } });
 ```
 
-If you have to deal with legacy browsers or services, there's
-also support for decoding percent-encoded octets as iso-8859-1:
+Option `decodeDotInKeys` can be used to decode dots in keys
+Note: it implies `allowDots`, so `parse` will error if you set `decodeDotInKeys` to `true`, and `allowDots` to `false`.
+
+```javascript
+var withDots = qs.parse('name%252Eobj.first=John&name%252Eobj.last=Doe', { decodeDotInKeys: true });
+assert.deepEqual(withDots, { 'name.obj': { first: 'John', last: 'Doe' }});
+```
+
+Option `allowEmptyArrays` can be used to allowing empty array values in object
+```javascript
+var withEmptyArrays = qs.parse('foo[]&bar=baz', { allowEmptyArrays: true });
+assert.deepEqual(withEmptyArrays, { foo: [], bar: 'baz' });
+```
+
+Option `duplicates` can be used to change the behavior when duplicate keys are encountered
+```javascript
+assert.deepEqual(qs.parse('foo=bar&foo=baz'), { foo: ['bar', 'baz'] });
+assert.deepEqual(qs.parse('foo=bar&foo=baz', { duplicates: 'combine' }), { foo: ['bar', 'baz'] });
+assert.deepEqual(qs.parse('foo=bar&foo=baz', { duplicates: 'first' }), { foo: 'bar' });
+assert.deepEqual(qs.parse('foo=bar&foo=baz', { duplicates: 'last' }), { foo: 'baz' });
+```
+
+If you have to deal with legacy browsers or services, there's also support for decoding percent-encoded octets as iso-8859-1:
 
 ```javascript
 var oldCharset = qs.parse('a=%A7', { charset: 'iso-8859-1' });
 assert.deepEqual(oldCharset, { a: '§' });
 ```
 
-Some services add an initial `utf8=✓` value to forms so that old
-Internet Explorer versions are more likely to submit the form as
-utf-8. Additionally, the server can check the value against wrong
-encodings of the checkmark character and detect that a query string
-or `application/x-www-form-urlencoded` body was *not* sent as
-utf-8, eg. if the form had an `accept-charset` parameter or the
-containing page had a different character set.
+Some services add an initial `utf8=✓` value to forms so that old Internet Explorer versions are more likely to submit the form as utf-8.
+Additionally, the server can check the value against wrong encodings of the checkmark character and detect that a query string or `application/x-www-form-urlencoded` body was *not* sent as utf-8, eg. if the form had an `accept-charset` parameter or the containing page had a different character set.
 
 **qs** supports this mechanism via the `charsetSentinel` option.
-If specified, the `utf8` parameter will be omitted from the
-returned object. It will be used to switch to `iso-8859-1`/`utf-8`
-mode depending on how the checkmark is encoded.
+If specified, the `utf8` parameter will be omitted from the returned object.
+It will be used to switch to `iso-8859-1`/`utf-8` mode depending on how the checkmark is encoded.
 
-**Important**: When you specify both the `charset` option and the
-`charsetSentinel` option, the `charset` will be overridden when
-the request contains a `utf8` parameter from which the actual
-charset can be deduced. In that sense the `charset` will behave
-as the default charset rather than the authoritative charset.
+**Important**: When you specify both the `charset` option and the `charsetSentinel` option, the `charset` will be overridden when the request contains a `utf8` parameter from which the actual charset can be deduced.
+In that sense the `charset` will behave as the default charset rather than the authoritative charset.
 
 ```javascript
 var detectedAsUtf8 = qs.parse('utf8=%E2%9C%93&a=%C3%B8', {
@@ -189,8 +217,7 @@
 assert.deepEqual(detectedAsIso8859_1, { a: 'ø' });
 ```
 
-If you want to decode the `&#...;` syntax to the actual character,
-you can specify the `interpretNumericEntities` option as well:
+If you want to decode the `&#...;` syntax to the actual character, you can specify the `interpretNumericEntities` option as well:
 
 ```javascript
 var detectedAsIso8859_1 = qs.parse('a=%26%239786%3B', {
@@ -200,8 +227,7 @@
 assert.deepEqual(detectedAsIso8859_1, { a: '☺' });
 ```
 
-It also works when the charset has been detected in `charsetSentinel`
-mode.
+It also works when the charset has been detected in `charsetSentinel` mode.
 
 ### Parsing Arrays
 
@@ -219,9 +245,8 @@
 assert.deepEqual(withIndexes, { a: ['b', 'c'] });
 ```
 
-Note that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number
-to create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving
-their order:
+Note that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number to create an array.
+When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving their order:
 
 ```javascript
 var noSparse = qs.parse('a[1]=b&a[15]=c');
@@ -245,8 +270,9 @@
 assert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });
 ```
 
-**qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will
-instead be converted to an object with the index as the key. This is needed to handle cases when someone sent, for example, `a[999999999]` and it will take significant time to iterate over this huge array.
+**qs** will also limit specifying indices in an array to a maximum index of `20`.
+Any array members with an index of greater than `20` will instead be converted to an object with the index as the key.
+This is needed to handle cases when someone sent, for example, `a[999999999]` and it will take significant time to iterate over this huge array.
 
 ```javascript
 var withMaxIndex = qs.parse('a[100]=b');
@@ -290,7 +316,8 @@
 
 ### Parsing primitive/scalar values (numbers, booleans, null, etc)
 
-By default, all values are parsed as strings. This behavior will not change and is explained in [issue #91](https://github.com/ljharb/qs/issues/91).
+By default, all values are parsed as strings.
+This behavior will not change and is explained in [issue #91](https://github.com/ljharb/qs/issues/91).
 
 ```javascript
 var primitiveValues = qs.parse('a=15&b=true&c=null');
@@ -373,16 +400,17 @@
 }})
 ```
 
-Examples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage.
+Examples beyond this point will be shown as though the output is not URI encoded for clarity.
+Please note that the return values in these cases *will* be URI encoded during real usage.
 
-When arrays are stringified, by default they are given explicit indices:
+When arrays are stringified, they follow the `arrayFormat` option, which defaults to `indices`:
 
 ```javascript
 qs.stringify({ a: ['b', 'c', 'd'] });
 // 'a[0]=b&a[1]=c&a[2]=d'
 ```
 
-You may override this by setting the `indices` option to `false`:
+You may override this by setting the `indices` option to `false`, or to be more explicit, the `arrayFormat` option to `repeat`:
 
 ```javascript
 qs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });
@@ -418,6 +446,20 @@
 // 'a.b.c=d&a.b.e=f'
 ```
 
+You may encode the dot notation in the keys of object with option `encodeDotInKeys` by setting it to `true`:
+Note: it implies `allowDots`, so `stringify` will error if you set `decodeDotInKeys` to `true`, and `allowDots` to `false`.
+Caveat: when `encodeValuesOnly` is `true` as well as `encodeDotInKeys`, only dots in keys and nothing else will be encoded.
+```javascript
+qs.stringify({ "name.obj": { "first": "John", "last": "Doe" } }, { allowDots: true, encodeDotInKeys: true })
+// 'name%252Eobj.first=John&name%252Eobj.last=Doe'
+```
+
+You may allow empty array values by setting the `allowEmptyArrays` option to `true`:
+```javascript
+qs.stringify({ foo: [], bar: 'baz' }, { allowEmptyArrays: true });
+// 'foo[]&bar=baz'
+```
+
 Empty strings and null values will omit the value, but the equals sign (=) remains in place:
 
 ```javascript
@@ -473,8 +515,8 @@
 ```
 
 Finally, you can use the `filter` option to restrict which keys will be included in the stringified output.
-If you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you
-pass an array, it will be used to select properties and array indices for stringification:
+If you pass a function, it will be called for each key to obtain the replacement value.
+Otherwise, if you pass an array, it will be used to select properties and array indices for stringification:
 
 ```javascript
 function filterFunc(prefix, value) {
@@ -498,6 +540,44 @@
 // 'a[0]=b&a[2]=d'
 ```
 
+You could also use `filter` to inject custom serialization for user defined types.
+Consider you're working with some api that expects query strings of the format for ranges:
+
+```
+https://domain.com/endpoint?range=30...70
+```
+
+For which you model as:
+
+```javascript
+class Range {
+    constructor(from, to) {
+        this.from = from;
+        this.to = to;
+    }
+}
+```
+
+You could _inject_ a custom serializer to handle values of this type:
+
+```javascript
+qs.stringify(
+    {
+        range: new Range(30, 70),
+    },
+    {
+        filter: (prefix, value) => {
+            if (value instanceof Range) {
+                return `${value.from}...${value.to}`;
+            }
+            // serialize the usual way
+            return value;
+        },
+    }
+);
+// range=30...70
+```
+
 ### Handling of `null` values
 
 By default, `null` values are treated like empty strings:
@@ -507,7 +587,8 @@
 assert.equal(withNull, 'a=&b=');
 ```
 
-Parsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.
+Parsing does not distinguish between parameters with and without equal signs.
+Both are converted to empty strings.
 
 ```javascript
 var equalsInsensitive = qs.parse('a&b=');
@@ -536,25 +617,21 @@
 assert.equal(nullsSkipped, 'a=b');
 ```
 
-If you're communicating with legacy systems, you can switch to `iso-8859-1`
-using the `charset` option:
+If you're communicating with legacy systems, you can switch to `iso-8859-1` using the `charset` option:
 
 ```javascript
 var iso = qs.stringify({ æ: 'æ' }, { charset: 'iso-8859-1' });
 assert.equal(iso, '%E6=%E6');
 ```
 
-Characters that don't exist in `iso-8859-1` will be converted to numeric
-entities, similar to what browsers do:
+Characters that don't exist in `iso-8859-1` will be converted to numeric entities, similar to what browsers do:
 
 ```javascript
 var numeric = qs.stringify({ a: '☺' }, { charset: 'iso-8859-1' });
 assert.equal(numeric, 'a=%26%239786%3B');
 ```
 
-You can use the `charsetSentinel` option to announce the character by
-including an `utf8=✓` parameter with the proper encoding if the checkmark,
-similar to what Ruby on Rails and others do when submitting forms.
+You can use the `charsetSentinel` option to announce the character by including an `utf8=✓` parameter with the proper encoding if the checkmark, similar to what Ruby on Rails and others do when submitting forms.
 
 ```javascript
 var sentinel = qs.stringify({ a: '☺' }, { charsetSentinel: true });
@@ -566,8 +643,7 @@
 
 ### Dealing with special character sets
 
-By default the encoding and decoding of characters is done in `utf-8`,
-and `iso-8859-1` support is also built in via the `charset` parameter.
+By default the encoding and decoding of characters is done in `utf-8`, and `iso-8859-1` support is also built in via the `charset` parameter.
 
 If you wish to encode querystrings to a different character set (i.e.
 [Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the
@@ -606,7 +682,9 @@
 
 Available as part of the Tidelift Subscription
 
-The maintainers of qs and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-qs?utm_source=npm-qs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)
+The maintainers of qs and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications.
+Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.
+[Learn more.](https://tidelift.com/subscription/pkg/npm-qs?utm_source=npm-qs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)
 
 [package-url]: https://npmjs.org/package/qs
 [npm-version-svg]: https://versionbadg.es/ljharb/qs.svg
@@ -623,3 +701,9 @@
 [codecov-url]: https://app.codecov.io/gh/ljharb/qs/
 [actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/qs
 [actions-url]: https://github.com/ljharb/qs/actions
+
+## Acknowledgements
+
+qs logo by [NUMI](https://github.com/numi-hq/open-design):
+
+[<img src="https://raw.githubusercontent.com/numi-hq/open-design/main/assets/numi-lockup.png" alt="NUMI Logo" style="width: 200px;"/>](https://numi.tech/?ref=qs)
Index: node_modules/pg-pool/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/index.js b/node_modules/pg-pool/test/index.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/index.js	
+++ /dev/null	
@@ -1,226 +0,0 @@
-'use strict'
-const expect = require('expect.js')
-const _ = require('lodash')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('pool', function () {
-  describe('with callbacks', function () {
-    it('works totally unconfigured', function (done) {
-      const pool = new Pool()
-      pool.connect(function (err, client, release) {
-        if (err) return done(err)
-        client.query('SELECT NOW()', function (err, res) {
-          release()
-          if (err) return done(err)
-          expect(res.rows).to.have.length(1)
-          pool.end(done)
-        })
-      })
-    })
-
-    it('passes props to clients', function (done) {
-      const pool = new Pool({ binary: true })
-      pool.connect(function (err, client, release) {
-        release()
-        if (err) return done(err)
-        expect(client.binary).to.eql(true)
-        pool.end(done)
-      })
-    })
-
-    it('can run a query with a callback without parameters', function (done) {
-      const pool = new Pool()
-      pool.query('SELECT 1 as num', function (err, res) {
-        expect(res.rows[0]).to.eql({ num: 1 })
-        pool.end(function () {
-          done(err)
-        })
-      })
-    })
-
-    it('can run a query with a callback', function (done) {
-      const pool = new Pool()
-      pool.query('SELECT $1::text as name', ['brianc'], function (err, res) {
-        expect(res.rows[0]).to.eql({ name: 'brianc' })
-        pool.end(function () {
-          done(err)
-        })
-      })
-    })
-
-    it('passes connection errors to callback', function (done) {
-      const pool = new Pool({ port: 53922 })
-      pool.query('SELECT $1::text as name', ['brianc'], function (err, res) {
-        expect(res).to.be(undefined)
-        expect(err).to.be.an(Error)
-        // a connection error should not polute the pool with a dead client
-        expect(pool.totalCount).to.equal(0)
-        pool.end(function (err) {
-          done(err)
-        })
-      })
-    })
-
-    it('does not pass client to error callback', function (done) {
-      const pool = new Pool({ port: 58242 })
-      pool.connect(function (err, client, release) {
-        expect(err).to.be.an(Error)
-        expect(client).to.be(undefined)
-        expect(release).to.be.a(Function)
-        pool.end(done)
-      })
-    })
-
-    it('removes client if it errors in background', function (done) {
-      const pool = new Pool()
-      pool.connect(function (err, client, release) {
-        release()
-        if (err) return done(err)
-        client.testString = 'foo'
-        setTimeout(function () {
-          client.emit('error', new Error('on purpose'))
-        }, 10)
-      })
-      pool.on('error', function (err) {
-        expect(err.message).to.be('on purpose')
-        expect(err.client).to.not.be(undefined)
-        expect(err.client.testString).to.be('foo')
-        err.client.connection.stream.on('end', function () {
-          pool.end(done)
-        })
-      })
-    })
-
-    it('should not change given options', function (done) {
-      const options = { max: 10 }
-      const pool = new Pool(options)
-      pool.connect(function (err, client, release) {
-        release()
-        if (err) return done(err)
-        expect(options).to.eql({ max: 10 })
-        pool.end(done)
-      })
-    })
-
-    it('does not create promises when connecting', function (done) {
-      const pool = new Pool()
-      const returnValue = pool.connect(function (err, client, release) {
-        release()
-        if (err) return done(err)
-        pool.end(done)
-      })
-      expect(returnValue).to.be(undefined)
-    })
-
-    it('does not create promises when querying', function (done) {
-      const pool = new Pool()
-      const returnValue = pool.query('SELECT 1 as num', function (err) {
-        pool.end(function () {
-          done(err)
-        })
-      })
-      expect(returnValue).to.be(undefined)
-    })
-
-    it('does not create promises when ending', function (done) {
-      const pool = new Pool()
-      const returnValue = pool.end(done)
-      expect(returnValue).to.be(undefined)
-    })
-
-    it('never calls callback syncronously', function (done) {
-      const pool = new Pool()
-      pool.connect((err, client) => {
-        if (err) throw err
-        client.release()
-        setImmediate(() => {
-          let called = false
-          pool.connect((err, client) => {
-            if (err) throw err
-            called = true
-            client.release()
-            setImmediate(() => {
-              pool.end(done)
-            })
-          })
-          expect(called).to.equal(false)
-        })
-      })
-    })
-  })
-
-  describe('with promises', function () {
-    it('connects, queries, and disconnects', function () {
-      const pool = new Pool()
-      return pool.connect().then(function (client) {
-        return client.query('select $1::text as name', ['hi']).then(function (res) {
-          expect(res.rows).to.eql([{ name: 'hi' }])
-          client.release()
-          return pool.end()
-        })
-      })
-    })
-
-    it('executes a query directly', () => {
-      const pool = new Pool()
-      return pool.query('SELECT $1::text as name', ['hi']).then((res) => {
-        expect(res.rows).to.have.length(1)
-        expect(res.rows[0].name).to.equal('hi')
-        return pool.end()
-      })
-    })
-
-    it('properly pools clients', function () {
-      const pool = new Pool({ poolSize: 9 })
-      const promises = _.times(30, function () {
-        return pool.connect().then(function (client) {
-          return client.query('select $1::text as name', ['hi']).then(function (res) {
-            client.release()
-            return res
-          })
-        })
-      })
-      return Promise.all(promises).then(function (res) {
-        expect(res).to.have.length(30)
-        expect(pool.totalCount).to.be(9)
-        return pool.end()
-      })
-    })
-
-    it('supports just running queries', function () {
-      const pool = new Pool({ poolSize: 9 })
-      const text = 'select $1::text as name'
-      const values = ['hi']
-      const query = { text: text, values: values }
-      const promises = _.times(30, () => pool.query(query))
-      return Promise.all(promises).then(function (queries) {
-        expect(queries).to.have.length(30)
-        return pool.end()
-      })
-    })
-
-    it('recovers from query errors', function () {
-      const pool = new Pool()
-
-      const errors = []
-      const promises = _.times(30, () => {
-        return pool.query('SELECT asldkfjasldkf').catch(function (e) {
-          errors.push(e)
-        })
-      })
-      return Promise.all(promises).then(() => {
-        expect(errors).to.have.length(30)
-        expect(pool.totalCount).to.equal(0)
-        expect(pool.idleCount).to.equal(0)
-        return pool.query('SELECT $1::text as name', ['hi']).then(function (res) {
-          expect(res.rows).to.eql([{ name: 'hi' }])
-          return pool.end()
-        })
-      })
-    })
-  })
-})
Index: node_modules/pg-protocol/dist/buffer-writer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/buffer-writer.js b/node_modules/pg-protocol/dist/buffer-writer.js
--- a/node_modules/pg-protocol/dist/buffer-writer.js	
+++ b/node_modules/pg-protocol/dist/buffer-writer.js	
@@ -10,12 +10,12 @@
         this.buffer = Buffer.allocUnsafe(size);
     }
     ensure(size) {
-        var remaining = this.buffer.length - this.offset;
+        const remaining = this.buffer.length - this.offset;
         if (remaining < size) {
-            var oldBuffer = this.buffer;
+            const oldBuffer = this.buffer;
             // exponential growth factor of around ~ 1.5
             // https://stackoverflow.com/questions/2269063/buffer-growth-strategy
-            var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;
+            const newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;
             this.buffer = Buffer.allocUnsafe(newSize);
             oldBuffer.copy(this.buffer);
         }
@@ -39,7 +39,7 @@
             this.ensure(1);
         }
         else {
-            var len = Buffer.byteLength(string);
+            const len = Buffer.byteLength(string);
             this.ensure(len + 1); // +1 for null terminator
             this.buffer.write(string, this.offset, 'utf-8');
             this.offset += len;
@@ -48,7 +48,7 @@
         return this;
     }
     addString(string = '') {
-        var len = Buffer.byteLength(string);
+        const len = Buffer.byteLength(string);
         this.ensure(len);
         this.buffer.write(string, this.offset);
         this.offset += len;
@@ -70,7 +70,7 @@
         return this.buffer.slice(code ? 0 : 5, this.offset);
     }
     flush(code) {
-        var result = this.join(code);
+        const result = this.join(code);
         this.offset = 5;
         this.headerPosition = 0;
         this.buffer = Buffer.allocUnsafe(this.size);
Index: node_modules/send/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/send/package.json b/node_modules/send/package.json
--- a/node_modules/send/package.json	
+++ b/node_modules/send/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "send",
   "description": "Better streaming static file server with Range and conditional-GET support",
-  "version": "0.18.0",
+  "version": "0.19.0",
   "author": "TJ Holowaychuk <tj@vision-media.ca>",
   "contributors": [
     "Douglas Christopher Wilson <doug@somethingdoug.com>",
Index: node_modules/set-function-length/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/.eslintrc b/node_modules/set-function-length/.eslintrc
deleted file mode 100644
--- a/node_modules/set-function-length/.eslintrc	
+++ /dev/null	
@@ -1,27 +0,0 @@
-{
-	"root": true,
-
-	"extends": "@ljharb",
-
-	"rules": {
-		"id-length": "off",
-		"new-cap": ["error", {
-			"capIsNewExceptions": [
-				"GetIntrinsic"
-			],
-		}],
-		"no-extra-parens": "off",
-	},
-
-	"overrides": [
-		{
-			"files": ["test/**/*.js"],
-			"rules": {
-				"id-length": "off",
-				"max-lines-per-function": "off",
-				"multiline-comment-style": "off",
-				"no-empty-function": "off",
-			},
-		},
-	],
-}
Index: node_modules/postgres/src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/src/index.js b/node_modules/postgres/src/index.js
--- a/node_modules/postgres/src/index.js	
+++ b/node_modules/postgres/src/index.js	
@@ -204,9 +204,10 @@
     const queue = Queue()
     const c = open.length
       ? open.shift()
-      : await new Promise(r => {
-        queries.push({ reserve: r })
-        closed.length && connect(closed.shift())
+      : await new Promise((resolve, reject) => {
+        const query = { reserve: resolve, reject }
+        queries.push(query)
+        closed.length && connect(closed.shift(), query)
       })
 
     move(c, reserved)
@@ -480,7 +481,7 @@
       {}
     ),
     connection      : {
-      application_name: 'postgres.js',
+      application_name: env.PGAPPNAME || 'postgres.js',
       ...o.connection,
       ...Object.entries(query).reduce((acc, [k, v]) => (k in defaults || (acc[k] = v), acc), {})
     },
Index: node_modules/postgresql-client/cjs/data-types/int4-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/int4-type.js b/node_modules/postgresql-client/cjs/data-types/int4-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/int4-type.js	
+++ /dev/null	
@@ -1,26 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayInt4Type = exports.Int4Type = void 0;
-const constants_js_1 = require("../constants.js");
-const fast_parseint_js_1 = require("../util/fast-parseint.js");
-exports.Int4Type = {
-    name: 'int4',
-    oid: constants_js_1.DataTypeOIDs.int4,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readInt32BE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeInt32BE((0, fast_parseint_js_1.fastParseInt)(v));
-    },
-    parseText: fast_parseint_js_1.fastParseInt,
-    isType(v) {
-        return typeof v === 'number' && Number.isInteger(v) && v <= Number.MAX_SAFE_INTEGER;
-    },
-};
-exports.ArrayInt4Type = {
-    ...exports.Int4Type,
-    name: '_int4',
-    oid: constants_js_1.DataTypeOIDs._int4,
-    elementsOID: constants_js_1.DataTypeOIDs.int4,
-};
Index: node_modules/postgres/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/README.md b/node_modules/postgres/README.md
--- a/node_modules/postgres/README.md	
+++ b/node_modules/postgres/README.md	
@@ -342,6 +342,27 @@
 select * from users where user_id = $1
 ```
 
+### Dynamic ordering
+
+```js
+const id = 1
+const order = {
+  username: 'asc'
+  created_at: 'desc'
+}
+await sql`
+  select 
+    * 
+  from ticket 
+  where account = ${ id }  
+  order by ${
+    Object.entries(order).flatMap(([column, order], i) =>
+      [i ? sql`,` : sql``, sql`${ sql(column) } ${ order === 'desc' ? sql`desc` : sql`asc` }`]
+    )
+  }
+`
+```
+
 ### SQL functions
 Using keywords or calling functions dynamically is also possible by using ``` sql`` ``` fragments.
 ```js
@@ -537,7 +558,7 @@
 }
 ```
 
-> **NOTE** This is a low-level API which does not provide any type safety. To make this work, you must match your [`copy query` parameters](https://www.postgresql.org/docs/14/sql-copy.html) correctly to your [Node.js stream read or write](https://nodejs.org/api/stream.html) code. Ensure [Node.js stream backpressure](https://nodejs.org/en/docs/guides/backpressuring-in-streams/) is handled correctly to avoid memory exhaustion.
+> **NOTE** This is a low-level API which does not provide any type safety. To make this work, you must match your [`copy query` parameters](https://www.postgresql.org/docs/14/sql-copy.html) correctly to your [Node.js stream read or write](https://nodejs.org/api/stream.html) code. Ensure [Node.js stream backpressure](https://nodejs.org/en/learn/modules/backpressuring-in-streams) is handled correctly to avoid memory exhaustion.
 
 ### Canceling Queries in Progress
 
@@ -568,6 +589,8 @@
 sql.unsafe('select ' + danger + ' from users where id = ' + dragons)
 ```
 
+By default, `sql.unsafe` assumes the `query` string is sufficiently dynamic that prepared statements do not make sense, and so defaults them to off. If you'd like to re-enable prepared statements, you can pass `{ prepare: true }`.
+
 You can also nest `sql.unsafe` within a safe `sql` expression.  This is useful if only part of your fraction has unsafe elements.
 
 ```js
@@ -992,7 +1015,7 @@
 })
 ```
 
-Note that `max_lifetime = 60 * (30 + Math.random() * 30)` by default. This resolves to an interval between 45 and 90 minutes to optimize for the benefits of prepared statements **and** working nicely with Linux's OOM killer.
+Note that `max_lifetime = 60 * (30 + Math.random() * 30)` by default. This resolves to an interval between 30 and 60 minutes to optimize for the benefits of prepared statements **and** working nicely with Linux's OOM killer.
 
 ### Dynamic passwords
 
@@ -1125,20 +1148,25 @@
 const sql = postgres()
 ```
 
-| Option            | Environment Variables    |
-| ----------------- | ------------------------ |
-| `host`            | `PGHOST`                 |
-| `port`            | `PGPORT`                 |
-| `database`        | `PGDATABASE`             |
-| `username`        | `PGUSERNAME` or `PGUSER` |
-| `password`        | `PGPASSWORD`             |
-| `idle_timeout`    | `PGIDLE_TIMEOUT`         |
-| `connect_timeout` | `PGCONNECT_TIMEOUT`      |
+| Option             | Environment Variables    |
+| ------------------ | ------------------------ |
+| `host`             | `PGHOST`                 |
+| `port`             | `PGPORT`                 |
+| `database`         | `PGDATABASE`             |
+| `username`         | `PGUSERNAME` or `PGUSER` |
+| `password`         | `PGPASSWORD`             |
+| `application_name` | `PGAPPNAME`              |
+| `idle_timeout`     | `PGIDLE_TIMEOUT`         |
+| `connect_timeout`  | `PGCONNECT_TIMEOUT`      |
 
 ### Prepared statements
 
 Prepared statements will automatically be created for any queries where it can be inferred that the query is static. This can be disabled by using the `prepare: false` option. For instance — this is useful when [using PGBouncer in `transaction mode`](https://github.com/porsager/postgres/issues/93#issuecomment-656290493).
 
+**update**: [since 1.21.0](https://www.pgbouncer.org/2023/10/pgbouncer-1-21-0)
+PGBouncer supports protocol-level named prepared statements when [configured
+properly](https://www.pgbouncer.org/config.html#max_prepared_statements)
+
 ## Custom Types
 
 You can add ergonomic support for custom types, or simply use `sql.typed(value, type)` inline, where type is the PostgreSQL `oid` for the type and the correctly serialized string. _(`oid` values for types can be found in the `pg_catalog.pg_type` table.)_
@@ -1298,8 +1326,8 @@
 
 This error is thrown for any queries that were pending when the timeout to [`sql.end({ timeout: X })`](#teardown--cleanup) was reached.
 
-##### CONNECTION_CONNECT_TIMEOUT
-> write CONNECTION_CONNECT_TIMEOUT host:port
+##### CONNECT_TIMEOUT
+> write CONNECT_TIMEOUT host:port
 
 This error is thrown if the startup phase of the connection (tcp, protocol negotiation, and auth) took more than the default 30 seconds or what was specified using `connect_timeout` or `PGCONNECT_TIMEOUT`.
 
Index: node_modules/postgresql-client/esm/connection/cursor.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/connection/cursor.js b/node_modules/postgresql-client/esm/connection/cursor.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/connection/cursor.js	
+++ /dev/null	
@@ -1,86 +0,0 @@
-import DoublyLinked from 'doublylinked';
-import { TaskQueue } from 'power-tasks';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { convertRowToObject } from '../util/convert-row-to-object.js';
-import { parseRow } from '../util/parse-row.js';
-export class Cursor extends SafeEventEmitter {
-    constructor(statement, portal, fields, parsers, queryOptions) {
-        super();
-        this._taskQueue = new TaskQueue({ concurrency: 1 });
-        this._rows = new DoublyLinked();
-        this._closed = false;
-        this._statement = statement;
-        this._portal = portal;
-        this._parsers = parsers;
-        this._queryOptions = queryOptions;
-        this.fields = fields;
-    }
-    get rowType() {
-        return this._queryOptions.objectRows ? 'object' : 'array';
-    }
-    get isClosed() {
-        return this._closed;
-    }
-    async next() {
-        if (!this._rows.length) {
-            if (this._closed)
-                return;
-            await this._fetchRows();
-        }
-        return this._rows.shift();
-    }
-    async fetch(nRows) {
-        const out = [];
-        if (this._closed)
-            return out;
-        for (let i = 0; i < nRows; i++) {
-            if (!this._rows.length)
-                await this._fetchRows();
-            if (this._rows.length)
-                out.push(this._rows.shift());
-            else
-                break;
-        }
-        return out;
-    }
-    async close() {
-        if (this._closed)
-            return;
-        await this._portal.close();
-        await this._statement.close();
-        this.emit('close');
-        this._closed = true;
-    }
-    async _fetchRows() {
-        if (this._closed)
-            return;
-        const portal = this._portal;
-        await this._taskQueue
-            .enqueue(async () => {
-            const queryOptions = this._queryOptions;
-            const r = await portal.execute(queryOptions.fetchCount || 100);
-            if (r && r.rows && r.rows.length) {
-                if (this._parsers) {
-                    const objectRows = queryOptions.objectRows;
-                    const fields = this.fields;
-                    const rows = r.rows;
-                    for (let i = 0; i < rows.length; i++) {
-                        const row = rows[i];
-                        parseRow(this._parsers, row, this._queryOptions);
-                        if (objectRows)
-                            rows[i] = convertRowToObject(fields, row);
-                    }
-                }
-                this._rows.push(...r.rows);
-                this.emit('fetch', r.rows);
-            }
-            else {
-                await this.close();
-            }
-        })
-            .toPromise();
-    }
-    [Symbol.asyncDispose]() {
-        return this.close();
-    }
-}
Index: node_modules/has-symbols/test/shams/get-own-property-symbols.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-symbols/test/shams/get-own-property-symbols.js b/node_modules/has-symbols/test/shams/get-own-property-symbols.js
--- a/node_modules/has-symbols/test/shams/get-own-property-symbols.js	
+++ b/node_modules/has-symbols/test/shams/get-own-property-symbols.js	
@@ -8,6 +8,7 @@
 		t.equal(typeof Symbol(), 'symbol');
 		t.end();
 	});
+	// @ts-expect-error TS is stupid and doesn't know about top level return
 	return;
 }
 
Index: node_modules/define-data-property/.github/FUNDING.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/.github/FUNDING.yml b/node_modules/define-data-property/.github/FUNDING.yml
deleted file mode 100644
--- a/node_modules/define-data-property/.github/FUNDING.yml	
+++ /dev/null	
@@ -1,12 +0,0 @@
-# These are supported funding model platforms
-
-github: [ljharb]
-patreon: # Replace with a single Patreon username
-open_collective: # Replace with a single Open Collective username
-ko_fi: # Replace with a single Ko-fi username
-tidelift: npm/define-data-property
-community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
-liberapay: # Replace with a single Liberapay username
-issuehunt: # Replace with a single IssueHunt username
-otechie: # Replace with a single Otechie username
-custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
Index: node_modules/postgres/types/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/types/index.d.ts b/node_modules/postgres/types/index.d.ts
--- a/node_modules/postgres/types/index.d.ts	
+++ b/node_modules/postgres/types/index.d.ts	
@@ -456,7 +456,8 @@
     | 'NOT_TAGGED_CALL'
     | 'UNDEFINED_VALUE'
     | 'MAX_PARAMETERS_EXCEEDED'
-    | 'SASL_SIGNATURE_MISMATCH';
+    | 'SASL_SIGNATURE_MISMATCH'
+    | 'UNSAFE_TRANSACTION';
     message: string;
   }
 
Index: node_modules/postgresql-client/typings/util/bigint-methods.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/bigint-methods.d.ts b/node_modules/postgresql-client/typings/util/bigint-methods.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/bigint-methods.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-/// <reference types="node" />
-export declare function readBigInt64BE(buf: Buffer, offset?: number): bigint;
-export declare function writeBigUInt64BE(buf: Buffer, value: BigInt, offset?: number): number;
Index: node_modules/postgresql-client/esm/constants.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/constants.js b/node_modules/postgresql-client/esm/constants.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/constants.js	
+++ /dev/null	
@@ -1,247 +0,0 @@
-import { Protocol } from './protocol/protocol.js';
-var DataFormat = Protocol.DataFormat;
-// @ts-ignore
-Symbol.asyncDispose ?? (Symbol.asyncDispose = Symbol('Symbol.asyncDispose'));
-export { DataFormat };
-export const DEFAULT_COLUMN_FORMAT = DataFormat.binary;
-export var ConnectionState;
-(function (ConnectionState) {
-    ConnectionState[ConnectionState["CLOSED"] = 0] = "CLOSED";
-    ConnectionState[ConnectionState["CONNECTING"] = 1] = "CONNECTING";
-    ConnectionState[ConnectionState["AUTHORIZING"] = 3] = "AUTHORIZING";
-    ConnectionState[ConnectionState["READY"] = 2] = "READY";
-    ConnectionState[ConnectionState["CLOSING"] = 10] = "CLOSING";
-})(ConnectionState || (ConnectionState = {}));
-export const DataTypeOIDs = {
-    bool: 16,
-    bytea: 17,
-    char: 18,
-    name: 19,
-    int8: 20,
-    int2: 21,
-    int2vector: 22,
-    int4: 23,
-    regproc: 24,
-    text: 25,
-    oid: 26,
-    tid: 27,
-    xid: 28,
-    cid: 29,
-    oidvector: 30,
-    json: 114,
-    xml: 142,
-    point: 600,
-    lseg: 601,
-    path: 602,
-    box: 603,
-    polygon: 604,
-    line: 628,
-    cidr: 650,
-    float4: 700,
-    float8: 701,
-    unknown: 705,
-    circle: 718,
-    macaddr8: 774,
-    money: 790,
-    macaddr: 829,
-    inet: 869,
-    bpchar: 1042,
-    varchar: 1043,
-    date: 1082,
-    time: 1083,
-    timestamp: 1114,
-    timestamptz: 1184,
-    interval: 1186,
-    timetz: 1266,
-    bit: 1560,
-    varbit: 1562,
-    numeric: 1700,
-    refcursor: 1790,
-    regprocedure: 2202,
-    regoper: 2203,
-    regoperator: 2204,
-    regclass: 2205,
-    regtype: 2206,
-    record: 2249,
-    cstring: 2275,
-    any: 2276,
-    anyarray: 2277,
-    void: 2278,
-    trigger: 2279,
-    // eslint-disable-next-line camelcase
-    language_handler: 2280,
-    internal: 2281,
-    anyelement: 2283,
-    anynonarray: 2776,
-    uuid: 2950,
-    jsonb: 3802,
-    anyrange: 3831,
-    int4range: 3904,
-    numrange: 3906,
-    tsrange: 3908,
-    rstzrange: 3910,
-    daterange: 3912,
-    int8range: 3926,
-    _xml: 143,
-    _json: 199,
-    _xid8: 271,
-    _line: 629,
-    _cidr: 651,
-    _circle: 719,
-    _macaddr8: 775,
-    _money: 791,
-    _bool: 1000,
-    _bytea: 1001,
-    _char: 1002,
-    _name: 1003,
-    _int2: 1005,
-    _int2vector: 1006,
-    _int4: 1007,
-    _regproc: 1008,
-    _text: 1009,
-    _tid: 1010,
-    _xid: 1011,
-    _cid: 1012,
-    _oidvector: 1013,
-    _bpchar: 1014,
-    _varchar: 1015,
-    _int8: 1016,
-    _point: 1017,
-    _lseg: 1018,
-    _path: 1019,
-    _box: 1020,
-    _float4: 1021,
-    _float8: 1022,
-    _polygon: 1027,
-    _oid: 1028,
-    _macaddr: 1040,
-    _inet: 1041,
-    _timestamp: 1115,
-    _date: 1182,
-    _time: 1183,
-    _timestamptz: 1185,
-    _interval: 1187,
-    _numeric: 1231,
-    _cstring: 1263,
-    _timetz: 1270,
-    _bit: 1561,
-    _varbit: 1563,
-    _uuid: 2951,
-    _jsonb: 3807,
-};
-export const DataTypeNames = {
-    [DataTypeOIDs.bool]: 'bool',
-    [DataTypeOIDs.bytea]: 'bytea',
-    [DataTypeOIDs.char]: 'char',
-    [DataTypeOIDs.name]: 'name',
-    [DataTypeOIDs.int8]: 'int8',
-    [DataTypeOIDs.int2]: 'int2',
-    [DataTypeOIDs.int2vector]: 'int2vector',
-    [DataTypeOIDs.int4]: 'int4',
-    [DataTypeOIDs.regproc]: 'regproc',
-    [DataTypeOIDs.text]: 'text',
-    [DataTypeOIDs.oid]: 'oid',
-    [DataTypeOIDs.tid]: 'tid',
-    [DataTypeOIDs.xid]: 'xid',
-    [DataTypeOIDs.cid]: 'cid',
-    [DataTypeOIDs.oidvector]: 'oidvector',
-    [DataTypeOIDs.json]: 'json',
-    [DataTypeOIDs.xml]: 'xml',
-    [DataTypeOIDs.point]: 'point',
-    [DataTypeOIDs.lseg]: 'lseg',
-    [DataTypeOIDs.path]: 'path',
-    [DataTypeOIDs.box]: 'box',
-    [DataTypeOIDs.polygon]: 'polygon',
-    [DataTypeOIDs.line]: 'line',
-    [DataTypeOIDs.cidr]: 'cidr',
-    [DataTypeOIDs.float4]: 'float4',
-    [DataTypeOIDs.float8]: 'float8',
-    [DataTypeOIDs.unknown]: 'unknown',
-    [DataTypeOIDs.circle]: 'circle',
-    [DataTypeOIDs.macaddr8]: 'macaddr8',
-    [DataTypeOIDs.money]: 'money',
-    [DataTypeOIDs.macaddr]: 'macaddr',
-    [DataTypeOIDs.inet]: 'inet',
-    [DataTypeOIDs.bpchar]: 'bpchar',
-    [DataTypeOIDs.varchar]: 'varchar',
-    [DataTypeOIDs.date]: 'date',
-    [DataTypeOIDs.time]: 'time',
-    [DataTypeOIDs.timestamp]: 'timestamp',
-    [DataTypeOIDs.timestamptz]: 'timestamptz',
-    [DataTypeOIDs.interval]: 'interval',
-    [DataTypeOIDs.timetz]: 'timetz',
-    [DataTypeOIDs.bit]: 'bit',
-    [DataTypeOIDs.varbit]: 'varbit',
-    [DataTypeOIDs.numeric]: 'numeric',
-    [DataTypeOIDs.refcursor]: 'refcursor',
-    [DataTypeOIDs.regprocedure]: 'regprocedure',
-    [DataTypeOIDs.regoper]: 'regoper',
-    [DataTypeOIDs.regoperator]: 'regoperator',
-    [DataTypeOIDs.regclass]: 'regclass',
-    [DataTypeOIDs.regtype]: 'regtype',
-    [DataTypeOIDs.record]: 'record',
-    [DataTypeOIDs.cstring]: 'cstring',
-    [DataTypeOIDs.any]: 'any',
-    [DataTypeOIDs.anyarray]: 'anyarray',
-    [DataTypeOIDs.void]: 'void',
-    [DataTypeOIDs.trigger]: 'trigger',
-    [DataTypeOIDs.language_handler]: 'language_handler',
-    [DataTypeOIDs.internal]: 'internal',
-    [DataTypeOIDs.anyelement]: 'anyelement',
-    [DataTypeOIDs.anynonarray]: 'anynonarray',
-    [DataTypeOIDs.uuid]: 'uuid',
-    [DataTypeOIDs.jsonb]: 'jsonb',
-    [DataTypeOIDs.anyrange]: 'anyrange',
-    [DataTypeOIDs.int4range]: 'int4range',
-    [DataTypeOIDs.numrange]: 'numrange',
-    [DataTypeOIDs.tsrange]: 'tsrange',
-    [DataTypeOIDs.rstzrange]: 'rstzrange',
-    [DataTypeOIDs.daterange]: 'daterange',
-    [DataTypeOIDs.int8range]: 'int8range',
-    [DataTypeOIDs._xml]: '_xml',
-    [DataTypeOIDs._json]: '_json',
-    [DataTypeOIDs._xid8]: '_xid8',
-    [DataTypeOIDs._line]: '_line',
-    [DataTypeOIDs._cidr]: '_cidr',
-    [DataTypeOIDs._circle]: '_circle',
-    [DataTypeOIDs._macaddr8]: '_macaddr8',
-    [DataTypeOIDs._money]: '_money',
-    [DataTypeOIDs._bool]: '_bool',
-    [DataTypeOIDs._bytea]: '_bytea',
-    [DataTypeOIDs._char]: '_char',
-    [DataTypeOIDs._name]: '_name',
-    [DataTypeOIDs._int2]: '_int2',
-    [DataTypeOIDs._int2vector]: '_int2vector',
-    [DataTypeOIDs._int4]: '_int4',
-    [DataTypeOIDs._regproc]: '_regproc',
-    [DataTypeOIDs._text]: '_text',
-    [DataTypeOIDs._tid]: '_tid',
-    [DataTypeOIDs._xid]: '_xid',
-    [DataTypeOIDs._cid]: '_cid',
-    [DataTypeOIDs._oidvector]: '_oidvector',
-    [DataTypeOIDs._bpchar]: '_bpchar',
-    [DataTypeOIDs._varchar]: '_varchar',
-    [DataTypeOIDs._int8]: '_int8',
-    [DataTypeOIDs._point]: '_point',
-    [DataTypeOIDs._lseg]: '_lseg',
-    [DataTypeOIDs._path]: '_path',
-    [DataTypeOIDs._box]: '_box',
-    [DataTypeOIDs._float4]: '_float4',
-    [DataTypeOIDs._float8]: '_float8',
-    [DataTypeOIDs._polygon]: '_polygon',
-    [DataTypeOIDs._oid]: '_oid',
-    [DataTypeOIDs._macaddr]: '_macaddr',
-    [DataTypeOIDs._inet]: '_inet',
-    [DataTypeOIDs._timestamp]: '_timestamp',
-    [DataTypeOIDs._date]: '_date',
-    [DataTypeOIDs._time]: '_time',
-    [DataTypeOIDs._timestamptz]: '_timestamptz',
-    [DataTypeOIDs._interval]: '_interval',
-    [DataTypeOIDs._numeric]: '_numeric',
-    [DataTypeOIDs._cstring]: '_cstring',
-    [DataTypeOIDs._timetz]: '_timetz',
-    [DataTypeOIDs._bit]: '_bit',
-    [DataTypeOIDs._varbit]: '_varbit',
-    [DataTypeOIDs._uuid]: '_uuid',
-    [DataTypeOIDs._jsonb]: '_jsonb',
-};
Index: node_modules/postgresql-client/typings/data-types/jsonb-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/jsonb-type.d.ts b/node_modules/postgresql-client/typings/data-types/jsonb-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/jsonb-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const JsonbType: DataType;
-export declare const ArrayJsonbType: DataType;
Index: node_modules/postgresql-client/esm/data-types/float8-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/float8-type.js b/node_modules/postgresql-client/esm/data-types/float8-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/float8-type.js	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-export const Float8Type = {
-    name: 'float8',
-    oid: DataTypeOIDs.float8,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readDoubleBE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(typeof v === 'number' ? v : parseFloat(v));
-    },
-    parseText: parseFloat,
-    isType(v) {
-        return typeof v === 'number';
-    },
-};
-export const ArrayFloat8Type = {
-    ...Float8Type,
-    name: '_float8',
-    oid: DataTypeOIDs._float8,
-    elementsOID: DataTypeOIDs.float8,
-};
Index: node_modules/postgresql-client/cjs/interfaces/data-mapping-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/data-mapping-options.js b/node_modules/postgresql-client/cjs/interfaces/data-mapping-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/data-mapping-options.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/pg/lib/connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/connection.js b/node_modules/pg/lib/connection.js
--- a/node_modules/pg/lib/connection.js	
+++ b/node_modules/pg/lib/connection.js	
@@ -1,7 +1,6 @@
 'use strict'
 
-var net = require('net')
-var EventEmitter = require('events').EventEmitter
+const EventEmitter = require('events').EventEmitter
 
 const { parse, serialize } = require('pg-protocol')
 const { getStream, getSecureStream } = require('./stream')
@@ -28,7 +27,7 @@
     this.ssl = config.ssl || false
     this._ending = false
     this._emitMessage = false
-    var self = this
+    const self = this
     this.on('newListener', function (eventName) {
       if (eventName === 'message') {
         self._emitMessage = true
@@ -37,7 +36,7 @@
   }
 
   connect(port, host) {
-    var self = this
+    const self = this
 
     this._connecting = true
     this.stream.setNoDelay(true)
@@ -68,7 +67,7 @@
     }
 
     this.stream.once('data', function (buffer) {
-      var responseCode = buffer.toString('utf8')
+      const responseCode = buffer.toString('utf8')
       switch (responseCode) {
         case 'S': // Server supports SSL connections, continue with a secure connection
           break
@@ -92,7 +91,7 @@
         }
       }
 
-      var net = require('net')
+      const net = require('net')
       if (net.isIP && net.isIP(host) === 0) {
         options.servername = host
       }
@@ -110,7 +109,7 @@
 
   attachListeners(stream) {
     parse(stream, (msg) => {
-      var eventName = msg.name === 'error' ? 'errorMessage' : msg.name
+      const eventName = msg.name === 'error' ? 'errorMessage' : msg.name
       if (this._emitMessage) {
         this.emit('message', msg)
       }
Index: node_modules/postgresql-client/typings/data-types/oid-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/oid-type.d.ts b/node_modules/postgresql-client/typings/data-types/oid-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/oid-type.d.ts	
+++ /dev/null	
@@ -1,4 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const OidType: DataType;
-export declare const ArrayOidType: DataType;
-export declare const VectorOidType: DataType;
Index: node_modules/es-define-property/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/es-define-property/package.json b/node_modules/es-define-property/package.json
--- a/node_modules/es-define-property/package.json	
+++ b/node_modules/es-define-property/package.json	
@@ -1,6 +1,6 @@
 {
 	"name": "es-define-property",
-	"version": "1.0.0",
+	"version": "1.0.1",
 	"description": "`Object.defineProperty`, but not IE 8's broken one.",
 	"main": "index.js",
 	"types": "./index.d.ts",
@@ -19,7 +19,7 @@
 		"pretest": "npm run lint",
 		"tests-only": "nyc tape 'test/**/*.js'",
 		"test": "npm run tests-only",
-		"posttest": "aud --production",
+		"posttest": "npx npm@'>= 10.2' audit --production",
 		"version": "auto-changelog && git add CHANGELOG.md",
 		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
 	},
@@ -42,29 +42,29 @@
 		"url": "https://github.com/ljharb/es-define-property/issues"
 	},
 	"homepage": "https://github.com/ljharb/es-define-property#readme",
-	"dependencies": {
-		"get-intrinsic": "^1.2.4"
-	},
 	"devDependencies": {
-		"@ljharb/eslint-config": "^21.1.0",
-		"@types/get-intrinsic": "^1.2.2",
+		"@ljharb/eslint-config": "^21.1.1",
+		"@ljharb/tsconfig": "^0.2.2",
 		"@types/gopd": "^1.0.3",
-		"@types/tape": "^5.6.4",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
+		"@types/tape": "^5.6.5",
+		"auto-changelog": "^2.5.0",
+		"encoding": "^0.1.13",
 		"eslint": "^8.8.0",
 		"evalmd": "^0.0.19",
-		"gopd": "^1.0.1",
+		"gopd": "^1.2.0",
 		"in-publish": "^2.0.1",
 		"npmignore": "^0.3.1",
 		"nyc": "^10.3.2",
 		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.4",
+		"tape": "^5.9.0",
 		"typescript": "next"
 	},
 	"engines": {
 		"node": ">= 0.4"
 	},
+	"testling": {
+		"files": "test/index.js"
+	},
 	"auto-changelog": {
 		"output": "CHANGELOG.md",
 		"template": "keepachangelog",
Index: node_modules/postgresql-client/cjs/protocol/database-error.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/database-error.js b/node_modules/postgresql-client/cjs/protocol/database-error.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/database-error.js	
+++ /dev/null	
@@ -1,17 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.DatabaseError = void 0;
-class DatabaseError extends Error {
-    constructor(msg) {
-        super(msg.message);
-        Object.assign(this, {
-            ...msg,
-            line: undefined,
-            file: undefined,
-            routine: undefined,
-        });
-        if (msg.position)
-            this.position = parseInt(msg.position, 10) || undefined;
-    }
-}
-exports.DatabaseError = DatabaseError;
Index: node_modules/postgresql-client/typings/util/stringify-for-sql.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/stringify-for-sql.d.ts b/node_modules/postgresql-client/typings/util/stringify-for-sql.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/stringify-for-sql.d.ts	
+++ /dev/null	
@@ -1,4 +0,0 @@
-import { DataMappingOptions } from '../interfaces/data-mapping-options.js';
-import { EncodeTextFunction } from '../types.js';
-export declare function stringifyArrayForSQL(v: any[], options?: DataMappingOptions, encode?: EncodeTextFunction): string;
-export declare function stringifyValueForSQL(v: any, options?: DataMappingOptions, encode?: EncodeTextFunction): string;
Index: node_modules/gopd/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/gopd/index.js b/node_modules/gopd/index.js
--- a/node_modules/gopd/index.js	
+++ b/node_modules/gopd/index.js	
@@ -1,8 +1,7 @@
 'use strict';
 
-var GetIntrinsic = require('get-intrinsic');
-
-var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
+/** @type {import('.')} */
+var $gOPD = require('./gOPD');
 
 if ($gOPD) {
 	try {
Index: node_modules/postgresql-client/esm/connection/bind-param.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/connection/bind-param.js b/node_modules/postgresql-client/esm/connection/bind-param.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/connection/bind-param.js	
+++ /dev/null	
@@ -1,6 +0,0 @@
-export class BindParam {
-    constructor(oid, value) {
-        this.oid = oid;
-        this.value = value;
-    }
-}
Index: node_modules/postgresql-client/node_modules/postgres-bytea/encoder-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/encoder-test.js b/node_modules/postgresql-client/node_modules/postgres-bytea/encoder-test.js
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/encoder-test.js	
+++ /dev/null	
@@ -1,23 +0,0 @@
-'use strict'
-
-const test = require('tape-promise').default(require('tape'))
-const { Readable } = require('stream')
-const streamToPromise = require('stream-to-promise')
-const Encoder = require('./encoder')
-
-test('encoder', (t) => {
-  t.test('empty input gives empty result', async (t) => {
-    const result = await streamToPromise(Readable.from([]).pipe(new Encoder()))
-    t.equal(result.toString(), '\\\\x')
-  })
-
-  t.test('input cuts at chunk boundary multiple ways', async (t) => {
-    const input = [0x12, 0x34, 0x56]
-
-    for (let i = 1; i < input.length; i++) {
-      const result = await streamToPromise(Readable.from([input.slice(0, i), input.slice(i)].map(Buffer.from)).pipe(new Encoder()))
-      t.equal(result.toString(), '\\\\x123456')
-    }
-    t.end()
-  })
-})
Index: node_modules/postgresql-client/typings/util/fast-parseint.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/fast-parseint.d.ts b/node_modules/postgresql-client/typings/util/fast-parseint.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/fast-parseint.d.ts	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export declare function fastParseInt(str: string | number): number;
Index: node_modules/call-bind/.github/FUNDING.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/.github/FUNDING.yml b/node_modules/call-bind/.github/FUNDING.yml
deleted file mode 100644
--- a/node_modules/call-bind/.github/FUNDING.yml	
+++ /dev/null	
@@ -1,12 +0,0 @@
-# These are supported funding model platforms
-
-github: [ljharb]
-patreon: # Replace with a single Patreon username
-open_collective: # Replace with a single Open Collective username
-ko_fi: # Replace with a single Ko-fi username
-tidelift: npm/call-bind
-community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
-liberapay: # Replace with a single Liberapay username
-issuehunt: # Replace with a single IssueHunt username
-otechie: # Replace with a single Otechie username
-custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
Index: node_modules/postgresql-client/typings/util/get-parsers.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/get-parsers.d.ts b/node_modules/postgresql-client/typings/util/get-parsers.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/get-parsers.d.ts	
+++ /dev/null	
@@ -1,4 +0,0 @@
-import { DataTypeMap } from '../data-type-map.js';
-import { Protocol } from '../protocol/protocol.js';
-import { AnyParseFunction } from '../types.js';
-export declare function getParsers(typeMap: DataTypeMap, fields: Protocol.RowDescription[]): AnyParseFunction[];
Index: node_modules/qs/test/parse.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/test/parse.js b/node_modules/qs/test/parse.js
--- a/node_modules/qs/test/parse.js	
+++ b/node_modules/qs/test/parse.js	
@@ -1,10 +1,17 @@
 'use strict';
 
 var test = require('tape');
-var qs = require('../');
-var utils = require('../lib/utils');
+var hasPropertyDescriptors = require('has-property-descriptors')();
 var iconv = require('iconv-lite');
+var mockProperty = require('mock-property');
+var hasOverrideMistake = require('has-override-mistake')();
 var SaferBuffer = require('safer-buffer').Buffer;
+var v = require('es-value-fixtures');
+var inspect = require('object-inspect');
+var emptyTestCases = require('./empty-keys-cases').emptyTestCases;
+
+var qs = require('../');
+var utils = require('../lib/utils');
 
 test('parse()', function (t) {
     t.test('parses a simple string', function (st) {
@@ -32,41 +39,156 @@
         st.end();
     });
 
-    t.test('arrayFormat: brackets allows only explicit arrays', function (st) {
-        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'brackets' }), { a: 'b,c' });
-        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });
+    t.test('comma: false', function (st) {
+        st.deepEqual(qs.parse('a[]=b&a[]=c'), { a: ['b', 'c'] });
+        st.deepEqual(qs.parse('a[0]=b&a[1]=c'), { a: ['b', 'c'] });
+        st.deepEqual(qs.parse('a=b,c'), { a: 'b,c' });
+        st.deepEqual(qs.parse('a=b&a=c'), { a: ['b', 'c'] });
         st.end();
     });
 
-    t.test('arrayFormat: indices allows only indexed arrays', function (st) {
-        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'indices' }), { a: 'b,c' });
-        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });
-        st.end();
-    });
-
-    t.test('arrayFormat: comma allows only comma-separated arrays', function (st) {
-        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'comma' }), { a: 'b,c' });
-        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });
-        st.end();
-    });
-
-    t.test('arrayFormat: repeat allows only repeated values', function (st) {
-        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });
-        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'repeat' }), { a: 'b,c' });
-        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });
+    t.test('comma: true', function (st) {
+        st.deepEqual(qs.parse('a[]=b&a[]=c', { comma: true }), { a: ['b', 'c'] });
+        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { comma: true }), { a: ['b', 'c'] });
+        st.deepEqual(qs.parse('a=b,c', { comma: true }), { a: ['b', 'c'] });
+        st.deepEqual(qs.parse('a=b&a=c', { comma: true }), { a: ['b', 'c'] });
         st.end();
     });
 
     t.test('allows enabling dot notation', function (st) {
         st.deepEqual(qs.parse('a.b=c'), { 'a.b': 'c' });
         st.deepEqual(qs.parse('a.b=c', { allowDots: true }), { a: { b: 'c' } });
+
+        st.end();
+    });
+
+    t.test('decode dot keys correctly', function (st) {
+        st.deepEqual(
+            qs.parse('name%252Eobj.first=John&name%252Eobj.last=Doe', { allowDots: false, decodeDotInKeys: false }),
+            { 'name%2Eobj.first': 'John', 'name%2Eobj.last': 'Doe' },
+            'with allowDots false and decodeDotInKeys false'
+        );
+        st.deepEqual(
+            qs.parse('name.obj.first=John&name.obj.last=Doe', { allowDots: true, decodeDotInKeys: false }),
+            { name: { obj: { first: 'John', last: 'Doe' } } },
+            'with allowDots false and decodeDotInKeys false'
+        );
+        st.deepEqual(
+            qs.parse('name%252Eobj.first=John&name%252Eobj.last=Doe', { allowDots: true, decodeDotInKeys: false }),
+            { 'name%2Eobj': { first: 'John', last: 'Doe' } },
+            'with allowDots true and decodeDotInKeys false'
+        );
+        st.deepEqual(
+            qs.parse('name%252Eobj.first=John&name%252Eobj.last=Doe', { allowDots: true, decodeDotInKeys: true }),
+            { 'name.obj': { first: 'John', last: 'Doe' } },
+            'with allowDots true and decodeDotInKeys true'
+        );
+
+        st.deepEqual(
+            qs.parse(
+                'name%252Eobj%252Esubobject.first%252Egodly%252Ename=John&name%252Eobj%252Esubobject.last=Doe',
+                { allowDots: false, decodeDotInKeys: false }
+            ),
+            { 'name%2Eobj%2Esubobject.first%2Egodly%2Ename': 'John', 'name%2Eobj%2Esubobject.last': 'Doe' },
+            'with allowDots false and decodeDotInKeys false'
+        );
+        st.deepEqual(
+            qs.parse(
+                'name.obj.subobject.first.godly.name=John&name.obj.subobject.last=Doe',
+                { allowDots: true, decodeDotInKeys: false }
+            ),
+            { name: { obj: { subobject: { first: { godly: { name: 'John' } }, last: 'Doe' } } } },
+            'with allowDots true and decodeDotInKeys false'
+        );
+        st.deepEqual(
+            qs.parse(
+                'name%252Eobj%252Esubobject.first%252Egodly%252Ename=John&name%252Eobj%252Esubobject.last=Doe',
+                { allowDots: true, decodeDotInKeys: true }
+            ),
+            { 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } },
+            'with allowDots true and decodeDotInKeys true'
+        );
+        st.deepEqual(
+            qs.parse('name%252Eobj.first=John&name%252Eobj.last=Doe'),
+            { 'name%2Eobj.first': 'John', 'name%2Eobj.last': 'Doe' },
+            'with allowDots and decodeDotInKeys undefined'
+        );
+
+        st.end();
+    });
+
+    t.test('should decode dot in key of object, and allow enabling dot notation when decodeDotInKeys is set to true and allowDots is undefined', function (st) {
+        st.deepEqual(
+            qs.parse(
+                'name%252Eobj%252Esubobject.first%252Egodly%252Ename=John&name%252Eobj%252Esubobject.last=Doe',
+                { decodeDotInKeys: true }
+            ),
+            { 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } },
+            'with allowDots undefined and decodeDotInKeys true'
+        );
+
+        st.end();
+    });
+
+    t.test('should throw when decodeDotInKeys is not of type boolean', function (st) {
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { decodeDotInKeys: 'foobar' }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { decodeDotInKeys: 0 }); },
+            TypeError
+        );
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { decodeDotInKeys: NaN }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { decodeDotInKeys: null }); },
+            TypeError
+        );
+
+        st.end();
+    });
+
+    t.test('allows empty arrays in obj values', function (st) {
+        st.deepEqual(qs.parse('foo[]&bar=baz', { allowEmptyArrays: true }), { foo: [], bar: 'baz' });
+        st.deepEqual(qs.parse('foo[]&bar=baz', { allowEmptyArrays: false }), { foo: [''], bar: 'baz' });
+
+        st.end();
+    });
+
+    t.test('should throw when allowEmptyArrays is not of type boolean', function (st) {
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { allowEmptyArrays: 'foobar' }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { allowEmptyArrays: 0 }); },
+            TypeError
+        );
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { allowEmptyArrays: NaN }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.parse('foo[]&bar=baz', { allowEmptyArrays: null }); },
+            TypeError
+        );
+
+        st.end();
+    });
+
+    t.test('allowEmptyArrays + strictNullHandling', function (st) {
+        st.deepEqual(
+            qs.parse('testEmptyArray[]', { strictNullHandling: true, allowEmptyArrays: true }),
+            { testEmptyArray: [] }
+        );
+
         st.end();
     });
 
@@ -322,14 +444,14 @@
     });
 
     t.test('should not throw when a native prototype has an enumerable property', function (st) {
-        Object.prototype.crash = '';
-        Array.prototype.crash = '';
+        st.intercept(Object.prototype, 'crash', { value: '' });
+        st.intercept(Array.prototype, 'crash', { value: '' });
+
         st.doesNotThrow(qs.parse.bind(null, 'a=b'));
         st.deepEqual(qs.parse('a=b'), { a: 'b' });
         st.doesNotThrow(qs.parse.bind(null, 'a[][b]=c'));
         st.deepEqual(qs.parse('a[][b]=c'), { a: [{ b: 'c' }] });
-        delete Object.prototype.crash;
-        delete Array.prototype.crash;
+
         st.end();
     });
 
@@ -360,8 +482,14 @@
 
     t.test('allows overriding array limit', function (st) {
         st.deepEqual(qs.parse('a[0]=b', { arrayLimit: -1 }), { a: { 0: 'b' } });
+        st.deepEqual(qs.parse('a[0]=b', { arrayLimit: 0 }), { a: ['b'] });
+
         st.deepEqual(qs.parse('a[-1]=b', { arrayLimit: -1 }), { a: { '-1': 'b' } });
+        st.deepEqual(qs.parse('a[-1]=b', { arrayLimit: 0 }), { a: { '-1': 'b' } });
+
+        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayLimit: -1 }), { a: { 0: 'b', 1: 'c' } });
         st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayLimit: 0 }), { a: { 0: 'b', 1: 'c' } });
+
         st.end();
     });
 
@@ -452,6 +580,15 @@
         st.end();
     });
 
+    t.test('parses url-encoded brackets holds array of arrays when having two parts of strings with comma as array divider', function (st) {
+        st.deepEqual(qs.parse('foo%5B%5D=1,2,3&foo%5B%5D=4,5,6', { comma: true }), { foo: [['1', '2', '3'], ['4', '5', '6']] });
+        st.deepEqual(qs.parse('foo%5B%5D=1,2,3&foo%5B%5D=', { comma: true }), { foo: [['1', '2', '3'], ''] });
+        st.deepEqual(qs.parse('foo%5B%5D=1,2,3&foo%5B%5D=,', { comma: true }), { foo: [['1', '2', '3'], ['', '']] });
+        st.deepEqual(qs.parse('foo%5B%5D=1,2,3&foo%5B%5D=a', { comma: true }), { foo: [['1', '2', '3'], 'a'] });
+
+        st.end();
+    });
+
     t.test('parses comma delimited array while having percent-encoded comma treated as normal text', function (st) {
         st.deepEqual(qs.parse('foo=a%2Cb', { comma: true }), { foo: 'a,b' });
         st.deepEqual(qs.parse('foo=a%2C%20b,d', { comma: true }), { foo: ['a, b', 'd'] });
@@ -499,10 +636,12 @@
     });
 
     t.test('does not blow up when Buffer global is missing', function (st) {
-        var tempBuffer = global.Buffer;
-        delete global.Buffer;
+        var restore = mockProperty(global, 'Buffer', { 'delete': true });
+
         var result = qs.parse('a=b&c=d');
-        global.Buffer = tempBuffer;
+
+        restore();
+
         st.deepEqual(result, { a: 'b', c: 'd' });
         st.end();
     });
@@ -598,6 +737,34 @@
             'bare "toString" results in { toString: "" }'
         );
 
+        st.end();
+    });
+
+    t.test('does not crash when the global Object prototype is frozen', { skip: !hasPropertyDescriptors || !hasOverrideMistake }, function (st) {
+        // We can't actually freeze the global Object prototype as that will interfere with other tests, and once an object is frozen, it
+        // can't be unfrozen. Instead, we add a new non-writable property to simulate this.
+        st.teardown(mockProperty(Object.prototype, 'frozenProp', { value: 'foo', nonWritable: true, nonEnumerable: true }));
+
+        st['throws'](
+            function () {
+                var obj = {};
+                obj.frozenProp = 'bar';
+            },
+            // node < 6 has a different error message
+            /^TypeError: Cannot assign to read only property 'frozenProp' of (?:object '#<Object>'|#<Object>)/,
+            'regular assignment of an inherited non-writable property throws'
+        );
+
+        var parsed;
+        st.doesNotThrow(
+            function () {
+                parsed = qs.parse('frozenProp', { allowPrototypes: false });
+            },
+            'parsing a nonwritable Object.prototype property does not throw'
+        );
+
+        st.deepEqual(parsed, {}, 'bare "frozenProp" results in {}');
+
         st.end();
     });
 
@@ -853,3 +1020,151 @@
 
     t.end();
 });
+
+test('parses empty keys', function (t) {
+    emptyTestCases.forEach(function (testCase) {
+        t.test('skips empty string key with ' + testCase.input, function (st) {
+            st.deepEqual(qs.parse(testCase.input), testCase.noEmptyKeys);
+
+            st.end();
+        });
+    });
+});
+
+test('`duplicates` option', function (t) {
+    v.nonStrings.concat('not a valid option').forEach(function (invalidOption) {
+        if (typeof invalidOption !== 'undefined') {
+            t['throws'](
+                function () { qs.parse('', { duplicates: invalidOption }); },
+                TypeError,
+                'throws on invalid option: ' + inspect(invalidOption)
+            );
+        }
+    });
+
+    t.deepEqual(
+        qs.parse('foo=bar&foo=baz'),
+        { foo: ['bar', 'baz'] },
+        'duplicates: default, combine'
+    );
+
+    t.deepEqual(
+        qs.parse('foo=bar&foo=baz', { duplicates: 'combine' }),
+        { foo: ['bar', 'baz'] },
+        'duplicates: combine'
+    );
+
+    t.deepEqual(
+        qs.parse('foo=bar&foo=baz', { duplicates: 'first' }),
+        { foo: 'bar' },
+        'duplicates: first'
+    );
+
+    t.deepEqual(
+        qs.parse('foo=bar&foo=baz', { duplicates: 'last' }),
+        { foo: 'baz' },
+        'duplicates: last'
+    );
+
+    t.end();
+});
+
+test('qs strictDepth option - throw cases', function (t) {
+    t.test('throws an exception when depth exceeds the limit with strictDepth: true', function (st) {
+        st['throws'](
+            function () {
+                qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1, strictDepth: true });
+            },
+            RangeError,
+            'Should throw RangeError'
+        );
+        st.end();
+    });
+
+    t.test('throws an exception for multiple nested arrays with strictDepth: true', function (st) {
+        st['throws'](
+            function () {
+                qs.parse('a[0][1][2][3][4]=b', { depth: 3, strictDepth: true });
+            },
+            RangeError,
+            'Should throw RangeError'
+        );
+        st.end();
+    });
+
+    t.test('throws an exception for nested objects and arrays with strictDepth: true', function (st) {
+        st['throws'](
+            function () {
+                qs.parse('a[b][c][0][d][e]=f', { depth: 3, strictDepth: true });
+            },
+            RangeError,
+            'Should throw RangeError'
+        );
+        st.end();
+    });
+
+    t.test('throws an exception for different types of values with strictDepth: true', function (st) {
+        st['throws'](
+            function () {
+                qs.parse('a[b][c][d][e]=true&a[b][c][d][f]=42', { depth: 3, strictDepth: true });
+            },
+            RangeError,
+            'Should throw RangeError'
+        );
+        st.end();
+    });
+
+});
+
+test('qs strictDepth option - non-throw cases', function (t) {
+    t.test('when depth is 0 and strictDepth true, do not throw', function (st) {
+        st.doesNotThrow(
+            function () {
+                qs.parse('a[b][c][d][e]=true&a[b][c][d][f]=42', { depth: 0, strictDepth: true });
+            },
+            RangeError,
+            'Should not throw RangeError'
+        );
+        st.end();
+    });
+
+    t.test('parses successfully when depth is within the limit with strictDepth: true', function (st) {
+        st.doesNotThrow(
+            function () {
+                var result = qs.parse('a[b]=c', { depth: 1, strictDepth: true });
+                st.deepEqual(result, { a: { b: 'c' } }, 'Should parse correctly');
+            }
+        );
+        st.end();
+    });
+
+    t.test('does not throw an exception when depth exceeds the limit with strictDepth: false', function (st) {
+        st.doesNotThrow(
+            function () {
+                var result = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });
+                st.deepEqual(result, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } }, 'Should parse with depth limit');
+            }
+        );
+        st.end();
+    });
+
+    t.test('parses successfully when depth is within the limit with strictDepth: false', function (st) {
+        st.doesNotThrow(
+            function () {
+                var result = qs.parse('a[b]=c', { depth: 1 });
+                st.deepEqual(result, { a: { b: 'c' } }, 'Should parse correctly');
+            }
+        );
+        st.end();
+    });
+
+    t.test('does not throw when depth is exactly at the limit with strictDepth: true', function (st) {
+        st.doesNotThrow(
+            function () {
+                var result = qs.parse('a[b][c]=d', { depth: 2, strictDepth: true });
+                st.deepEqual(result, { a: { b: { c: 'd' } } }, 'Should parse correctly');
+            }
+        );
+        st.end();
+    });
+});
Index: node_modules/postgresql-client/cjs/data-types/int2-vector-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/int2-vector-type.js b/node_modules/postgresql-client/cjs/data-types/int2-vector-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/int2-vector-type.js	
+++ /dev/null	
@@ -1,38 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayInt2VectorType = exports.Int2VectorType = void 0;
-const constants_js_1 = require("../constants.js");
-const decode_binaryarray_js_1 = require("../util/decode-binaryarray.js");
-const encode_binaryarray_js_1 = require("../util/encode-binaryarray.js");
-const fast_parseint_js_1 = require("../util/fast-parseint.js");
-exports.Int2VectorType = {
-    name: 'int2vector',
-    oid: constants_js_1.DataTypeOIDs.int2vector,
-    jsType: 'array',
-    parseBinary(v) {
-        return (0, decode_binaryarray_js_1.decodeBinaryArray)(v, b => b.readInt16BE()) || undefined;
-    },
-    encodeBinary(buf, v) {
-        (0, encode_binaryarray_js_1.encodeBinaryArray)(buf, v, constants_js_1.DataTypeOIDs.int2, {}, (io, x) => {
-            io.writeInt16BE(x);
-        });
-    },
-    encodeCalculateDim(v) {
-        return [v.length];
-    },
-    parseText(str) {
-        return str.split(' ').map(fast_parseint_js_1.fastParseInt);
-    },
-    encodeText(v) {
-        return v.join(' ');
-    },
-    isType(v) {
-        return (Array.isArray(v) && !v.find(x => !(typeof x === 'number' && Number.isInteger(x) && x >= -32768 && x <= 32767)));
-    },
-};
-exports.ArrayInt2VectorType = {
-    ...exports.Int2VectorType,
-    name: '_int2vector',
-    oid: constants_js_1.DataTypeOIDs._int2vector,
-    elementsOID: constants_js_1.DataTypeOIDs.int2vector,
-};
Index: node_modules/express/node_modules/cookie/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/express/node_modules/cookie/index.js b/node_modules/express/node_modules/cookie/index.js
--- a/node_modules/express/node_modules/cookie/index.js	
+++ b/node_modules/express/node_modules/cookie/index.js	
@@ -23,14 +23,66 @@
 var __toString = Object.prototype.toString
 
 /**
- * RegExp to match field-content in RFC 7230 sec 3.2
+ * RegExp to match cookie-name in RFC 6265 sec 4.1.1
+ * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2
+ * which has been replaced by the token definition in RFC 7230 appendix B.
+ *
+ * cookie-name       = token
+ * token             = 1*tchar
+ * tchar             = "!" / "#" / "$" / "%" / "&" / "'" /
+ *                     "*" / "+" / "-" / "." / "^" / "_" /
+ *                     "`" / "|" / "~" / DIGIT / ALPHA
+ */
+
+var cookieNameRegExp = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * RegExp to match cookie-value in RFC 6265 sec 4.1.1
+ *
+ * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
+ * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
+ *                     ; US-ASCII characters excluding CTLs,
+ *                     ; whitespace DQUOTE, comma, semicolon,
+ *                     ; and backslash
+ */
+
+var cookieValueRegExp = /^("?)[\u0021\u0023-\u002B\u002D-\u003A\u003C-\u005B\u005D-\u007E]*\1$/;
+
+/**
+ * RegExp to match domain-value in RFC 6265 sec 4.1.1
+ *
+ * domain-value      = <subdomain>
+ *                     ; defined in [RFC1034], Section 3.5, as
+ *                     ; enhanced by [RFC1123], Section 2.1
+ * <subdomain>       = <label> | <subdomain> "." <label>
+ * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]
+ *                     Labels must be 63 characters or less.
+ *                     'let-dig' not 'letter' in the first char, per RFC1123
+ * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>
+ * <let-dig-hyp>     = <let-dig> | "-"
+ * <let-dig>         = <letter> | <digit>
+ * <letter>          = any one of the 52 alphabetic characters A through Z in
+ *                     upper case and a through z in lower case
+ * <digit>           = any one of the ten digits 0 through 9
+ *
+ * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173
  *
- * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
- * field-vchar   = VCHAR / obs-text
- * obs-text      = %x80-FF
+ * > (Note that a leading %x2E ("."), if present, is ignored even though that
+ * character is not permitted, but a trailing %x2E ("."), if present, will
+ * cause the user agent to ignore the attribute.)
  */
 
-var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
+var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
+
+/**
+ * RegExp to match path-value in RFC 6265 sec 4.1.1
+ *
+ * path-value        = <any CHAR except CTLs or ";">
+ * CHAR              = %x01-7F
+ *                     ; defined in RFC 5234 appendix B.1
+ */
+
+var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
 
 /**
  * Parse a cookie header.
@@ -39,107 +91,128 @@
  * The object has the various cookies as keys(names) => values
  *
  * @param {string} str
- * @param {object} [options]
+ * @param {object} [opt]
  * @return {object}
  * @public
  */
 
-function parse(str, options) {
+function parse(str, opt) {
   if (typeof str !== 'string') {
     throw new TypeError('argument str must be a string');
   }
 
-  var obj = {}
-  var opt = options || {};
-  var dec = opt.decode || decode;
+  var obj = {};
+  var len = str.length;
+  // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.
+  if (len < 2) return obj;
 
-  var index = 0
-  while (index < str.length) {
-    var eqIdx = str.indexOf('=', index)
+  var dec = (opt && opt.decode) || decode;
+  var index = 0;
+  var eqIdx = 0;
+  var endIdx = 0;
 
-    // no more cookie pairs
-    if (eqIdx === -1) {
-      break
-    }
+  do {
+    eqIdx = str.indexOf('=', index);
+    if (eqIdx === -1) break; // No more cookie pairs.
 
-    var endIdx = str.indexOf(';', index)
+    endIdx = str.indexOf(';', index);
 
     if (endIdx === -1) {
-      endIdx = str.length
-    } else if (endIdx < eqIdx) {
+      endIdx = len;
+    } else if (eqIdx > endIdx) {
       // backtrack on prior semicolon
-      index = str.lastIndexOf(';', eqIdx - 1) + 1
-      continue
+      index = str.lastIndexOf(';', eqIdx - 1) + 1;
+      continue;
     }
 
-    var key = str.slice(index, eqIdx).trim()
+    var keyStartIdx = startIndex(str, index, eqIdx);
+    var keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
+    var key = str.slice(keyStartIdx, keyEndIdx);
 
     // only assign once
-    if (undefined === obj[key]) {
-      var val = str.slice(eqIdx + 1, endIdx).trim()
+    if (!obj.hasOwnProperty(key)) {
+      var valStartIdx = startIndex(str, eqIdx + 1, endIdx);
+      var valEndIdx = endIndex(str, endIdx, valStartIdx);
 
-      // quoted values
-      if (val.charCodeAt(0) === 0x22) {
-        val = val.slice(1, -1)
+      if (str.charCodeAt(valStartIdx) === 0x22 /* " */ && str.charCodeAt(valEndIdx - 1) === 0x22 /* " */) {
+        valStartIdx++;
+        valEndIdx--;
       }
 
+      var val = str.slice(valStartIdx, valEndIdx);
       obj[key] = tryDecode(val, dec);
     }
 
     index = endIdx + 1
-  }
+  } while (index < len);
 
   return obj;
 }
 
+function startIndex(str, index, max) {
+  do {
+    var code = str.charCodeAt(index);
+    if (code !== 0x20 /*   */ && code !== 0x09 /* \t */) return index;
+  } while (++index < max);
+  return max;
+}
+
+function endIndex(str, index, min) {
+  while (index > min) {
+    var code = str.charCodeAt(--index);
+    if (code !== 0x20 /*   */ && code !== 0x09 /* \t */) return index + 1;
+  }
+  return min;
+}
+
 /**
  * Serialize data into a cookie header.
  *
- * Serialize the a name value pair into a cookie string suitable for
- * http headers. An optional options object specified cookie parameters.
+ * Serialize a name value pair into a cookie string suitable for
+ * http headers. An optional options object specifies cookie parameters.
  *
  * serialize('foo', 'bar', { httpOnly: true })
  *   => "foo=bar; httpOnly"
  *
  * @param {string} name
  * @param {string} val
- * @param {object} [options]
+ * @param {object} [opt]
  * @return {string}
  * @public
  */
 
-function serialize(name, val, options) {
-  var opt = options || {};
-  var enc = opt.encode || encode;
+function serialize(name, val, opt) {
+  var enc = (opt && opt.encode) || encodeURIComponent;
 
   if (typeof enc !== 'function') {
     throw new TypeError('option encode is invalid');
   }
 
-  if (!fieldContentRegExp.test(name)) {
+  if (!cookieNameRegExp.test(name)) {
     throw new TypeError('argument name is invalid');
   }
 
   var value = enc(val);
 
-  if (value && !fieldContentRegExp.test(value)) {
+  if (!cookieValueRegExp.test(value)) {
     throw new TypeError('argument val is invalid');
   }
 
   var str = name + '=' + value;
+  if (!opt) return str;
 
   if (null != opt.maxAge) {
-    var maxAge = opt.maxAge - 0;
+    var maxAge = Math.floor(opt.maxAge);
 
-    if (isNaN(maxAge) || !isFinite(maxAge)) {
+    if (!isFinite(maxAge)) {
       throw new TypeError('option maxAge is invalid')
     }
 
-    str += '; Max-Age=' + Math.floor(maxAge);
+    str += '; Max-Age=' + maxAge;
   }
 
   if (opt.domain) {
-    if (!fieldContentRegExp.test(opt.domain)) {
+    if (!domainValueRegExp.test(opt.domain)) {
       throw new TypeError('option domain is invalid');
     }
 
@@ -147,7 +220,7 @@
   }
 
   if (opt.path) {
-    if (!fieldContentRegExp.test(opt.path)) {
+    if (!pathValueRegExp.test(opt.path)) {
       throw new TypeError('option path is invalid');
     }
 
@@ -178,8 +251,7 @@
 
   if (opt.priority) {
     var priority = typeof opt.priority === 'string'
-      ? opt.priority.toLowerCase()
-      : opt.priority
+      ? opt.priority.toLowerCase() : opt.priority;
 
     switch (priority) {
       case 'low':
@@ -234,17 +306,6 @@
     : str
 }
 
-/**
- * URL-encode value.
- *
- * @param {string} val
- * @returns {string}
- */
-
-function encode (val) {
-  return encodeURIComponent(val)
-}
-
 /**
  * Determine if value is a Date.
  *
@@ -253,8 +314,7 @@
  */
 
 function isDate (val) {
-  return __toString.call(val) === '[object Date]' ||
-    val instanceof Date
+  return __toString.call(val) === '[object Date]';
 }
 
 /**
Index: node_modules/semver/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/README.md b/node_modules/semver/README.md
--- a/node_modules/semver/README.md	
+++ b/node_modules/semver/README.md	
@@ -100,7 +100,7 @@
 -i --increment [<level>]
         Increment a version by the specified level.  Level can
         be one of: major, minor, patch, premajor, preminor,
-        prepatch, or prerelease.  Default level is 'patch'.
+        prepatch, prerelease, or release.  Default level is 'patch'.
         Only one version may be specified.
 
 --preid <identifier>
@@ -141,6 +141,8 @@
 <https://semver.org/>.
 
 A leading `"="` or `"v"` character is stripped off and ignored.
+Support for stripping a leading "v" is kept for compatibility with `v1.0.0` of the SemVer
+specification but should not be used anymore.
 
 ## Ranges
 
@@ -237,6 +239,13 @@
 1.2.4-beta.1
 ```
 
+To get out of the prerelease phase, use the `release` option:
+
+```bash
+$ semver 1.2.4-beta.1 -i release
+1.2.4
+```
+
 #### Prerelease Identifier Base
 
 The method `.inc` takes an optional parameter 'identifierBase' string
@@ -415,10 +424,10 @@
 strings that they parse.
 
 * `valid(v)`: Return the parsed version, or null if it's not valid.
-* `inc(v, release, options, identifier, identifierBase)`: 
+* `inc(v, releaseType, options, identifier, identifierBase)`: 
   Return the version incremented by the release
   type (`major`, `premajor`, `minor`, `preminor`, `patch`,
-  `prepatch`, or `prerelease`), or null if it's not valid
+  `prepatch`, `prerelease`, or `release`), or null if it's not valid
   * `premajor` in one call will bump the version up to the next major
     version and down to a prerelease of that major version.
     `preminor`, and `prepatch` work the same way.
@@ -426,6 +435,7 @@
     same as `prepatch`. It increments the patch version and then makes a
     prerelease. If the input version is already a prerelease it simply
     increments it.
+  * `release` will remove any prerelease part of the version.
   * `identifier` can be used to prefix `premajor`, `preminor`,
     `prepatch`, or `prerelease` version increments. `identifierBase`
     is the base to be used for the `prerelease` identifier.
@@ -459,7 +469,7 @@
   in descending order when passed to `Array.sort()`.
 * `compareBuild(v1, v2)`: The same as `compare` but considers `build` when two versions
   are equal.  Sorts in ascending order if passed to `Array.sort()`.
-* `compareLoose(v1, v2)`: Short for ``compare(v1, v2, { loose: true })`.
+* `compareLoose(v1, v2)`: Short for `compare(v1, v2, { loose: true })`.
 * `diff(v1, v2)`: Returns the difference between two versions by the release type
   (`major`, `premajor`, `minor`, `preminor`, `patch`, `prepatch`, or `prerelease`),
   or null if the versions are the same.
@@ -477,7 +487,7 @@
 
 ### Ranges
 
-* `validRange(range)`: Return the valid range or null if it's not valid
+* `validRange(range)`: Return the valid range or null if it's not valid.
 * `satisfies(version, range)`: Return true if the version satisfies the
   range.
 * `maxSatisfying(versions, range)`: Return the highest version in the list
Index: node_modules/cookie/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/cookie/HISTORY.md b/node_modules/cookie/HISTORY.md
deleted file mode 100644
--- a/node_modules/cookie/HISTORY.md	
+++ /dev/null	
@@ -1,128 +0,0 @@
-0.4.1 / 2020-04-21
-==================
-
-  * Fix `maxAge` option to reject invalid values
-
-0.4.0 / 2019-05-15
-==================
-
-  * Add `SameSite=None` support
-
-0.3.1 / 2016-05-26
-==================
-
-  * Fix `sameSite: true` to work with draft-7 clients
-    - `true` now sends `SameSite=Strict` instead of `SameSite`
-
-0.3.0 / 2016-05-26
-==================
-
-  * Add `sameSite` option
-    - Replaces `firstPartyOnly` option, never implemented by browsers
-  * Improve error message when `encode` is not a function
-  * Improve error message when `expires` is not a `Date`
-
-0.2.4 / 2016-05-20
-==================
-
-  * perf: enable strict mode
-  * perf: use for loop in parse
-  * perf: use string concatination for serialization
-
-0.2.3 / 2015-10-25
-==================
-
-  * Fix cookie `Max-Age` to never be a floating point number
-
-0.2.2 / 2015-09-17
-==================
-
-  * Fix regression when setting empty cookie value
-    - Ease the new restriction, which is just basic header-level validation
-  * Fix typo in invalid value errors
-
-0.2.1 / 2015-09-17
-==================
-
-  * Throw on invalid values provided to `serialize`
-    - Ensures the resulting string is a valid HTTP header value
-
-0.2.0 / 2015-08-13
-==================
-
-  * Add `firstPartyOnly` option
-  * Throw better error for invalid argument to parse
-  * perf: hoist regular expression
-
-0.1.5 / 2015-09-17
-==================
-
-  * Fix regression when setting empty cookie value
-    - Ease the new restriction, which is just basic header-level validation
-  * Fix typo in invalid value errors
-
-0.1.4 / 2015-09-17
-==================
-
-  * Throw better error for invalid argument to parse
-  * Throw on invalid values provided to `serialize`
-    - Ensures the resulting string is a valid HTTP header value
-
-0.1.3 / 2015-05-19
-==================
-
-  * Reduce the scope of try-catch deopt
-  * Remove argument reassignments
-
-0.1.2 / 2014-04-16
-==================
-
-  * Remove unnecessary files from npm package
-
-0.1.1 / 2014-02-23
-==================
-
-  * Fix bad parse when cookie value contained a comma
-  * Fix support for `maxAge` of `0`
-
-0.1.0 / 2013-05-01
-==================
-
-  * Add `decode` option
-  * Add `encode` option
-
-0.0.6 / 2013-04-08
-==================
-
-  * Ignore cookie parts missing `=`
-
-0.0.5 / 2012-10-29
-==================
-
-  * Return raw cookie value if value unescape errors
-
-0.0.4 / 2012-06-21
-==================
-
-  * Use encode/decodeURIComponent for cookie encoding/decoding
-    - Improve server/client interoperability
-
-0.0.3 / 2012-06-06
-==================
-
-  * Only escape special characters per the cookie RFC
-
-0.0.2 / 2012-06-01
-==================
-
-  * Fix `maxAge` option to not throw error
-
-0.0.1 / 2012-05-28
-==================
-
-  * Add more tests
-
-0.0.0 / 2012-05-28
-==================
-
-  * Initial release
Index: node_modules/braces/lib/expand.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/lib/expand.js b/node_modules/braces/lib/expand.js
--- a/node_modules/braces/lib/expand.js	
+++ b/node_modules/braces/lib/expand.js	
@@ -5,7 +5,7 @@
 const utils = require('./utils');
 
 const append = (queue = '', stash = '', enclose = false) => {
-  let result = [];
+  const result = [];
 
   queue = [].concat(queue);
   stash = [].concat(stash);
@@ -15,15 +15,15 @@
     return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;
   }
 
-  for (let item of queue) {
+  for (const item of queue) {
     if (Array.isArray(item)) {
-      for (let value of item) {
+      for (const value of item) {
         result.push(append(value, stash, enclose));
       }
     } else {
       for (let ele of stash) {
         if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;
-        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
+        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
       }
     }
   }
@@ -31,9 +31,9 @@
 };
 
 const expand = (ast, options = {}) => {
-  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;
+  const rangeLimit = options.rangeLimit === undefined ? 1000 : options.rangeLimit;
 
-  let walk = (node, parent = {}) => {
+  const walk = (node, parent = {}) => {
     node.queue = [];
 
     let p = parent;
@@ -55,7 +55,7 @@
     }
 
     if (node.nodes && node.ranges > 0) {
-      let args = utils.reduce(node.nodes);
+      const args = utils.reduce(node.nodes);
 
       if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
         throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
@@ -71,7 +71,7 @@
       return;
     }
 
-    let enclose = utils.encloseBrace(node);
+    const enclose = utils.encloseBrace(node);
     let queue = node.queue;
     let block = node;
 
@@ -81,7 +81,7 @@
     }
 
     for (let i = 0; i < node.nodes.length; i++) {
-      let child = node.nodes[i];
+      const child = node.nodes[i];
 
       if (child.type === 'comma' && node.type === 'brace') {
         if (i === 1) queue.push('');
Index: node_modules/postgresql-client/typings/protocol/protocol.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/protocol.d.ts b/node_modules/postgresql-client/typings/protocol/protocol.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/protocol.d.ts	
+++ /dev/null	
@@ -1,180 +0,0 @@
-/// <reference types="node" />
-import { Nullable } from '../types.js';
-export declare namespace Protocol {
-    const VERSION_MAJOR = 3;
-    const VERSION_MINOR = 0;
-    enum BackendMessageCode {
-        Authentication = 82,// R
-        BackendKeyData = 75,// K
-        BindComplete = 50,// 2
-        CloseComplete = 51,// 3
-        CommandComplete = 67,// C
-        CopyData = 100,// d
-        CopyDone = 99,// c
-        CopyInResponse = 103,// G
-        CopyOutResponse = 72,// H
-        CopyBothResponse = 87,// W
-        DataRow = 68,// D
-        EmptyQueryResponse = 73,// I
-        ErrorResponse = 69,// E
-        FunctionCallResponse = 86,// V
-        NegotiateProtocolVersion = 118,// v
-        NoData = 110,// n
-        NoticeResponse = 78,// N
-        NotificationResponse = 65,// A
-        ParameterDescription = 116,// t
-        ParameterStatus = 83,// S
-        ParseComplete = 49,// 1
-        PortalSuspended = 115,// s
-        ReadyForQuery = 90,// Z
-        RowDescription = 84
-    }
-    enum FrontendMessageCode {
-        Bind = 66,// R
-        Close = 67,// C
-        CopyData = 100,// d
-        CopyDone = 99,// c
-        CopyFail = 102,// f
-        Describe = 68,// D
-        Execute = 69,// E
-        Flush = 72,// H
-        FunctionCall = 70,// F
-        Parse = 80,// P
-        PasswordMessage = 112,// p
-        Query = 81,// Q
-        Sync = 83,// S
-        Terminate = 88
-    }
-    enum AuthenticationMessageKind {
-        KerberosV5 = "KerberosV5",
-        CleartextPassword = "CleartextPassword",
-        MD5Password = "MD5Password",
-        SCMCredential = "SCMCredential",
-        GSS = "GSS",
-        SSPI = "SSPI",
-        GSSContinue = "GSSContinue",
-        SASL = "SASL",
-        SASLContinue = "SASLContinue",
-        SASLFinal = "SASLFinal"
-    }
-    enum DataFormat {
-        text = 0,
-        binary = 1
-    }
-    interface AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind;
-    }
-    interface AuthenticationKerberosV5Message extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.KerberosV5;
-    }
-    interface AuthenticationCleartextPasswordMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.CleartextPassword;
-    }
-    interface AuthenticationMD5PasswordMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.MD5Password;
-        salt: Buffer;
-    }
-    interface AuthenticationSCMCredentialMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.SCMCredential;
-    }
-    interface AuthenticationGSSMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.GSS;
-    }
-    interface AuthenticationSSPIMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.SSPI;
-    }
-    interface AuthenticationGSSContinueMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.GSSContinue;
-        data: Buffer;
-    }
-    interface AuthenticationSASLMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.SASL;
-        mechanisms: string[];
-    }
-    interface AuthenticationSASLContinueMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.SASLContinue;
-        data: string;
-    }
-    interface AuthenticationSASLFinalMessage extends AuthenticationRequiredMessage {
-        kind: AuthenticationMessageKind.SASLFinal;
-        data: string;
-    }
-    interface BackendKeyDataMessage {
-        processID: number;
-        secretKey: number;
-    }
-    interface CommandCompleteMessage {
-        command: string;
-        oid?: number;
-        rowCount?: number;
-    }
-    interface CopyDataMessage {
-        data: Buffer;
-    }
-    interface CopyResponseMessage {
-        overallFormat: DataFormat;
-        columnCount: number;
-        columnFormats?: DataFormat[];
-    }
-    interface DataRow {
-    }
-    interface DataRowMessage {
-        columnCount: number;
-        columns: Nullable<Buffer>[];
-    }
-    interface ErrorResponseMessage {
-        severity?: string;
-        code?: string;
-        message?: string;
-        detail?: string;
-        hint?: string;
-        position?: string;
-        internalPosition?: string;
-        internalQuery?: string;
-        where?: string;
-        schema?: string;
-        table?: string;
-        column?: string;
-        dataType?: string;
-        constraint?: string;
-        file?: string;
-        line?: string;
-        routine?: string;
-    }
-    interface NotificationResponseMessage {
-        processId: number;
-        channel: string;
-        payload: string;
-    }
-    interface FunctionCallResponseMessage {
-        result: Buffer;
-    }
-    interface NegotiateProtocolVersionMessage {
-        supportedVersionMinor: number;
-        numberOfNotSupportedVersions: number;
-        option: string;
-    }
-    interface ParameterDescriptionMessage {
-        parameterCount: number;
-        parameterIds: number[];
-    }
-    interface ParameterStatusMessage {
-        name: string;
-        value: string;
-    }
-    interface ReadyForQueryMessage {
-        status: string;
-    }
-    interface RowDescription {
-        fieldName: string;
-        tableId: number;
-        columnId: number;
-        dataTypeId: number;
-        fixedSize?: number;
-        modifier?: number;
-        format: DataFormat;
-    }
-    interface RowDescriptionMessage {
-        fields: RowDescription[];
-    }
-}
Index: node_modules/braces/lib/parse.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/lib/parse.js b/node_modules/braces/lib/parse.js
--- a/node_modules/braces/lib/parse.js	
+++ b/node_modules/braces/lib/parse.js	
@@ -33,22 +33,21 @@
     throw new TypeError('Expected a string');
   }
 
-  let opts = options || {};
-  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
+  const opts = options || {};
+  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
   if (input.length > max) {
     throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
   }
 
-  let ast = { type: 'root', input, nodes: [] };
-  let stack = [ast];
+  const ast = { type: 'root', input, nodes: [] };
+  const stack = [ast];
   let block = ast;
   let prev = ast;
   let brackets = 0;
-  let length = input.length;
+  const length = input.length;
   let index = 0;
   let depth = 0;
   let value;
-  let memo = {};
 
   /**
    * Helpers
@@ -111,7 +110,6 @@
     if (value === CHAR_LEFT_SQUARE_BRACKET) {
       brackets++;
 
-      let closed = true;
       let next;
 
       while (index < length && (next = advance())) {
@@ -167,7 +165,7 @@
      */
 
     if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
-      let open = value;
+      const open = value;
       let next;
 
       if (options.keepQuotes !== true) {
@@ -199,8 +197,8 @@
     if (value === CHAR_LEFT_CURLY_BRACE) {
       depth++;
 
-      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
-      let brace = {
+      const dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
+      const brace = {
         type: 'brace',
         open: true,
         close: false,
@@ -227,7 +225,7 @@
         continue;
       }
 
-      let type = 'close';
+      const type = 'close';
       block = stack.pop();
       block.close = true;
 
@@ -245,7 +243,7 @@
     if (value === CHAR_COMMA && depth > 0) {
       if (block.ranges > 0) {
         block.ranges = 0;
-        let open = block.nodes.shift();
+        const open = block.nodes.shift();
         block.nodes = [open, { type: 'text', value: stringify(block) }];
       }
 
@@ -259,7 +257,7 @@
      */
 
     if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
-      let siblings = block.nodes;
+      const siblings = block.nodes;
 
       if (depth === 0 || siblings.length === 0) {
         push({ type: 'text', value });
@@ -286,7 +284,7 @@
       if (prev.type === 'range') {
         siblings.pop();
 
-        let before = siblings[siblings.length - 1];
+        const before = siblings[siblings.length - 1];
         before.value += prev.value + value;
         prev = before;
         block.ranges--;
@@ -319,8 +317,8 @@
       });
 
       // get the location of the block on parent.nodes (block's siblings)
-      let parent = stack[stack.length - 1];
-      let index = parent.nodes.indexOf(block);
+      const parent = stack[stack.length - 1];
+      const index = parent.nodes.indexOf(block);
       // replace the (invalid) block with it's nodes
       parent.nodes.splice(index, 1, ...block.nodes);
     }
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	
+++ b/.gitignore	
@@ -6,5 +6,17 @@
 ./.env
 ./package-lock.json
 node_modules
+.gitignore
+.env
+./package-lock.json
+.trunk
+.vscode
+DbAdmin.session.sql
+package-lock.json
+package.json
+.env
+./.env
+./package-lock.json
 
-./node_modules
\ No newline at end of file
+/node_modules
+.idea
Index: node_modules/postgresql-client/cjs/util/parse-row.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/parse-row.js b/node_modules/postgresql-client/cjs/util/parse-row.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/parse-row.js	
+++ /dev/null	
@@ -1,11 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.parseRow = void 0;
-function parseRow(parsers, row, options) {
-    const l = row.length;
-    let i;
-    for (i = 0; i < l; i++) {
-        row[i] = row[i] == null ? null : parsers[i].call(undefined, row[i], options);
-    }
-}
-exports.parseRow = parseRow;
Index: node_modules/has-symbols/test/tests.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-symbols/test/tests.js b/node_modules/has-symbols/test/tests.js
--- a/node_modules/has-symbols/test/tests.js	
+++ b/node_modules/has-symbols/test/tests.js	
@@ -1,5 +1,6 @@
 'use strict';
 
+/** @type {(t: import('tape').Test) => false | void} */
 // eslint-disable-next-line consistent-return
 module.exports = function runSymbolTests(t) {
 	t.equal(typeof Symbol, 'function', 'global Symbol is a function');
@@ -31,6 +32,7 @@
 
 	t.equal(typeof Object.getOwnPropertySymbols, 'function', 'Object.getOwnPropertySymbols is a function');
 
+	/** @type {{ [k in symbol]?: unknown }} */
 	var obj = {};
 	var sym = Symbol('test');
 	var symObj = Object(sym);
@@ -40,8 +42,8 @@
 
 	var symVal = 42;
 	obj[sym] = symVal;
-	// eslint-disable-next-line no-restricted-syntax
-	for (sym in obj) { t.fail('symbol property key was found in for..in of object'); }
+	// eslint-disable-next-line no-restricted-syntax, no-unused-vars
+	for (var _ in obj) { t.fail('symbol property key was found in for..in of object'); }
 
 	t.deepEqual(Object.keys(obj), [], 'no enumerable own keys on symbol-valued object');
 	t.deepEqual(Object.getOwnPropertyNames(obj), [], 'no own names on symbol-valued object');
Index: node_modules/postgresql-client/esm/data-types/int8-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/int8-type.js b/node_modules/postgresql-client/esm/data-types/int8-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/int8-type.js	
+++ /dev/null	
@@ -1,28 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { readBigInt64BE } from '../util/bigint-methods.js';
-const maxSafeInteger = BigInt(Number.MAX_SAFE_INTEGER);
-export const Int8Type = {
-    name: 'int8',
-    oid: DataTypeOIDs.int8,
-    jsType: 'BigInt',
-    parseBinary(buf) {
-        const v = typeof buf.readBigInt64BE === 'function' ? buf.readBigInt64BE(0) : readBigInt64BE(buf);
-        return v >= -maxSafeInteger && v <= maxSafeInteger ? Number(v) : v;
-    },
-    encodeBinary(buf, v) {
-        buf.writeBigInt64BE(v);
-    },
-    parseText(s) {
-        const v = BigInt(s);
-        return v >= -maxSafeInteger && v <= maxSafeInteger ? Number(v) : v;
-    },
-    isType(v) {
-        return typeof v === 'bigint' || (typeof v === 'number' && Number.isInteger(v) && v > Number.MAX_SAFE_INTEGER);
-    },
-};
-export const ArrayInt8Type = {
-    ...Int8Type,
-    name: '_int8',
-    oid: DataTypeOIDs._int8,
-    elementsOID: DataTypeOIDs.int8,
-};
Index: node_modules/cookie/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/cookie/package.json b/node_modules/cookie/package.json
--- a/node_modules/cookie/package.json	
+++ b/node_modules/cookie/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "cookie",
   "description": "HTTP server cookie parsing and serialization",
-  "version": "0.4.1",
+  "version": "0.7.2",
   "author": "Roman Shtylman <shtylman@gmail.com>",
   "contributors": [
     "Douglas Christopher Wilson <doug@somethingdoug.com>"
@@ -15,26 +15,30 @@
   "devDependencies": {
     "beautify-benchmark": "0.2.4",
     "benchmark": "2.1.4",
-    "eslint": "6.8.0",
-    "eslint-plugin-markdown": "1.0.2",
-    "mocha": "7.1.1",
-    "nyc": "15.0.1"
+    "eslint": "8.53.0",
+    "eslint-plugin-markdown": "3.0.1",
+    "mocha": "10.2.0",
+    "nyc": "15.1.0",
+    "safe-buffer": "5.2.1",
+    "top-sites": "1.1.194"
   },
   "files": [
     "HISTORY.md",
     "LICENSE",
     "README.md",
+    "SECURITY.md",
     "index.js"
   ],
+  "main": "index.js",
   "engines": {
     "node": ">= 0.6"
   },
   "scripts": {
     "bench": "node benchmark/index.js",
-    "lint": "eslint --plugin markdown --ext js,md .",
-    "test": "mocha --reporter spec --bail --check-leaks --ui qunit test/",
-    "test-ci": "nyc --reporter=text npm test",
+    "lint": "eslint .",
+    "test": "mocha --reporter spec --bail --check-leaks test/",
+    "test-ci": "nyc --reporter=lcov --reporter=text npm test",
     "test-cov": "nyc --reporter=html --reporter=text npm test",
-    "version": "node scripts/version-history.js && git add HISTORY.md"
+    "update-bench": "node scripts/update-benchmark.js"
   }
 }
Index: node_modules/get-intrinsic/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/get-intrinsic/index.js b/node_modules/get-intrinsic/index.js
--- a/node_modules/get-intrinsic/index.js	
+++ b/node_modules/get-intrinsic/index.js	
@@ -2,6 +2,8 @@
 
 var undefined;
 
+var $Object = require('es-object-atoms');
+
 var $Error = require('es-errors');
 var $EvalError = require('es-errors/eval');
 var $RangeError = require('es-errors/range');
@@ -10,6 +12,14 @@
 var $TypeError = require('es-errors/type');
 var $URIError = require('es-errors/uri');
 
+var abs = require('math-intrinsics/abs');
+var floor = require('math-intrinsics/floor');
+var max = require('math-intrinsics/max');
+var min = require('math-intrinsics/min');
+var pow = require('math-intrinsics/pow');
+var round = require('math-intrinsics/round');
+var sign = require('math-intrinsics/sign');
+
 var $Function = Function;
 
 // eslint-disable-next-line consistent-return
@@ -19,14 +29,8 @@
 	} catch (e) {}
 };
 
-var $gOPD = Object.getOwnPropertyDescriptor;
-if ($gOPD) {
-	try {
-		$gOPD({}, '');
-	} catch (e) {
-		$gOPD = null; // this is IE 8, which has a broken gOPD
-	}
-}
+var $gOPD = require('gopd');
+var $defineProperty = require('es-define-property');
 
 var throwTypeError = function () {
 	throw new $TypeError();
@@ -49,13 +53,13 @@
 	: throwTypeError;
 
 var hasSymbols = require('has-symbols')();
-var hasProto = require('has-proto')();
 
-var getProto = Object.getPrototypeOf || (
-	hasProto
-		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
-		: null
-);
+var getProto = require('get-proto');
+var $ObjectGPO = require('get-proto/Object.getPrototypeOf');
+var $ReflectGPO = require('get-proto/Reflect.getPrototypeOf');
+
+var $apply = require('call-bind-apply-helpers/functionApply');
+var $call = require('call-bind-apply-helpers/functionCall');
 
 var needsEval = {};
 
@@ -86,6 +90,7 @@
 	'%Error%': $Error,
 	'%eval%': eval, // eslint-disable-line no-eval
 	'%EvalError%': $EvalError,
+	'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,
 	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
 	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
 	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
@@ -102,7 +107,8 @@
 	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
 	'%Math%': Math,
 	'%Number%': Number,
-	'%Object%': Object,
+	'%Object%': $Object,
+	'%Object.getOwnPropertyDescriptor%': $gOPD,
 	'%parseFloat%': parseFloat,
 	'%parseInt%': parseInt,
 	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
@@ -128,7 +134,20 @@
 	'%URIError%': $URIError,
 	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
 	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
-	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
+	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
+
+	'%Function.prototype.call%': $call,
+	'%Function.prototype.apply%': $apply,
+	'%Object.defineProperty%': $defineProperty,
+	'%Object.getPrototypeOf%': $ObjectGPO,
+	'%Math.abs%': abs,
+	'%Math.floor%': floor,
+	'%Math.max%': max,
+	'%Math.min%': min,
+	'%Math.pow%': pow,
+	'%Math.round%': round,
+	'%Math.sign%': sign,
+	'%Reflect.getPrototypeOf%': $ReflectGPO
 };
 
 if (getProto) {
@@ -223,11 +242,11 @@
 
 var bind = require('function-bind');
 var hasOwn = require('hasown');
-var $concat = bind.call(Function.call, Array.prototype.concat);
-var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
-var $replace = bind.call(Function.call, String.prototype.replace);
-var $strSlice = bind.call(Function.call, String.prototype.slice);
-var $exec = bind.call(Function.call, RegExp.prototype.exec);
+var $concat = bind.call($call, Array.prototype.concat);
+var $spliceApply = bind.call($apply, Array.prototype.splice);
+var $replace = bind.call($call, String.prototype.replace);
+var $strSlice = bind.call($call, String.prototype.slice);
+var $exec = bind.call($call, RegExp.prototype.exec);
 
 /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
 var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
Index: node_modules/lightning-pool/esm/resource-item.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/resource-item.d.ts b/node_modules/lightning-pool/esm/resource-item.d.ts
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/resource-item.d.ts	
+++ /dev/null	
@@ -1,11 +0,0 @@
-import { DoublyLinked } from 'doublylinked';
-import { ResourceState } from './definitions.js';
-export declare class ResourceItem<T> {
-    state: ResourceState;
-    acquiredNode?: DoublyLinked.Node;
-    idleNode?: DoublyLinked.Node;
-    resource: T;
-    idleTime: number;
-    destroyed: boolean;
-    constructor(resource: T);
-}
Index: node_modules/nopt/bin/nopt.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nopt/bin/nopt.js b/node_modules/nopt/bin/nopt.js
deleted file mode 100644
--- a/node_modules/nopt/bin/nopt.js	
+++ /dev/null	
@@ -1,44 +0,0 @@
-#!/usr/bin/env node
-var nopt = require("../lib/nopt")
-  , types = { num: Number
-            , bool: Boolean
-            , help: Boolean
-            , list: Array
-            , "num-list": [Number, Array]
-            , "str-list": [String, Array]
-            , "bool-list": [Boolean, Array]
-            , str: String }
-  , shorthands = { s: [ "--str", "astring" ]
-                 , b: [ "--bool" ]
-                 , nb: [ "--no-bool" ]
-                 , tft: [ "--bool-list", "--no-bool-list", "--bool-list", "true" ]
-                 , "?": ["--help"]
-                 , h: ["--help"]
-                 , H: ["--help"]
-                 , n: [ "--num", "125" ] }
-  , parsed = nopt( types
-                 , shorthands
-                 , process.argv
-                 , 2 )
-
-console.log("parsed", parsed)
-
-if (parsed.help) {
-  console.log("")
-  console.log("nopt cli tester")
-  console.log("")
-  console.log("types")
-  console.log(Object.keys(types).map(function M (t) {
-    var type = types[t]
-    if (Array.isArray(type)) {
-      return [t, type.map(function (type) { return type.name })]
-    }
-    return [t, type && type.name]
-  }).reduce(function (s, i) {
-    s[i[0]] = i[1]
-    return s
-  }, {}))
-  console.log("")
-  console.log("shorthands")
-  console.log(shorthands)
-}
Index: node_modules/strict-typed-events/typings/async-event-emitter.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/strict-typed-events/typings/async-event-emitter.d.ts b/node_modules/strict-typed-events/typings/async-event-emitter.d.ts
deleted file mode 100644
--- a/node_modules/strict-typed-events/typings/async-event-emitter.d.ts	
+++ /dev/null	
@@ -1,6 +0,0 @@
-/// <reference types="node" />
-import { EventEmitter } from 'events';
-export declare class AsyncEventEmitter extends EventEmitter {
-    emitAsync(event: string | symbol, ...args: any[]): Promise<boolean>;
-    emitAsyncSerial(event: string | symbol, ...args: any[]): Promise<boolean>;
-}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: node_modules/postgresql-client/cjs/protocol/buffer-reader.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/buffer-reader.js b/node_modules/postgresql-client/cjs/protocol/buffer-reader.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/buffer-reader.js	
+++ /dev/null	
@@ -1,78 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.BufferReader = void 0;
-class BufferReader {
-    constructor(buffer) {
-        this.offset = 0;
-        this.buffer = buffer;
-    }
-    get length() {
-        return this.buffer.length;
-    }
-    readUInt8() {
-        this._checkReadable(1);
-        const v = this.buffer.readUInt8(this.offset);
-        this.offset++;
-        return v;
-    }
-    readUInt16BE() {
-        this._checkReadable(2);
-        const v = this.buffer.readUInt16BE(this.offset);
-        this.offset += 2;
-        return v;
-    }
-    readInt16BE() {
-        this._checkReadable(2);
-        const v = this.buffer.readInt16BE(this.offset);
-        this.offset += 2;
-        return v;
-    }
-    readUInt32BE() {
-        this._checkReadable(4);
-        const v = this.buffer.readUInt32BE(this.offset);
-        this.offset += 4;
-        return v;
-    }
-    readInt32BE() {
-        this._checkReadable(4);
-        const v = this.buffer.readInt32BE(this.offset);
-        this.offset += 4;
-        return v;
-    }
-    readCString(encoding) {
-        const idx = this.buffer.indexOf(0, this.offset);
-        const v = this.buffer.toString(encoding, this.offset, idx);
-        this.offset = idx + 1;
-        return v;
-    }
-    readLString(len, encoding) {
-        if (len < 0)
-            return null;
-        this._checkReadable(len);
-        const v = this.buffer.toString(encoding, this.offset, this.offset + len);
-        this.offset += len;
-        return v;
-    }
-    readBuffer(len) {
-        if (len)
-            this._checkReadable(len);
-        const end = len !== undefined ? this.offset + len : this.length;
-        const buf = this.buffer.slice(this.offset, end);
-        this.offset = end;
-        return buf;
-    }
-    moveBy(n) {
-        return this.moveTo(this.offset + n);
-    }
-    moveTo(pos) {
-        if (pos >= this.length)
-            throw new Error('Eof in buffer detected');
-        this.offset = pos;
-        return this;
-    }
-    _checkReadable(size) {
-        if (this.offset + size - 1 >= this.length)
-            throw new Error('Eof in buffer detected');
-    }
-}
-exports.BufferReader = BufferReader;
Index: node_modules/get-intrinsic/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/get-intrinsic/.eslintrc b/node_modules/get-intrinsic/.eslintrc
--- a/node_modules/get-intrinsic/.eslintrc	
+++ b/node_modules/get-intrinsic/.eslintrc	
@@ -11,6 +11,10 @@
 		"es2022": true,
 	},
 
+	"globals": {
+		"Float16Array": false,
+	},
+
 	"rules": {
 		"array-bracket-newline": 0,
 		"complexity": 0,
Index: node_modules/nodemon/node_modules/debug/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/debug/package.json b/node_modules/nodemon/node_modules/debug/package.json
--- a/node_modules/nodemon/node_modules/debug/package.json	
+++ b/node_modules/nodemon/node_modules/debug/package.json	
@@ -1,6 +1,6 @@
 {
   "name": "debug",
-  "version": "4.3.4",
+  "version": "4.4.1",
   "repository": {
     "type": "git",
     "url": "git://github.com/debug-js/debug.git"
@@ -16,7 +16,7 @@
     "LICENSE",
     "README.md"
   ],
-  "author": "Josh Junon <josh.junon@protonmail.com>",
+  "author": "Josh Junon (https://github.com/qix-)",
   "contributors": [
     "TJ Holowaychuk <tj@vision-media.ca>",
     "Nathan Rajlich <nathan@tootallnate.net> (http://n8.io)",
@@ -26,24 +26,24 @@
   "scripts": {
     "lint": "xo",
     "test": "npm run test:node && npm run test:browser && npm run lint",
-    "test:node": "istanbul cover _mocha -- test.js",
+    "test:node": "mocha test.js test.node.js",
     "test:browser": "karma start --single-run",
     "test:coverage": "cat ./coverage/lcov.info | coveralls"
   },
   "dependencies": {
-    "ms": "2.1.2"
+    "ms": "^2.1.3"
   },
   "devDependencies": {
     "brfs": "^2.0.1",
     "browserify": "^16.2.3",
     "coveralls": "^3.0.2",
-    "istanbul": "^0.4.5",
     "karma": "^3.1.4",
     "karma-browserify": "^6.0.0",
     "karma-chrome-launcher": "^2.2.0",
     "karma-mocha": "^1.3.0",
     "mocha": "^5.2.0",
     "mocha-lcov-reporter": "^1.2.0",
+    "sinon": "^14.0.0",
     "xo": "^0.23.0"
   },
   "peerDependenciesMeta": {
@@ -55,5 +55,10 @@
   "browser": "./src/browser.js",
   "engines": {
     "node": ">=6.0"
+  },
+  "xo": {
+    "rules": {
+      "import/extensions": "off"
+    }
   }
 }
Index: node_modules/postgresql-client/esm/data-types/uuid-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/uuid-type.js b/node_modules/postgresql-client/esm/data-types/uuid-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/uuid-type.js	
+++ /dev/null	
@@ -1,36 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-const GUID_PATTERN = /^[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$/;
-export const UuidType = {
-    name: 'uuid',
-    oid: DataTypeOIDs.uuid,
-    jsType: 'String',
-    parseBinary(v) {
-        return (v.toString('hex', 0, 4) +
-            '-' +
-            v.toString('hex', 4, 6) +
-            '-' +
-            v.toString('hex', 6, 8) +
-            '-' +
-            v.toString('hex', 8, 10) +
-            '-' +
-            v.toString('hex', 10, 16));
-    },
-    encodeBinary(buf, v) {
-        if (!GUID_PATTERN.test(v))
-            throw new Error(`"${v}" is not a valid guid value`);
-        const b = Buffer.from(v.replace(/-/g, ''), 'hex');
-        buf.writeBuffer(b);
-    },
-    parseText(v) {
-        return v;
-    },
-    isType(v) {
-        return typeof v === 'string' && GUID_PATTERN.test(v);
-    },
-};
-export const ArrayUuidType = {
-    ...UuidType,
-    name: '_uuid',
-    oid: DataTypeOIDs._uuid,
-    elementsOID: DataTypeOIDs.uuid,
-};
Index: node_modules/postgresql-client/typings/data-types/box-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/box-type.d.ts b/node_modules/postgresql-client/typings/data-types/box-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/box-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const BoxType: DataType;
-export declare const ArrayBoxType: DataType;
Index: node_modules/body-parser/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/HISTORY.md b/node_modules/body-parser/HISTORY.md
--- a/node_modules/body-parser/HISTORY.md	
+++ b/node_modules/body-parser/HISTORY.md	
@@ -1,3 +1,10 @@
+1.20.3 / 2024-09-10
+===================
+
+  * deps: qs@6.13.0
+  * add `depth` option to customize the depth level in the parser
+  * IMPORTANT: The default `depth` level for parsing URL-encoded data is now `32` (previously was `Infinity`)
+
 1.20.2 / 2023-02-21
 ===================
 
Index: node_modules/postgresql-client/esm/util/connection-config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/connection-config.js b/node_modules/postgresql-client/esm/util/connection-config.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/connection-config.js	
+++ /dev/null	
@@ -1,57 +0,0 @@
-import merge from 'putil-merge';
-import { configFromEnv } from './config-from-env.js';
-export function getConnectionConfig(config) {
-    const cfg = configFromEnv();
-    if (typeof config === 'string') {
-        merge(cfg, parseConnectionString(config));
-    }
-    else if (typeof config === 'object') {
-        merge(cfg, config);
-    }
-    if (cfg.host) {
-        const x = parseConnectionString('' + cfg.host);
-        merge(cfg, x);
-    }
-    cfg.user = cfg.user || 'postgres';
-    cfg.database = cfg.database || 'postgres';
-    cfg.host = cfg.host || '127.0.0.1';
-    return cfg;
-}
-export function parseConnectionString(str) {
-    if (str.startsWith('/'))
-        str = 'socket:/' + str;
-    if (!str.includes('://'))
-        str = 'postgres://' + str;
-    const parsed = new URL(str);
-    const getFirst = (v) => {
-        return typeof v === 'string' ? v : Array.isArray(v) ? v[0] : '';
-    };
-    const cfg = {};
-    cfg.host = decodeURI(parsed.hostname || '');
-    if (parsed.port)
-        cfg.port = parseInt(parsed.port, 10);
-    if (parsed.protocol === 'socket:' || parsed.protocol === 'unix:') {
-        if (!cfg.host.startsWith('/'))
-            cfg.host = '/' + cfg.host;
-        cfg.host += decodeURI(parsed.pathname || '');
-        if (parsed.searchParams.get('db'))
-            cfg.database = decodeURI(getFirst(parsed.searchParams.get('db')));
-    }
-    else if (parsed.protocol === 'pg:' || parsed.protocol === 'postgres:') {
-        if (parsed.pathname)
-            cfg.database = decodeURI(parsed.pathname.substring(1));
-    }
-    if (parsed.searchParams.get('host'))
-        cfg.host = decodeURI(getFirst(parsed.searchParams.get('host')));
-    if (parsed.searchParams.get('db'))
-        cfg.database = decodeURI(getFirst(parsed.searchParams.get('db')));
-    if (parsed.searchParams.get('schema'))
-        cfg.schema = decodeURI(getFirst(parsed.searchParams.get('schema')));
-    if (parsed.searchParams.get('application_name'))
-        cfg.applicationName = decodeURI(getFirst(parsed.searchParams.get('application_name')));
-    if (parsed.username)
-        cfg.user = parsed.username;
-    if (parsed.password)
-        cfg.password = parsed.password;
-    return cfg;
-}
Index: node_modules/power-tasks/esm/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/esm/index.js b/node_modules/power-tasks/esm/index.js
--- a/node_modules/power-tasks/esm/index.js	
+++ b/node_modules/power-tasks/esm/index.js	
@@ -1,3 +1,3 @@
-export * from './task.js';
-export * from './task-queue.js';
-export * from './abort-error.js';
+export * from "./abort-error.js";
+export * from "./task.js";
+export * from "./task-queue.js";
Index: node_modules/postgresql-client/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/CHANGELOG.md b/node_modules/postgresql-client/CHANGELOG.md
--- a/node_modules/postgresql-client/CHANGELOG.md	
+++ b/node_modules/postgresql-client/CHANGELOG.md	
@@ -1,814 +1,209 @@
-# v2.11.0
-[2024-04-23]
-
-### Changes
-
-* Updated dependencies ([`9dcf2c2`](https://github.com/panates/postgresql-client/commit/9dcf2c2957621aefb0a1f9f3da66877c4d7382bf))
-* Implement TC39 Explicit Resource Management proposal ([`cd5efa4`](https://github.com/panates/postgresql-client/commit/cd5efa4377d3e7c0d9eb795d3db0fbc7a1bf2943))
-* Implement TC39 Explicit Resource Management proposal ([`d3df6f4`](https://github.com/panates/postgresql-client/commit/d3df6f496beca807ede191968806debcec631dbf))
-
-# v2.10.7
-[2024-04-22]
-
-### Changes
-
-* Added prettier formatting ([`5e157f5`](https://github.com/panates/postgresql-client/commit/5e157f5cdc145df1abc2c0eb641563638af93af9))
-* Remove developer content from the README and into CONTRIBUTING.md ([`58c2ce8`](https://github.com/panates/postgresql-client/commit/58c2ce8c3f4e643b3bb984ad73666dd5fd40d729))
-* Add basic documentation on running the test suite. Add rimraf as dependency since its referenced by the scripts. Update the lockfile. Start to prepare for proper prettier formatting ([`4ca7b54`](https://github.com/panates/postgresql-client/commit/4ca7b54c970601ee9f11839bae91ce7fb3a2ea8d))
-* Added prettier formatting ([`250673e`](https://github.com/panates/postgresql-client/commit/250673e51c840e1fdfd4f9f79db5400af70b7d64))
-* Added prettier formatting ([`289c40c`](https://github.com/panates/postgresql-client/commit/289c40c1d65da55c56d814054d38715fa48a78f9))
-* Added prettier formatting ([`9d02a3f`](https://github.com/panates/postgresql-client/commit/9d02a3f3a53f784fd7a3b917a2cef3e355638c20))
-* Expose DatabaseError ([`5f1bbd2`](https://github.com/panates/postgresql-client/commit/5f1bbd2ab2ad69a836e7a53ef92ecffcc352e46b))
-* Remove duplicated root in .editorconfig ([`a514ad5`](https://github.com/panates/postgresql-client/commit/a514ad52f09ad92ade5b83ed599ccf1832b424ea))
-* Use the README.md from master ([`ac3f7b8`](https://github.com/panates/postgresql-client/commit/ac3f7b831c4a515d2a0db74f53cb481d651a0200))
-* Added prettier formatting ([`0e0a521`](https://github.com/panates/postgresql-client/commit/0e0a521435aae1c67ceeb27f13af6cc49066c2ad))
-
-# v2.10.6
-[2024-03-14]
-
-### Changes
-
-* Updated dependencies ([`e0cf321`](https://github.com/panates/postgresql-client/commit/e0cf321f593f72580ba6dda14c104efedd8cad52))
-* Updated dependencies ([`f723f8f`](https://github.com/panates/postgresql-client/commit/f723f8fe7cc39746ba36f5ead791b78c184423aa))
-
-# v2.10.5
-[2024-01-15]
-
-### Changes
-
-* Updated dependencies ([`f7b0db8`](https://github.com/panates/postgresql-client/commit/f7b0db8701f73d482e3b2bc3128fbfb646c5f6a6))
-
-# v2.10.4
-[2024-01-12]
-
-### Changes
-
-* Updated dependencies ([`efc17f2`](https://github.com/panates/postgresql-client/commit/efc17f292bc1d24de518cc5529e8a7aa383ad641))
-
-# v2.10.3
-[2024-01-12]
-
-### Changes
-
-* Updated dependencies ([`b1ec82a`](https://github.com/panates/postgresql-client/commit/b1ec82a3967dfa789583248c2d9096c40c333601))
-* Minor typing change ([`f036aa8`](https://github.com/panates/postgresql-client/commit/f036aa833d8b973fd5e1cc8d229cac4b199a5c48))
-
-# v2.10.2
-[2024-01-08]
-
-### Changes
-
-* Updated dependencies ([`33a8272`](https://github.com/panates/postgresql-client/commit/33a8272de6c51dbf29ea658a6d2a6436555513e1))
-
-# v2.10.1
-[2023-11-09]
-
-### Changes
-
-* Fixed: Some times server response invalid message to prepare statement message. ([`bb7a0c8`](https://github.com/panates/postgresql-client/commit/bb7a0c8e2074120a2062e585183480b52677756e))
-
-# v2.10.0
-[2023-11-09]
-
-### Changes
-
-* Fixed: Error stack do not show caller function. ([`08a1a8f`](https://github.com/panates/postgresql-client/commit/08a1a8f4141b0066ae084de4f2a31d9d7e1bd4b9))
-* Improved error message handling for more understandable to humans. ([`d9bbcb0`](https://github.com/panates/postgresql-client/commit/d9bbcb0b1c10ab11816bc907d2b62977831d6082))
-
-# v2.9.1
-[2023-10-03]
-
-### Changes
-
-* Added int2Vector data type with binary protocol ([`94a9a3b`](https://github.com/panates/postgresql-client/commit/94a9a3b3a9e10ce7bdbce132c9195826ecc7aec1))
-
-# v2.9.0
-[2023-10-03]
-
-### Changes
-
-* Added int2Vector data type with binary protocol ([`55bd87e`](https://github.com/panates/postgresql-client/commit/55bd87e38a2ed1787957c1066ba51857d6c97c5d))
-* Support int2 and oid vector types ([`ce27006`](https://github.com/panates/postgresql-client/commit/ce27006bb7441d004fd251bd6af29c4e99836b01))
-* Add OID for tid array ([`d99e3ee`](https://github.com/panates/postgresql-client/commit/d99e3ee1e7fc768931553240adb556f003428ebd))
-
-# v2.8.1
-[2023-10-03]
-
-### Changes
-
-* Updated dependencies ([`51998d4`](https://github.com/panates/postgresql-client/commit/51998d496cc84d721bf267ba29e8dda3c520fea7))
-* Updated dependencies ([`7faed1a`](https://github.com/panates/postgresql-client/commit/7faed1a68149b82399d951df6f0e0f1c54cd1798))
-* Add ability to configure buffer size ([`30d18c6`](https://github.com/panates/postgresql-client/commit/30d18c6afeb3b973eaa640f772ed791ec0707bb0))
-* Minor fix for logging ([`1af9e94`](https://github.com/panates/postgresql-client/commit/1af9e946018e9605882c13a85120793a65c1fada))
-
-# v2.8.0
-[2023-09-24]
-
-### Changes
-
-* Add ability to configure buffer size ([`34d822a`](https://github.com/panates/postgresql-client/commit/34d822a7b3a302d3a8b4b406586c3ce123cac97b))
-* Updated config ([`8792c63`](https://github.com/panates/postgresql-client/commit/8792c631eff7798edb1a76524acfce49e28d7593))
-* Updated node versions ([`7fb18dc`](https://github.com/panates/postgresql-client/commit/7fb18dc0f208ec609ebddd84d0a3ea5db4c8534a))
-* Updated config ([`31dab8b`](https://github.com/panates/postgresql-client/commit/31dab8b08ac5b6d5977bb89d47de60e964e09b52))
-* Updated node versions ([`17692ca`](https://github.com/panates/postgresql-client/commit/17692ca11cf4e440afe53b8a1bcd96041b36f352))
-* Updated config ([`9c5f20c`](https://github.com/panates/postgresql-client/commit/9c5f20c8e0a83633eaa66dd438d4cee3d93846a7))
-* Updated node versions ([`49c6eac`](https://github.com/panates/postgresql-client/commit/49c6eacd56815f969f0aabce3b41c67369e10d27))
-
-# v2.7.2
-[2023-09-10]
+# 2.13.0
+[2024-07-22]
 
 ### Fixes
 
-* Fix: Make concurrency explicit, prevents power-tasks from invoking os.cpus ([`20038b0`](https://github.com/panates/postgresql-client/commit/20038b034eabf35cdf57eb0c7c72097f66d6b4c4))
-
-### Changes
-
-* Updated badge url ([`b9335ed`](https://github.com/panates/postgresql-client/commit/b9335ed40a8cc4fadee4fe90e3287a48f0978cf3))
-
-# v2.7.1
-[2023-08-03]
-
-### Changes
-
-* Updated dependencies ([`114ffb9`](https://github.com/panates/postgresql-client/commit/114ffb94e38dfc96fcc3c57d95807036f0c50045))
-* Fallback to "unknown" IOD, if can't determine data type ([`b0807e3`](https://github.com/panates/postgresql-client/commit/b0807e38af758a29c5a1fb5db4af24dd1f5c9dfb))
-* Export SmartBuffer fully ([`8fca283`](https://github.com/panates/postgresql-client/commit/8fca283bc3fa9be0653297f858e1ede652456289))
-
-# v2.7.0
-[2023-08-01]
-
-### Changes
-
-* Restructure files according to current Panates standards ([`58875b3`](https://github.com/panates/postgresql-client/commit/58875b364c58b8b5e5ddac55373dd70ad5639bd0))
-* Renames DatabaseConnectionParams.onErrorRollback to rollbackOnError ([`dc50fb1`](https://github.com/panates/postgresql-client/commit/dc50fb1ee3b9975f188af60b7f3fed5f8d089fcc))
-
-# v2.6.1
-[2023-08-01]
-
-### Changes
-
-* Now DataTypeMap.determine method lookup for data-types in reverse order. So last registered data-type returns first. ([`f2a20eb`](https://github.com/panates/postgresql-client/commit/f2a20eb9a0eba5ebfd3e8f26d427469d71b1c041))
-* Now DataTypeMap.determine method lookup for data-types in reverse order. So last registered data-type returns first. ([`0f8cbc8`](https://github.com/panates/postgresql-client/commit/0f8cbc809c24ca712e94ab21d2c2624e35a8b059))
-* Now DataTypeMap.determine method lookup for data-types in reverse order. So last registered data-type returns first. ([`e1918c3`](https://github.com/panates/postgresql-client/commit/e1918c3d9bd2cea6a084474d987df18b62b8b239))
-
-# v2.6.0
-[2023-08-01]
-
-### Changes
-
-* Not DataTypeMap.determine method lookup for data-types in reverse order. So last registered data-type returns first. ([`759ff85`](https://github.com/panates/postgresql-client/commit/759ff85ceaf0c5d119656b6b61d6450420c19fbc))
-* Fixed typing for new eslint rules ([`95f3914`](https://github.com/panates/postgresql-client/commit/95f3914f61d4883b68d4b131f6200b08fc8e2478))
-* Fixed typing for new eslint rules ([`f6e0d11`](https://github.com/panates/postgresql-client/commit/f6e0d11041616ee243a95062a4e9d581d5406d62))
-
-# v2.5.10
-[2023-07-26]
-
-### Changes
-
-* Updated dependencies ([`2a21190`](https://github.com/panates/postgresql-client/commit/2a21190d2db2f70a1bbffb6cc77a8d9dc62b7636))
-* Added code of conduct document ([`9a64826`](https://github.com/panates/postgresql-client/commit/9a6482677ba23fb6ca850f5357a7e169218c7efd))
-* Updated config ([`9655d4f`](https://github.com/panates/postgresql-client/commit/9655d4f222af21b889a7a9f5070530f8ea6bcd95))
-
-# v2.5.9
-[2023-05-17]
-
-### Changes
-
-* Fixed missing files."typings" ([`eabb616`](https://github.com/panates/postgresql-client/commit/eabb616a54831ca245d6157452737a6484167d0b))
-
-# v2.5.8
-[2023-05-17]
-
-### Changes
-
-* Optimized build ([`e8305f9`](https://github.com/panates/postgresql-client/commit/e8305f9da79a64484d5edc2cd0fe43c4ff7b2fa2))
-
-# v2.5.7
-[2023-05-16]
-
-### Changes
-
-* Optimized build ([`17d029b`](https://github.com/panates/postgresql-client/commit/17d029be5d799bab2cf49ba5258b978b20c0d52f))
-
-# v2.5.6
-[2023-05-16]
-
-### Changes
-
-* Removed vulnerable "debug" package ([`019b3f4`](https://github.com/panates/postgresql-client/commit/019b3f48955c62a9c764462b16cd52be8cf22ae2))
-* Updated dependencies ([`afce5f7`](https://github.com/panates/postgresql-client/commit/afce5f735d241869e6ae937cb67b6378e70fb6d0))
-* Fixed examples for cursor usage ([`5971341`](https://github.com/panates/postgresql-client/commit/5971341edf1c7ce363ddcb3adb97b2491bf7714d))
-* Updated config ([`6edd12e`](https://github.com/panates/postgresql-client/commit/6edd12e902ac3f5f2f4784626edce151bf5eb569))
-
-# v2.5.5
-[2023-02-22]
-
-### Changes
-
-* Added auto changelog generation ([`0c7fc22`](https://github.com/panates/postgresql-client/commit/0c7fc22f299363a8425835c11d4f6f4eeb64a9ea))
-* Updated examples ([`94e092a`](https://github.com/panates/postgresql-client/commit/94e092ade4e664b040bb85517eac4c61f8baeee4))
-* Added auto changelog generation ([`1ed1194`](https://github.com/panates/postgresql-client/commit/1ed119481ee3a5ccdd841691812f6042fab2cb5a))
-
-# v2.5.3
-[2023-02-20]
-
-### Changes
-
-* Updated dependencies ([`b278e88`](https://github.com/panates/postgresql-client/commit/b278e88a2cfdcf9467d20b3d9257607eddb731e1))
-* Updated dependencies ([`b8501a2`](https://github.com/panates/postgresql-client/commit/b8501a2e5a73f0449de3e5373a1b559455af1051))
-
-# v2.5.2
-[2022-12-02]
-
-### Changes
-
-* Updated dependencies ([`20abfde`](https://github.com/panates/postgresql-client/commit/20abfdedb3dd3fa213f6cb66e00c132607deccb9))
-
-# v2.5.1
-[2022-10-05]
-
-### Changes
-
-* Updated documentation ([`38093f6`](https://github.com/panates/postgresql-client/commit/38093f67924eaf7a3710e08ed5bc91f84fd3920f))
-* Added LISTEN/NOTIFY feature ([`73cb33b`](https://github.com/panates/postgresql-client/commit/73cb33b41d0bc3515e71b5e0ff7ace68b9f4720b))
-
-# v2.5.0
-[2022-10-04]
-
-### Changes
-
-* Added LISTEN/NOTIFY feature ([`f0ac754`](https://github.com/panates/postgresql-client/commit/f0ac754657da2f95977da6081f8c4265e83ba1b5))
-
-# v2.4.1
-[2022-09-23]
+* Fix: Make concurrency explicit, prevents power-tasks from invoking os.cpus ([`20038b0`](https://github.com/erayhanoglu/postgresql-client/commit/20038b034eabf35cdf57eb0c7c72097f66d6b4c4))
 
 ### Changes
 
-* Updated dependencies ([`bebcd28`](https://github.com/panates/postgresql-client/commit/bebcd283a045720f51a74f51e8258492af4c3790))
-
-# v2.4.0
-[2022-09-22]
-
-### Changes
-
-* Fixed exports for multi module support ([`e40dabe`](https://github.com/panates/postgresql-client/commit/e40dabe8064dc89f3a468b00e5c623f4277d68c1))
-
-# v2.3.0
-[2022-09-17]
-
-### Changes
-
-* Updated lightning-pool to v4.0 ([`4ae3adf`](https://github.com/panates/postgresql-client/commit/4ae3adf1e4600a7977c24c4d6903193b97e908da))
-
-# v2.2.0
-[2022-09-17]
-
-### Changes
-
-* Updated eslint and jest ([`229d394`](https://github.com/panates/postgresql-client/commit/229d394b3a956844c0a36665fa44edf3acda9bd3))
-
-# v2.1.5
-[2022-08-29]
-
-### Changes
-
-* Updated eslint config ([`5ad54ee`](https://github.com/panates/postgresql-client/commit/5ad54eeea34cb87d744a405afe21d15eb7357bd7))
-
-# v2.1.4
-[2022-07-06]
-
-### Changes
-
-* Updated dependencies ([`15ad62c`](https://github.com/panates/postgresql-client/commit/15ad62c53dee3562576537da36325bd7b69ae144))
-* Updated readme ([`145afed`](https://github.com/panates/postgresql-client/commit/145afed77f278648d48ca8b0d2aaf44e5887e07a))
-* Fixed typing ([`70a7076`](https://github.com/panates/postgresql-client/commit/70a707672caf735d412cb0debe9661a69b8d688f))
-
-# v2.1.3
-[2022-06-28]
-
-### Changes
-
-* Updated dependencies ([`8cef3fa`](https://github.com/panates/postgresql-client/commit/8cef3fafce9e4051ebad350494f78417f7846361))
-
-# v2.1.2
-[2022-06-24]
-
-### Changes
-
-* Updated dependencies ([`ddeb02c`](https://github.com/panates/postgresql-client/commit/ddeb02c43c12994eab31b100aa8f25c949172565))
-
-# v2.1.1
-[2022-06-21]
-
-### Changes
-
-* Added prettier code style ([`c0b732e`](https://github.com/panates/postgresql-client/commit/c0b732e65400e5be844f157f5710694e1d9ebf1b))
-* Moved prettier to devDependencies ([`eecec11`](https://github.com/panates/postgresql-client/commit/eecec113f5d0752a90755952ad044b29f6ddbbd8))
-
-# v2.1.0
-[2022-06-21]
-
-### Changes
-
-* Added .js extensions to import statements for esm module support ([`dd884f1`](https://github.com/panates/postgresql-client/commit/dd884f1258abb47716a82edf6d2b945b89ef3160))
-* Moved from putil-taskqueue to power-tasks ([`7782551`](https://github.com/panates/postgresql-client/commit/7782551725f3441d590c6802c9812d38704d89a6))
-* Added husky git hooks ([`d61fc2a`](https://github.com/panates/postgresql-client/commit/d61fc2a0e540aad420f9b5ff4887cb6d0c609596))
-
-# v2.0.4
-[2022-06-17]
-
-### Changes
-
-* Update dependencies ([`4b34c8b`](https://github.com/panates/postgresql-client/commit/4b34c8be303062b2ef419bbc77e1d802b34ab4d2))
-
-# v2.0.3
-[2022-05-28]
-
-### Changes
-
-* Update dependencies ([`b2ee542`](https://github.com/panates/postgresql-client/commit/b2ee5423c58afd967eb90598977fa3bdc897920b))
-
-# v2.0.2
-[2022-05-11]
-
-### Changes
-
-* Added json casting for object values ([`b95766a`](https://github.com/panates/postgresql-client/commit/b95766a3f6362fb7dfa5c453df8fc76bcf46a295))
-
-# v2.0.1
-[2022-05-08]
-
-### Changes
-
-* Updated dependencies and documentation ([`f7f93d6`](https://github.com/panates/postgresql-client/commit/f7f93d6b3f869ef9f7517983f5489931c6c9b10d))
-* Updated config ([`9fa5d12`](https://github.com/panates/postgresql-client/commit/9fa5d12aac07842f1f9f4f0ff51a31dbe674b423))
-* Updated dependencies and documentation ([`120e7b5`](https://github.com/panates/postgresql-client/commit/120e7b505f86c10ede34df1f8291c77b8be66e10))
-* Fixed cover script ([`ff3dbef`](https://github.com/panates/postgresql-client/commit/ff3dbef2da974d08558475a9550778d70b8db4cc))
-* Updated config ([`a18fe16`](https://github.com/panates/postgresql-client/commit/a18fe169a79544ecb9e00b2186aa7f64b52cdb24))
-
-# v2.0.0
-[2022-03-03]
-
-### Changes
-
-* Added jsonb data type support ([`9b77962`](https://github.com/panates/postgresql-client/commit/9b77962d892887798def53f5b58ebb5c9573e0e0))
-* Added ESM module support ([`97857e3`](https://github.com/panates/postgresql-client/commit/97857e3925099e62d52d3dd6edf076015579fa95))
-* Updated dependencies ([`f8be711`](https://github.com/panates/postgresql-client/commit/f8be711c067233c41bd33d595b8630c6cbda1048))
-* Update issue templates ([`f84ec38`](https://github.com/panates/postgresql-client/commit/f84ec389e17925a41c1f70da4aba606173ddd90d))
-* Updated dependencies ([`b43ae89`](https://github.com/panates/postgresql-client/commit/b43ae89c616615b622a462d2a0c112001943856a))
-* Added ESM module support ([`a710889`](https://github.com/panates/postgresql-client/commit/a7108898204f7f464927ba56a84f590bc42f7fa3))
-
-# v1.21.6
-[2022-02-22]
-
-### Changes
-
-* Updated dependencies ([`b8f05e2`](https://github.com/panates/postgresql-client/commit/b8f05e2fd1d1600461373ccc51a131e4ff772b34))
-
-# v1.21.5
-[2022-01-03]
-
-### Changes
-
-* Updated dependencies ([`66da42d`](https://github.com/panates/postgresql-client/commit/66da42d1db31aa4009467366c1b7285fbef6cf54))
-
-# v1.21.4
-[2021-12-13]
-
-### Changes
-
-* Updated readme ([`d5af7cd`](https://github.com/panates/postgresql-client/commit/d5af7cdf315d9b549df79d05c077a0037b03509a))
-
-# v1.21.3
-[2021-12-13]
-
-### Changes
-
-* Updated dependencies ([`20fc14c`](https://github.com/panates/postgresql-client/commit/20fc14ced4e5a3158d91faf7158dc81d7ca650e6))
-
-# v1.21.2
-[2021-10-12]
-
-### Changes
-
-* Updated dependencies ([`80474a3`](https://github.com/panates/postgresql-client/commit/80474a397cda00bce583268f05f57bd31ea9c2b2))
-* Updated dependencies ([`68cdfed`](https://github.com/panates/postgresql-client/commit/68cdfed3966bdc9d4c88c9cc57053197cfc47cd1))
-
-# v1.21.1
-[2021-10-02]
-
-### Changes
-
-* Updated dependencies ([`5b4638b`](https://github.com/panates/postgresql-client/commit/5b4638b198c6d68a1cf8f601c9e15965990bb917))
-* Fixed: float numbers are recognized as bigint ([`1c19df4`](https://github.com/panates/postgresql-client/commit/1c19df4a6054af51ac49ce22320167072c81c689))
-
-# v1.21.0
-[2021-09-23]
-
-### Changes
-
-* + Added releaseSavepoint() method ([`9fc61c9`](https://github.com/panates/postgresql-client/commit/9fc61c9b5fe5215239bfb6374d7661cb11b7b142))
-
-# v1.20.0
-[2021-09-21]
-
-# v1.19.0
-[2021-09-21]
-
-### Changes
-
-* + Added onErrorRollback functionality for better transaction management ([`f92b65b`](https://github.com/panates/postgresql-client/commit/f92b65b0422e6861edf728dcbd1504be9bd01e34))
-
-# v1.18.4
-[2021-09-14]
-
-### Changes
-
-* Fixed: Needs type casting of uuid[] types ([`b6b1b45`](https://github.com/panates/postgresql-client/commit/b6b1b4578346c49d00922a104ca6c251b0dffed6))
-
-# v1.18.3
-[2021-09-08]
-
-### Changes
-
-* Fixed invalid constructing of DatabaseError ([`e904539`](https://github.com/panates/postgresql-client/commit/e90453959b570ad2206415455c8f2b844e69ce85))
-
-# v1.18.2
-[2021-09-07]
-
-### Changes
-
-* Updated dependencies ([`27d747f`](https://github.com/panates/postgresql-client/commit/27d747f2f77ec6da677bda3ce2dff362671d985a))
-
-# v1.18.1
-[2021-08-11]
-
-### Changes
-
-* Fixed database error properties exists in parent msg object. ([`6d5ad49`](https://github.com/panates/postgresql-client/commit/6d5ad49cea90b272419d532262c8a9e87070ac51))
-
-# v1.18.0
-[2021-08-01]
-
-# v1.17.0
-[2021-08-01]
-
-### Changes
-
-* Updated dependencies ([`5e6a902`](https://github.com/panates/postgresql-client/commit/5e6a902ae7cac3da89cf887f5b56d4d179504c27))
-* Added lineNr, colNr and line properties to DatabaseError ([`950bfb0`](https://github.com/panates/postgresql-client/commit/950bfb0a945a2662150bc2cb4a9be6ead29e2762))
-
-# v1.16.7
-[2021-07-03]
-
-### Changes
-
-* Fixed: throws "operator does not exist: integer = json" if bind param is null or undefined ([`f57bd9e`](https://github.com/panates/postgresql-client/commit/f57bd9ec0ec813ac96ef29e51d032cad10113129))
-
-# v1.16.6
-[2021-07-03]
-
-### Changes
-
-* Updated dependencies ([`7298b3c`](https://github.com/panates/postgresql-client/commit/7298b3c589257281963c351c5b5d18492fe0eaee))
-* Update README.md ([`5bac71d`](https://github.com/panates/postgresql-client/commit/5bac71d5c415128a02c01885fc9e0038ac21d4d5))
-
-# v1.16.5
-[2021-04-19]
-
-### Changes
-
-* Updated dependencies ([`c7e0bb0`](https://github.com/panates/postgresql-client/commit/c7e0bb0e33c5b3e09cdf753a5b496833503820ee))
-* Updated readme ([`efbc574`](https://github.com/panates/postgresql-client/commit/efbc57427b8d7c67aef412cd2433c660c1dac0a5))
-
-# v1.16.4
-[2021-04-08]
-
-### Changes
-
-* Updated dependencies ([`8e916c6`](https://github.com/panates/postgresql-client/commit/8e916c605fc565b89a710d226161af1eeee2be33))
-* Detect time format strings ([`14f8871`](https://github.com/panates/postgresql-client/commit/14f88711b29824f720233ae051709e2f3fbabaf8))
-
-# v1.16.3
-[2021-04-07]
-
-### Changes
-
-* Updated doc ([`54b72be`](https://github.com/panates/postgresql-client/commit/54b72beb898012daa16c99f60a98fbe98520ed18))
-
-# v1.16.2
-[2021-04-07]
-
-### Changes
-
-* Fixed time data type issue ([`bf80893`](https://github.com/panates/postgresql-client/commit/bf80893d628ed9ec14d448b7194ab89028b00463))
-* Added missed type mappings ([`f45124a`](https://github.com/panates/postgresql-client/commit/f45124aa900c82318bdd39d1770ddeaa0df62acc))
-
-# v1.16.1
-[2021-04-06]
-
-# v1.16.0
-[2021-04-06]
-
-### Changes
-
-* Added Time data type ([`127fb81`](https://github.com/panates/postgresql-client/commit/127fb8174c65215738e4450c97dd438f2f4e53a6))
-
-# v1.15.1
-[2021-03-19]
-
-### Changes
-
-* Use default config ([`6f3e692`](https://github.com/panates/postgresql-client/commit/6f3e692acf7a3f487e3056bc6a964032b50a0661))
-
-# v1.15.0
-[2021-03-07]
-
-### Changes
-
-* Added "name" (OID:19) data type to data type map ([`6f56e2d`](https://github.com/panates/postgresql-client/commit/6f56e2d00446dd9634eb50ff354dae2c983bceda))
-
-# v1.14.2
-[2021-03-05]
-
-### Changes
-
-* Dont add COMMIT to execute sql if not in transaction. ([`8f57c30`](https://github.com/panates/postgresql-client/commit/8f57c30ea4e45b014a883644a5d4817bc25485be))
-
-# v1.14.1
-[2021-02-16]
-
-### Changes
-
-* Now can detect uuid value when binding parameters ([`72a4ba0`](https://github.com/panates/postgresql-client/commit/72a4ba0e58cdd93ab70cc2d6edf1bfc473225ca3))
-
-# v1.14.0
-[2021-02-15]
-
-### Changes
-
-* Added support for UUID data type ([`d3cfbfd`](https://github.com/panates/postgresql-client/commit/d3cfbfd24e4a5b8b1b36f9842d9a9384ee50e58a))
-
-# v1.13.2
-[2021-01-31]
-
-### Changes
-
-* Updated dependencies ([`ffddee3`](https://github.com/panates/postgresql-client/commit/ffddee39210236043909485eb478a283441a2702))
-
-# v1.13.1
-[2021-01-30]
-
-# v1.13.0
-[2021-01-28]
-
-### Changes
-
-* Added fetchAsString option for Date, Timestamp and TimestampTz ([`1d77cd1`](https://github.com/panates/postgresql-client/commit/1d77cd1c9ef04d0fa90b5729e376be4bc5cfe8b6))
-
-# v1.12.1
-[2021-01-28]
-
-# v1.12.0
-[2021-01-28]
-
-### Changes
-
-* Added fetchAsString option for Date, Timestamp and TimestampTz ([`18fa21c`](https://github.com/panates/postgresql-client/commit/18fa21c9e7885fde570901afbcb9e9d4fffaccb8))
-* Set test schema ([`72b3dcc`](https://github.com/panates/postgresql-client/commit/72b3dccbdea0b0352faec20e5581984780567a68))
-* Set test schema ([`ec18c02`](https://github.com/panates/postgresql-client/commit/ec18c02bb6964de9a42300002e3af0b6152de466))
-
-# v1.11.4
-[2020-12-24]
-
-### Changes
-
-* Check if fetchCount value between unsigned inter range ([`cc35ee3`](https://github.com/panates/postgresql-client/commit/cc35ee368e1a78b16b030ba259f921dca0287f89))
-
-# v1.11.3
-[2020-12-24]
-
-# v1.11.2
-[2020-12-24]
-
-### Changes
-
-* Fixed: Does not determine data type in register order. ([`e27ea7a`](https://github.com/panates/postgresql-client/commit/e27ea7a372fb5fbf1ccb3ede7b292bd58471d22f))
-
-# v1.11.1
-[2020-12-10]
-
-### Changes
-
-* Calling fetch of a closed cursor will not throw anymore ([`bacb630`](https://github.com/panates/postgresql-client/commit/bacb63002121b5e0ee3c3765065f60e4de3496ba))
-
-# v1.11.0
-[2020-12-10]
-
-### Changes
-
-* Updated dependencies ([`f1e23d4`](https://github.com/panates/postgresql-client/commit/f1e23d41ce75fb5ebd6ce3fb834df0d2ff5c9e10))
-* Automatically convert BigInt numbers to formal number if value in safe integer range ([`110c544`](https://github.com/panates/postgresql-client/commit/110c544809b30f8be83c0893bc58cddce08dbae2))
-* Updated dependencies ([`4216ebd`](https://github.com/panates/postgresql-client/commit/4216ebd064b37530a8bb9d8f810c87aadc14b7a6))
-
-# v1.10.1
-[2020-12-09]
-
-### Changes
-
-* Fixed: Wrong message sending when parameters contains null values ([`59e5bf4`](https://github.com/panates/postgresql-client/commit/59e5bf4b4084c92dd4dbf8f7fc787f9d11709efa))
-
-# v1.10.0
-[2020-12-05]
-
-### Changes
-
-* Added "numeric" data type ([`a0a6068`](https://github.com/panates/postgresql-client/commit/a0a606838a4e3852298cc97c6ee704dd08ec36c6))
-* Added "numeric" data type ([`d78a6fe`](https://github.com/panates/postgresql-client/commit/d78a6fe55433aab90e2a00f7bc5f052eca69b2b3))
-
-# v1.9.2
-[2020-11-25]
-
-### Changes
-
-* Added "debug" package ([`f365962`](https://github.com/panates/postgresql-client/commit/f36596201bb455e7b6d5ed7460d7c72864b36b0f))
-
-# v1.9.1
-[2020-11-24]
-
-### Changes
-
-* Added "debug" package ([`618a239`](https://github.com/panates/postgresql-client/commit/618a239f4e09643460146dbffad77011768f78a9))
-* Added "debug" package ([`12c0001`](https://github.com/panates/postgresql-client/commit/12c00012a29f5365472d108e3b83cfdfa128c96b))
-
-# v1.9.0
-[2020-11-20]
-
-### Changes
-
-* Changed ConnectionConfiguration.searchPath to "schema" ([`e6df86b`](https://github.com/panates/postgresql-client/commit/e6df86b85384608cbfbb8ab5f96446dbfe5540bf))
-* Changed ConnectionConfiguration.searchPath to "schema" ([`1fd8b7a`](https://github.com/panates/postgresql-client/commit/1fd8b7ade85a61f5eb524054cef52d97e70f8635))
-
-# v1.8.1
-[2020-11-20]
-
-### Changes
-
-* Added rowType to all result interfaces ([`edfaec6`](https://github.com/panates/postgresql-client/commit/edfaec69751137ab488ac4af2cf97582059b7e45))
-
-# v1.8.0
-[2020-11-20]
-
-### Changes
-
-* Added rowType to all result interfaces ([`4bc26a7`](https://github.com/panates/postgresql-client/commit/4bc26a7d1edd9405c1fd5f06eff6e60d4d11631e))
-
-# v1.7.1
-[2020-11-20]
-
-# v1.7.0
-[2020-11-20]
-
-### Changes
-
-* Linted for code quality ([`73dad79`](https://github.com/panates/postgresql-client/commit/73dad793b7a2dfeed7fcdeeb8d7736ca90247af1))
-* Added rowType getter to Cursor ([`045a2a2`](https://github.com/panates/postgresql-client/commit/045a2a22e1c8d0519399c3bf70013adaf2c9e32d))
-
-# v1.6.0
-[2020-11-20]
-
-### Changes
-
-* Improved auto-commit operations by detecting sql is a transaction command ([`ab8e698`](https://github.com/panates/postgresql-client/commit/ab8e698f205dfe81b81b30fe7a7520db2430006c))
-
-# v1.5.1
-[2020-11-19]
-
-### Changes
-
-* Fixex: query() does not return fields property if cursor option is true ([`6acec29`](https://github.com/panates/postgresql-client/commit/6acec296e846c57cd3a38f1b26f58641ba688d10))
-
-# v1.5.0
-[2020-11-19]
-
-### Changes
-
-* Added autoCommit option for connection.execute() and connection.query() methods. ([`d75e939`](https://github.com/panates/postgresql-client/commit/d75e939cf79bc8c82879d3b46585a5d3c81d0391))
-
-# v1.4.0
-[2020-11-19]
-
-### Changes
-
-* Fixed: Missed sendSyncMessage after parse query. ([`d8a906e`](https://github.com/panates/postgresql-client/commit/d8a906e385225b76dfec9291584099a1361fd732))
-* Fixed: Missed sendSyncMessage ([`356af56`](https://github.com/panates/postgresql-client/commit/356af563c10735a4bcec6651897eadbfa6566314))
-
-# v1.3.1
-[2020-11-19]
-
-### Changes
-
-* Updated dependencies ([`c413990`](https://github.com/panates/postgresql-client/commit/c4139903b2d8415a0ed4deb871b820158ab0f923))
-
-# v1.3.0
-[2020-11-19]
-
-### Changes
-
-* Updated lightning-pool to new major version 3.0 ([`1ae9f50`](https://github.com/panates/postgresql-client/commit/1ae9f50549ed4863c37b45022962e463a9a69110))
-* Updated roadmap ([`b0605e3`](https://github.com/panates/postgresql-client/commit/b0605e3c487c587256991012395c07e7402b32dd))
-
-# v1.2.3
-[2020-11-17]
-
-### Changes
-
-* Added sessionParameters getter ([`4599db8`](https://github.com/panates/postgresql-client/commit/4599db832beca8f3a741e1a690932818edd915e9))
-
-# v1.2.2
-[2020-11-17]
-
-### Changes
-
-* Added isClosed property ([`c9b54f7`](https://github.com/panates/postgresql-client/commit/c9b54f7b19bf0270beff5947b02efac9ff4a12a9))
-* Added isClosed property ([`f2b3791`](https://github.com/panates/postgresql-client/commit/f2b3791464fcc3d3a58fe317955c609aa0d2b1e6))
-
-# v1.2.1
-[2020-11-17]
-
-### Changes
-
-* Major changes for FieldInfo ([`32d2e08`](https://github.com/panates/postgresql-client/commit/32d2e0887a9bc49bbf00a91c5f850908dd9ee3a5))
-* Expose Cursor class ([`1dc2de1`](https://github.com/panates/postgresql-client/commit/1dc2de192cc02ed5ba392d974066295a7c0f5f2a))
-
-# v1.2.0
-[2020-11-17]
-
-### Changes
-
-* Major changes for FieldInfo ([`982d8ec`](https://github.com/panates/postgresql-client/commit/982d8ec35c9f0b9e7a6fda2972d10c6890cfcfb8))
-
-# v1.1.1
-[2020-11-16]
-
-### Changes
-
-* Added dataTypeName to FieldInfo ([`6a9227d`](https://github.com/panates/postgresql-client/commit/6a9227de01bf0cccb28f3a8804c5dab526395700))
-
-# v1.1.0
-[2020-11-16]
-
-### Changes
-
-* Added elementDataTypeId and mappedType properties to FieldInfo ([`b554f07`](https://github.com/panates/postgresql-client/commit/b554f07421bfd3375aae90ff3212e5c84e93976c))
-
-# v1.0.5
-[2020-11-16]
-
-### Changes
-
-* Added fetch() method to cursor ([`4c98b80`](https://github.com/panates/postgresql-client/commit/4c98b807f578bbfc3cff257ebffec86abb67797b))
-* Added ability to get processId and secretKey ([`95bc84f`](https://github.com/panates/postgresql-client/commit/95bc84f9a4f3ce3e3c33b09a13cc79ff2f43ff85))
-
-# v1.0.4
-[2020-11-16]
-
-### Changes
-
-* Added ability to get processId and secretKey ([`acaf2d5`](https://github.com/panates/postgresql-client/commit/acaf2d55ab5143c9b0f0651118f2806a2c42ab2e))
-
-# v1.0.3
-[2020-11-16]
-
-### Changes
-
-* Fixed wrong repository address ([`ae3b149`](https://github.com/panates/postgresql-client/commit/ae3b149c31d35eda8b39fb1428c6cfde752890c9))
-
-# v1.0.2
-[2020-11-16]
-
-### Changes
-
-* Test fixed ([`0754ee8`](https://github.com/panates/postgresql-client/commit/0754ee845ef1cb5c61ed10f9f6fd89e9e8f60d14))
-* DOCUMENTATION.md is missing in files property ([`2d24c5f`](https://github.com/panates/postgresql-client/commit/2d24c5f4471f5390548d2377d429b9e1ec567032))
-
-# v1.0.1
-[2020-11-16]
-
-### Changes
-
-* ScriptExecutor test passing ([`79ee783`](https://github.com/panates/postgresql-client/commit/79ee783d877617713f5689c5b639a90f9bc6e8b5))
-* Initial commit ([`66713fe`](https://github.com/panates/postgresql-client/commit/66713fe1f68c32817bc8c0054126a5019ef90ec7))
-* Beta 1 commit ([`86195d8`](https://github.com/panates/postgresql-client/commit/86195d8446673be6da4b0706fff70d77bd607d13))
-* Data types implementation and tests done ([`6ba0ed5`](https://github.com/panates/postgresql-client/commit/6ba0ed545406d5d680175e9958316b0f1c0bb159))
-* Added int64 support for node&lt;12 ([`8637e98`](https://github.com/panates/postgresql-client/commit/8637e983ae3b56202edb12fd896344c0a1186e0d))
-* Beta 2 commit ([`17d3eb6`](https://github.com/panates/postgresql-client/commit/17d3eb621529a68fddc981d7b7521df80870d2f1))
-* Implemented extended query ([`7dea1f0`](https://github.com/panates/postgresql-client/commit/7dea1f0516a2f64709e9eaa824d8ce5d2593c32a))
-* 1.0 stable ([`df5c83e`](https://github.com/panates/postgresql-client/commit/df5c83e4e1d213355a1b0578c201b2992a066192))
-* Added house keeping ability to SmartBuffer ([`efc4fff`](https://github.com/panates/postgresql-client/commit/efc4fff19a5cc8b832e4f686d8d60a60531937f2))
-* Beta 1 commit ([`d6197dd`](https://github.com/panates/postgresql-client/commit/d6197ddda5c2f53a4c31783ebbd42de09e59a26b))
-* Updated travis url ([`3e3b661`](https://github.com/panates/postgresql-client/commit/3e3b66130c522df939dcc267939145ba64bec45c))
-* Initial commit ([`441d590`](https://github.com/panates/postgresql-client/commit/441d590b64a69085d792ede37a8d7c79591a29e7))
-* Added int64 support for node&lt;12 ([`bbac2f2`](https://github.com/panates/postgresql-client/commit/bbac2f2a0210171028011ce172d5759788fc4fcf))
-* Beta 1 commit ([`e68b3d8`](https://github.com/panates/postgresql-client/commit/e68b3d8df2a05bd8efa06975d3d53b9f65e5cd0e))
-* Implemented extended query ([`167e989`](https://github.com/panates/postgresql-client/commit/167e9892d105a0f14b41b4ef660d9c72acc4a900))
+* ScriptExecutor test passing ([`79ee783`](https://github.com/erayhanoglu/postgresql-client/commit/79ee783d877617713f5689c5b639a90f9bc6e8b5))
+* Added jsonb data type support ([`9b77962`](https://github.com/erayhanoglu/postgresql-client/commit/9b77962d892887798def53f5b58ebb5c9573e0e0))
+* Added .js extensions to import statements for esm module support ([`dd884f1`](https://github.com/erayhanoglu/postgresql-client/commit/dd884f1258abb47716a82edf6d2b945b89ef3160))
+* Added prettier code style ([`c0b732e`](https://github.com/erayhanoglu/postgresql-client/commit/c0b732e65400e5be844f157f5710694e1d9ebf1b))
+* Updated dependencies ([`b278e88`](https://github.com/erayhanoglu/postgresql-client/commit/b278e88a2cfdcf9467d20b3d9257607eddb731e1))
+* Initial commit ([`66713fe`](https://github.com/erayhanoglu/postgresql-client/commit/66713fe1f68c32817bc8c0054126a5019ef90ec7))
+* Now can detect uuid value when binding parameters ([`72a4ba0`](https://github.com/erayhanoglu/postgresql-client/commit/72a4ba0e58cdd93ab70cc2d6edf1bfc473225ca3))
+* Added prettier formatting ([`5e157f5`](https://github.com/erayhanoglu/postgresql-client/commit/5e157f5cdc145df1abc2c0eb641563638af93af9))
+* Updated dependencies and documentation ([`f7f93d6`](https://github.com/erayhanoglu/postgresql-client/commit/f7f93d6b3f869ef9f7517983f5489931c6c9b10d))
+* Make the package to a proxy of postgrejs package ([`69c9364`](https://github.com/erayhanoglu/postgresql-client/commit/69c9364b3b828360c1d0c95ce4ae641b4989e018))
+* Beta 1 commit ([`86195d8`](https://github.com/erayhanoglu/postgresql-client/commit/86195d8446673be6da4b0706fff70d77bd607d13))
+* Added Time data type ([`127fb81`](https://github.com/erayhanoglu/postgresql-client/commit/127fb8174c65215738e4450c97dd438f2f4e53a6))
+* Data types implementation and tests done ([`6ba0ed5`](https://github.com/erayhanoglu/postgresql-client/commit/6ba0ed545406d5d680175e9958316b0f1c0bb159))
+* Migrated eslint config to @panates/eslint-config ([`718f5fd`](https://github.com/erayhanoglu/postgresql-client/commit/718f5fd396f8966aef59ca3bcb4ecc6c52e8abce))
+* Added int64 support for node&lt;12 ([`8637e98`](https://github.com/erayhanoglu/postgresql-client/commit/8637e983ae3b56202edb12fd896344c0a1186e0d))
+* Updated eslint and jest ([`229d394`](https://github.com/erayhanoglu/postgresql-client/commit/229d394b3a956844c0a36665fa44edf3acda9bd3))
+* Updated dependencies ([`20abfde`](https://github.com/erayhanoglu/postgresql-client/commit/20abfdedb3dd3fa213f6cb66e00c132607deccb9))
+* Restructure files according to current Panates standards ([`58875b3`](https://github.com/erayhanoglu/postgresql-client/commit/58875b364c58b8b5e5ddac55373dd70ad5639bd0))
+* Updated eslint config ([`5ad54ee`](https://github.com/erayhanoglu/postgresql-client/commit/5ad54eeea34cb87d744a405afe21d15eb7357bd7))
+* Removed vulnerable "debug" package ([`019b3f4`](https://github.com/erayhanoglu/postgresql-client/commit/019b3f48955c62a9c764462b16cd52be8cf22ae2))
+* Updated dependencies ([`7298b3c`](https://github.com/erayhanoglu/postgresql-client/commit/7298b3c589257281963c351c5b5d18492fe0eaee))
+* Update dependencies ([`4b34c8b`](https://github.com/erayhanoglu/postgresql-client/commit/4b34c8be303062b2ef419bbc77e1d802b34ab4d2))
+* Updated dependencies ([`2a21190`](https://github.com/erayhanoglu/postgresql-client/commit/2a21190d2db2f70a1bbffb6cc77a8d9dc62b7636))
+* Update dependencies ([`b2ee542`](https://github.com/erayhanoglu/postgresql-client/commit/b2ee5423c58afd967eb90598977fa3bdc897920b))
+* Beta 2 commit ([`17d3eb6`](https://github.com/erayhanoglu/postgresql-client/commit/17d3eb621529a68fddc981d7b7521df80870d2f1))
+* Fixed: Does not determine data type in register order. ([`e27ea7a`](https://github.com/erayhanoglu/postgresql-client/commit/e27ea7a372fb5fbf1ccb3ede7b292bd58471d22f))
+* Updated dependencies ([`20fc14c`](https://github.com/erayhanoglu/postgresql-client/commit/20fc14ced4e5a3158d91faf7158dc81d7ca650e6))
+* Updated dependencies ([`5e6a902`](https://github.com/erayhanoglu/postgresql-client/commit/5e6a902ae7cac3da89cf887f5b56d4d179504c27))
+* Updated dependencies ([`80474a3`](https://github.com/erayhanoglu/postgresql-client/commit/80474a397cda00bce583268f05f57bd31ea9c2b2))
+* Updated dependencies ([`b8f05e2`](https://github.com/erayhanoglu/postgresql-client/commit/b8f05e2fd1d1600461373ccc51a131e4ff772b34))
+* Updated dependencies ([`e0cf321`](https://github.com/erayhanoglu/postgresql-client/commit/e0cf321f593f72580ba6dda14c104efedd8cad52))
+* Added auto changelog generation ([`0c7fc22`](https://github.com/erayhanoglu/postgresql-client/commit/0c7fc22f299363a8425835c11d4f6f4eeb64a9ea))
+* Updated dependencies ([`9dcf2c2`](https://github.com/erayhanoglu/postgresql-client/commit/9dcf2c2957621aefb0a1f9f3da66877c4d7382bf))
+* Updated dependencies ([`33a8272`](https://github.com/erayhanoglu/postgresql-client/commit/33a8272de6c51dbf29ea658a6d2a6436555513e1))
+* Added ESM module support ([`97857e3`](https://github.com/erayhanoglu/postgresql-client/commit/97857e3925099e62d52d3dd6edf076015579fa95))
+* Updated dependencies ([`51998d4`](https://github.com/erayhanoglu/postgresql-client/commit/51998d496cc84d721bf267ba29e8dda3c520fea7))
+* Now DataTypeMap.determine method lookup for data-types in reverse order. So last registered data-type returns first. ([`f2a20eb`](https://github.com/erayhanoglu/postgresql-client/commit/f2a20eb9a0eba5ebfd3e8f26d427469d71b1c041))
+* Implemented extended query ([`7dea1f0`](https://github.com/erayhanoglu/postgresql-client/commit/7dea1f0516a2f64709e9eaa824d8ce5d2593c32a))
+* Updated dependencies ([`f8be711`](https://github.com/erayhanoglu/postgresql-client/commit/f8be711c067233c41bd33d595b8630c6cbda1048))
+* Updated dependencies ([`66da42d`](https://github.com/erayhanoglu/postgresql-client/commit/66da42d1db31aa4009467366c1b7285fbef6cf54))
+* Update dependencies ([`acdf4dd`](https://github.com/erayhanoglu/postgresql-client/commit/acdf4ddbb6759b6a3ca65036f08a24a2c4685cea))
+* Updated dependencies ([`27d747f`](https://github.com/erayhanoglu/postgresql-client/commit/27d747f2f77ec6da677bda3ce2dff362671d985a))
+* Added LISTEN/NOTIFY feature ([`f0ac754`](https://github.com/erayhanoglu/postgresql-client/commit/f0ac754657da2f95977da6081f8c4265e83ba1b5))
+* Fixed exports for multi module support ([`e40dabe`](https://github.com/erayhanoglu/postgresql-client/commit/e40dabe8064dc89f3a468b00e5c623f4277d68c1))
+* Major changes for FieldInfo ([`982d8ec`](https://github.com/erayhanoglu/postgresql-client/commit/982d8ec35c9f0b9e7a6fda2972d10c6890cfcfb8))
+* Updated dependencies ([`15ad62c`](https://github.com/erayhanoglu/postgresql-client/commit/15ad62c53dee3562576537da36325bd7b69ae144))
+* Updated dependencies ([`8cef3fa`](https://github.com/erayhanoglu/postgresql-client/commit/8cef3fafce9e4051ebad350494f78417f7846361))
+* Dont add COMMIT to execute sql if not in transaction. ([`8f57c30`](https://github.com/erayhanoglu/postgresql-client/commit/8f57c30ea4e45b014a883644a5d4817bc25485be))
+* Updated dependencies ([`afce5f7`](https://github.com/erayhanoglu/postgresql-client/commit/afce5f735d241869e6ae937cb67b6378e70fb6d0))
+* Updated dependencies ([`c7e0bb0`](https://github.com/erayhanoglu/postgresql-client/commit/c7e0bb0e33c5b3e09cdf753a5b496833503820ee))
+* Fixed database error properties exists in parent msg object. ([`6d5ad49`](https://github.com/erayhanoglu/postgresql-client/commit/6d5ad49cea90b272419d532262c8a9e87070ac51))
+* Updated dependencies ([`5b4638b`](https://github.com/erayhanoglu/postgresql-client/commit/5b4638b198c6d68a1cf8f601c9e15965990bb917))
+* Updated dependencies ([`ddeb02c`](https://github.com/erayhanoglu/postgresql-client/commit/ddeb02c43c12994eab31b100aa8f25c949172565))
+* Implemented `sqlmode` query parameter for connection string and added `requireSSL` option to connection options. Now the driver tries SSL connection as a first choice. ([`5fc7e31`](https://github.com/erayhanoglu/postgresql-client/commit/5fc7e3144382d455aeeadb72b7301ec03e93f223))
+* Added support for UUID data type ([`d3cfbfd`](https://github.com/erayhanoglu/postgresql-client/commit/d3cfbfd24e4a5b8b1b36f9842d9a9384ee50e58a))
+* + Added onErrorRollback functionality for better transaction management ([`f92b65b`](https://github.com/erayhanoglu/postgresql-client/commit/f92b65b0422e6861edf728dcbd1504be9bd01e34))
+* Fixed: Needs type casting of uuid[] types ([`b6b1b45`](https://github.com/erayhanoglu/postgresql-client/commit/b6b1b4578346c49d00922a104ca6c251b0dffed6))
+* Added "numeric" data type ([`a0a6068`](https://github.com/erayhanoglu/postgresql-client/commit/a0a606838a4e3852298cc97c6ee704dd08ec36c6))
+* Updated dependencies ([`7faed1a`](https://github.com/erayhanoglu/postgresql-client/commit/7faed1a68149b82399d951df6f0e0f1c54cd1798))
+* Updated dependencies ([`ffddee3`](https://github.com/erayhanoglu/postgresql-client/commit/ffddee39210236043909485eb478a283441a2702))
+* Renames DatabaseConnectionParams.onErrorRollback to rollbackOnError ([`dc50fb1`](https://github.com/erayhanoglu/postgresql-client/commit/dc50fb1ee3b9975f188af60b7f3fed5f8d089fcc))
+* Updated dependencies ([`f1e23d4`](https://github.com/erayhanoglu/postgresql-client/commit/f1e23d41ce75fb5ebd6ce3fb834df0d2ff5c9e10))
+* 1.0 stable ([`df5c83e`](https://github.com/erayhanoglu/postgresql-client/commit/df5c83e4e1d213355a1b0578c201b2992a066192))
+* Added house keeping ability to SmartBuffer ([`efc4fff`](https://github.com/erayhanoglu/postgresql-client/commit/efc4fff19a5cc8b832e4f686d8d60a60531937f2))
+* Added fetchAsString option for Date, Timestamp and TimestampTz ([`18fa21c`](https://github.com/erayhanoglu/postgresql-client/commit/18fa21c9e7885fde570901afbcb9e9d4fffaccb8))
+* Added int2Vector data type with binary protocol ([`94a9a3b`](https://github.com/erayhanoglu/postgresql-client/commit/94a9a3b3a9e10ce7bdbce132c9195826ecc7aec1))
+* Fixed: throws "operator does not exist: integer = json" if bind param is null or undefined ([`f57bd9e`](https://github.com/erayhanoglu/postgresql-client/commit/f57bd9ec0ec813ac96ef29e51d032cad10113129))
+* Improved auto-commit operations by detecting sql is a transaction command ([`ab8e698`](https://github.com/erayhanoglu/postgresql-client/commit/ab8e698f205dfe81b81b30fe7a7520db2430006c))
+* Updated lightning-pool to new major version 3.0 ([`1ae9f50`](https://github.com/erayhanoglu/postgresql-client/commit/1ae9f50549ed4863c37b45022962e463a9a69110))
+* Added "debug" package ([`618a239`](https://github.com/erayhanoglu/postgresql-client/commit/618a239f4e09643460146dbffad77011768f78a9))
+* Updated dependencies ([`b1ec82a`](https://github.com/erayhanoglu/postgresql-client/commit/b1ec82a3967dfa789583248c2d9096c40c333601))
+* Updated documentation ([`38093f6`](https://github.com/erayhanoglu/postgresql-client/commit/38093f67924eaf7a3710e08ed5bc91f84fd3920f))
+* Added int2Vector data type with binary protocol ([`55bd87e`](https://github.com/erayhanoglu/postgresql-client/commit/55bd87e38a2ed1787957c1066ba51857d6c97c5d))
+* Added autoCommit option for connection.execute() and connection.query() methods. ([`d75e939`](https://github.com/erayhanoglu/postgresql-client/commit/d75e939cf79bc8c82879d3b46585a5d3c81d0391))
+* Updated lightning-pool to v4.0 ([`4ae3adf`](https://github.com/erayhanoglu/postgresql-client/commit/4ae3adf1e4600a7977c24c4d6903193b97e908da))
+* Added code of conduct document ([`9a64826`](https://github.com/erayhanoglu/postgresql-client/commit/9a6482677ba23fb6ca850f5357a7e169218c7efd))
+* Added elementDataTypeId and mappedType properties to FieldInfo ([`b554f07`](https://github.com/erayhanoglu/postgresql-client/commit/b554f07421bfd3375aae90ff3212e5c84e93976c))
+* Linted for code quality ([`73dad79`](https://github.com/erayhanoglu/postgresql-client/commit/73dad793b7a2dfeed7fcdeeb8d7736ca90247af1))
+* Beta 1 commit ([`d6197dd`](https://github.com/erayhanoglu/postgresql-client/commit/d6197ddda5c2f53a4c31783ebbd42de09e59a26b))
+* Moved from putil-taskqueue to power-tasks ([`7782551`](https://github.com/erayhanoglu/postgresql-client/commit/7782551725f3441d590c6802c9812d38704d89a6))
+* Fixed: Error stack do not show caller function. ([`08a1a8f`](https://github.com/erayhanoglu/postgresql-client/commit/08a1a8f4141b0066ae084de4f2a31d9d7e1bd4b9))
+* Updated dependencies ([`8e916c6`](https://github.com/erayhanoglu/postgresql-client/commit/8e916c605fc565b89a710d226161af1eeee2be33))
+* Add ability to configure buffer size ([`34d822a`](https://github.com/erayhanoglu/postgresql-client/commit/34d822a7b3a302d3a8b4b406586c3ce123cac97b))
+* Automatically convert BigInt numbers to formal number if value in safe integer range ([`110c544`](https://github.com/erayhanoglu/postgresql-client/commit/110c544809b30f8be83c0893bc58cddce08dbae2))
+* Updated dependencies ([`f7b0db8`](https://github.com/erayhanoglu/postgresql-client/commit/f7b0db8701f73d482e3b2bc3128fbfb646c5f6a6))
+* Implemented `sqlmode` query parameter for connection string and added `requireSSL` option to connection options. Now the driver tries SSL connection as a first choice. ([`3a27e85`](https://github.com/erayhanoglu/postgresql-client/commit/3a27e85dcbb7bd983dd2f835fa4ac785ad34e266))
+* Implement TC39 Explicit Resource Management proposal ([`cd5efa4`](https://github.com/erayhanoglu/postgresql-client/commit/cd5efa4377d3e7c0d9eb795d3db0fbc7a1bf2943))
+* Fixed: Missed sendSyncMessage after parse query. ([`d8a906e`](https://github.com/erayhanoglu/postgresql-client/commit/d8a906e385225b76dfec9291584099a1361fd732))
+* Update issue templates ([`f84ec38`](https://github.com/erayhanoglu/postgresql-client/commit/f84ec389e17925a41c1f70da4aba606173ddd90d))
+* Added "name" (OID:19) data type to data type map ([`6f56e2d`](https://github.com/erayhanoglu/postgresql-client/commit/6f56e2d00446dd9634eb50ff354dae2c983bceda))
+* Updated dependencies ([`bebcd28`](https://github.com/erayhanoglu/postgresql-client/commit/bebcd283a045720f51a74f51e8258492af4c3790))
+* Added lineNr, colNr and line properties to DatabaseError ([`950bfb0`](https://github.com/erayhanoglu/postgresql-client/commit/950bfb0a945a2662150bc2cb4a9be6ead29e2762))
+* Added ability to get processId and secretKey ([`acaf2d5`](https://github.com/erayhanoglu/postgresql-client/commit/acaf2d55ab5143c9b0f0651118f2806a2c42ab2e))
+* Updated readme ([`efbc574`](https://github.com/erayhanoglu/postgresql-client/commit/efbc57427b8d7c67aef412cd2433c660c1dac0a5))
+* Updated dependencies ([`114ffb9`](https://github.com/erayhanoglu/postgresql-client/commit/114ffb94e38dfc96fcc3c57d95807036f0c50045))
+* Added fetch() method to cursor ([`4c98b80`](https://github.com/erayhanoglu/postgresql-client/commit/4c98b807f578bbfc3cff257ebffec86abb67797b))
+* Update dependencies ([`3055d79`](https://github.com/erayhanoglu/postgresql-client/commit/3055d7959c9c959ac06fd5ee6b8741a10a013c84))
+* + Added releaseSavepoint() method ([`9fc61c9`](https://github.com/erayhanoglu/postgresql-client/commit/9fc61c9b5fe5215239bfb6374d7661cb11b7b142))
+* Added "debug" package ([`f365962`](https://github.com/erayhanoglu/postgresql-client/commit/f36596201bb455e7b6d5ed7460d7c72864b36b0f))
+* Add ability to configure buffer size ([`30d18c6`](https://github.com/erayhanoglu/postgresql-client/commit/30d18c6afeb3b973eaa640f772ed791ec0707bb0))
+* Added husky git hooks ([`d61fc2a`](https://github.com/erayhanoglu/postgresql-client/commit/d61fc2a0e540aad420f9b5ff4887cb6d0c609596))
+* Update dependencies ([`e58cc44`](https://github.com/erayhanoglu/postgresql-client/commit/e58cc443f7a0c774a5be546a950a9bcf6628a11f))
+* Remove developer content from the README and into CONTRIBUTING.md ([`58c2ce8`](https://github.com/erayhanoglu/postgresql-client/commit/58c2ce8c3f4e643b3bb984ad73666dd5fd40d729))
+* Add basic documentation on running the test suite. Add rimraf as dependency since its referenced by the scripts. Update the lockfile. Start to prepare for proper prettier formatting ([`4ca7b54`](https://github.com/erayhanoglu/postgresql-client/commit/4ca7b54c970601ee9f11839bae91ce7fb3a2ea8d))
+* Use default config ([`6f3e692`](https://github.com/erayhanoglu/postgresql-client/commit/6f3e692acf7a3f487e3056bc6a964032b50a0661))
+* Fixed: Some times server response invalid message to prepare statement message. ([`bb7a0c8`](https://github.com/erayhanoglu/postgresql-client/commit/bb7a0c8e2074120a2062e585183480b52677756e))
+* Changed ConnectionConfiguration.searchPath to "schema" ([`e6df86b`](https://github.com/erayhanoglu/postgresql-client/commit/e6df86b85384608cbfbb8ab5f96446dbfe5540bf))
+* Optimized build ([`17d029b`](https://github.com/erayhanoglu/postgresql-client/commit/17d029be5d799bab2cf49ba5258b978b20c0d52f))
+* Updated examples ([`94e092a`](https://github.com/erayhanoglu/postgresql-client/commit/94e092ade4e664b040bb85517eac4c61f8baeee4))
+* Support int2 and oid vector types ([`ce27006`](https://github.com/erayhanoglu/postgresql-client/commit/ce27006bb7441d004fd251bd6af29c4e99836b01))
+* Major changes for FieldInfo ([`32d2e08`](https://github.com/erayhanoglu/postgresql-client/commit/32d2e0887a9bc49bbf00a91c5f850908dd9ee3a5))
+* Updated travis url ([`3e3b661`](https://github.com/erayhanoglu/postgresql-client/commit/3e3b66130c522df939dcc267939145ba64bec45c))
+* Initial commit ([`441d590`](https://github.com/erayhanoglu/postgresql-client/commit/441d590b64a69085d792ede37a8d7c79591a29e7))
+* Updated config ([`8792c63`](https://github.com/erayhanoglu/postgresql-client/commit/8792c631eff7798edb1a76524acfce49e28d7593))
+* Minor fix for logging ([`1af9e94`](https://github.com/erayhanoglu/postgresql-client/commit/1af9e946018e9605882c13a85120793a65c1fada))
+* Added sessionParameters getter ([`4599db8`](https://github.com/erayhanoglu/postgresql-client/commit/4599db832beca8f3a741e1a690932818edd915e9))
+* Improved error message handling for more understandable to humans. ([`d9bbcb0`](https://github.com/erayhanoglu/postgresql-client/commit/d9bbcb0b1c10ab11816bc907d2b62977831d6082))
+* Added auto changelog generation ([`1ed1194`](https://github.com/erayhanoglu/postgresql-client/commit/1ed119481ee3a5ccdd841691812f6042fab2cb5a))
+* Implement TC39 Explicit Resource Management proposal ([`d3df6f4`](https://github.com/erayhanoglu/postgresql-client/commit/d3df6f496beca807ede191968806debcec631dbf))
+* Updated dependencies ([`b43ae89`](https://github.com/erayhanoglu/postgresql-client/commit/b43ae89c616615b622a462d2a0c112001943856a))
+* Now DataTypeMap.determine method lookup for data-types in reverse order. So last registered data-type returns first. ([`0f8cbc8`](https://github.com/erayhanoglu/postgresql-client/commit/0f8cbc809c24ca712e94ab21d2c2624e35a8b059))
+* Fixed: Wrong message sending when parameters contains null values ([`59e5bf4`](https://github.com/erayhanoglu/postgresql-client/commit/59e5bf4b4084c92dd4dbf8f7fc787f9d11709efa))
+* Updated roadmap ([`b0605e3`](https://github.com/erayhanoglu/postgresql-client/commit/b0605e3c487c587256991012395c07e7402b32dd))
+* Check if fetchCount value between unsigned inter range ([`cc35ee3`](https://github.com/erayhanoglu/postgresql-client/commit/cc35ee368e1a78b16b030ba259f921dca0287f89))
+* Fallback to "unknown" IOD, if can't determine data type ([`b0807e3`](https://github.com/erayhanoglu/postgresql-client/commit/b0807e38af758a29c5a1fb5db4af24dd1f5c9dfb))
+* Detect time format strings ([`14f8871`](https://github.com/erayhanoglu/postgresql-client/commit/14f88711b29824f720233ae051709e2f3fbabaf8))
+* Added rowType to all result interfaces ([`4bc26a7`](https://github.com/erayhanoglu/postgresql-client/commit/4bc26a7d1edd9405c1fd5f06eff6e60d4d11631e))
+* Updated dependencies ([`efc17f2`](https://github.com/erayhanoglu/postgresql-client/commit/efc17f292bc1d24de518cc5529e8a7aa383ad641))
+* Added "numeric" data type ([`d78a6fe`](https://github.com/erayhanoglu/postgresql-client/commit/d78a6fe55433aab90e2a00f7bc5f052eca69b2b3))
+* Updated node versions ([`7fb18dc`](https://github.com/erayhanoglu/postgresql-client/commit/7fb18dc0f208ec609ebddd84d0a3ea5db4c8534a))
+* Updated config ([`9fa5d12`](https://github.com/erayhanoglu/postgresql-client/commit/9fa5d12aac07842f1f9f4f0ff51a31dbe674b423))
+* Updated dependencies ([`c413990`](https://github.com/erayhanoglu/postgresql-client/commit/c4139903b2d8415a0ed4deb871b820158ab0f923))
+* Test fixed ([`0754ee8`](https://github.com/erayhanoglu/postgresql-client/commit/0754ee845ef1cb5c61ed10f9f6fd89e9e8f60d14))
+* Added prettier formatting ([`250673e`](https://github.com/erayhanoglu/postgresql-client/commit/250673e51c840e1fdfd4f9f79db5400af70b7d64))
+* Minor typing change ([`f036aa8`](https://github.com/erayhanoglu/postgresql-client/commit/f036aa833d8b973fd5e1cc8d229cac4b199a5c48))
+* Updated config ([`31dab8b`](https://github.com/erayhanoglu/postgresql-client/commit/31dab8b08ac5b6d5977bb89d47de60e964e09b52))
+* Fixed examples for cursor usage ([`5971341`](https://github.com/erayhanoglu/postgresql-client/commit/5971341edf1c7ce363ddcb3adb97b2491bf7714d))
+* Updated dependencies and documentation ([`120e7b5`](https://github.com/erayhanoglu/postgresql-client/commit/120e7b505f86c10ede34df1f8291c77b8be66e10))
+* Added dataTypeName to FieldInfo ([`6a9227d`](https://github.com/erayhanoglu/postgresql-client/commit/6a9227de01bf0cccb28f3a8804c5dab526395700))
+* Added int64 support for node&lt;12 ([`bbac2f2`](https://github.com/erayhanoglu/postgresql-client/commit/bbac2f2a0210171028011ce172d5759788fc4fcf))
+* Updated node versions ([`17692ca`](https://github.com/erayhanoglu/postgresql-client/commit/17692ca11cf4e440afe53b8a1bcd96041b36f352))
+* Updated config ([`6edd12e`](https://github.com/erayhanoglu/postgresql-client/commit/6edd12e902ac3f5f2f4784626edce151bf5eb569))
+* Fixed time data type issue ([`bf80893`](https://github.com/erayhanoglu/postgresql-client/commit/bf80893d628ed9ec14d448b7194ab89028b00463))
+* Expose Cursor class ([`1dc2de1`](https://github.com/erayhanoglu/postgresql-client/commit/1dc2de192cc02ed5ba392d974066295a7c0f5f2a))
+* Updated config ([`9c5f20c`](https://github.com/erayhanoglu/postgresql-client/commit/9c5f20c8e0a83633eaa66dd438d4cee3d93846a7))
+* Updated node versions ([`49c6eac`](https://github.com/erayhanoglu/postgresql-client/commit/49c6eacd56815f969f0aabce3b41c67369e10d27))
+* Updated dependencies ([`b8501a2`](https://github.com/erayhanoglu/postgresql-client/commit/b8501a2e5a73f0449de3e5373a1b559455af1051))
+* Updated readme ([`145afed`](https://github.com/erayhanoglu/postgresql-client/commit/145afed77f278648d48ca8b0d2aaf44e5887e07a))
+* Fixed cover script ([`ff3dbef`](https://github.com/erayhanoglu/postgresql-client/commit/ff3dbef2da974d08558475a9550778d70b8db4cc))
+* Update README.md ([`5bac71d`](https://github.com/erayhanoglu/postgresql-client/commit/5bac71d5c415128a02c01885fc9e0038ac21d4d5))
+* Updated doc ([`54b72be`](https://github.com/erayhanoglu/postgresql-client/commit/54b72beb898012daa16c99f60a98fbe98520ed18))
+* Added missed type mappings ([`f45124a`](https://github.com/erayhanoglu/postgresql-client/commit/f45124aa900c82318bdd39d1770ddeaa0df62acc))
+* Calling fetch of a closed cursor will not throw anymore ([`bacb630`](https://github.com/erayhanoglu/postgresql-client/commit/bacb63002121b5e0ee3c3765065f60e4de3496ba))
+* Changed ConnectionConfiguration.searchPath to "schema" ([`1fd8b7a`](https://github.com/erayhanoglu/postgresql-client/commit/1fd8b7ade85a61f5eb524054cef52d97e70f8635))
+* Added rowType getter to Cursor ([`045a2a2`](https://github.com/erayhanoglu/postgresql-client/commit/045a2a22e1c8d0519399c3bf70013adaf2c9e32d))
+* Added isClosed property ([`c9b54f7`](https://github.com/erayhanoglu/postgresql-client/commit/c9b54f7b19bf0270beff5947b02efac9ff4a12a9))
+* Beta 1 commit ([`e68b3d8`](https://github.com/erayhanoglu/postgresql-client/commit/e68b3d8df2a05bd8efa06975d3d53b9f65e5cd0e))
+* Added prettier formatting ([`289c40c`](https://github.com/erayhanoglu/postgresql-client/commit/289c40c1d65da55c56d814054d38715fa48a78f9))
+* Fixed typing for new eslint rules ([`95f3914`](https://github.com/erayhanoglu/postgresql-client/commit/95f3914f61d4883b68d4b131f6200b08fc8e2478))
+* Updated config ([`a18fe16`](https://github.com/erayhanoglu/postgresql-client/commit/a18fe169a79544ecb9e00b2186aa7f64b52cdb24))
+* Added ESM module support ([`a710889`](https://github.com/erayhanoglu/postgresql-client/commit/a7108898204f7f464927ba56a84f590bc42f7fa3))
+* Fixed: float numbers are recognized as bigint ([`1c19df4`](https://github.com/erayhanoglu/postgresql-client/commit/1c19df4a6054af51ac49ce22320167072c81c689))
+* Updated dependencies ([`4216ebd`](https://github.com/erayhanoglu/postgresql-client/commit/4216ebd064b37530a8bb9d8f810c87aadc14b7a6))
+* Fixed wrong repository address ([`ae3b149`](https://github.com/erayhanoglu/postgresql-client/commit/ae3b149c31d35eda8b39fb1428c6cfde752890c9))
+* Migrated eslint config to @panates/eslint-config ([`fb618e0`](https://github.com/erayhanoglu/postgresql-client/commit/fb618e0b606ce917b482ab8ae7bba1397ec10c2e))
+* Updated Node version ([`3fde2b9`](https://github.com/erayhanoglu/postgresql-client/commit/3fde2b95b80567178fd6cf3f13f4f4b5d05f713c))
+* Added prettier formatting ([`9d02a3f`](https://github.com/erayhanoglu/postgresql-client/commit/9d02a3f3a53f784fd7a3b917a2cef3e355638c20))
+* Updated dependencies ([`f723f8f`](https://github.com/erayhanoglu/postgresql-client/commit/f723f8fe7cc39746ba36f5ead791b78c184423aa))
+* Add OID for tid array ([`d99e3ee`](https://github.com/erayhanoglu/postgresql-client/commit/d99e3ee1e7fc768931553240adb556f003428ebd))
+* Updated badge url ([`b9335ed`](https://github.com/erayhanoglu/postgresql-client/commit/b9335ed40a8cc4fadee4fe90e3287a48f0978cf3))
+* Export SmartBuffer fully ([`8fca283`](https://github.com/erayhanoglu/postgresql-client/commit/8fca283bc3fa9be0653297f858e1ede652456289))
+* Now DataTypeMap.determine method lookup for data-types in reverse order. So last registered data-type returns first. ([`e1918c3`](https://github.com/erayhanoglu/postgresql-client/commit/e1918c3d9bd2cea6a084474d987df18b62b8b239))
+* Fixed typing for new eslint rules ([`f6e0d11`](https://github.com/erayhanoglu/postgresql-client/commit/f6e0d11041616ee243a95062a4e9d581d5406d62))
+* Updated config ([`9655d4f`](https://github.com/erayhanoglu/postgresql-client/commit/9655d4f222af21b889a7a9f5070530f8ea6bcd95))
+* Optimized build ([`e8305f9`](https://github.com/erayhanoglu/postgresql-client/commit/e8305f9da79a64484d5edc2cd0fe43c4ff7b2fa2))
+* Fixed typing ([`70a7076`](https://github.com/erayhanoglu/postgresql-client/commit/70a707672caf735d412cb0debe9661a69b8d688f))
+* Moved prettier to devDependencies ([`eecec11`](https://github.com/erayhanoglu/postgresql-client/commit/eecec113f5d0752a90755952ad044b29f6ddbbd8))
+* Added json casting for object values ([`b95766a`](https://github.com/erayhanoglu/postgresql-client/commit/b95766a3f6362fb7dfa5c453df8fc76bcf46a295))
+* Updated readme ([`d5af7cd`](https://github.com/erayhanoglu/postgresql-client/commit/d5af7cdf315d9b549df79d05c077a0037b03509a))
+* Updated dependencies ([`68cdfed`](https://github.com/erayhanoglu/postgresql-client/commit/68cdfed3966bdc9d4c88c9cc57053197cfc47cd1))
+* Fixed invalid constructing of DatabaseError ([`e904539`](https://github.com/erayhanoglu/postgresql-client/commit/e90453959b570ad2206415455c8f2b844e69ce85))
+* Set test schema ([`72b3dcc`](https://github.com/erayhanoglu/postgresql-client/commit/72b3dccbdea0b0352faec20e5581984780567a68))
+* Added "debug" package ([`12c0001`](https://github.com/erayhanoglu/postgresql-client/commit/12c00012a29f5365472d108e3b83cfdfa128c96b))
+* Added rowType to all result interfaces ([`edfaec6`](https://github.com/erayhanoglu/postgresql-client/commit/edfaec69751137ab488ac4af2cf97582059b7e45))
+* Fixex: query() does not return fields property if cursor option is true ([`6acec29`](https://github.com/erayhanoglu/postgresql-client/commit/6acec296e846c57cd3a38f1b26f58641ba688d10))
+* Added isClosed property ([`f2b3791`](https://github.com/erayhanoglu/postgresql-client/commit/f2b3791464fcc3d3a58fe317955c609aa0d2b1e6))
+* Added ability to get processId and secretKey ([`95bc84f`](https://github.com/erayhanoglu/postgresql-client/commit/95bc84f9a4f3ce3e3c33b09a13cc79ff2f43ff85))
+* Implemented extended query ([`167e989`](https://github.com/erayhanoglu/postgresql-client/commit/167e9892d105a0f14b41b4ef660d9c72acc4a900))
+* Added executor: node/default ([`2932861`](https://github.com/erayhanoglu/postgresql-client/commit/2932861c0e552361208aaceed16e94fbcf1a9456))
+* Added root ([`81c1028`](https://github.com/erayhanoglu/postgresql-client/commit/81c10284d45f53e807a153813c5b4f38594869bc))
+* Expose DatabaseError ([`5f1bbd2`](https://github.com/erayhanoglu/postgresql-client/commit/5f1bbd2ab2ad69a836e7a53ef92ecffcc352e46b))
+* Remove duplicated root in .editorconfig ([`a514ad5`](https://github.com/erayhanoglu/postgresql-client/commit/a514ad52f09ad92ade5b83ed599ccf1832b424ea))
+* Use the README.md from master ([`ac3f7b8`](https://github.com/erayhanoglu/postgresql-client/commit/ac3f7b831c4a515d2a0db74f53cb481d651a0200))
+* Added prettier formatting ([`0e0a521`](https://github.com/erayhanoglu/postgresql-client/commit/0e0a521435aae1c67ceeb27f13af6cc49066c2ad))
+* Fixed missing files."typings" ([`eabb616`](https://github.com/erayhanoglu/postgresql-client/commit/eabb616a54831ca245d6157452737a6484167d0b))
+* Added LISTEN/NOTIFY feature ([`73cb33b`](https://github.com/erayhanoglu/postgresql-client/commit/73cb33b41d0bc3515e71b5e0ff7ace68b9f4720b))
+* Added fetchAsString option for Date, Timestamp and TimestampTz ([`1d77cd1`](https://github.com/erayhanoglu/postgresql-client/commit/1d77cd1c9ef04d0fa90b5729e376be4bc5cfe8b6))
+* Set test schema ([`ec18c02`](https://github.com/erayhanoglu/postgresql-client/commit/ec18c02bb6964de9a42300002e3af0b6152de466))
+* Fixed: Missed sendSyncMessage ([`356af56`](https://github.com/erayhanoglu/postgresql-client/commit/356af563c10735a4bcec6651897eadbfa6566314))
+* DOCUMENTATION.md is missing in files property ([`2d24c5f`](https://github.com/erayhanoglu/postgresql-client/commit/2d24c5f4471f5390548d2377d429b9e1ec567032))
Index: node_modules/finalhandler/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/finalhandler/package.json b/node_modules/finalhandler/package.json
--- a/node_modules/finalhandler/package.json	
+++ b/node_modules/finalhandler/package.json	
@@ -1,13 +1,13 @@
 {
   "name": "finalhandler",
   "description": "Node.js final http responder",
-  "version": "1.2.0",
+  "version": "1.3.1",
   "author": "Douglas Christopher Wilson <doug@somethingdoug.com>",
   "license": "MIT",
   "repository": "pillarjs/finalhandler",
   "dependencies": {
     "debug": "2.6.9",
-    "encodeurl": "~1.0.2",
+    "encodeurl": "~2.0.0",
     "escape-html": "~1.0.3",
     "on-finished": "2.4.1",
     "parseurl": "~1.3.3",
@@ -17,16 +17,16 @@
   "devDependencies": {
     "eslint": "7.32.0",
     "eslint-config-standard": "14.1.1",
-    "eslint-plugin-import": "2.25.4",
+    "eslint-plugin-import": "2.26.0",
     "eslint-plugin-markdown": "2.2.1",
     "eslint-plugin-node": "11.1.0",
     "eslint-plugin-promise": "5.2.0",
     "eslint-plugin-standard": "4.1.0",
-    "mocha": "9.2.2",
+    "mocha": "10.0.0",
     "nyc": "15.1.0",
     "readable-stream": "2.3.6",
     "safe-buffer": "5.2.1",
-    "supertest": "6.2.2"
+    "supertest": "6.2.4"
   },
   "files": [
     "LICENSE",
@@ -39,8 +39,9 @@
   },
   "scripts": {
     "lint": "eslint .",
-    "test": "mocha --reporter spec --bail --check-leaks test/",
+    "test": "mocha --reporter spec --check-leaks test/",
     "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
-    "test-cov": "nyc --reporter=html --reporter=text npm test"
+    "test-cov": "nyc --reporter=html --reporter=text npm test",
+    "test-inspect": "mocha --reporter spec --inspect --inspect-brk test/"
   }
 }
Index: node_modules/pg/lib/client.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/client.js b/node_modules/pg/lib/client.js
--- a/node_modules/pg/lib/client.js	
+++ b/node_modules/pg/lib/client.js	
@@ -1,14 +1,14 @@
 'use strict'
 
-var EventEmitter = require('events').EventEmitter
-var utils = require('./utils')
-var sasl = require('./crypto/sasl')
-var TypeOverrides = require('./type-overrides')
+const EventEmitter = require('events').EventEmitter
+const utils = require('./utils')
+const sasl = require('./crypto/sasl')
+const TypeOverrides = require('./type-overrides')
 
-var ConnectionParameters = require('./connection-parameters')
-var Query = require('./query')
-var defaults = require('./defaults')
-var Connection = require('./connection')
+const ConnectionParameters = require('./connection-parameters')
+const Query = require('./query')
+const defaults = require('./defaults')
+const Connection = require('./connection')
 const crypto = require('./crypto/utils')
 
 class Client extends EventEmitter {
@@ -32,7 +32,7 @@
 
     this.replication = this.connectionParameters.replication
 
-    var c = config || {}
+    const c = config || {}
 
     this._Promise = c.Promise || global.Promise
     this._types = new TypeOverrides(c.types)
@@ -43,6 +43,7 @@
     this._connectionError = false
     this._queryable = true
 
+    this.enableChannelBinding = Boolean(c.enableChannelBinding) // set true to use SCRAM-SHA-256-PLUS when offered
     this.connection =
       c.connection ||
       new Connection({
@@ -86,8 +87,8 @@
   }
 
   _connect(callback) {
-    var self = this
-    var con = this.connection
+    const self = this
+    const con = this.connection
     this._connectionCallback = callback
 
     if (this._connecting || this._connected) {
@@ -99,12 +100,15 @@
     }
     this._connecting = true
 
-    this.connectionTimeoutHandle
     if (this._connectionTimeoutMillis > 0) {
       this.connectionTimeoutHandle = setTimeout(() => {
         con._ending = true
         con.stream.destroy(new Error('timeout expired'))
       }, this._connectionTimeoutMillis)
+
+      if (this.connectionTimeoutHandle.unref) {
+        this.connectionTimeoutHandle.unref()
+      }
     }
 
     if (this.host && this.host.indexOf('/') === 0) {
@@ -259,7 +263,7 @@
   _handleAuthSASL(msg) {
     this._checkPgPass(() => {
       try {
-        this.saslSession = sasl.startSession(msg.mechanisms)
+        this.saslSession = sasl.startSession(msg.mechanisms, this.enableChannelBinding && this.connection.stream)
         this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response)
       } catch (err) {
         this.connection.emit('error', err)
@@ -269,7 +273,12 @@
 
   async _handleAuthSASLContinue(msg) {
     try {
-      await sasl.continueSession(this.saslSession, this.password, msg.data)
+      await sasl.continueSession(
+        this.saslSession,
+        this.password,
+        msg.data,
+        this.enableChannelBinding && this.connection.stream
+      )
       this.connection.sendSCRAMClientFinalMessage(this.saslSession.response)
     } catch (err) {
       this.connection.emit('error', err)
@@ -314,7 +323,7 @@
     this._pulseQueryQueue()
   }
 
-  // if we receieve an error event or error message
+  // if we receive an error event or error message
   // during the connection process we handle it here
   _handleErrorWhileConnecting(err) {
     if (this._connectionError) {
@@ -378,11 +387,21 @@
   }
 
   _handleCommandComplete(msg) {
+    if (this.activeQuery == null) {
+      const error = new Error('Received unexpected commandComplete message from backend.')
+      this._handleErrorEvent(error)
+      return
+    }
     // delegate commandComplete to active query
     this.activeQuery.handleCommandComplete(msg, this.connection)
   }
 
-  _handleParseComplete(msg) {
+  _handleParseComplete() {
+    if (this.activeQuery == null) {
+      const error = new Error('Received unexpected parseComplete message from backend.')
+      this._handleErrorEvent(error)
+      return
+    }
     // if a prepared statement has a name and properly parses
     // we track that its already been executed so we don't parse
     // it again on the same client
@@ -408,14 +427,14 @@
   }
 
   getStartupConf() {
-    var params = this.connectionParameters
+    const params = this.connectionParameters
 
-    var data = {
+    const data = {
       user: params.user,
       database: params.database,
     }
 
-    var appName = params.application_name || params.fallback_application_name
+    const appName = params.application_name || params.fallback_application_name
     if (appName) {
       data.application_name = appName
     }
@@ -440,7 +459,7 @@
 
   cancel(client, query) {
     if (client.activeQuery === query) {
-      var con = this.connection
+      const con = this.connection
 
       if (this.host && this.host.indexOf('/') === 0) {
         con.connect(this.host + '/.s.PGSQL.' + this.port)
@@ -500,11 +519,11 @@
 
   query(config, values, callback) {
     // can take in strings, config object or query object
-    var query
-    var result
-    var readTimeout
-    var readTimeoutTimer
-    var queryCallback
+    let query
+    let result
+    let readTimeout
+    let readTimeoutTimer
+    let queryCallback
 
     if (config === null || config === undefined) {
       throw new TypeError('Client was passed a null or undefined query')
@@ -515,7 +534,7 @@
         query.callback = query.callback || values
       }
     } else {
-      readTimeout = this.connectionParameters.query_timeout
+      readTimeout = config.query_timeout || this.connectionParameters.query_timeout
       query = new Query(config, values, callback)
       if (!query.callback) {
         result = new this._Promise((resolve, reject) => {
@@ -533,7 +552,7 @@
       queryCallback = query.callback
 
       readTimeoutTimer = setTimeout(() => {
-        var error = new Error('Query read timeout')
+        const error = new Error('Query read timeout')
 
         process.nextTick(() => {
           query.handleError(error, this.connection)
@@ -546,7 +565,7 @@
         query.callback = () => {}
 
         // Remove from queue
-        var index = this.queryQueue.indexOf(query)
+        const index = this.queryQueue.indexOf(query)
         if (index > -1) {
           this.queryQueue.splice(index, 1)
         }
Index: node_modules/braces/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/index.js b/node_modules/braces/index.js
--- a/node_modules/braces/index.js	
+++ b/node_modules/braces/index.js	
@@ -23,8 +23,8 @@
   let output = [];
 
   if (Array.isArray(input)) {
-    for (let pattern of input) {
-      let result = braces.create(pattern, options);
+    for (const pattern of input) {
+      const result = braces.create(pattern, options);
       if (Array.isArray(result)) {
         output.push(...result);
       } else {
@@ -158,7 +158,7 @@
     return [input];
   }
 
- return options.expand !== true
+  return options.expand !== true
     ? braces.compile(input, options)
     : braces.expand(input, options);
 };
Index: node_modules/es-define-property/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/es-define-property/CHANGELOG.md b/node_modules/es-define-property/CHANGELOG.md
--- a/node_modules/es-define-property/CHANGELOG.md	
+++ b/node_modules/es-define-property/CHANGELOG.md	
@@ -5,6 +5,20 @@
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+## [v1.0.1](https://github.com/ljharb/es-define-property/compare/v1.0.0...v1.0.1) - 2024-12-06
+
+### Commits
+
+- [types] use shared tsconfig [`954a663`](https://github.com/ljharb/es-define-property/commit/954a66360326e508a0e5daa4b07493d58f5e110e)
+- [actions] split out node 10-20, and 20+ [`3a8e84b`](https://github.com/ljharb/es-define-property/commit/3a8e84b23883f26ff37b3e82ff283834228e18c6)
+- [Dev Deps] update `@ljharb/eslint-config`, `@ljharb/tsconfig`, `@types/get-intrinsic`, `@types/tape`, `auto-changelog`, `gopd`, `tape` [`86ae27b`](https://github.com/ljharb/es-define-property/commit/86ae27bb8cc857b23885136fad9cbe965ae36612)
+- [Refactor] avoid using `get-intrinsic` [`02480c0`](https://github.com/ljharb/es-define-property/commit/02480c0353ef6118965282977c3864aff53d98b1)
+- [Tests] replace `aud` with `npm audit` [`f6093ff`](https://github.com/ljharb/es-define-property/commit/f6093ff74ab51c98015c2592cd393bd42478e773)
+- [Tests] configure testling [`7139e66`](https://github.com/ljharb/es-define-property/commit/7139e66959247a56086d9977359caef27c6849e7)
+- [Dev Deps] update `tape` [`b901b51`](https://github.com/ljharb/es-define-property/commit/b901b511a75e001a40ce1a59fef7d9ffcfc87482)
+- [Tests] fix types in tests [`469d269`](https://github.com/ljharb/es-define-property/commit/469d269fd141b1e773ec053a9fa35843493583e0)
+- [Dev Deps] add missing peer dep [`733acfb`](https://github.com/ljharb/es-define-property/commit/733acfb0c4c96edf337e470b89a25a5b3724c352)
+
 ## v1.0.0 - 2024-02-12
 
 ### Commits
Index: node_modules/set-function-length/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/README.md b/node_modules/set-function-length/README.md
deleted file mode 100644
--- a/node_modules/set-function-length/README.md	
+++ /dev/null	
@@ -1,56 +0,0 @@
-# set-function-length <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
-
-[![github actions][actions-image]][actions-url]
-[![coverage][codecov-image]][codecov-url]
-[![License][license-image]][license-url]
-[![Downloads][downloads-image]][downloads-url]
-
-[![npm badge][npm-badge-png]][package-url]
-
-Set a function’s length.
-
-Arguments:
- - `fn`: the function
- - `length`: the new length. Must be an integer between 0 and 2**32.
- - `loose`: Optional. If true, and the length fails to be set, do not throw. Default false.
-
-Returns `fn`.
-
-## Usage
-
-```javascript
-var setFunctionLength = require('set-function-length');
-var assert = require('assert');
-
-function zero() {}
-function one(_) {}
-function two(_, __) {}
-
-assert.equal(zero.length, 0);
-assert.equal(one.length, 1);
-assert.equal(two.length, 2);
-
-assert.equal(setFunctionLength(zero, 10), zero);
-assert.equal(setFunctionLength(one, 11), one);
-assert.equal(setFunctionLength(two, 12), two);
-
-assert.equal(zero.length, 10);
-assert.equal(one.length, 11);
-assert.equal(two.length, 12);
-```
-
-[package-url]: https://npmjs.org/package/set-function-length
-[npm-version-svg]: https://versionbadg.es/ljharb/set-function-length.svg
-[deps-svg]: https://david-dm.org/ljharb/set-function-length.svg
-[deps-url]: https://david-dm.org/ljharb/set-function-length
-[dev-deps-svg]: https://david-dm.org/ljharb/set-function-length/dev-status.svg
-[dev-deps-url]: https://david-dm.org/ljharb/set-function-length#info=devDependencies
-[npm-badge-png]: https://nodei.co/npm/set-function-length.png?downloads=true&stars=true
-[license-image]: https://img.shields.io/npm/l/set-function-length.svg
-[license-url]: LICENSE
-[downloads-image]: https://img.shields.io/npm/dm/set-function-length.svg
-[downloads-url]: https://npm-stat.com/charts.html?package=set-function-length
-[codecov-image]: https://codecov.io/gh/ljharb/set-function-length/branch/main/graphs/badge.svg
-[codecov-url]: https://app.codecov.io/gh/ljharb/set-function-length/
-[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/set-function-length
-[actions-url]: https://github.com/ljharb/set-function-length/actions
Index: node_modules/qs/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/.eslintrc b/node_modules/qs/.eslintrc
--- a/node_modules/qs/.eslintrc	
+++ b/node_modules/qs/.eslintrc	
@@ -14,8 +14,8 @@
         "id-length": [2, { "min": 1, "max": 25, "properties": "never" }],
         "indent": [2, 4],
         "max-lines-per-function": [2, { "max": 150 }],
-        "max-params": [2, 16],
-        "max-statements": [2, 53],
+        "max-params": [2, 18],
+        "max-statements": [2, 100],
         "multiline-comment-style": 0,
         "no-continue": 1,
         "no-magic-numbers": 0,
Index: node_modules/lightning-pool/esm/pool.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/pool.d.ts b/node_modules/lightning-pool/esm/pool.d.ts
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/pool.d.ts	
+++ /dev/null	
@@ -1,104 +0,0 @@
-/// <reference types="node" />
-import { EventEmitter } from 'events';
-import { Callback, PoolConfiguration, PoolFactory, PoolState } from './definitions.js';
-import { PoolOptions } from './pool-options.js';
-export declare class Pool<T = any> extends EventEmitter {
-    private readonly _options;
-    private readonly _factory;
-    private _requestQueue;
-    private _allResources;
-    private _acquiredResources;
-    private _idleResources;
-    private _creating;
-    private _requestsProcessing;
-    private _state;
-    private _houseKeepTimer;
-    private _closeWaitTimer;
-    constructor(factory: PoolFactory<T>, config?: PoolConfiguration);
-    /**
-     * Returns Pool options
-     */
-    get options(): PoolOptions;
-    /**
-     * Returns number of resources that are currently acquired
-     */
-    get acquired(): number;
-    /**
-     * Returns number of unused resources in the pool
-     */
-    get available(): number;
-    /**
-     * Returns number of resources currently creating
-     */
-    get creating(): number;
-    /**
-     * Returns number of callers waiting to acquire a resource
-     */
-    get pending(): number;
-    /**
-     * Returns number of resources in the pool
-     * regardless of whether they are idle or in use
-     */
-    get size(): number;
-    /**
-     * Returns state of the pool
-     */
-    get state(): PoolState;
-    /**
-     * Starts the pool and begins creating of resources, starts house keeping and any other internal logic.
-     * Note: This method is not need to be called. Pool instance will automatically be started when acquire() method is called
-     */
-    start(): void;
-    /**
-     * Shuts down the pool and destroys all resources.
-     */
-    close(callback?: Callback): void;
-    close(terminateWait: number, callback?: Callback): void;
-    close(force: boolean, callback?: Callback): void;
-    closeAsync(): Promise<void>;
-    closeAsync(terminateWait: number): Promise<void>;
-    closeAsync(force: boolean): Promise<void>;
-    /**
-     * Acquires `resource` from the pool or create a new one
-     */
-    acquire(): Promise<T>;
-    acquire(callback: any): void;
-    /**
-     * Releases an allocated `resource` and let it back to pool.
-     */
-    release(resource: T, callback?: Callback): void;
-    /**
-     * Async version of release().
-     */
-    releaseAsync(resource: T): Promise<void>;
-    /**
-     * Releases, destroys and removes any `resource` from `Pool`.
-     */
-    destroy(resource: T, callback?: Callback): any;
-    /**
-     * Async version of destroy().
-     */
-    destroyAsync(resource: T): Promise<void>;
-    /**
-     * Returns if a `resource` has been acquired from the pool and not yet released or destroyed.
-     */
-    isAcquired(resource: T): boolean;
-    /**
-     * Returns if the pool contains a `resource`
-     */
-    includes(resource: T): boolean;
-    private _processNextRequest;
-    emit(event: string | symbol, ...args: any[]): boolean;
-    /**
-     * Creates new resource
-     */
-    private _createResource;
-    private _setHouseKeep;
-    private _houseKeep;
-    private _ensureMin;
-    private _itemSetAcquired;
-    private _itemDetach;
-    private _itemSetIdle;
-    private _itemDestroy;
-    private _itemValidate;
-}
Index: node_modules/semver/functions/gt.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/gt.js b/node_modules/semver/functions/gt.js
--- a/node_modules/semver/functions/gt.js	
+++ b/node_modules/semver/functions/gt.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const gt = (a, b, loose) => compare(a, b, loose) > 0
 module.exports = gt
Index: node_modules/object-inspect/test/quoteStyle.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/object-inspect/test/quoteStyle.js b/node_modules/object-inspect/test/quoteStyle.js
--- a/node_modules/object-inspect/test/quoteStyle.js	
+++ b/node_modules/object-inspect/test/quoteStyle.js	
@@ -13,5 +13,14 @@
     t['throws'](function () { inspect(null, { quoteStyle: NaN }); }, 'NaN is not a valid value');
     t['throws'](function () { inspect(null, { quoteStyle: function () {} }); }, 'a function is not a valid value');
 
+    t.equal(inspect('"', { quoteStyle: 'single' }), '\'"\'', 'double quote, quoteStyle: "single"');
+    t.equal(inspect('"', { quoteStyle: 'double' }), '"\\""', 'double quote, quoteStyle: "double"');
+
+    t.equal(inspect('\'', { quoteStyle: 'single' }), '\'\\\'\'', 'single quote, quoteStyle: "single"');
+    t.equal(inspect('\'', { quoteStyle: 'double' }), '"\'"', 'single quote, quoteStyle: "double"');
+
+    t.equal(inspect('`', { quoteStyle: 'single' }), '\'`\'', 'backtick, quoteStyle: "single"');
+    t.equal(inspect('`', { quoteStyle: 'double' }), '"`"', 'backtick, quoteStyle: "double"');
+
     t.end();
 });
Index: node_modules/nopt/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nopt/README.md b/node_modules/nopt/README.md
deleted file mode 100644
--- a/node_modules/nopt/README.md	
+++ /dev/null	
@@ -1,208 +0,0 @@
-If you want to write an option parser, and have it be good, there are
-two ways to do it.  The Right Way, and the Wrong Way.
-
-The Wrong Way is to sit down and write an option parser.  We've all done
-that.
-
-The Right Way is to write some complex configurable program with so many
-options that you go half-insane just trying to manage them all, and put
-it off with duct-tape solutions until you see exactly to the core of the
-problem, and finally snap and write an awesome option parser.
-
-If you want to write an option parser, don't write an option parser.
-Write a package manager, or a source control system, or a service
-restarter, or an operating system.  You probably won't end up with a
-good one of those, but if you don't give up, and you are relentless and
-diligent enough in your procrastination, you may just end up with a very
-nice option parser.
-
-## USAGE
-
-    // my-program.js
-    var nopt = require("nopt")
-      , Stream = require("stream").Stream
-      , path = require("path")
-      , knownOpts = { "foo" : [String, null]
-                    , "bar" : [Stream, Number]
-                    , "baz" : path
-                    , "bloo" : [ "big", "medium", "small" ]
-                    , "flag" : Boolean
-                    , "pick" : Boolean
-                    , "many" : [String, Array]
-                    }
-      , shortHands = { "foofoo" : ["--foo", "Mr. Foo"]
-                     , "b7" : ["--bar", "7"]
-                     , "m" : ["--bloo", "medium"]
-                     , "p" : ["--pick"]
-                     , "f" : ["--flag"]
-                     }
-                 // everything is optional.
-                 // knownOpts and shorthands default to {}
-                 // arg list defaults to process.argv
-                 // slice defaults to 2
-      , parsed = nopt(knownOpts, shortHands, process.argv, 2)
-    console.log(parsed)
-
-This would give you support for any of the following:
-
-```bash
-$ node my-program.js --foo "blerp" --no-flag
-{ "foo" : "blerp", "flag" : false }
-
-$ node my-program.js ---bar 7 --foo "Mr. Hand" --flag
-{ bar: 7, foo: "Mr. Hand", flag: true }
-
-$ node my-program.js --foo "blerp" -f -----p
-{ foo: "blerp", flag: true, pick: true }
-
-$ node my-program.js -fp --foofoo
-{ foo: "Mr. Foo", flag: true, pick: true }
-
-$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.
-{ foo: "Mr. Foo", argv: { remain: ["-fp"] } }
-
-$ node my-program.js --blatzk 1000 -fp # unknown opts are ok.
-{ blatzk: 1000, flag: true, pick: true }
-
-$ node my-program.js --blatzk true -fp # but they need a value
-{ blatzk: true, flag: true, pick: true }
-
-$ node my-program.js --no-blatzk -fp # unless they start with "no-"
-{ blatzk: false, flag: true, pick: true }
-
-$ node my-program.js --baz b/a/z # known paths are resolved.
-{ baz: "/Users/isaacs/b/a/z" }
-
-# if Array is one of the types, then it can take many
-# values, and will always be an array.  The other types provided
-# specify what types are allowed in the list.
-
-$ node my-program.js --many 1 --many null --many foo
-{ many: ["1", "null", "foo"] }
-
-$ node my-program.js --many foo
-{ many: ["foo"] }
-```
-
-Read the tests at the bottom of `lib/nopt.js` for more examples of
-what this puppy can do.
-
-## Types
-
-The following types are supported, and defined on `nopt.typeDefs`
-
-* String: A normal string.  No parsing is done.
-* path: A file system path.  Gets resolved against cwd if not absolute.
-* url: A url.  If it doesn't parse, it isn't accepted.
-* Number: Must be numeric.
-* Date: Must parse as a date. If it does, and `Date` is one of the options,
-  then it will return a Date object, not a string.
-* Boolean: Must be either `true` or `false`.  If an option is a boolean,
-  then it does not need a value, and its presence will imply `true` as
-  the value.  To negate boolean flags, do `--no-whatever` or `--whatever
-  false`
-* NaN: Means that the option is strictly not allowed.  Any value will
-  fail.
-* Stream: An object matching the "Stream" class in node.  Valuable
-  for use when validating programmatically.  (npm uses this to let you
-  supply any WriteStream on the `outfd` and `logfd` config options.)
-* Array: If `Array` is specified as one of the types, then the value
-  will be parsed as a list of options.  This means that multiple values
-  can be specified, and that the value will always be an array.
-
-If a type is an array of values not on this list, then those are
-considered valid values.  For instance, in the example above, the
-`--bloo` option can only be one of `"big"`, `"medium"`, or `"small"`,
-and any other value will be rejected.
-
-When parsing unknown fields, `"true"`, `"false"`, and `"null"` will be
-interpreted as their JavaScript equivalents, and numeric values will be
-interpreted as a number.
-
-You can also mix types and values, or multiple types, in a list.  For
-instance `{ blah: [Number, null] }` would allow a value to be set to
-either a Number or null.
-
-To define a new type, add it to `nopt.typeDefs`.  Each item in that
-hash is an object with a `type` member and a `validate` method.  The
-`type` member is an object that matches what goes in the type list.  The
-`validate` method is a function that gets called with `validate(data,
-key, val)`.  Validate methods should assign `data[key]` to the valid
-value of `val` if it can be handled properly, or return boolean
-`false` if it cannot.
-
-You can also call `nopt.clean(data, types, typeDefs)` to clean up a
-config object and remove its invalid properties.
-
-## Error Handling
-
-By default, nopt outputs a warning to standard error when invalid
-options are found.  You can change this behavior by assigning a method
-to `nopt.invalidHandler`.  This method will be called with
-the offending `nopt.invalidHandler(key, val, types)`.
-
-If no `nopt.invalidHandler` is assigned, then it will console.error
-its whining.  If it is assigned to boolean `false` then the warning is
-suppressed.
-
-## Abbreviations
-
-Yes, they are supported.  If you define options like this:
-
-```javascript
-{ "foolhardyelephants" : Boolean
-, "pileofmonkeys" : Boolean }
-```
-
-Then this will work:
-
-```bash
-node program.js --foolhar --pil
-node program.js --no-f --pileofmon
-# etc.
-```
-
-## Shorthands
-
-Shorthands are a hash of shorter option names to a snippet of args that
-they expand to.
-
-If multiple one-character shorthands are all combined, and the
-combination does not unambiguously match any other option or shorthand,
-then they will be broken up into their constituent parts.  For example:
-
-```json
-{ "s" : ["--loglevel", "silent"]
-, "g" : "--global"
-, "f" : "--force"
-, "p" : "--parseable"
-, "l" : "--long"
-}
-```
-
-```bash
-npm ls -sgflp
-# just like doing this:
-npm ls --loglevel silent --global --force --long --parseable
-```
-
-## The Rest of the args
-
-The config object returned by nopt is given a special member called
-`argv`, which is an object with the following fields:
-
-* `remain`: The remaining args after all the parsing has occurred.
-* `original`: The args as they originally appeared.
-* `cooked`: The args after flags and shorthands are expanded.
-
-## Slicing
-
-Node programs are called with more or less the exact argv as it appears
-in C land, after the v8 and node-specific options have been plucked off.
-As such, `argv[0]` is always `node` and `argv[1]` is always the
-JavaScript program being run.
-
-That's usually not very useful to you.  So they're sliced off by
-default.  If you want them, then you can pass in `0` as the last
-argument, or any other number that you'd like to slice off the start of
-the list.
Index: node_modules/call-bind/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/README.md b/node_modules/call-bind/README.md
deleted file mode 100644
--- a/node_modules/call-bind/README.md	
+++ /dev/null	
@@ -1,64 +0,0 @@
-# call-bind <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
-
-[![github actions][actions-image]][actions-url]
-[![coverage][codecov-image]][codecov-url]
-[![dependency status][deps-svg]][deps-url]
-[![dev dependency status][dev-deps-svg]][dev-deps-url]
-[![License][license-image]][license-url]
-[![Downloads][downloads-image]][downloads-url]
-
-[![npm badge][npm-badge-png]][package-url]
-
-Robustly `.call.bind()` a function.
-
-## Getting started
-
-```sh
-npm install --save call-bind
-```
-
-## Usage/Examples
-
-```js
-const assert = require('assert');
-const callBind = require('call-bind');
-const callBound = require('call-bind/callBound');
-
-function f(a, b) {
-	assert.equal(this, 1);
-	assert.equal(a, 2);
-	assert.equal(b, 3);
-	assert.equal(arguments.length, 2);
-}
-
-const fBound = callBind(f);
-
-const slice = callBound('Array.prototype.slice');
-
-delete Function.prototype.call;
-delete Function.prototype.bind;
-
-fBound(1, 2, 3);
-
-assert.deepEqual(slice([1, 2, 3, 4], 1, -1), [2, 3]);
-```
-
-## Tests
-
-Clone the repo, `npm install`, and run `npm test`
-
-[package-url]: https://npmjs.org/package/call-bind
-[npm-version-svg]: https://versionbadg.es/ljharb/call-bind.svg
-[deps-svg]: https://david-dm.org/ljharb/call-bind.svg
-[deps-url]: https://david-dm.org/ljharb/call-bind
-[dev-deps-svg]: https://david-dm.org/ljharb/call-bind/dev-status.svg
-[dev-deps-url]: https://david-dm.org/ljharb/call-bind#info=devDependencies
-[npm-badge-png]: https://nodei.co/npm/call-bind.png?downloads=true&stars=true
-[license-image]: https://img.shields.io/npm/l/call-bind.svg
-[license-url]: LICENSE
-[downloads-image]: https://img.shields.io/npm/dm/call-bind.svg
-[downloads-url]: https://npm-stat.com/charts.html?package=call-bind
-[codecov-image]: https://codecov.io/gh/ljharb/call-bind/branch/main/graphs/badge.svg
-[codecov-url]: https://app.codecov.io/gh/ljharb/call-bind/
-[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/call-bind
-[actions-url]: https://github.com/ljharb/call-bind/actions
Index: node_modules/postgresql-client/cjs/interfaces/query-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/query-options.js b/node_modules/postgresql-client/cjs/interfaces/query-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/query-options.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/nodemon/lib/config/load.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/lib/config/load.js b/node_modules/nodemon/lib/config/load.js
--- a/node_modules/nodemon/lib/config/load.js	
+++ b/node_modules/nodemon/lib/config/load.js	
@@ -30,8 +30,10 @@
  * the local nodemon.json to the exec and then overwriting using any user
  * specified settings (i.e. from the cli)
  *
- * @param  {Object} settings user defined settings
- * @param  {Function} ready    callback that receives complete config
+ * @param {Object} settings user defined settings
+ * @param {Object} options global options
+ * @param {Object} config the config object to be updated
+ * @param {Function} callback that receives complete config
  */
 function load(settings, options, config, callback) {
   config.loaded = [];
Index: node_modules/postgresql-client/esm/util/encode-binaryarray.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/encode-binaryarray.js b/node_modules/postgresql-client/esm/util/encode-binaryarray.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/encode-binaryarray.js	
+++ /dev/null	
@@ -1,41 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { arrayCalculateDim } from './array-calculatedim.js';
-export function encodeBinaryArray(io, value, itemOid, options, encode, encodeCalculateDimFn) {
-    encodeCalculateDimFn = encodeCalculateDimFn || arrayCalculateDim;
-    itemOid = itemOid || DataTypeOIDs.varchar;
-    const dim = encodeCalculateDimFn(value);
-    const ndims = dim.length;
-    const zeroOffset = io.offset;
-    io.writeInt32BE(ndims) // Number of dimensions
-        .writeInt32BE(0) // reserved for has-null flag
-        .writeInt32BE(itemOid);
-    for (let d = 0; d < ndims; d++) {
-        io.writeInt32BE(dim[d]); // Number of items in dimension
-        io.writeInt32BE(0); // LBound always 0.
-    }
-    let hasNull = false;
-    let pos;
-    const writeDim = (arr, level) => {
-        const elemCount = dim[level];
-        for (let i = 0; i < elemCount; i++) {
-            if (level < dim.length - 1) {
-                writeDim(arr && arr[i], level + 1);
-                continue;
-            }
-            // if value is null
-            if (!arr || arr[i] == null) {
-                hasNull = true;
-                io.writeInt32BE(-1);
-                continue;
-            }
-            io.writeInt32BE(0); // reserved for data len
-            pos = io.offset;
-            encode(io, arr[i], options);
-            // Update item data size
-            io.buffer.writeInt32BE(io.length - pos, pos - 4);
-        }
-    };
-    writeDim(value, 0);
-    if (hasNull)
-        io.buffer.writeInt32BE(1, zeroOffset + 4);
-}
Index: node_modules/postgresql-client/esm/protocol/backend.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/backend.js b/node_modules/postgresql-client/esm/protocol/backend.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/backend.js	
+++ /dev/null	
@@ -1,252 +0,0 @@
-import { BufferReader } from './buffer-reader.js';
-import { Protocol } from './protocol.js';
-// 1 byte message type, 4 byte frame length
-const HEADER_LENGTH = 5;
-const ErrorFieldTypes = {
-    M: 'message',
-    S: 'severity',
-    V: 'severity',
-    C: 'code',
-    D: 'detail',
-    H: 'hint',
-    P: 'position',
-    p: 'internalPosition',
-    q: 'internalQuery',
-    W: 'where',
-    s: 'schema',
-    t: 'table',
-    c: 'column',
-    d: 'dataType',
-    n: 'constraint',
-    F: 'file',
-    L: 'line',
-    R: 'routine',
-};
-export class Backend {
-    reset() {
-        this._buf = undefined;
-    }
-    parse(data, callback) {
-        if (this._buf) {
-            data = Buffer.concat([this._buf, data]);
-            this._buf = undefined;
-        }
-        const io = new BufferReader(data);
-        let offsetBookmark;
-        while (io.length - io.offset >= HEADER_LENGTH) {
-            offsetBookmark = io.offset;
-            const code = io.readUInt8();
-            const len = io.readUInt32BE();
-            // Check if frame data not received yet
-            if (io.length - io.offset < len - 4) {
-                io.offset = offsetBookmark;
-                this._buf = io.readBuffer();
-                return;
-            }
-            const parser = MessageParsers[code];
-            const v = parser && parser(io, code, len);
-            callback(code, v);
-            // Set offset to next message
-            io.offset = offsetBookmark + len + 1;
-        }
-        if (io.offset < io.length)
-            this._buf = io.readBuffer(io.length - io.offset);
-    }
-}
-const MessageParsers = {
-    [Protocol.BackendMessageCode.Authentication]: parseAuthentication,
-    [Protocol.BackendMessageCode.BackendKeyData]: parseBackendKeyData,
-    [Protocol.BackendMessageCode.CommandComplete]: parseCommandComplete,
-    [Protocol.BackendMessageCode.CopyData]: parseCopyData,
-    [Protocol.BackendMessageCode.CopyInResponse]: parseCopyResponse,
-    [Protocol.BackendMessageCode.CopyOutResponse]: parseCopyResponse,
-    [Protocol.BackendMessageCode.CopyBothResponse]: parseCopyResponse,
-    [Protocol.BackendMessageCode.DataRow]: parseDataRow,
-    [Protocol.BackendMessageCode.ErrorResponse]: parseErrorResponse,
-    [Protocol.BackendMessageCode.NoticeResponse]: parseErrorResponse,
-    [Protocol.BackendMessageCode.NotificationResponse]: parseNotificationResponse,
-    [Protocol.BackendMessageCode.FunctionCallResponse]: parseFunctionCallResponse,
-    [Protocol.BackendMessageCode.NegotiateProtocolVersion]: parseNegotiateProtocolVersion,
-    [Protocol.BackendMessageCode.ParameterDescription]: parseParameterDescription,
-    [Protocol.BackendMessageCode.ParameterStatus]: parseParameterStatus,
-    [Protocol.BackendMessageCode.ReadyForQuery]: parseReadyForQuery,
-    [Protocol.BackendMessageCode.RowDescription]: parseRowDescription,
-};
-function parseAuthentication(io, code, len) {
-    const kind = io.readUInt32BE();
-    switch (kind) {
-        case 0:
-            return; // AuthenticationOk
-        case 2:
-            return {
-                kind: 'KerberosV5',
-            };
-        case 3:
-            return {
-                kind: 'CleartextPassword',
-            };
-        case 5:
-            return {
-                kind: 'MD5Password',
-                salt: io.readBuffer(len - 8),
-            };
-        case 6:
-            return {
-                kind: 'SCMCredential',
-            };
-        case 7:
-            return {
-                kind: 'GSS',
-            };
-        case 9:
-            return {
-                kind: 'SSPI',
-            };
-        case 8:
-            return {
-                kind: 'GSSContinue',
-                data: io.readBuffer(len - 8),
-            };
-        case 10: {
-            const out = {
-                kind: 'SASL',
-                mechanisms: [],
-            };
-            let mechanism;
-            while ((mechanism = io.readCString())) {
-                out.mechanisms.push(mechanism);
-            }
-            return out;
-        }
-        case 11:
-            return {
-                kind: 'SASLContinue',
-                data: io.readLString(len - 8, 'utf8'),
-            };
-        case 12:
-            return {
-                kind: 'SASLFinal',
-                data: io.readLString(len - 8, 'utf8'),
-            };
-        default:
-            throw new Error(`Unknown authentication kind (${kind})`);
-    }
-}
-function parseBackendKeyData(io) {
-    return {
-        processID: io.readUInt32BE(),
-        secretKey: io.readUInt32BE(),
-    };
-}
-function parseCommandComplete(io) {
-    return {
-        command: io.readCString('utf8'),
-    };
-}
-function parseCopyData(io, code, len) {
-    return {
-        data: io.readBuffer(len - 4),
-    };
-}
-function parseCopyResponse(io) {
-    const out = {
-        overallFormat: io.readUInt8() === 0 ? Protocol.DataFormat.text : Protocol.DataFormat.binary,
-        columnCount: io.readUInt16BE(),
-    };
-    if (out.columnCount) {
-        out.columnFormats = [];
-        for (let i = 0; i < out.columnCount; i++) {
-            out.columnFormats.push(io.readUInt16BE() === 0 ? Protocol.DataFormat.text : Protocol.DataFormat.binary);
-        }
-    }
-    return out;
-}
-function parseDataRow(io) {
-    const out = {
-        columnCount: io.readUInt16BE(),
-    };
-    if (out.columnCount) {
-        out.columns = [];
-        for (let i = 0; i < out.columnCount; i++) {
-            // The length of the column value, in bytes (this count does not include itself).
-            // Can be zero. As a special case, -1 indicates a NULL column value.
-            // No value bytes follow in the NULL case.
-            const l = io.readInt32BE();
-            if (l < 0)
-                out.columns.push(null);
-            else
-                out.columns.push(io.readBuffer(l));
-        }
-    }
-    return out;
-}
-function parseErrorResponse(io) {
-    const out = {};
-    let fieldType;
-    while ((fieldType = io.readLString(1)) !== '\0') {
-        const value = io.readCString('utf8');
-        const key = ErrorFieldTypes[fieldType];
-        if (key)
-            out[key] = value;
-    }
-    return out;
-}
-function parseNotificationResponse(io) {
-    return {
-        processId: io.readUInt32BE(),
-        channel: io.readCString(),
-        payload: io.readCString(),
-    };
-}
-function parseFunctionCallResponse(io, code, len) {
-    return {
-        result: io.readBuffer(len - 4),
-    };
-}
-function parseNegotiateProtocolVersion(io) {
-    return {
-        supportedVersionMinor: io.readUInt32BE(),
-        numberOfNotSupportedVersions: io.readUInt32BE(),
-        option: io.readCString('utf8'),
-    };
-}
-function parseParameterDescription(io) {
-    const out = {
-        parameterCount: io.readUInt32BE(),
-        parameterIds: [],
-    };
-    for (let i = 0; i < out.parameterCount; i++) {
-        out.parameterIds.push(io.readUInt32BE());
-    }
-    return out;
-}
-function parseParameterStatus(io) {
-    return {
-        name: io.readCString('utf8'),
-        value: io.readCString('utf8'),
-    };
-}
-function parseReadyForQuery(io) {
-    return {
-        status: io.readLString(1),
-    };
-}
-function parseRowDescription(io) {
-    const fieldCount = io.readUInt16BE();
-    const out = {
-        fields: [],
-    };
-    for (let i = 0; i < fieldCount; i++) {
-        const field = {
-            fieldName: io.readCString('utf8'),
-            tableId: io.readInt32BE(),
-            columnId: io.readInt16BE(),
-            dataTypeId: io.readInt32BE(),
-            fixedSize: io.readInt16BE(),
-            modifier: io.readInt32BE(),
-            format: io.readInt16BE() === 0 ? Protocol.DataFormat.text : Protocol.DataFormat.binary,
-        };
-        out.fields.push(field);
-    }
-    return out;
-}
Index: node_modules/postgresql-client/esm/data-types/circle-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/circle-type.js b/node_modules/postgresql-client/esm/data-types/circle-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/circle-type.js	
+++ /dev/null	
@@ -1,45 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-const CIRCLE_PATTERN1 = /^< *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *(-?\d+\.?\d*) *>$/;
-const CIRCLE_PATTERN2 = /^\( *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *(-?\d+\.?\d*) *\)$/;
-const CIRCLE_PATTERN3 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *(-?\d+\.?\d*)$/;
-const CIRCLE_PATTERN4 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-export const CircleType = {
-    name: 'circle',
-    oid: DataTypeOIDs.circle,
-    jsType: 'object',
-    parseBinary(v) {
-        return {
-            x: v.readDoubleBE(0),
-            y: v.readDoubleBE(8),
-            r: v.readDoubleBE(16),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x);
-        buf.writeDoubleBE(v.y);
-        buf.writeDoubleBE(v.r);
-    },
-    parseText(v) {
-        const m = v.match(CIRCLE_PATTERN1) || v.match(CIRCLE_PATTERN2) || v.match(CIRCLE_PATTERN3) || v.match(CIRCLE_PATTERN4);
-        if (!m)
-            return undefined;
-        return {
-            x: parseFloat(m[1]),
-            y: parseFloat(m[2]),
-            r: parseFloat(m[3]),
-        };
-    },
-    isType(v) {
-        return (typeof v === 'object' &&
-            Object.keys(v).length === 3 &&
-            typeof v.x === 'number' &&
-            typeof v.y === 'number' &&
-            typeof v.r === 'number');
-    },
-};
-export const ArrayCircleType = {
-    ...CircleType,
-    name: '_circle',
-    oid: DataTypeOIDs._circle,
-    elementsOID: DataTypeOIDs.circle,
-};
Index: node_modules/postgresql-client/typings/protocol/smart-buffer.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/smart-buffer.d.ts b/node_modules/postgresql-client/typings/protocol/smart-buffer.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/smart-buffer.d.ts	
+++ /dev/null	
@@ -1,39 +0,0 @@
-/// <reference types="node" />
-import { BufferReader } from './buffer-reader.js';
-export interface SmartBufferConfig {
-    pageSize?: number;
-    maxLength?: number;
-    houseKeepInterval?: number;
-}
-export declare class SmartBuffer extends BufferReader {
-    static DEFAULT_PAGE_SIZE: number;
-    static DEFAULT_MAX_SIZE: number;
-    private readonly _houseKeepInterval;
-    private _houseKeepTimer?;
-    private _lastHouseKeep;
-    private _stMaxPages;
-    private _length;
-    readonly pageSize: number;
-    readonly maxSize: number;
-    constructor(cfg?: SmartBufferConfig);
-    get capacity(): number;
-    get length(): number;
-    start(): this;
-    flush(): Buffer;
-    growSize(len: number): this;
-    fill(value?: number, len?: number): this;
-    writeCString(str: string, encoding?: BufferEncoding): this;
-    writeLString(str?: string, encoding?: BufferEncoding): this;
-    writeString(str: string, encoding?: BufferEncoding): this;
-    writeInt8(n: number): this;
-    writeUInt8(n: number): this;
-    writeUInt16BE(n: number): this;
-    writeUInt32BE(n: number): this;
-    writeInt16BE(n: number): this;
-    writeInt32BE(n: number): this;
-    writeBigInt64BE(n: bigint | number): this;
-    writeFloatBE(n: number): this;
-    writeDoubleBE(n: number): this;
-    writeBuffer(buffer: Buffer): this;
-    private _houseKeep;
-}
Index: node_modules/postgresql-client/node_modules/postgres-bytea/decoder-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/decoder-test.js b/node_modules/postgresql-client/node_modules/postgres-bytea/decoder-test.js
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/decoder-test.js	
+++ /dev/null	
@@ -1,29 +0,0 @@
-'use strict'
-
-const test = require('tape-promise').default(require('tape'))
-
-const { Readable } = require('stream')
-const streamToPromise = require('stream-to-promise')
-const Decoder = require('./decoder')
-
-test('decoder', (t) => {
-  t.test('input cuts at chunk boundary', async (t) => {
-    const input = [...Buffer.from('\\\\x616263').values()]
-
-    for (let i = 1; i < input.length; i++) {
-      const result = await streamToPromise(Readable.from([input.slice(0, i), input.slice(i)].map(Buffer.from)).pipe(new Decoder()))
-      t.equal(result.toString(), 'abc', `i=${i}`)
-    }
-  })
-
-  t.test('fails if not prefixed with \\\\x', async (t) => {
-    const dest = new Decoder()
-    const promise = streamToPromise(dest)
-
-    dest.write(Buffer.from('616263'))
-
-    await t.rejects(promise, /prefix/)
-  })
-
-  t.end()
-})
Index: node_modules/pg-protocol/dist/b.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/b.js.map b/node_modules/pg-protocol/dist/b.js.map
--- a/node_modules/pg-protocol/dist/b.js.map	
+++ b/node_modules/pg-protocol/dist/b.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"b.js","sourceRoot":"","sources":["../src/b.ts"],"names":[],"mappings":";AAAA,6BAA6B;;AAE7B,mDAAwC;AAExC,mDAA8C;AAE9C,MAAM,KAAK,GAAG,IAAI,CAAA;AAClB,IAAI,KAAK,GAAG,CAAC,CAAA;AACb,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;AACtB,MAAM,MAAM,GAAG,IAAI,sBAAM,EAAE,CAAA;AAE3B,MAAM,MAAM,GAAG,IAAI,4BAAY,EAAE,CAAA;AACjC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;AAE3D,MAAM,GAAG,GAAG,GAAG,EAAE;IACf,IAAI,KAAK,GAAG,KAAK,EAAE;QACjB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAA;QAC/B,OAAM;KACP;IACD,KAAK,EAAE,CAAA;IACP,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;QAC3B,MAAM,CAAC,OAAO,EAAE,CAAA;KACjB;IACD,YAAY,CAAC,GAAG,CAAC,CAAA;AACnB,CAAC,CAAA;AAED,GAAG,EAAE,CAAA"}
\ No newline at end of file
+{"version":3,"file":"b.js","sourceRoot":"","sources":["../src/b.ts"],"names":[],"mappings":";AAAA,6BAA6B;;AAE7B,mDAA8C;AAE9C,MAAM,KAAK,GAAG,IAAI,CAAA;AAClB,IAAI,KAAK,GAAG,CAAC,CAAA;AACb,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;AAE/B,MAAM,MAAM,GAAG,IAAI,4BAAY,EAAE,CAAA;AACjC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;AAE3D,MAAM,GAAG,GAAG,GAAG,EAAE;IACf,IAAI,KAAK,GAAG,KAAK,EAAE;QACjB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAA;QACtC,OAAM;KACP;IACD,KAAK,EAAE,CAAA;IACP,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;QAC3B,MAAM,CAAC,OAAO,EAAE,CAAA;KACjB;IACD,YAAY,CAAC,GAAG,CAAC,CAAA;AACnB,CAAC,CAAA;AAED,GAAG,EAAE,CAAA"}
\ No newline at end of file
Index: node_modules/pg-pool/test/logging.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/logging.js b/node_modules/pg-pool/test/logging.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/logging.js	
+++ /dev/null	
@@ -1,20 +0,0 @@
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('logging', function () {
-  it('logs to supplied log function if given', function () {
-    const messages = []
-    const log = function (msg) {
-      messages.push(msg)
-    }
-    const pool = new Pool({ log: log })
-    return pool.query('SELECT NOW()').then(function () {
-      expect(messages.length).to.be.greaterThan(0)
-      return pool.end()
-    })
-  })
-})
Index: node_modules/postgresql-client/esm/interfaces/field-info.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/field-info.js b/node_modules/postgresql-client/esm/interfaces/field-info.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/field-info.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/ts-gems/lib/pick.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/pick.d.ts b/node_modules/ts-gems/lib/pick.d.ts
--- a/node_modules/ts-gems/lib/pick.d.ts	
+++ b/node_modules/ts-gems/lib/pick.d.ts	
@@ -1,12 +1,12 @@
 import { Or } from './logical.js';
-import { OmitFunctions } from './omit';
+import { OmitFunctions } from './omit.js';
 import {
   IfAny,
   IfEmptyObject,
   IfFunction,
   IfNever,
   IfUnknown,
-} from './type-check';
+} from './type-check.js';
 
 /**
  * From T, pick a set of properties whose keys are in the union K,
@@ -31,7 +31,7 @@
     // Omit never keys
     IfNever<Exclude<T[K], undefined>>,
     // Omit non functions
-    IfFunction<Exclude<T[K], undefined>, false, true>
+    IfFunction<NonNullable<T[K]>, false, true>
   > extends true
     ? never
     : K]: T[K];
Index: node_modules/postgresql-client/typings/data-types/int2-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/int2-type.d.ts b/node_modules/postgresql-client/typings/data-types/int2-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/int2-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const Int2Type: DataType;
-export declare const ArrayInt2Type: DataType;
Index: node_modules/lightning-pool/cjs/pool-request.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/cjs/pool-request.js b/node_modules/lightning-pool/cjs/pool-request.js
--- a/node_modules/lightning-pool/cjs/pool-request.js	
+++ b/node_modules/lightning-pool/cjs/pool-request.js	
@@ -1,14 +1,13 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.PoolRequest = void 0;
-// eslint-disable-next-line @typescript-eslint/no-empty-function
-function noop() {
-}
+function noop() { }
 class PoolRequest {
-    constructor(pool, callback) {
+    constructor(pool, callback, options) {
         this.timedOut = false;
         this.created = Date.now();
         this.callback = callback || noop;
+        this.options = options;
         if (pool.options.acquireTimeoutMillis) {
             this.timeoutHandle = setTimeout(() => {
                 this.timedOut = true;
Index: node_modules/power-tasks/cjs/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/cjs/index.js b/node_modules/power-tasks/cjs/index.js
--- a/node_modules/power-tasks/cjs/index.js	
+++ b/node_modules/power-tasks/cjs/index.js	
@@ -1,19 +1,6 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __exportStar = (this && this.__exportStar) || function(m, exports) {
-    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-__exportStar(require("./task.js"), exports);
-__exportStar(require("./task-queue.js"), exports);
-__exportStar(require("./abort-error.js"), exports);
+const tslib_1 = require("tslib");
+tslib_1.__exportStar(require("./abort-error.js"), exports);
+tslib_1.__exportStar(require("./task.js"), exports);
+tslib_1.__exportStar(require("./task-queue.js"), exports);
Index: node_modules/lightning-pool/esm/pool-options.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/pool-options.d.ts b/node_modules/lightning-pool/esm/pool-options.d.ts
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/pool-options.d.ts	
+++ /dev/null	
@@ -1,42 +0,0 @@
-/// <reference types="node" />
-import { EventEmitter } from 'events';
-import { PoolConfiguration } from './definitions.js';
-import { Pool } from './pool.js';
-export declare class PoolOptions extends EventEmitter {
-    readonly pool: Pool;
-    private _acquireMaxRetries;
-    private _acquireRetryWait;
-    private _acquireTimeoutMillis;
-    private _fifo;
-    private _idleTimeoutMillis;
-    private _houseKeepInterval;
-    private _min;
-    private _minIdle;
-    private _max;
-    private _maxQueue;
-    private _validation;
-    constructor(pool: Pool);
-    get acquireMaxRetries(): number;
-    set acquireMaxRetries(val: number);
-    get acquireRetryWait(): number;
-    set acquireRetryWait(val: number);
-    get acquireTimeoutMillis(): number;
-    set acquireTimeoutMillis(val: number);
-    get fifo(): boolean;
-    set fifo(val: boolean);
-    get idleTimeoutMillis(): number;
-    set idleTimeoutMillis(val: number);
-    get houseKeepInterval(): number;
-    set houseKeepInterval(val: number);
-    get min(): number;
-    set min(val: number);
-    get minIdle(): number;
-    set minIdle(val: number);
-    get max(): number;
-    set max(val: number);
-    get maxQueue(): number;
-    set maxQueue(val: number);
-    get validation(): boolean;
-    set validation(val: boolean);
-    assign(values: PoolConfiguration | PoolOptions): void;
-}
Index: node_modules/dotenv/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/README.md b/node_modules/dotenv/README.md
--- a/node_modules/dotenv/README.md	
+++ b/node_modules/dotenv/README.md	
@@ -6,42 +6,13 @@
 
 <div align="center">
 
-<p>
-  <sup>
-    <a href="https://github.com/sponsors/motdotla">Dotenv is supported by the community.</a>
-  </sup>
-</p>
-<sup>Special thanks to:</sup>
+**Special thanks to [our sponsors](https://github.com/sponsors/motdotla)**
+
 <br>
+<a href="https://graphite.dev/?utm_source=github&utm_medium=repo&utm_campaign=dotenv"><img src="https://res.cloudinary.com/dotenv-org/image/upload/v1744035073/graphite_lgsrl8.gif" width="240" alt="Graphite" /></a>
 <br>
-<a href="https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=dotenv_p_20220831">
-  <div>
-    <img src="https://res.cloudinary.com/dotenv-org/image/upload/v1661980709/warp_hi8oqj.png" width="230" alt="Warp">
-  </div>
-  <b>Warp is a blazingly fast, Rust-based terminal reimagined to work like a modern app.</b>
-  <div>
-    <sup>Get more done in the CLI with real text editing, block-based output, and AI command search.</sup>
-  </div>
-</a>
-<br>
-<a href="https://workos.com/?utm_campaign=github_repo&utm_medium=referral&utm_content=dotenv&utm_source=github">
-  <div>
-    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_scale,w_400/v1665605496/68747470733a2f2f73696e647265736f726875732e636f6d2f6173736574732f7468616e6b732f776f726b6f732d6c6f676f2d77686974652d62672e737667_zdmsbu.svg" width="270" alt="WorkOS">
-  </div>
-  <b>Your App, Enterprise Ready.</b>
-  <div>
-    <sup>Add Single Sign-On, Multi-Factor Auth, and more, in minutes instead of months.</sup>
-  </div>
-</a>
-<br/>
-<a href="https://runalloy.com/?utm_source=github&utm_medium=referral&utm_campaign=1224_dotenv">
-  <div>
-    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_crop,g_center,h_65,w_290,x_0,y_0/v1704258787/AlloyAutomation-logo_dqin8c.svg" width="370" alt="Alloy Automation">
-  </div>
-  <b>Launch user-facing integrations faster</b>
-  <div>
-    <sup>Easily spin up hundreds of integrations. Sign up free or read our docs first</sup>
-  </div>
+<a href="https://graphite.dev/?utm_source=github&utm_medium=repo&utm_campaign=dotenv">
+  <b>Graphite is the AI developer productivity platform helping teams on GitHub ship higher quality software, faster.</b>
 </a>
 <hr>
 </div>
@@ -59,7 +30,7 @@
 * [🌱 Install](#-install)
 * [🏗️ Usage (.env)](#%EF%B8%8F-usage)
 * [🌴 Multiple Environments 🆕](#-manage-multiple-environments)
-* [🚀 Deploying (.env.vault) 🆕](#-deploying)
+* [🚀 Deploying (encryption) 🆕](#-deploying)
 * [📚 Examples](#-examples)
 * [📖 Docs](#-documentation)
 * [❓ FAQ](#-faq)
@@ -68,11 +39,20 @@
 ## 🌱 Install
 
 ```bash
-# install locally (recommended)
 npm install dotenv --save
 ```
 
-Or installing with yarn? `yarn add dotenv`
+You can also use an npm-compatible package manager like yarn, bun or pnpm:
+
+```bash
+yarn add dotenv
+```
+```bash
+bun add dotenv
+```
+```bash
+pnpm add dotenv
+```
 
 ## 🏗️ Usage
 
@@ -83,7 +63,7 @@
 </div>
 </a>
 
-Create a `.env` file in the root of your project:
+Create a `.env` file in the root of your project (if using a monorepo structure like `apps/backend/app.js`, put it in the root of the folder where your `app.js` process runs):
 
 ```dosini
 S3_BUCKET="YOURS3BUCKET"
@@ -107,6 +87,7 @@
 
 ```javascript
 require('dotenv').config()
+// or import 'dotenv/config' if you're using ES6
 
 ...
 
@@ -186,23 +167,41 @@
 
 You need to add the value of another variable in one of your variables? Use [dotenv-expand](https://github.com/motdotla/dotenv-expand).
 
+### Command Substitution
+
+Use [dotenvx](https://github.com/dotenvx/dotenvx) to use command substitution.
+
+Add the output of a command to one of your variables in your .env file.
+
+```ini
+# .env
+DATABASE_URL="postgres://$(whoami)@localhost/my_database"
+```
+```js
+// index.js
+console.log('DATABASE_URL', process.env.DATABASE_URL)
+```
+```sh
+$ dotenvx run --debug -- node index.js
+[dotenvx@0.14.1] injecting env (1) from .env
+DATABASE_URL postgres://yourusername@localhost/my_database
+```
+
 ### Syncing
 
-You need to keep `.env` files in sync between machines, environments, or team members? Use [dotenv-vault](https://github.com/dotenv-org/dotenv-vault).
+You need to keep `.env` files in sync between machines, environments, or team members? Use [dotenvx](https://github.com/dotenvx/dotenvx) to encrypt your `.env` files and safely include them in source control. This still subscribes to the twelve-factor app rules by generating a decryption key separate from code.
 
 ### Multiple Environments
 
-You need to manage your secrets across different environments and apply them as needed? Use a `.env.vault` file with a `DOTENV_KEY`.
+Use [dotenvx](https://github.com/dotenvx/dotenvx) to generate `.env.ci`, `.env.production` files, and more.
 
 ### Deploying
 
-You need to deploy your secrets in a cloud-agnostic manner? Use a `.env.vault` file. See [deploying `.env.vault` files](https://github.com/motdotla/dotenv/tree/master#-deploying).
+You need to deploy your secrets in a cloud-agnostic manner? Use [dotenvx](https://github.com/dotenvx/dotenvx) to generate a private decryption key that is set on your production server.
 
 ## 🌴 Manage Multiple Environments
 
-Use [dotenvx](https://github.com/dotenvx/dotenvx) or [dotenv-vault](https://github.com/dotenv-org/dotenv-vault).
-
-### dotenvx
+Use [dotenvx](https://github.com/dotenvx/dotenvx)
 
 Run any environment locally. Create a `.env.ENVIRONMENT` file and use `--env-file` to load it. It's straightforward, yet flexible.
 
@@ -228,78 +227,23 @@
 
 [more environment examples](https://dotenvx.com/docs/quickstart/environments)
 
-### dotenv-vault
-
-Edit your production environment variables.
-
-```bash
-$ npx dotenv-vault open production
-```
-
-Regenerate your `.env.vault` file.
-
-```bash
-$ npx dotenv-vault build
-```
-
-*ℹ️  🔐 Vault Managed vs 💻 Locally Managed: The above example, for brevity's sake, used the 🔐 Vault Managed solution to manage your `.env.vault` file. You can instead use the 💻 Locally Managed solution. [Read more here](https://github.com/dotenv-org/dotenv-vault#how-do-i-use--locally-managed-dotenv-vault). Our vision is that other platforms and orchestration tools adopt the `.env.vault` standard as they did the `.env` standard. We don't expect to be the only ones providing tooling to manage and generate `.env.vault` files.*
-
-<a href="https://github.com/dotenv-org/dotenv-vault#-manage-multiple-environments">Learn more at dotenv-vault: Manage Multiple Environments</a>
-
 ## 🚀 Deploying
 
-Use [dotenvx](https://github.com/dotenvx/dotenvx) or [dotenv-vault](https://github.com/dotenv-org/dotenv-vault).
+Use [dotenvx](https://github.com/dotenvx/dotenvx).
 
-### dotenvx
+Add encryption to your `.env` files with a single command. Pass the `--encrypt` flag.
 
-Encrypt your secrets to a `.env.vault` file and load from it (recommended for production and ci).
-
-```bash
-$ echo "HELLO=World" > .env
-$ echo "HELLO=production" > .env.production
+```
+$ dotenvx set HELLO Production --encrypt -f .env.production
 $ echo "console.log('Hello ' + process.env.HELLO)" > index.js
 
-$ dotenvx encrypt
-[dotenvx][info] encrypted to .env.vault (.env,.env.production)
-[dotenvx][info] keys added to .env.keys (DOTENV_KEY_PRODUCTION,DOTENV_KEY_PRODUCTION)
-
-$ DOTENV_KEY='<dotenv_key_production>' dotenvx run -- node index.js
-[dotenvx][info] loading env (1) from encrypted .env.vault
-Hello production
-^ :-]
+$ DOTENV_PRIVATE_KEY_PRODUCTION="<.env.production private key>" dotenvx run -- node index.js
+[dotenvx] injecting env (2) from .env.production
+Hello Production
 ```
 
 [learn more](https://github.com/dotenvx/dotenvx?tab=readme-ov-file#encryption)
 
-### dotenv-vault
-
-*Note: Requires dotenv >= 16.1.0*
-
-Encrypt your `.env.vault` file.
-
-```bash
-$ npx dotenv-vault build
-```
-
-Fetch your production `DOTENV_KEY`.
-
-```bash
-$ npx dotenv-vault keys production
-```
-
-Set `DOTENV_KEY` on your server.
-
-```bash
-# heroku example
-heroku config:set DOTENV_KEY=dotenv://:key_1234…@dotenvx.com/vault/.env.vault?environment=production
-```
-
-That's it! On deploy, your `.env.vault` file will be decrypted and its secrets injected as environment variables – just in time.
-
-*ℹ️ A note from [Mot](https://github.com/motdotla): Until recently, we did not have an opinion on how and where to store your secrets in production. We now strongly recommend generating a `.env.vault` file. It's the best way to prevent your secrets from being scattered across multiple servers and cloud providers – protecting you from breaches like the [CircleCI breach](https://techcrunch.com/2023/01/05/circleci-breach/). Also it unlocks interoperability WITHOUT native third-party integrations. Third-party integrations are [increasingly risky](https://coderpad.io/blog/development/heroku-github-breach/) to our industry. They may be the 'du jour' of today, but we imagine a better future.*
-
-<a href="https://github.com/dotenv-org/dotenv-vault#-deploying">Learn more at dotenv-vault: Deploying</a>
-
 ## 📚 Examples
 
 See [examples](https://github.com/dotenv-org/examples) of using dotenv with various frameworks, languages, and configurations.
@@ -308,7 +252,6 @@
 * [nodejs (debug on)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs-debug)
 * [nodejs (override on)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs-override)
 * [nodejs (processEnv override)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-custom-target)
-* [nodejs (DOTENV_KEY override)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-vault-custom-target)
 * [esm](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-esm)
 * [esm (preload)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-esm-preload)
 * [typescript](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-typescript)
@@ -403,26 +346,16 @@
 
 Default: `process.env`
 
-Specify an object to write your secrets to. Defaults to `process.env` environment variables.
+Specify an object to write your environment variables to. Defaults to `process.env` environment variables.
 
 ```js
 const myObject = {}
 require('dotenv').config({ processEnv: myObject })
 
-console.log(myObject) // values from .env or .env.vault live here now.
+console.log(myObject) // values from .env
 console.log(process.env) // this was not changed or written to
 ```
 
-##### DOTENV_KEY
-
-Default: `process.env.DOTENV_KEY`
-
-Pass the `DOTENV_KEY` directly to config options. Defaults to looking for `process.env.DOTENV_KEY` environment variable. Note this only applies to decrypting `.env.vault` files. If passed as null or undefined, or not passed at all, dotenv falls back to its traditional job of parsing a `.env` file.
-
-```js
-require('dotenv').config({ DOTENV_KEY: 'dotenv://:key_1234…@dotenvx.com/vault/.env.vault?environment=production' })
-```
-
 ### Parse
 
 The engine which parses the contents of your file containing environment
@@ -493,22 +426,6 @@
 
 Override any environment variables that have already been set.
 
-### Decrypt
-
-The engine which decrypts the ciphertext contents of your .env.vault file is available for use. It accepts a ciphertext and a decryption key. It uses AES-256-GCM encryption.
-
-For example, decrypting a simple ciphertext:
-
-```js
-const dotenv = require('dotenv')
-const ciphertext = 's7NYXa809k/bVSPwIAmJhPJmEGTtU0hG58hOZy7I0ix6y5HP8LsHBsZCYC/gw5DDFy5DgOcyd18R'
-const decryptionKey = 'ddcaa26504cd70a6fef9801901c3981538563a1767c297cb8416e8a38c62fe00'
-
-const decrypted = dotenv.decrypt(ciphertext, decryptionKey)
-
-console.log(decrypted) // # development@v6\nALPHA="zeta"
-```
-
 ## ❓ FAQ
 
 ### Why is the `.env` file not loading my environment variables successfully?
@@ -532,7 +449,7 @@
 
 ### Should I have multiple `.env` files?
 
-We recommend creating on `.env` file per environment. Use `.env` for local/development, `.env.production` for production and so on. This still follows the twelve factor principles as each is attributed individually to its own environment. Avoid custom set ups that work in inheritance somehow (`.env.production` inherits values form `.env` for example). It is better to duplicate values if necessary across each `.env.environment` file.
+We recommend creating one `.env` file per environment. Use `.env` for local/development, `.env.production` for production and so on. This still follows the twelve factor principles as each is attributed individually to its own environment. Avoid custom set ups that work in inheritance somehow (`.env.production` inherits values form `.env` for example). It is better to duplicate values if necessary across each `.env.environment` file.
 
 > In a twelve-factor app, env vars are granular controls, each fully orthogonal to other env vars. They are never grouped together as “environments”, but instead are independently managed for each deploy. This is a model that scales up smoothly as the app naturally expands into more deploys over its lifetime.
 >
@@ -609,7 +526,13 @@
 
 `errorReporter.mjs`:
 ```js
-import { Client } from 'best-error-reporting-service'
+class Client {
+  constructor (apiKey) {
+    console.log('apiKey', apiKey)
+
+    this.apiKey = apiKey
+  }
+}
 
 export default new Client(process.env.API_KEY)
 ```
@@ -619,8 +542,7 @@
 import * as dotenv from 'dotenv'
 dotenv.config()
 
-import errorReporter from './errorReporter.mjs'
-errorReporter.report(new Error('documented example'))
+import errorReporter from './errorReporter.mjs' // process.env.API_KEY will be blank!
 ```
 
 `process.env.API_KEY` will be blank.
@@ -631,7 +553,6 @@
 import 'dotenv/config'
 
 import errorReporter from './errorReporter.mjs'
-errorReporter.report(new Error('documented example'))
 ```
 
 Does that make sense? It's a bit unintuitive, but it is how importing of ES6 modules work. Here is a [working example of this pitfall](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-es6-import-pitfall).
@@ -685,11 +606,7 @@
 
 ### What about syncing and securing .env files?
 
-Use [dotenv-vault](https://github.com/dotenv-org/dotenv-vault)
-
-### What is a `.env.vault` file?
-
-A `.env.vault` file is an encrypted version of your development (and ci, staging, production, etc) environment variables. It is paired with a `DOTENV_KEY` to deploy your secrets more securely than scattering them across multiple platforms and tools. Use [dotenv-vault](https://github.com/dotenv-org/dotenv-vault) to manage and generate them.
+Use [dotenvx](https://github.com/dotenvx/dotenvx)
 
 ### What if I accidentally commit my `.env` file to code?
 
Index: node_modules/has-property-descriptors/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-property-descriptors/README.md b/node_modules/has-property-descriptors/README.md
deleted file mode 100644
--- a/node_modules/has-property-descriptors/README.md	
+++ /dev/null	
@@ -1,43 +0,0 @@
-# has-property-descriptors <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
-
-[![github actions][actions-image]][actions-url]
-[![coverage][codecov-image]][codecov-url]
-[![dependency status][deps-svg]][deps-url]
-[![dev dependency status][dev-deps-svg]][dev-deps-url]
-[![License][license-image]][license-url]
-[![Downloads][downloads-image]][downloads-url]
-
-[![npm badge][npm-badge-png]][package-url]
-
-Does the environment have full property descriptor support? Handles IE 8's broken defineProperty/gOPD.
-
-## Example
-
-```js
-var hasPropertyDescriptors = require('has-property-descriptors');
-var assert = require('assert');
-
-assert.equal(hasPropertyDescriptors(), true); // will be `false` in IE 6-8, and ES5 engines
-
-// Arrays can not have their length `[[Defined]]` in some engines
-assert.equal(hasPropertyDescriptors.hasArrayLengthDefineBug(), false); // will be `true` in Firefox 4-22, and node v0.6
-```
-
-## Tests
-Simply clone the repo, `npm install`, and run `npm test`
-
-[package-url]: https://npmjs.org/package/has-property-descriptors
-[npm-version-svg]: https://versionbadg.es/inspect-js/has-property-descriptors.svg
-[deps-svg]: https://david-dm.org/inspect-js/has-property-descriptors.svg
-[deps-url]: https://david-dm.org/inspect-js/has-property-descriptors
-[dev-deps-svg]: https://david-dm.org/inspect-js/has-property-descriptors/dev-status.svg
-[dev-deps-url]: https://david-dm.org/inspect-js/has-property-descriptors#info=devDependencies
-[npm-badge-png]: https://nodei.co/npm/has-property-descriptors.png?downloads=true&stars=true
-[license-image]: https://img.shields.io/npm/l/has-property-descriptors.svg
-[license-url]: LICENSE
-[downloads-image]: https://img.shields.io/npm/dm/has-property-descriptors.svg
-[downloads-url]: https://npm-stat.com/charts.html?package=has-property-descriptors
-[codecov-image]: https://codecov.io/gh/inspect-js/has-property-descriptors/branch/main/graphs/badge.svg
-[codecov-url]: https://app.codecov.io/gh/inspect-js/has-property-descriptors/
-[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/inspect-js/has-property-descriptors
-[actions-url]: https://github.com/inspect-js/has-property-descriptors/actions
Index: node_modules/postgresql-client/cjs/data-types/float4-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/float4-type.js b/node_modules/postgresql-client/cjs/data-types/float4-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/float4-type.js	
+++ /dev/null	
@@ -1,25 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayFloat4Type = exports.Float4Type = void 0;
-const constants_js_1 = require("../constants.js");
-exports.Float4Type = {
-    name: 'float4',
-    oid: constants_js_1.DataTypeOIDs.float4,
-    jsType: 'number',
-    parseBinary(v) {
-        return Math.round((v.readFloatBE(0) + Number.EPSILON) * 100) / 100;
-    },
-    encodeBinary(buf, v) {
-        buf.writeFloatBE(typeof v === 'number' ? v : parseFloat(v));
-    },
-    parseText: parseFloat,
-    isType(v) {
-        return typeof v === 'number';
-    },
-};
-exports.ArrayFloat4Type = {
-    ...exports.Float4Type,
-    name: '_float4',
-    oid: constants_js_1.DataTypeOIDs._float4,
-    elementsOID: constants_js_1.DataTypeOIDs.float4,
-};
Index: node_modules/postgresql-client/esm/connection/connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/connection/connection.js b/node_modules/postgresql-client/esm/connection/connection.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/connection/connection.js	
+++ /dev/null	
@@ -1,275 +0,0 @@
-import { ConnectionState } from '../constants.js';
-import { GlobalTypeMap } from '../data-type-map.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { BindParam } from './bind-param.js';
-import { IntlConnection } from './intl-connection.js';
-import { PreparedStatement } from './prepared-statement.js';
-export class Connection extends SafeEventEmitter {
-    constructor(arg0, arg1) {
-        super();
-        this._notificationListeners = new SafeEventEmitter();
-        this._closing = false;
-        if (arg0 && typeof arg0 === 'object' && typeof arg0.acquire === 'function') {
-            if (!(arg1 instanceof IntlConnection))
-                throw new TypeError('Invalid argument');
-            this._pool = arg0;
-            this._intlCon = arg1;
-        }
-        else {
-            this._intlCon = new IntlConnection(arg0);
-        }
-        this._intlCon.on('ready', (...args) => this.emit('ready', ...args));
-        this._intlCon.on('error', (...args) => this.emit('error', ...args));
-        this._intlCon.on('close', (...args) => this.emit('close', ...args));
-        this._intlCon.on('connecting', (...args) => this.emit('connecting', ...args));
-        this._intlCon.on('ready', (...args) => this.emit('ready', ...args));
-        this._intlCon.on('terminate', (...args) => this.emit('terminate', ...args));
-        this._intlCon.on('notification', (msg) => this._handleNotification(msg));
-    }
-    /**
-     * Returns configuration object
-     */
-    get config() {
-        return this._intlCon.config;
-    }
-    /**
-     * Returns true if connection is in a transaction
-     */
-    get inTransaction() {
-        return this._intlCon.inTransaction;
-    }
-    /**
-     * Returns current state of the connection
-     */
-    get state() {
-        return this._intlCon.state;
-    }
-    /**
-     * Returns processId of current session
-     */
-    get processID() {
-        return this._intlCon.processID;
-    }
-    /**
-     * Returns information parameters for current session
-     */
-    get sessionParameters() {
-        return this._intlCon.sessionParameters;
-    }
-    /**
-     * Returns secret key of current session
-     */
-    get secretKey() {
-        return this._intlCon.secretKey;
-    }
-    /**
-     * Connects to the server
-     */
-    async connect() {
-        await this._captureErrorStack(this._intlCon.connect());
-        if (this.state === ConnectionState.READY)
-            this._closing = false;
-    }
-    /**
-     * Closes connection. You can define how long time the connection will
-     * wait for active queries before terminating the connection.
-     * On the end of the given time, it forces to close the socket and than emits `terminate` event.
-     *
-     * @param terminateWait {number} - Determines how long the connection will wait for active queries before terminating.
-     */
-    async close(terminateWait) {
-        this._notificationListeners.removeAllListeners();
-        this._intlCon.statementQueue.clearQueue();
-        if (this.state === ConnectionState.CLOSED || this._closing)
-            return;
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Connection.close',
-                connection: this,
-                message: `[${this.processID}] closing`,
-            });
-        this._closing = true;
-        if (this._intlCon.refCount > 0 && typeof terminateWait === 'number' && terminateWait > 0) {
-            const startTime = Date.now();
-            return this._captureErrorStack(new Promise((resolve, reject) => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Connection.close',
-                        connection: this,
-                        message: `[${this.processID}] waiting active queries`,
-                    });
-                const timer = setInterval(() => {
-                    if (this._intlCon.refCount <= 0 || Date.now() > startTime + terminateWait) {
-                        clearInterval(timer);
-                        if (this._intlCon.refCount > 0) {
-                            /* istanbul ignore next */
-                            if (this.listenerCount('debug'))
-                                this.emit('debug', {
-                                    location: 'Connection.close',
-                                    connection: this,
-                                    message: `[${this.processID}] terminate`,
-                                });
-                            this.emit('terminate');
-                        }
-                        this._close().then(resolve).catch(reject);
-                    }
-                }, 50);
-            }));
-        }
-        await this._close();
-    }
-    /**
-     * Executes single or multiple SQL scripts using Simple Query protocol.
-     *
-     * @param sql {string} - SQL script that will be executed
-     * @param options {ScriptExecuteOptions} - Execute options
-     */
-    async execute(sql, options) {
-        return this._captureErrorStack(this._intlCon.execute(sql, options)).catch((e) => {
-            throw this._handleError(e, sql);
-        });
-    }
-    async query(sql, options) {
-        this._intlCon.assertConnected();
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Connection.query',
-                connection: this,
-                message: `[${this.processID}] query | ${sql}`,
-                sql,
-            });
-        const typeMap = options?.typeMap || GlobalTypeMap;
-        const paramTypes = options?.params?.map(prm => prm instanceof BindParam ? prm.oid : typeMap.determine(prm));
-        const statement = await this.prepare(sql, { paramTypes, typeMap }).catch((e) => {
-            throw this._handleError(e, sql);
-        });
-        try {
-            const params = options?.params?.map(prm => (prm instanceof BindParam ? prm.value : prm));
-            return await this._captureErrorStack(statement.execute({ ...options, params }));
-        }
-        finally {
-            await statement.close();
-        }
-    }
-    /**
-     * Creates a PreparedStatement instance
-     * @param sql {string} - SQL script that will be executed
-     * @param options {StatementPrepareOptions} - Options
-     */
-    async prepare(sql, options) {
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Connection.prepare',
-                connection: this,
-                message: `[${this.processID}] prepare | ${sql}`,
-                sql,
-            });
-        return await this._captureErrorStack(PreparedStatement.prepare(this, sql, options));
-    }
-    /**
-     * Starts a transaction
-     */
-    startTransaction() {
-        return this._captureErrorStack(this._intlCon.startTransaction());
-    }
-    /**
-     * Commits current transaction
-     */
-    commit() {
-        return this._captureErrorStack(this._intlCon.commit());
-    }
-    /**
-     * Rolls back current transaction
-     */
-    rollback() {
-        return this._captureErrorStack(this._intlCon.rollback());
-    }
-    /**
-     * Starts transaction and creates a savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    async savepoint(name) {
-        if (!this._intlCon.inTransaction)
-            await this._intlCon.startTransaction();
-        return this._captureErrorStack(this._intlCon.savepoint(name));
-    }
-    /**
-     * Rolls back current transaction to given savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    rollbackToSavepoint(name) {
-        return this._captureErrorStack(this._intlCon.rollbackToSavepoint(name));
-    }
-    /**
-     * Releases savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    releaseSavepoint(name) {
-        return this._captureErrorStack(this._intlCon.releaseSavepoint(name));
-    }
-    async listen(channel, callback) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        const registered = !!this._notificationListeners.eventNames().length;
-        this._notificationListeners.on(channel, callback);
-        if (!registered)
-            await this._captureErrorStack(this.query('LISTEN ' + channel));
-    }
-    async unListen(channel) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        this._notificationListeners.removeAllListeners(channel);
-        await this._captureErrorStack(this.query('UNLISTEN ' + channel));
-    }
-    async unListenAll() {
-        this._notificationListeners.removeAllListeners();
-        await this._captureErrorStack(this.query('UNLISTEN *'));
-    }
-    _handleNotification(msg) {
-        this.emit('notification', msg);
-        this._notificationListeners.emit(msg.channel, msg);
-    }
-    async _close() {
-        if (this._pool) {
-            await this._captureErrorStack(this._pool.release(this));
-            this.emit('release');
-        }
-        else
-            await this._captureErrorStack(this._intlCon.close());
-        this._closing = false;
-    }
-    _handleError(err, script) {
-        if (err.position) {
-            const i1 = script.lastIndexOf('\n', err.position) + 1;
-            let i2 = script.indexOf('\n', err.position);
-            if (i2 < 0)
-                i2 = Number.MAX_SAFE_INTEGER;
-            err.line = script.substring(i1, i2);
-            err.lineNr = [...script.substring(0, i1).matchAll(/\n/g)].length;
-            err.colNr = err.position - i1;
-            err.message +=
-                `\nAt line ${err.lineNr} column ${err.colNr}` +
-                    `\n |  ${err.line}\n |  ${' '.repeat(Math.max(err.colNr - 2, 0))}-^-`;
-        }
-        return err;
-    }
-    async _captureErrorStack(promise) {
-        const stack = new Error().stack;
-        return promise.catch(e => {
-            if (e instanceof Error && stack) {
-                e.stack = stack
-                    .split('\n')
-                    .filter(x => !x.includes('Connection._captureErrorStack'))
-                    .join('\n');
-            }
-            throw e;
-        });
-    }
-    [Symbol.asyncDispose]() {
-        return this.close();
-    }
-}
Index: node_modules/pg-protocol/dist/outbound-serializer.test.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/outbound-serializer.test.js.map b/node_modules/pg-protocol/dist/outbound-serializer.test.js.map
--- a/node_modules/pg-protocol/dist/outbound-serializer.test.js.map	
+++ b/node_modules/pg-protocol/dist/outbound-serializer.test.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"outbound-serializer.test.js","sourceRoot":"","sources":["../src/outbound-serializer.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"outbound-serializer.test.js","sourceRoot":"","sources":["../src/outbound-serializer.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
Index: node_modules/postgresql-client/esm/util/convert-row-to-object.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/convert-row-to-object.js b/node_modules/postgresql-client/esm/util/convert-row-to-object.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/convert-row-to-object.js	
+++ /dev/null	
@@ -1,9 +0,0 @@
-export function convertRowToObject(fields, row) {
-    const out = {};
-    const l = row.length;
-    let i;
-    for (i = 0; i < l; i++) {
-        out[fields[i].fieldName] = row[i];
-    }
-    return out;
-}
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/hotel-reservation.iml" filepath="$PROJECT_DIR$/.idea/hotel-reservation.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: node_modules/putil-merge/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/putil-merge/README.md b/node_modules/putil-merge/README.md
deleted file mode 100644
--- a/node_modules/putil-merge/README.md	
+++ /dev/null	
@@ -1,137 +0,0 @@
-# putil-merge
-
-[![NPM Version][npm-image]][npm-url]
-[![NPM Downloads][downloads-image]][downloads-url]
-[![Build Status][travis-image]][travis-url]
-[![Test Coverage][coveralls-image]][coveralls-url]
-[![DevDependencies][devdependencies-image]][devdependencies-url]
-
-A 'swiss army knife' solution for merging two or more objects. It supports deep merge, cloning properties, copying descriptors and filtering.
-
-## Installation
-
-`$ npm install putil-merge --save`
-
-## Table of contents
-
-- [merge()](#merge)
-- [merge.all()](#mergeall)
-
-
-## Merge
-
-`merge(target, source[, options])`
-
-- `target:object`:
-- `source:object`:
-- `options:object` 
-    - `deep:boolean` (optional): If true, it performs deep merge operation. **Default:** `false`
-    - `clone:boolean` (optional): If true, clones object properties rather than assigning references.  **Default:** `false`
-    - `adjunct:boolean`(optional): If true, it copies only non-existing properties. **Default:** `false`
-    - `descriptor:boolean`(optional): If true, copies property descriptors.  **Default:** `false`
-    - `filter:function` (optional): A callback function to test if source property will be merged to target.
-    - `arrayMerge:boolean|function` (optional): If true, it combines array values. It this is a function, result of call will be assigned to target.
-
-**Copying source properties to target object**
-
-```javascript
-const a = {x: 1, y: 2};
-const b = {x: {}, z: [1, 2, 3, 4]};
-const merged = merge(a, b);
-assert(merged.x===b.x); // References copied
-assert(merged.z===b.z); // References copied
-```
-
-**Cloning source properties to target object**
-
-```js
-const a = {x: 1, y: 2};
-const b = {x: {}, z: [1, 2, 3, 4]};
-const merged = merge(a, b, {clone: true});
-assert(merged.x!==b.x); // Object cloned
-assert(merged.z!==b.z); // Array cloned
-```
-
-
-**Applying filter while merge**
-
-```js
-const a = {x: 1, y: 2};
-const b = {x: {}, z: [1, 2, 3, 4]};
-const merged = merge(a, b, {filter: (src, key)=>key!=='z'});
-assert(!merged.z); // Z will not be merged
-```
-
-
-**Copying descriptors**
-
-```javascript
-const b = {};
-Object.defineProperty(b, 'foo', {
-  enumerable: false
-});
-const merged = merge({}, b, {descriptor: true});
-assert.strictEqual(Object.getOwnPropertyDescriptor(merged, 'foo').enumerable, false);
-```
-
-**Copying getters and setters**
-
-```javascript
-const b = {
-  bar: 1,
-  get foo(){
-    return this.bar; 
-  }
-};
-const merged = merge({}, b, {descriptor: true});
-assert.strictEqual(merged.foo, 1);
-```
-
-
-**Copying function properties**
-
-```javascript
-const b = {
-  bar: 1,
-  getFoo(){
-    return this.bar; 
-  }
-};
-const merged = merge({}, b, {descriptor: true});
-assert.strictEqual(merged.getFoo(), 1);
-```
-
-
-## Merge.all()
-
-Performs merge with more than two objects.
-
-`merge.all(arrayOfObjects[, options])`
-
-- `arrayOfObjects:Array<object>`:
-- `options:object` 
-    - `deep:boolean` (optional): If true, it performs deep merge operation. **Default:** `false`
-    - `clone:boolean` (optional): If true, clones object properties rather than assigning references.  **Default:** `false`
-    - `combine:boolean`(optional): If true, it copies only non-existing properties. **Default:** `false`
-    - `descriptor:boolean`(optional): If true, copies property descriptors.  **Default:** `false`
-    - `filter:function` (optional): A callback function to test if source property will be merged to target.
-    - `arrayMerge:boolean|function` (optional): If true, it combines array values. It this is a function, result of call will be assigned to target.
-
-
-## Node Compatibility
-
-  - node `>= 6.0`;
-  
-### License
-[MIT](LICENSE)
-
-[npm-image]: https://img.shields.io/npm/v/putil-merge.svg
-[npm-url]: https://npmjs.org/package/putil-merge
-[travis-image]: https://img.shields.io/travis/panates/putil-merge/master.svg
-[travis-url]: https://travis-ci.org/panates/putil-merge
-[coveralls-image]: https://img.shields.io/coveralls/panates/putil-merge/master.svg
-[coveralls-url]: https://coveralls.io/r/panates/putil-merge
-[downloads-image]: https://img.shields.io/npm/dm/putil-merge.svg
-[downloads-url]: https://npmjs.org/package/putil-merge
-[devdependencies-image]: https://david-dm.org/panates/putil-merge/dev-status.svg
-[devdependencies-url]:https://david-dm.org/panates/putil-merge?type=dev
Index: node_modules/postgresql-client/cjs/interfaces/statement-prepare-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/statement-prepare-options.js b/node_modules/postgresql-client/cjs/interfaces/statement-prepare-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/statement-prepare-options.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: controllers/userController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/userController.js b/controllers/userController.js
--- a/controllers/userController.js	
+++ b/controllers/userController.js	
@@ -1,24 +1,25 @@
 const users = require('../models/User')
 const { StatusCodes } = require('http-status-codes')
 const { sql } = require('../db/connectDb')
+const { Pool } = require('postgresql-client')
+const  {sqlPool} = require('../db/connectDb')
+const Users = require("../queries/users");
 
 const getAllUsers = async (req, resp) => {
-  const users = await sql`
-      SELECT * FROM users`
-  if (!users.length > 0) {
-    console.log(users)
+  const users = await Users.allUsers()
+
+  if (users.error) {
+    console.log('user not found  in users table')
     return resp
       .status(StatusCodes.NOT_FOUND)
       .json({ message: 'Error! User Not Found' })
   }
-  return resp.status(StatusCodes.OK).json(users)
+  return resp.status(StatusCodes.OK).json(users.data)
 }
 const getSingleUser = async (req, resp) => {
   const { id } = req.params
   console.log('iD Data', id)
-  const singleUser = await sql`
-SELECT * FROM  users WHERE id =${id}
-    `
+  const singleUser = await sqlPool.query('SELECT * FROM  users WHERE id =${id}')
   if (!singleUser) {
     console.log(singleUser)
     return resp
@@ -30,9 +31,7 @@
 const deleteUser = async (req, resp) => {
   const { id } = req.params
   console.log('iD Data', id)
-  const singleUser = await sql`
-   DELETE FROM  users WHERE id =${id}
-    `
+  const singleUser = await sqlPool.query('DELETE FROM  users WHERE id =${id}')
   if (!singleUser) {
     return resp
       .status(StatusCodes.NOT_FOUND)
Index: node_modules/pg-pool/test/ending.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/ending.js b/node_modules/pg-pool/test/ending.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/ending.js	
+++ /dev/null	
@@ -1,40 +0,0 @@
-'use strict'
-const co = require('co')
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('pool ending', () => {
-  it('ends without being used', (done) => {
-    const pool = new Pool()
-    pool.end(done)
-  })
-
-  it('ends with a promise', () => {
-    return new Pool().end()
-  })
-
-  it(
-    'ends with clients',
-    co.wrap(function* () {
-      const pool = new Pool()
-      const res = yield pool.query('SELECT $1::text as name', ['brianc'])
-      expect(res.rows[0].name).to.equal('brianc')
-      return pool.end()
-    })
-  )
-
-  it(
-    'allows client to finish',
-    co.wrap(function* () {
-      const pool = new Pool()
-      const query = pool.query('SELECT $1::text as name', ['brianc'])
-      yield pool.end()
-      const res = yield query
-      expect(res.rows[0].name).to.equal('brianc')
-    })
-  )
-})
Index: node_modules/postgresql-client/esm/data-type-map.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-type-map.js b/node_modules/postgresql-client/esm/data-type-map.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-type-map.js	
+++ /dev/null	
@@ -1,115 +0,0 @@
-import { DataTypeOIDs } from './constants.js';
-import { ArrayBoolType, BoolType } from './data-types/bool-type.js';
-import { ArrayBoxType, BoxType } from './data-types/box-type.js';
-import { ArrayByteaType, ByteaType } from './data-types/bytea-type.js';
-import { ArrayCharType, CharType } from './data-types/char-type.js';
-import { ArrayCircleType, CircleType } from './data-types/circle-type.js';
-import { ArrayDateType, DateType } from './data-types/date-type.js';
-import { ArrayFloat4Type, Float4Type } from './data-types/float4-type.js';
-import { ArrayFloat8Type, Float8Type } from './data-types/float8-type.js';
-import { ArrayInt2Type, Int2Type } from './data-types/int2-type.js';
-import { ArrayInt2VectorType, Int2VectorType } from './data-types/int2-vector-type.js';
-import { ArrayInt4Type, Int4Type } from './data-types/int4-type.js';
-import { ArrayInt8Type, Int8Type } from './data-types/int8-type.js';
-import { ArrayJsonType, JsonType } from './data-types/json-type.js';
-import { ArrayJsonbType, JsonbType } from './data-types/jsonb-type.js';
-import { ArrayLsegType, LsegType } from './data-types/lseg-type.js';
-import { ArrayNumericType, NumericType } from './data-types/numeric-type.js';
-import { ArrayOidType, OidType, VectorOidType } from './data-types/oid-type.js';
-import { ArrayPointType, PointType } from './data-types/point-type.js';
-import { ArrayTimeType, TimeType } from './data-types/time-type.js';
-import { ArrayTimestampType, TimestampType } from './data-types/timestamp-type.js';
-import { ArrayTimestamptzType, TimestamptzType } from './data-types/timestamptz-type.js';
-import { ArrayUuidType, UuidType } from './data-types/uuid-type.js';
-import { ArrayVarcharType, VarcharType } from './data-types/varchar-type.js';
-export class DataTypeMap {
-    constructor(other) {
-        this._itemsByOID = {};
-        this._items = [];
-        if (other instanceof DataTypeMap)
-            Object.assign(this._items, other._items);
-    }
-    get(oid) {
-        return this._itemsByOID[oid];
-    }
-    register(dataTypes) {
-        dataTypes = Array.isArray(dataTypes) ? dataTypes : [dataTypes];
-        for (const t of dataTypes) {
-            this._itemsByOID[t.oid] = t;
-            const i = this._items.findIndex(tt => tt.oid === t.oid);
-            if (i >= 0)
-                this._items[i] = t;
-            else
-                this._items.push(t);
-        }
-    }
-    determine(value) {
-        if (value == null)
-            return DataTypeOIDs.unknown;
-        const valueIsArray = Array.isArray(value);
-        let i;
-        let t;
-        for (i = this._items.length - 1; i >= 0; i--) {
-            t = this._items[i];
-            if (valueIsArray) {
-                if (t.elementsOID && t.isType(value[0]))
-                    return t.oid;
-            }
-            else if (!t.elementsOID && t.isType(value))
-                return t.oid;
-        }
-        return DataTypeOIDs.unknown;
-    }
-}
-export const GlobalTypeMap = new DataTypeMap();
-GlobalTypeMap.register([OidType, VectorOidType, ArrayOidType]);
-GlobalTypeMap.register([JsonbType, ArrayJsonbType]);
-GlobalTypeMap.register([JsonType, ArrayJsonType]);
-GlobalTypeMap.register([BoolType, ArrayBoolType]);
-GlobalTypeMap.register([NumericType, ArrayNumericType]);
-GlobalTypeMap.register([Float4Type, ArrayFloat4Type]);
-GlobalTypeMap.register([Float8Type, ArrayFloat8Type]);
-GlobalTypeMap.register([Int2Type, ArrayInt2Type]);
-GlobalTypeMap.register([Int4Type, ArrayInt4Type]);
-GlobalTypeMap.register([Int8Type, ArrayInt8Type]);
-GlobalTypeMap.register([ByteaType, ArrayByteaType]);
-GlobalTypeMap.register([CircleType, ArrayCircleType]);
-GlobalTypeMap.register([PointType, ArrayPointType]);
-GlobalTypeMap.register([LsegType, ArrayLsegType]);
-GlobalTypeMap.register([BoxType, ArrayBoxType]);
-GlobalTypeMap.register([Int2VectorType, ArrayInt2VectorType]);
-GlobalTypeMap.register({ ...VarcharType, name: 'bpchar', oid: DataTypeOIDs.bpchar });
-GlobalTypeMap.register({
-    ...ArrayVarcharType,
-    name: '_bpchar',
-    oid: DataTypeOIDs._bpchar,
-    elementsOID: DataTypeOIDs.bpchar,
-});
-GlobalTypeMap.register({ ...VarcharType, name: 'name', oid: DataTypeOIDs.name });
-GlobalTypeMap.register({
-    ...ArrayVarcharType,
-    name: '_name',
-    oid: DataTypeOIDs._name,
-    elementsOID: DataTypeOIDs.name,
-});
-GlobalTypeMap.register({ ...VarcharType, name: 'text', oid: DataTypeOIDs.text });
-GlobalTypeMap.register({
-    ...ArrayVarcharType,
-    name: '_text',
-    oid: DataTypeOIDs._text,
-    elementsOID: DataTypeOIDs.text,
-});
-GlobalTypeMap.register({ ...VarcharType, name: 'xml', oid: DataTypeOIDs.xml });
-GlobalTypeMap.register({
-    ...ArrayVarcharType,
-    name: '_xml',
-    oid: DataTypeOIDs._xml,
-    elementsOID: DataTypeOIDs.xml,
-});
-GlobalTypeMap.register([VarcharType, ArrayVarcharType]);
-GlobalTypeMap.register([UuidType, ArrayUuidType]);
-GlobalTypeMap.register([CharType, ArrayCharType]);
-GlobalTypeMap.register([TimestamptzType, ArrayTimestamptzType]);
-GlobalTypeMap.register([TimeType, ArrayTimeType]);
-GlobalTypeMap.register([DateType, ArrayDateType]);
-GlobalTypeMap.register([TimestampType, ArrayTimestampType]);
Index: node_modules/side-channel/tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/tsconfig.json b/node_modules/side-channel/tsconfig.json
--- a/node_modules/side-channel/tsconfig.json	
+++ b/node_modules/side-channel/tsconfig.json	
@@ -1,50 +1,9 @@
 {
+	"extends": "@ljharb/tsconfig",
 	"compilerOptions": {
-		/* Visit https://aka.ms/tsconfig.json to read more about this file */
-
-		/* Projects */
-
-		/* Language and Environment */
-		"target": "es2022",																	/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
-		// "lib": [],																				/* Specify a set of bundled library declaration files that describe the target runtime environment. */
-		// "noLib": true,																		/* Disable including any library files, including the default lib.d.ts. */
-		"useDefineForClassFields": true,										 /* Emit ECMAScript-standard-compliant class fields. */
-		// "moduleDetection": "auto",												/* Control what method is used to detect module-format JS files. */
-
-		/* Modules */
-		"module": "commonjs",																/* Specify what module code is generated. */
-		// "rootDir": "./",																	/* Specify the root folder within your source files. */
-		// "moduleResolution": "node",											 /* Specify how TypeScript looks up a file from a given module specifier. */
-		// "baseUrl": "./",																	/* Specify the base directory to resolve non-relative module names. */
-		// "paths": {},																			/* Specify a set of entries that re-map imports to additional lookup locations. */
-		// "rootDirs": [],																	 /* Allow multiple folders to be treated as one when resolving modules. */
-		// "typeRoots": ["types"],													 /* Specify multiple folders that act like `./node_modules/@types`. */
-		"resolveJsonModule": true,													 /* Enable importing .json files. */
-		// "allowArbitraryExtensions": true,								 /* Enable importing files with any extension, provided a declaration file is present. */
-
-		/* JavaScript Support */
-		"allowJs": true,																		 /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
-		"checkJs": true,																		 /* Enable error reporting in type-checked JavaScript files. */
-		"maxNodeModuleJsDepth": 1,													 /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */
-
-		/* Emit */
-		"declaration": true,																 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
-		"declarationMap": true,															/* Create sourcemaps for d.ts files. */
-		"noEmit": true,																			/* Disable emitting files from a compilation. */
-
-		/* Interop Constraints */
-		"allowSyntheticDefaultImports": true,								/* Allow `import x from y` when a module doesn't have a default export. */
-		"esModuleInterop": true,														 /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
-		"forceConsistentCasingInFileNames": true,						/* Ensure that casing is correct in imports. */
-
-		/* Type Checking */
-		"strict": true,																			/* Enable all strict type-checking options. */
-
-		/* Completeness */
-		// "skipLibCheck": true															/* Skip type checking all .d.ts files. */
+		"target": "es2021",
 	},
 	"exclude": [
 		"coverage",
-		"test/list-exports"
 	],
 }
Index: node_modules/semver/ranges/gtr.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/gtr.js b/node_modules/semver/ranges/gtr.js
--- a/node_modules/semver/ranges/gtr.js	
+++ b/node_modules/semver/ranges/gtr.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 // Determine if version is greater than all the versions possible in the range.
 const outside = require('./outside')
 const gtr = (version, range, options) => outside(version, range, '>', options)
Index: node_modules/postgresql-client/cjs/safe-event-emitter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/safe-event-emitter.js b/node_modules/postgresql-client/cjs/safe-event-emitter.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/safe-event-emitter.js	
+++ /dev/null	
@@ -1,17 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.SafeEventEmitter = void 0;
-const events_1 = require("events");
-class SafeEventEmitter extends events_1.EventEmitter {
-    emit(event, ...args) {
-        try {
-            if (event === 'error' && !this.listenerCount('error'))
-                return false;
-            return super.emit(event, ...args);
-        }
-        catch (ignored) {
-            return false;
-        }
-    }
-}
-exports.SafeEventEmitter = SafeEventEmitter;
Index: node_modules/pg-protocol/dist/buffer-reader.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/buffer-reader.d.ts b/node_modules/pg-protocol/dist/buffer-reader.d.ts
--- a/node_modules/pg-protocol/dist/buffer-reader.d.ts	
+++ b/node_modules/pg-protocol/dist/buffer-reader.d.ts	
@@ -8,6 +8,7 @@
     int16(): number;
     byte(): number;
     int32(): number;
+    uint32(): number;
     string(length: number): string;
     cstring(): string;
     bytes(length: number): Buffer;
Index: node_modules/encodeurl/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/encodeurl/HISTORY.md b/node_modules/encodeurl/HISTORY.md
deleted file mode 100644
--- a/node_modules/encodeurl/HISTORY.md	
+++ /dev/null	
@@ -1,14 +0,0 @@
-1.0.2 / 2018-01-21
-==================
-
-  * Fix encoding `%` as last character
-
-1.0.1 / 2016-06-09
-==================
-
-  * Fix encoding unpaired surrogates at start/end of string
-
-1.0.0 / 2016-06-08
-==================
-
-  * Initial release
Index: node_modules/postgresql-client/cjs/data-types/lseg-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/lseg-type.js b/node_modules/postgresql-client/cjs/data-types/lseg-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/lseg-type.js	
+++ /dev/null	
@@ -1,52 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayLsegType = exports.LsegType = void 0;
-const constants_js_1 = require("../constants.js");
-const LSEG_PATTERN1 = /^\[ *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *]$/;
-const LSEG_PATTERN2 = /^\( *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *\)$/;
-const LSEG_PATTERN3 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\)$/;
-const LSEG_PATTERN4 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-exports.LsegType = {
-    name: 'lseg',
-    oid: constants_js_1.DataTypeOIDs.lseg,
-    jsType: 'object',
-    parseBinary(v) {
-        return {
-            x1: v.readDoubleBE(0),
-            y1: v.readDoubleBE(8),
-            x2: v.readDoubleBE(16),
-            y2: v.readDoubleBE(24),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x1);
-        buf.writeDoubleBE(v.y1);
-        buf.writeDoubleBE(v.x2);
-        buf.writeDoubleBE(v.y2);
-    },
-    parseText(v) {
-        const m = v.match(LSEG_PATTERN1) || v.match(LSEG_PATTERN2) || v.match(LSEG_PATTERN3) || v.match(LSEG_PATTERN4);
-        if (!m)
-            return undefined;
-        return {
-            x1: parseFloat(m[1]),
-            y1: parseFloat(m[2]),
-            x2: parseFloat(m[3]),
-            y2: parseFloat(m[4]),
-        };
-    },
-    isType(v) {
-        return (typeof v === 'object' &&
-            Object.keys(v).length === 4 &&
-            typeof v.x1 === 'number' &&
-            typeof v.y1 === 'number' &&
-            typeof v.x2 === 'number' &&
-            typeof v.y2 === 'number');
-    },
-};
-exports.ArrayLsegType = {
-    ...exports.LsegType,
-    name: '_lseg',
-    oid: constants_js_1.DataTypeOIDs._lseg,
-    elementsOID: constants_js_1.DataTypeOIDs.lseg,
-};
Index: node_modules/postgresql-client/node_modules/postgres-bytea/encoder.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/encoder.js b/node_modules/postgresql-client/node_modules/postgres-bytea/encoder.js
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/encoder.js	
+++ /dev/null	
@@ -1,17 +0,0 @@
-'use strict'
-
-const { Transform } = require('stream')
-
-class ByteaEncoder extends Transform {
-  constructor () {
-    super()
-    this.push('\\\\x')
-  }
-
-  _transform (chunk, encoding, callback) {
-    this.push(chunk.toString('hex'))
-    callback()
-  }
-}
-
-module.exports = ByteaEncoder
Index: controllers/roomsController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/roomsController.js b/controllers/roomsController.js
--- a/controllers/roomsController.js	
+++ b/controllers/roomsController.js	
@@ -2,26 +2,32 @@
 const { StatusCodes } = require('http-status-codes')
 const { dbPool, sql } = require('../db/connectDb')
 var bcrypt = require('bcryptjs')
+const multer = require('multer')
+const upload = multer({ storage: multer.memoryStorage() })
+// const upload = multer({ dest: 'uploads/' })
+const fs = require('fs')
 
 const createRooms = async (req, res) => {
-  const {
-    room_number,
-    room_type,
-    price,
-    number_of_occupants,
-    availability_status,
-    image_url,
-    room_description
-  } = req.body
+  // console.log(req)
+  const room_type = req.body.room_type
+  const room_number = req.body.room_number
+  const price = req.body.price
+  const number_of_occupants = req.body.number_of_occupants
+
+  const availability_status = req.body.availability_status
+  const room_description = req.body.room_description
+
+  // console.log(req.data)
+
   console.log(
     room_number,
     room_type,
     price,
     number_of_occupants,
     availability_status,
-    image_url,
     room_description
   )
+
   if (number_of_occupants < 1) {
     return res.status(StatusCodes.BAD_REQUEST).json({
       error: `number  of occuppants must be  at least 1`
@@ -44,7 +50,7 @@
       await sql`INSERT  INTO  rooms(room_number,room_type,price,number_of_occupants,availability_status,image_url,room_description)
     VALUES(${room_number}, ${room_type}, ${price},${number_of_occupants}, ${availability_status}, ${image_url}, ${room_description})
     RETURNING room_number, room_type,price,number_of_occupants,availability_status,image_url,room_description`
-    // console.log(createdRoom)
+
     if (createRooms) {
       createdRoom.forEach(roomData => {
         console.log(roomData)
@@ -144,12 +150,37 @@
   }
 }
 const uploadImage = async (req, res) => {
-
+  console.log('Upload  Image  Data')
+  upload.single('image')(req, res, err => {
+    if (err) {
+      return res.status(StatusCodes.BAD_REQUEST).json({ error: err.message })
+    }
+    // get  the  image  of  file here
+    //file  is 1MB
+    const maxSize = 1024 * 1024 * 5
+    // if (file.size) fs.readFileSync(imageFilePath)
+    console.log(req.file)
+    const { size } = req.file
+    // console.log(size)
+    if (maxSize <= size) {
+      console.log(size, 'image size')
+      console.log(maxSize, 'max image size')
+      console.log('image size  is  greater')
+      return res.status(StatusCodes.BAD_REQUEST).json('Image  must  be 1 MB')
+    }
+    const { buffer } = req.file
+    // console.log(buffer)
+    const imageData = Buffer.from(buffer, 'base64')
+    console.log(typeof imageData)
+    // const imageBuffer = fs.readFileSync()
+    // console.log(imageBuffer)
+  })
 }
 module.exports = {
   createRooms,
   getSingleRoom,
   getAllRooms,
   deleteRoom,
-  updateRoom
+  updateRoom,
+  uploadImage
 }
Index: node_modules/pg-pool/test/setup.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/setup.js b/node_modules/pg-pool/test/setup.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/setup.js	
+++ /dev/null	
@@ -1,10 +0,0 @@
-const crash = (reason) => {
-  process.on(reason, (err) => {
-    console.error(reason, err.stack)
-    process.exit(-1)
-  })
-}
-
-crash('unhandledRejection')
-crash('uncaughtError')
-crash('warning')
Index: node_modules/postgresql-client/typings/util/parse-array.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/parse-array.d.ts b/node_modules/postgresql-client/typings/util/parse-array.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/parse-array.d.ts	
+++ /dev/null	
@@ -1,5 +0,0 @@
-import type { Maybe } from '../types.js';
-export declare function parsePostgresArray(s: string, opts?: {
-    transform?: (v: string) => any;
-    separator?: string;
-}): Maybe<any[]>;
Index: node_modules/pg-connection-string/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-connection-string/index.d.ts b/node_modules/pg-connection-string/index.d.ts
--- a/node_modules/pg-connection-string/index.d.ts	
+++ b/node_modules/pg-connection-string/index.d.ts	
@@ -1,4 +1,18 @@
-export function parse(connectionString: string): ConnectionOptions
+import { ClientConfig } from 'pg'
+
+export function parse(connectionString: string, options?: Options): ConnectionOptions
+
+export interface Options {
+  // Use libpq semantics when interpreting the connection string
+  useLibpqCompat?: boolean
+}
+
+interface SSLConfig {
+  ca?: string
+  cert?: string | null
+  key?: string
+  rejectUnauthorized?: boolean
+}
 
 export interface ConnectionOptions {
   host: string | null
@@ -7,9 +21,16 @@
   port?: string | null
   database: string | null | undefined
   client_encoding?: string
-  ssl?: boolean | string
+  ssl?: boolean | string | SSLConfig
 
   application_name?: string
   fallback_application_name?: string
   options?: string
+  keepalives?: number
+
+  // We allow any other options to be passed through
+  [key: string]: unknown
 }
+
+export function toClientConfig(config: ConnectionOptions): ClientConfig
+export function parseIntoClientConfig(connectionString: string): ClientConfig
Index: node_modules/postgresql-client/typings/interfaces/script-execute-options.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/script-execute-options.d.ts b/node_modules/postgresql-client/typings/interfaces/script-execute-options.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/script-execute-options.d.ts	
+++ /dev/null	
@@ -1,26 +0,0 @@
-import type { DataTypeMap } from '../data-type-map';
-import type { DataMappingOptions } from './data-mapping-options.js';
-export interface ScriptExecuteOptions extends DataMappingOptions {
-    /**
-     * Specifies weather execute query in auto-commit mode
-     * @default true
-     */
-    autoCommit?: boolean;
-    /**
-     * Specifies if rows will be fetched as <FieldName, Value> pair objects or array of values
-     * @default false
-     */
-    objectRows?: boolean;
-    /**
-     * Data type map instance
-     * @default GlobalTypeMap
-     */
-    typeMap?: DataTypeMap;
-    /**
-     * When on, if a statement in a transaction block generates an error,
-     * the error is ignored and the transaction continues.
-     * When off (the default), a statement in a transaction block that generates an error aborts the entire transaction
-     * @default true
-     */
-    rollbackOnError?: boolean;
-}
Index: node_modules/semver/ranges/outside.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/outside.js b/node_modules/semver/ranges/outside.js
--- a/node_modules/semver/ranges/outside.js	
+++ b/node_modules/semver/ranges/outside.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const Comparator = require('../classes/comparator')
 const { ANY } = Comparator
Index: node_modules/nodemon/lib/nodemon.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/lib/nodemon.js b/node_modules/nodemon/lib/nodemon.js
--- a/node_modules/nodemon/lib/nodemon.js	
+++ b/node_modules/nodemon/lib/nodemon.js	
@@ -7,6 +7,7 @@
 var utils = require('./utils');
 var bus = utils.bus;
 var help = require('./help');
+/** @type {import('..').NodemonEventConfig} */
 var config = require('./config');
 var spawn = require('./spawn');
 const defaults = require('./config/defaults')
@@ -16,9 +17,16 @@
 // stable module API
 config.required = utils.isRequired;
 
+/**
+ * @param {import('..').NodemonSettings | string} settings
+ * @returns {import('..').Nodemon}
+ */
 function nodemon(settings) {
   bus.emit('boot');
   nodemon.reset();
+  
+  /** @type {import('..').NodemonSettings} */
+  let options
 
   // allow the cli string as the argument to nodemon, and allow for
   // `node nodemon -V app.js` or just `-V app.js`
@@ -30,25 +38,25 @@
       }
       settings = 'node ' + settings;
     }
-    settings = cli.parse(settings);
-  }
+    options = cli.parse(settings);
+  } else options = settings;
 
   // set the debug flag as early as possible to get all the detailed logging
-  if (settings.verbose) {
+  if (options.verbose) {
     utils.debug = true;
   }
 
-  if (settings.help) {
+  if (options.help) {
     if (process.stdout.isTTY) {
       process.stdout._handle.setBlocking(true); // nodejs/node#6456
     }
-    console.log(help(settings.help));
+    console.log(help(options.help));
     if (!config.required) {
       process.exit(0);
     }
   }
 
-  if (settings.version) {
+  if (options.version) {
     version().then(function (v) {
       console.log(v);
       if (!config.required) {
@@ -61,17 +69,15 @@
   // nodemon tools like grunt-nodemon. This affects where
   // the script is being run from, and will affect where
   // nodemon looks for the nodemon.json files
-  if (settings.cwd) {
+  if (options.cwd) {
     // this is protection to make sure we haven't dont the chdir already...
     // say like in cli/parse.js (which is where we do this once already!)
-    if (process.cwd() !== path.resolve(config.system.cwd, settings.cwd)) {
-      process.chdir(settings.cwd);
+    if (process.cwd() !== path.resolve(config.system.cwd, options.cwd)) {
+      process.chdir(options.cwd);
     }
   }
 
-  const cwd = process.cwd();
-
-  config.load(settings, function (config) {
+  config.load(options, function (config) {
     if (!config.options.dump && !config.options.execOptions.script &&
       config.options.execOptions.exec === 'node') {
       if (!config.required) {
@@ -171,7 +177,7 @@
       // don't notify of default ignores
       if (defaults.ignoreRoot.indexOf(rule) !== -1) {
         return false;
-        return rule.slice(3).slice(0, -3);
+        // return rule.slice(3).slice(0, -3);
       }
 
       if (rule.startsWith(cwd)) {
Index: node_modules/get-intrinsic/test/GetIntrinsic.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/get-intrinsic/test/GetIntrinsic.js b/node_modules/get-intrinsic/test/GetIntrinsic.js
--- a/node_modules/get-intrinsic/test/GetIntrinsic.js	
+++ b/node_modules/get-intrinsic/test/GetIntrinsic.js	
@@ -10,10 +10,10 @@
 var asyncGenFns = require('make-async-generator-function')();
 var mockProperty = require('mock-property');
 
-var callBound = require('call-bind/callBound');
+var callBound = require('call-bound');
 var v = require('es-value-fixtures');
 var $gOPD = require('gopd');
-var DefinePropertyOrThrow = require('es-abstract/2021/DefinePropertyOrThrow');
+var DefinePropertyOrThrow = require('es-abstract/2023/DefinePropertyOrThrow');
 
 var $isProto = callBound('%Object.prototype.isPrototypeOf%');
 
Index: node_modules/call-bind/callBound.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/callBound.js b/node_modules/call-bind/callBound.js
deleted file mode 100644
--- a/node_modules/call-bind/callBound.js	
+++ /dev/null	
@@ -1,15 +0,0 @@
-'use strict';
-
-var GetIntrinsic = require('get-intrinsic');
-
-var callBind = require('./');
-
-var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
-
-module.exports = function callBoundIntrinsic(name, allowMissing) {
-	var intrinsic = GetIntrinsic(name, !!allowMissing);
-	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
-		return callBind(intrinsic);
-	}
-	return intrinsic;
-};
Index: node_modules/postgresql-client/esm/util/wrap-row-description.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/wrap-row-description.js b/node_modules/postgresql-client/esm/util/wrap-row-description.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/wrap-row-description.js	
+++ /dev/null	
@@ -1,31 +0,0 @@
-import { DataFormat, DataTypeNames } from '../constants.js';
-export function wrapRowDescription(typeMap, fields, columnFormat) {
-    return fields.map((f, idx) => {
-        const cf = Array.isArray(columnFormat) ? columnFormat[idx] : columnFormat;
-        const x = {
-            fieldName: f.fieldName,
-            tableId: f.tableId,
-            columnId: f.columnId,
-            dataTypeId: f.dataTypeId,
-            dataTypeName: DataTypeNames[f.dataTypeId] || '',
-            jsType: cf === DataFormat.binary ? 'Buffer' : 'string',
-        };
-        x.isArray = x.dataTypeName.startsWith('_');
-        if (x.isArray) {
-            x.elementDataTypeName = x.dataTypeName.substring(1);
-            for (const oid of Object.keys(DataTypeNames)) {
-                if (DataTypeNames[oid] === x.elementDataTypeName)
-                    x.elementDataTypeId = parseInt(oid, 10);
-            }
-        }
-        if (f.fixedSize && f.fixedSize > 0)
-            x.fixedSize = f.fixedSize;
-        if (f.modifier && f.modifier > 0)
-            x.modifier = f.modifier;
-        const reg = typeMap.get(x.dataTypeId);
-        if (reg) {
-            x.jsType = reg.jsType;
-        }
-        return x;
-    });
-}
Index: node_modules/postgresql-client/esm/data-types/numeric-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/numeric-type.js b/node_modules/postgresql-client/esm/data-types/numeric-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/numeric-type.js	
+++ /dev/null	
@@ -1,121 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-const NUMERIC_NEG = 0x4000;
-const NUMERIC_NAN = 0xc000;
-const DEC_DIGITS = 4;
-const ROUND_POWERS = [0, 1000, 100, 10];
-export const NumericType = {
-    name: 'numeric',
-    oid: DataTypeOIDs.numeric,
-    jsType: 'number',
-    parseBinary(v) {
-        const len = v.readInt16BE();
-        const weight = v.readInt16BE(2);
-        const sign = v.readInt16BE(4);
-        const scale = v.readInt16BE(6);
-        if (sign === NUMERIC_NAN)
-            return NaN;
-        const digits = [];
-        for (let i = 0; i < len; i++) {
-            digits[i] = v.readInt16BE(8 + i * 2);
-        }
-        const numString = numberBytesToString(digits, scale, weight, sign);
-        return parseFloat(numString);
-    },
-    encodeText(v) {
-        const n = typeof v === 'number' ? v : parseFloat(v);
-        return '' + n;
-    },
-    parseText: parseFloat,
-    isType(v) {
-        return typeof v === 'number';
-    },
-};
-export const ArrayNumericType = {
-    ...NumericType,
-    name: '_numeric',
-    oid: DataTypeOIDs._numeric,
-    elementsOID: DataTypeOIDs.numeric,
-};
-/* https://github.com/pgjdbc/pgjdbc/blob/3eca3a76aa4a04cb28cb960ed674cb67db30b5e3/pgjdbc/src/main/java/org/postgresql/util/ByteConverter.java */
-/**
- * Convert a number from binary representation to text representation.
- * @param digits array of shorts that can be decoded as the number String
- * @param scale the scale of the number binary representation
- * @param weight the weight of the number binary representation
- * @param sign the sign of the number
- * @return String the number as String
- */
-export function numberBytesToString(digits, scale, weight, sign) {
-    let i;
-    let d;
-    /*
-     * Allocate space for the result.
-     *
-     * i is set to the # of decimal digits before decimal point.
-     * dscale is the # of decimal digits we will print after decimal point.
-     * We may generate as many as DEC_DIGITS-1 excess digits at the end, and in addition we
-     * need room for sign, decimal point, null terminator.
-     */
-    i = (weight + 1) * DEC_DIGITS;
-    if (i <= 0)
-        i = 1;
-    /*
-     * Output a dash for negative values
-     */
-    let out = sign === NUMERIC_NEG ? '-' : '';
-    /*
-     * Output all digits before the decimal point
-     */
-    if (weight < 0) {
-        d = weight + 1;
-        out += '0';
-    }
-    else {
-        for (d = 0; d <= weight; d++) {
-            /* In the first digit, suppress extra leading decimal zeroes */
-            out += digitToString(d, digits, d !== 0);
-        }
-    }
-    /*
-     * If requested, output a decimal point and all the digits that follow it.
-     * We initially put out a multiple of DEC_DIGITS digits, then truncate if
-     * needed.
-     */
-    if (scale > 0) {
-        out += '.';
-        for (i = 0; i < scale; d++, i += DEC_DIGITS) {
-            out += digitToString(d, digits, true);
-        }
-    }
-    const extra = (i - scale) % DEC_DIGITS;
-    return out.substr(0, out.length - extra);
-}
-/* https://github.com/pgjdbc/pgjdbc/blob/3eca3a76aa4a04cb28cb960ed674cb67db30b5e3/pgjdbc/src/main/java/org/postgresql/util/ByteConverter.java */
-/**
- * Convert a number from binary representation to text representation.
- * @param idx index of the digit to be converted in the digits array
- * @param digits array of shorts that can be decoded as the number String
- * @param alwaysPutIt a flag that indicate whether or not to put the digit char even if it is zero
- * @return String the number as String
- */
-function digitToString(idx, digits, alwaysPutIt) {
-    let out = '';
-    let dig = idx >= 0 && idx < digits.length ? digits[idx] : 0;
-    // Each dig represents 4 decimal digits (e.g. 9999)
-    // If we continue the number, then we need to print 0 as 0000 (alwaysPutIt parameter is true)
-    for (let p = 1; p < ROUND_POWERS.length; p++) {
-        const pow = ROUND_POWERS[p];
-        const d1 = Math.trunc(dig / pow);
-        dig -= d1 * pow;
-        const putit = d1 > 0;
-        if (putit || alwaysPutIt) {
-            out += d1;
-            // We printed a character, so we need to print the rest of the current digits in dig
-            // For instance, we need to keep printing 000 from 1000 even if idx==0 (== it is the very
-            // beginning)
-            alwaysPutIt = true;
-        }
-    }
-    out += dig;
-    return out;
-}
Index: node_modules/has-proto/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/test/index.js b/node_modules/has-proto/test/index.js
deleted file mode 100644
--- a/node_modules/has-proto/test/index.js	
+++ /dev/null	
@@ -1,19 +0,0 @@
-'use strict';
-
-var test = require('tape');
-var hasProto = require('../');
-
-test('hasProto', function (t) {
-	var result = hasProto();
-	t.equal(typeof result, 'boolean', 'returns a boolean (' + result + ')');
-
-	var obj = { __proto__: null };
-	if (result) {
-		t.notOk('toString' in obj, 'null object lacks toString');
-	} else {
-		t.ok('toString' in obj, 'without proto, null object has toString');
-		t.equal(obj.__proto__, null); // eslint-disable-line no-proto
-	}
-
-	t.end();
-});
Index: node_modules/postgresql-client/esm/util/array-calculatedim.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/array-calculatedim.js b/node_modules/postgresql-client/esm/util/array-calculatedim.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/array-calculatedim.js	
+++ /dev/null	
@@ -1,15 +0,0 @@
-export function arrayCalculateDim(arr) {
-    if (!arr || arr.length === 0)
-        return [0];
-    const dim = [arr.length];
-    const iterate = (a, level) => {
-        for (let i = 0; i < a.length; i++) {
-            if (Array.isArray(a[i])) {
-                dim[level] = Math.max(dim[level] || 0, a[i].length);
-                iterate(a[i], level + 1);
-            }
-        }
-    };
-    iterate(arr, 1);
-    return dim;
-}
Index: node_modules/postgresql-client/cjs/util/get-parsers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/get-parsers.js b/node_modules/postgresql-client/cjs/util/get-parsers.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/get-parsers.js	
+++ /dev/null	
@@ -1,42 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getParsers = void 0;
-const constants_js_1 = require("../constants.js");
-const decode_binaryarray_js_1 = require("./decode-binaryarray.js");
-const parse_array_js_1 = require("./parse-array.js");
-const DefaultColumnParser = (v) => v;
-function getParsers(typeMap, fields) {
-    const parsers = new Array(fields.length);
-    const l = fields.length;
-    let f;
-    let i;
-    for (i = 0; i < l; i++) {
-        f = fields[i];
-        const dataTypeReg = typeMap.get(f.dataTypeId);
-        if (dataTypeReg) {
-            const isArray = !!dataTypeReg.elementsOID;
-            if (f.format === constants_js_1.DataFormat.binary) {
-                const decode = dataTypeReg.parseBinary;
-                if (decode) {
-                    parsers[i] = !isArray
-                        ? decode
-                        : (v, options) => (0, decode_binaryarray_js_1.decodeBinaryArray)(v, decode, options);
-                }
-            }
-            else if (f.format === constants_js_1.DataFormat.text) {
-                const parse = dataTypeReg.parseText;
-                if (parse) {
-                    parsers[i] = !isArray
-                        ? parse
-                        : (v, options) => (0, parse_array_js_1.parsePostgresArray)(v, {
-                            transform: x => parse(x, options),
-                            separator: dataTypeReg.arraySeparator,
-                        });
-                }
-            }
-        }
-        parsers[i] = parsers[i] || DefaultColumnParser;
-    }
-    return parsers;
-}
-exports.getParsers = getParsers;
Index: node_modules/lightning-pool/cjs/pool.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/cjs/pool.js b/node_modules/lightning-pool/cjs/pool.js
--- a/node_modules/lightning-pool/cjs/pool.js	
+++ b/node_modules/lightning-pool/cjs/pool.js	
@@ -1,14 +1,12 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Pool = void 0;
-const doublylinked_1 = __importDefault(require("doublylinked"));
+const tslib_1 = require("tslib");
+const doublylinked_1 = tslib_1.__importDefault(require("doublylinked"));
 const events_1 = require("events");
-const putil_promisify_1 = __importDefault(require("putil-promisify"));
+const putil_promisify_1 = tslib_1.__importDefault(require("putil-promisify"));
 const abort_error_js_1 = require("./abort-error.js");
-const definitions_js_1 = require("./definitions.js");
+const constants_js_1 = require("./constants.js");
 const pool_options_js_1 = require("./pool-options.js");
 const pool_request_js_1 = require("./pool-request.js");
 const resource_item_js_1 = require("./resource-item.js");
@@ -21,26 +19,31 @@
         this._idleResources = new doublylinked_1.default();
         this._creating = 0;
         this._requestsProcessing = 0;
-        this._state = definitions_js_1.PoolState.IDLE;
-        if (typeof factory !== 'object')
+        this._state = constants_js_1.PoolState.IDLE;
+        if (typeof factory !== 'object') {
             throw new TypeError('You must provide `factory` object');
-        if (typeof factory.create !== 'function')
+        }
+        if (typeof factory.create !== 'function') {
             throw new TypeError('factory.create must be a function');
-        if (typeof factory.destroy !== 'function')
+        }
+        if (typeof factory.destroy !== 'function') {
             throw new TypeError('factory.destroy must be a function');
-        if (factory.validate && typeof factory.validate !== 'function')
+        }
+        if (factory.validate && typeof factory.validate !== 'function') {
             throw new TypeError('factory.validate can be a function');
-        if (factory.reset && typeof factory.reset !== 'function')
+        }
+        if (factory.reset && typeof factory.reset !== 'function') {
             throw new TypeError('factory.reset can be a function');
-        const opts = this._options = new pool_options_js_1.PoolOptions(this);
+        }
+        const opts = (this._options = new pool_options_js_1.PoolOptions(this));
+        if (config)
+            this.options.assign(config);
         opts.on('change', (prop, val) => {
             if (prop === 'houseKeepInterval')
                 this._setHouseKeep(val);
             if (prop === 'min' || prop === 'minIdle')
                 this._ensureMin();
         });
-        if (config)
-            this.options.assign(config);
         this._factory = factory;
     }
     /**
@@ -91,11 +94,12 @@
      * Note: This method is not need to be called. Pool instance will automatically be started when acquire() method is called
      */
     start() {
-        if (this._state === definitions_js_1.PoolState.STARTED)
+        if (this._state === constants_js_1.PoolState.STARTED)
             return;
-        if (this._state >= definitions_js_1.PoolState.CLOSING)
+        if (this._state >= constants_js_1.PoolState.CLOSING) {
             throw new Error('Closed pool can not be started again');
-        this._state = definitions_js_1.PoolState.STARTED;
+        }
+        this._state = constants_js_1.PoolState.STARTED;
         this._setHouseKeep(this.options.houseKeepInterval);
         this._ensureMin();
         this.emit('start');
@@ -106,22 +110,23 @@
         if (typeof arg0 === 'function')
             callback = arg0;
         else {
-            terminateWait = typeof arg0 === 'number' ? arg0 :
-                (!!arg0 ? 0 : Infinity);
+            terminateWait = typeof arg0 === 'number' ? arg0 : arg0 ? 0 : Infinity;
             callback = arg1;
         }
-        if (!callback)
+        if (!callback) {
             return putil_promisify_1.default.fromCallback(cb => this.close(terminateWait, cb));
-        if (this._state === definitions_js_1.PoolState.CLOSED || this._state === definitions_js_1.PoolState.IDLE)
+        }
+        if (this._state === constants_js_1.PoolState.CLOSED || this._state === constants_js_1.PoolState.IDLE) {
             return callback();
-        if (this._state === definitions_js_1.PoolState.CLOSING) {
+        }
+        if (this._state === constants_js_1.PoolState.CLOSING) {
             this.once('close', callback);
             return;
         }
         this.emit('closing');
         if (this._houseKeepTimer)
             clearTimeout(this._houseKeepTimer);
-        this._state = definitions_js_1.PoolState.CLOSING;
+        this._state = constants_js_1.PoolState.CLOSING;
         this._requestQueue.forEach(t => t.stopTimout());
         this._requestQueue = new doublylinked_1.default();
         this._requestsProcessing = 0;
@@ -150,18 +155,18 @@
     closeAsync(arg0) {
         return putil_promisify_1.default.fromCallback(cb => this.close(arg0, cb));
     }
-    acquire(arg0) {
-        if (!arg0)
+    acquire(callback) {
+        if (!callback)
             return putil_promisify_1.default.fromCallback(cb => this.acquire(cb));
-        const callback = arg0;
         try {
             this.start();
         }
         catch (e) {
             return callback(e);
         }
-        if (this.options.maxQueue && this.pending >= this.options.maxQueue)
+        if (this.options.maxQueue && this.pending >= this.options.maxQueue) {
             return callback(new Error('Pool queue is full'));
+        }
         this._requestQueue.push(new pool_request_js_1.PoolRequest(this, callback));
         this._processNextRequest();
     }
@@ -170,8 +175,9 @@
      */
     release(resource, callback) {
         const item = this._allResources.get(resource);
-        if (item && item.state !== definitions_js_1.ResourceState.IDLE)
+        if (item && item.state !== constants_js_1.ResourceState.IDLE) {
             this._itemSetIdle(item, callback);
+        }
         this._processNextRequest();
     }
     /**
@@ -215,9 +221,10 @@
         return this._allResources.has(resource);
     }
     _processNextRequest() {
-        if (this._state !== definitions_js_1.PoolState.STARTED ||
-            this._requestsProcessing >= this.options.max - this.acquired)
+        if (this._state !== constants_js_1.PoolState.STARTED ||
+            this._requestsProcessing >= this.options.max - this.acquired) {
             return;
+        }
         const request = this._requestQueue.shift();
         if (!request)
             return;
@@ -228,7 +235,7 @@
             try {
                 if (item) {
                     /* istanbul ignore next : Hard to simulate */
-                    if (this._state !== definitions_js_1.PoolState.STARTED) {
+                    if (this._state !== constants_js_1.PoolState.STARTED) {
                         this._itemDestroy(item);
                         return;
                     }
@@ -240,7 +247,7 @@
                 else
                     request.callback(err);
             }
-            catch (ignored) {
+            catch {
                 // ignored
             }
             this._processNextRequest();
@@ -249,9 +256,9 @@
         if (item) {
             /* Validate resource */
             if (this.options.validation && this._factory.validate) {
-                this._itemValidate(item, (err) => {
+                this._itemValidate(item, (err, result) => {
                     /* Destroy resource on validation error */
-                    if (err) {
+                    if (err || result === false) {
                         this._itemDestroy(item);
                         this.emit('validate-error', err, item.resource);
                         this._requestsProcessing--;
@@ -273,7 +280,7 @@
         try {
             return super.emit(event, ...args);
         }
-        catch (e) {
+        catch {
             return true;
         }
     }
@@ -292,7 +299,7 @@
                 this.emit('error', err, {
                     requestTime: request ? request.created : Date.now(),
                     tries,
-                    maxRetries: this.options.acquireMaxRetries
+                    maxRetries: this.options.acquireMaxRetries,
                 });
                 if (err instanceof abort_error_js_1.AbortError || tries >= maxRetries) {
                     this._creating--;
@@ -301,9 +308,10 @@
                 return setTimeout(() => tryCreate(), this.options.acquireRetryWait);
             }
             this._creating--;
-            if (this._allResources.has(obj))
-                return callback &&
-                    callback(new Error('Factory error. Resource already in pool'));
+            if (this._allResources.has(obj)) {
+                return (callback &&
+                    callback(new Error('Factory error. Resource already in pool')));
+            }
             const item = new resource_item_js_1.ResourceItem(obj);
             this._itemSetIdle(item);
             this._allResources.set(obj, item);
@@ -315,8 +323,9 @@
             try {
                 const o = this._factory.create({ tries, maxRetries });
                 /* istanbul ignore next */
-                if (!o)
+                if (!o) {
                     return handleCallback(new abort_error_js_1.AbortError('Factory returned no resource'));
+                }
                 putil_promisify_1.default.await(o, handleCallback);
             }
             catch (e) {
@@ -329,20 +338,21 @@
         if (this._houseKeepTimer)
             clearInterval(this._houseKeepTimer);
         this._houseKeepTimer = undefined;
-        if (ms > 0 && this.state === definitions_js_1.PoolState.STARTED || this.state === definitions_js_1.PoolState.CLOSING)
+        if ((ms > 0 && this.state === constants_js_1.PoolState.STARTED) ||
+            this.state === constants_js_1.PoolState.CLOSING) {
             this._houseKeepTimer = setInterval(() => this._houseKeep(), ms);
+        }
     }
     _houseKeep() {
-        const isClosing = this._state === definitions_js_1.PoolState.CLOSING;
+        const isClosing = this._state === constants_js_1.PoolState.CLOSING;
         const now = Date.now();
         let m = this._allResources.size - this.options.min;
         let n = this._idleResources.length - this.options.minIdle;
         if (isClosing || (m > 0 && n > 0)) {
             this._idleResources.every((item) => {
-                if (isClosing ||
-                    item.idleTime + this.options.idleTimeoutMillis < now) {
+                if (isClosing || item.idleTime + this.options.idleTimeoutMillis < now) {
                     this._itemDestroy(item);
-                    return isClosing || !!((--n) && (--m));
+                    return isClosing || !!(--n && --m);
                 }
                 return false;
             });
@@ -352,7 +362,7 @@
             if (this._allResources.size)
                 return;
             clearInterval(this._houseKeepTimer);
-            this._state = definitions_js_1.PoolState.CLOSED;
+            this._state = constants_js_1.PoolState.CLOSED;
             this._requestsProcessing = 0;
             this.emit('close');
         }
@@ -365,39 +375,41 @@
         });
     }
     _itemSetAcquired(item) {
-        if (item.state !== definitions_js_1.ResourceState.ACQUIRED) {
+        if (item.state !== constants_js_1.ResourceState.ACQUIRED) {
             this._itemDetach(item);
-            item.state = definitions_js_1.ResourceState.ACQUIRED;
+            item.state = constants_js_1.ResourceState.ACQUIRED;
             this._acquiredResources.push(item);
             item.acquiredNode = this._acquiredResources.tail;
         }
     }
     _itemDetach(item) {
         switch (item.state) {
-            case definitions_js_1.ResourceState.IDLE:
+            case constants_js_1.ResourceState.IDLE:
                 item.idleTime = 0;
                 /* istanbul ignore next*/
                 if (item.idleNode)
                     item.idleNode.remove();
                 item.idleNode = undefined;
                 break;
-            case definitions_js_1.ResourceState.ACQUIRED:
-            case definitions_js_1.ResourceState.VALIDATION:
+            case constants_js_1.ResourceState.ACQUIRED:
+            case constants_js_1.ResourceState.VALIDATION:
                 /* istanbul ignore next*/
                 if (item.acquiredNode)
                     item.acquiredNode.remove();
                 item.acquiredNode = undefined;
                 break;
+            default:
+                break;
         }
     }
     _itemSetIdle(item, callback) {
-        const isAcquired = item.state === definitions_js_1.ResourceState.ACQUIRED;
+        const isAcquired = item.state === constants_js_1.ResourceState.ACQUIRED;
         const handleCallback = (err) => {
             if (err)
                 return this._itemDestroy(item, callback);
             this._itemDetach(item);
             item.idleTime = Date.now();
-            item.state = definitions_js_1.ResourceState.IDLE;
+            item.state = constants_js_1.ResourceState.IDLE;
             if (this.options.fifo) {
                 this._idleResources.push(item);
                 item.idleNode = this._idleResources.tail;
@@ -428,36 +440,35 @@
     _itemDestroy(item, callback) {
         this._itemDetach(item);
         const handleCallback = (err) => {
-            if (err) {
+            item.destroyed = true;
+            this._allResources.delete(item.resource);
+            if (err)
                 this.emit('destroy-error', err, item.resource);
-                /* istanbul ignore next */
-                return callback && callback(err);
-            }
-            this.emit('destroy', item.resource);
-            item.destroyed = true;
+            else
+                this.emit('destroy', item.resource);
             if (callback)
-                callback();
+                callback(err);
         };
         try {
-            this._allResources.delete(item.resource);
-            this._processNextRequest();
             const o = this._factory.destroy(item.resource);
             putil_promisify_1.default.await(o, handleCallback);
         }
         catch (e) {
             handleCallback(e);
         }
+        finally {
+            this._processNextRequest();
+        }
     }
     _itemValidate(item, callback) {
-        item.state = definitions_js_1.ResourceState.VALIDATION;
+        item.state = constants_js_1.ResourceState.VALIDATION;
         try {
             const o = this._factory.validate?.(item.resource);
             // @ts-ignore
             putil_promisify_1.default.await(o, callback);
         }
         catch (e) {
-            if (callback)
-                callback(e);
+            callback?.(e);
         }
     }
 }
Index: node_modules/dotenv/lib/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/lib/main.js b/node_modules/dotenv/lib/main.js
--- a/node_modules/dotenv/lib/main.js	
+++ b/node_modules/dotenv/lib/main.js	
@@ -48,10 +48,11 @@
 }
 
 function _parseVault (options) {
+  options = options || {}
+
   const vaultPath = _vaultPath(options)
-
-  // Parse .env.vault
-  const result = DotenvModule.configDotenv({ path: vaultPath })
+  options.path = vaultPath // parse .env.vault
+  const result = DotenvModule.configDotenv(options)
   if (!result.parsed) {
     const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)
     err.code = 'MISSING_DATA'
@@ -89,10 +90,6 @@
   return DotenvModule.parse(decrypted)
 }
 
-function _log (message) {
-  console.log(`[dotenv@${version}][INFO] ${message}`)
-}
-
 function _warn (message) {
   console.log(`[dotenv@${version}][WARN] ${message}`)
 }
@@ -101,6 +98,10 @@
   console.log(`[dotenv@${version}][DEBUG] ${message}`)
 }
 
+function _log (message) {
+  console.log(`[dotenv@${version}] ${message}`)
+}
+
 function _dotenvKey (options) {
   // prioritize developer directly setting options.DOTENV_KEY
   if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
@@ -188,7 +189,12 @@
 }
 
 function _configVault (options) {
-  _log('Loading env from encrypted .env.vault')
+  const debug = Boolean(options && options.debug)
+  const quiet = options && 'quiet' in options ? options.quiet : true
+
+  if (debug || !quiet) {
+    _log('Loading env from encrypted .env.vault')
+  }
 
   const parsed = DotenvModule._parseVault(options)
 
@@ -206,6 +212,7 @@
   const dotenvPath = path.resolve(process.cwd(), '.env')
   let encoding = 'utf8'
   const debug = Boolean(options && options.debug)
+  const quiet = options && 'quiet' in options ? options.quiet : true
 
   if (options && options.encoding) {
     encoding = options.encoding
@@ -252,6 +259,24 @@
 
   DotenvModule.populate(processEnv, parsedAll, options)
 
+  if (debug || !quiet) {
+    const keysCount = Object.keys(parsedAll).length
+    const shortPaths = []
+    for (const filePath of optionPaths) {
+      try {
+        const relative = path.relative(process.cwd(), filePath)
+        shortPaths.push(relative)
+      } catch (e) {
+        if (debug) {
+          _debug(`Failed to load ${filePath} ${e.message}`)
+        }
+        lastError = e
+      }
+    }
+
+    _log(`injecting env (${keysCount}) from ${shortPaths.join(',')}`)
+  }
+
   if (lastError) {
     return { parsed: parsedAll, error: lastError }
   } else {
Index: node_modules/postgresql-client/esm/protocol/smart-buffer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/smart-buffer.js b/node_modules/postgresql-client/esm/protocol/smart-buffer.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/smart-buffer.js	
+++ /dev/null	
@@ -1,168 +0,0 @@
-import * as os from 'os';
-import { writeBigUInt64BE } from '../util/bigint-methods.js';
-import { BufferReader } from './buffer-reader.js';
-export class SmartBuffer extends BufferReader {
-    constructor(cfg) {
-        // @ts-ignore
-        super(Buffer.allocUnsafe((cfg?.pageSize ? parseInt(cfg.pageSize, 10) : 0) || SmartBuffer.DEFAULT_PAGE_SIZE));
-        this._lastHouseKeep = 0;
-        this._stMaxPages = 1;
-        this._length = 0;
-        this._houseKeepInterval = cfg?.houseKeepInterval || 5000;
-        this.pageSize = this.buffer.length;
-        this.maxSize = cfg?.maxLength || SmartBuffer.DEFAULT_MAX_SIZE;
-        this._length = 0;
-    }
-    get capacity() {
-        return this.buffer.length;
-    }
-    get length() {
-        return this._length;
-    }
-    start() {
-        this.offset = 0;
-        this._length = 0;
-        if (this._houseKeepTimer) {
-            clearTimeout(this._houseKeepTimer);
-            this._houseKeepTimer = undefined;
-        }
-        return this;
-    }
-    flush() {
-        if (this._houseKeepTimer)
-            clearTimeout(this._houseKeepTimer);
-        const length = this.length;
-        this._length = 0;
-        const out = this.buffer.slice(0, length);
-        const pages = length ? Math.ceil(length / this.pageSize) : 1;
-        this._stMaxPages = Math.max(this._stMaxPages, pages);
-        if (this._lastHouseKeep < Date.now() + this._houseKeepInterval)
-            this._houseKeep();
-        this._houseKeepTimer = setTimeout(() => {
-            this._houseKeepTimer = undefined;
-            this._houseKeep();
-        }, this._houseKeepInterval).unref();
-        return out;
-    }
-    growSize(len) {
-        const endOffset = this.offset + len;
-        if (this.capacity < endOffset) {
-            if (endOffset > this.maxSize)
-                throw new Error('Buffer limit exceeded.');
-            const newSize = Math.ceil(endOffset / this.pageSize) * this.pageSize;
-            const newBuffer = Buffer.allocUnsafe(newSize);
-            this.buffer.copy(newBuffer);
-            this.buffer = newBuffer;
-        }
-        this._length = Math.max(this.length, endOffset);
-        return this;
-    }
-    fill(value = 0, len = 1) {
-        this.growSize(len);
-        this.buffer.fill(value, this.offset, this.offset + len);
-        this.offset += len;
-        return this;
-    }
-    writeCString(str, encoding) {
-        const len = str ? Buffer.byteLength(str, encoding) : 0;
-        this.growSize(len + 1);
-        if (str) {
-            this.buffer.write(str, this.offset, encoding);
-            this.offset += len;
-        }
-        this.writeUInt8(0);
-        return this;
-    }
-    writeLString(str, encoding) {
-        const len = str ? Buffer.byteLength(str, encoding) : 0;
-        this.growSize(len + 4);
-        this.writeInt32BE(str == null ? -1 : len);
-        if (str) {
-            if (encoding)
-                this.offset += this.buffer.write(str, this.offset, encoding);
-            else
-                this.offset += this.buffer.write(str, this.offset);
-        }
-        return this;
-    }
-    writeString(str, encoding) {
-        if (str) {
-            const len = Buffer.byteLength(str, encoding);
-            this.growSize(len);
-            this.offset += this.buffer.write(str, this.offset, encoding);
-        }
-        return this;
-    }
-    writeInt8(n) {
-        this.growSize(1);
-        this.buffer.writeInt8(n, this.offset);
-        this.offset++;
-        return this;
-    }
-    writeUInt8(n) {
-        this.growSize(1);
-        this.buffer.writeUInt8(n, this.offset);
-        this.offset++;
-        return this;
-    }
-    writeUInt16BE(n) {
-        this.growSize(2);
-        this.buffer.writeUInt16BE(n, this.offset);
-        this.offset += 2;
-        return this;
-    }
-    writeUInt32BE(n) {
-        this.growSize(4);
-        this.buffer.writeUInt32BE(n, this.offset);
-        this.offset += 4;
-        return this;
-    }
-    writeInt16BE(n) {
-        this.growSize(2);
-        this.buffer.writeInt16BE(n, this.offset);
-        this.offset += 2;
-        return this;
-    }
-    writeInt32BE(n) {
-        this.growSize(4);
-        this.buffer.writeInt32BE(n, this.offset);
-        this.offset += 4;
-        return this;
-    }
-    writeBigInt64BE(n) {
-        n = typeof n === 'bigint' ? n : BigInt(n);
-        this.growSize(8);
-        if (typeof this.buffer.writeBigInt64BE === 'function')
-            this.buffer.writeBigInt64BE(n, this.offset);
-        else
-            writeBigUInt64BE(this.buffer, n, this.offset);
-        this.offset += 8;
-        return this;
-    }
-    writeFloatBE(n) {
-        this.growSize(4);
-        this.buffer.writeFloatBE(n, this.offset);
-        this.offset += 4;
-        return this;
-    }
-    writeDoubleBE(n) {
-        this.growSize(8);
-        this.buffer.writeDoubleBE(n, this.offset);
-        this.offset += 8;
-        return this;
-    }
-    writeBuffer(buffer) {
-        this.growSize(buffer.length);
-        buffer.copy(this.buffer, this.offset, 0, buffer.length);
-        this.offset += buffer.length;
-        return this;
-    }
-    _houseKeep() {
-        const needSize = this._stMaxPages * this.pageSize;
-        if (this.buffer.length > needSize)
-            this.buffer = Buffer.allocUnsafe(needSize);
-        this._stMaxPages = this.length ? Math.ceil(this.length / this.pageSize) : 1;
-    }
-}
-SmartBuffer.DEFAULT_PAGE_SIZE = 4096;
-SmartBuffer.DEFAULT_MAX_SIZE = Math.min(Math.floor(os.totalmem() / 2), 1024 * 1024 * 1024 * 2);
Index: node_modules/nodemon/lib/monitor/run.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/lib/monitor/run.js b/node_modules/nodemon/lib/monitor/run.js
--- a/node_modules/nodemon/lib/monitor/run.js	
+++ b/node_modules/nodemon/lib/monitor/run.js	
@@ -64,7 +64,7 @@
   const binPath = process.cwd() + '/node_modules/.bin';
 
   const spawnOptions = {
-    env: Object.assign({}, process.env, options.execOptions.env, {
+    env: Object.assign({}, options.execOptions.env, process.env, {
       PATH:
         binPath +
         path.delimiter +
@@ -249,7 +249,14 @@
       }
     } else {
       bus.emit('crash');
+
+      // support the old syntax of `exitcrash` - 2024-12-13
       if (options.exitcrash) {
+        options.exitCrash = true;
+        delete options.exitcrash;
+      }
+
+      if (options.exitCrash) {
         utils.log.fail('app crashed');
         if (!config.required) {
           process.exit(1);
Index: node_modules/postgresql-client/esm/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/index.js b/node_modules/postgresql-client/esm/index.js
--- a/node_modules/postgresql-client/esm/index.js	
+++ b/node_modules/postgresql-client/esm/index.js	
@@ -1,25 +1,1 @@
-export * from './constants.js';
-export * from './data-type-map.js';
-export * from './types.js';
-export * from './connection/bind-param.js';
-export * from './connection/connection.js';
-export * from './connection/cursor.js';
-export * from './connection/pool.js';
-export * from './connection/prepared-statement.js';
-export * from './interfaces/command-result.js';
-export * from './interfaces/data-mapping-options.js';
-export * from './interfaces/data-type.js';
-export * from './interfaces/database-connection-params.js';
-export * from './interfaces/field-info.js';
-export * from './interfaces/query-options.js';
-export * from './interfaces/query-result.js';
-export * from './interfaces/script-execute-options.js';
-export * from './interfaces/script-result.js';
-export * from './interfaces/statement-prepare-options.js';
-export * from './util/connection-config.js';
-export * from './util/escape-literal.js';
-export * from './util/parse-datetime.js';
-export * from './util/stringify-arrayliteral.js';
-export * from './util/stringify-for-sql.js';
-export * from './protocol/smart-buffer.js';
-export * from './protocol/database-error.js';
+export * from 'postgrejs';
Index: node_modules/postgresql-client/cjs/interfaces/data-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/data-type.js b/node_modules/postgresql-client/cjs/interfaces/data-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/data-type.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/postgresql-client/typings/util/array-calculatedim.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/array-calculatedim.d.ts b/node_modules/postgresql-client/typings/util/array-calculatedim.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/array-calculatedim.d.ts	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export declare function arrayCalculateDim(arr: any[]): number[];
Index: node_modules/postgresql-client/cjs/data-types/bytea-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/bytea-type.js b/node_modules/postgresql-client/cjs/data-types/bytea-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/bytea-type.js	
+++ /dev/null	
@@ -1,29 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayByteaType = exports.ByteaType = void 0;
-const postgres_bytea_1 = __importDefault(require("postgres-bytea"));
-const constants_js_1 = require("../constants.js");
-exports.ByteaType = {
-    name: 'bytea',
-    oid: constants_js_1.DataTypeOIDs.bytea,
-    jsType: 'Buffer',
-    parseBinary(v) {
-        return v;
-    },
-    encodeBinary(buf, v) {
-        buf.writeBuffer(v);
-    },
-    parseText: postgres_bytea_1.default,
-    isType(v) {
-        return v instanceof Buffer;
-    },
-};
-exports.ArrayByteaType = {
-    ...exports.ByteaType,
-    name: '_bytea',
-    oid: constants_js_1.DataTypeOIDs._bytea,
-    elementsOID: constants_js_1.DataTypeOIDs.bytea,
-};
Index: node_modules/postgresql-client/typings/connection/pool.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/connection/pool.d.ts b/node_modules/postgresql-client/typings/connection/pool.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/connection/pool.d.ts	
+++ /dev/null	
@@ -1,52 +0,0 @@
-import { Pool as LightningPool } from 'lightning-pool';
-import { PoolConfiguration } from '../interfaces/database-connection-params.js';
-import { QueryOptions } from '../interfaces/query-options.js';
-import { QueryResult } from '../interfaces/query-result.js';
-import { ScriptExecuteOptions } from '../interfaces/script-execute-options.js';
-import { ScriptResult } from '../interfaces/script-result.js';
-import { StatementPrepareOptions } from '../interfaces/statement-prepare-options.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { Connection, NotificationCallback } from './connection.js';
-import { IntlConnection } from './intl-connection.js';
-import { PreparedStatement } from './prepared-statement.js';
-export declare class Pool extends SafeEventEmitter {
-    protected readonly _pool: LightningPool<IntlConnection>;
-    protected readonly _notificationListeners: SafeEventEmitter;
-    protected _notificationConnection?: Connection;
-    readonly config: PoolConfiguration;
-    constructor(config?: PoolConfiguration | string);
-    /**
-     * Returns number of connections that are currently acquired
-     */
-    get acquiredConnections(): number;
-    /**
-     * Returns number of unused connections in the pool
-     */
-    get idleConnections(): number;
-    /**
-     * Returns total number of connections in the pool regardless of whether they are idle or in use
-     */
-    get totalConnections(): number;
-    /**
-     * Obtains a connection from the connection pool
-     */
-    acquire(): Promise<Connection>;
-    /**
-     * Shuts down the pool and destroys all resources.
-     */
-    close(terminateWait?: number): Promise<void>;
-    /**
-     * Executes a script
-     */
-    execute(sql: string, options?: ScriptExecuteOptions): Promise<ScriptResult>;
-    /**
-     * Executes a query
-     */
-    query(sql: string, options?: QueryOptions): Promise<QueryResult>;
-    prepare(sql: string, options?: StatementPrepareOptions): Promise<PreparedStatement>;
-    release(connection: Connection): Promise<void>;
-    listen(channel: string, callback: NotificationCallback): Promise<void>;
-    unListen(channel: string): Promise<void>;
-    unListenAll(): Promise<void>;
-    protected _initNotificationConnection(): Promise<void>;
-}
Index: node_modules/nodemon/node_modules/debug/src/node.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/debug/src/node.js b/node_modules/nodemon/node_modules/debug/src/node.js
--- a/node_modules/nodemon/node_modules/debug/src/node.js	
+++ b/node_modules/nodemon/node_modules/debug/src/node.js	
@@ -187,11 +187,11 @@
 }
 
 /**
- * Invokes `util.format()` with the specified arguments and writes to stderr.
+ * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
  */
 
 function log(...args) {
-	return process.stderr.write(util.format(...args) + '\n');
+	return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
 }
 
 /**
Index: node_modules/.bin/mime
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/.bin/mime b/node_modules/.bin/mime
--- a/node_modules/.bin/mime	
+++ b/node_modules/.bin/mime	
@@ -1,1 +1,16 @@
-../mime/cli.js
\ No newline at end of file
+#!/bin/sh
+basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
+
+case `uname` in
+    *CYGWIN*|*MINGW*|*MSYS*)
+        if command -v cygpath > /dev/null 2>&1; then
+            basedir=`cygpath -w "$basedir"`
+        fi
+    ;;
+esac
+
+if [ -x "$basedir/node" ]; then
+  exec "$basedir/node"  "$basedir/../mime/cli.js" "$@"
+else 
+  exec node  "$basedir/../mime/cli.js" "$@"
+fi
Index: node_modules/postgresql-client/cjs/util/array-calculatedim.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/array-calculatedim.js b/node_modules/postgresql-client/cjs/util/array-calculatedim.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/array-calculatedim.js	
+++ /dev/null	
@@ -1,19 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.arrayCalculateDim = void 0;
-function arrayCalculateDim(arr) {
-    if (!arr || arr.length === 0)
-        return [0];
-    const dim = [arr.length];
-    const iterate = (a, level) => {
-        for (let i = 0; i < a.length; i++) {
-            if (Array.isArray(a[i])) {
-                dim[level] = Math.max(dim[level] || 0, a[i].length);
-                iterate(a[i], level + 1);
-            }
-        }
-    };
-    iterate(arr, 1);
-    return dim;
-}
-exports.arrayCalculateDim = arrayCalculateDim;
Index: node_modules/power-tasks/typings/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/typings/index.d.ts b/node_modules/power-tasks/typings/index.d.ts
deleted file mode 100644
--- a/node_modules/power-tasks/typings/index.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-export * from './task.js';
-export * from './task-queue.js';
-export * from './abort-error.js';
Index: node_modules/postgresql-client/cjs/interfaces/field-info.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/field-info.js b/node_modules/postgresql-client/cjs/interfaces/field-info.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/field-info.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/power-tasks/typings/task-queue.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/typings/task-queue.d.ts b/node_modules/power-tasks/typings/task-queue.d.ts
deleted file mode 100644
--- a/node_modules/power-tasks/typings/task-queue.d.ts	
+++ /dev/null	
@@ -1,29 +0,0 @@
-import { AsyncEventEmitter } from 'strict-typed-events';
-import DoublyLinked from 'doublylinked';
-import { Task, TaskLike } from './task.js';
-export interface TaskQueueOptions {
-    maxQueue?: number;
-    concurrency?: number;
-    paused?: boolean;
-}
-export declare class TaskQueue extends AsyncEventEmitter {
-    maxQueue?: number;
-    concurrency?: number;
-    protected _paused: boolean;
-    protected _queue: DoublyLinked<Task<any>>;
-    protected _running: Set<Task<any>>;
-    constructor(options?: TaskQueueOptions);
-    get size(): number;
-    get running(): number;
-    get queued(): number;
-    get paused(): boolean;
-    pause(): void;
-    resume(): void;
-    clearQueue(): void;
-    abortAll(): void;
-    wait(): Promise<void>;
-    enqueuePrepend<T = any>(task: TaskLike<T>): Task<T>;
-    enqueue<T = any>(task: TaskLike<T>): Task<T>;
-    protected _enqueue<T = any>(task: TaskLike, prepend: boolean): Task<T>;
-    protected _pulse(): void;
-}
Index: node_modules/semver/functions/patch.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/patch.js b/node_modules/semver/functions/patch.js
--- a/node_modules/semver/functions/patch.js	
+++ b/node_modules/semver/functions/patch.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const patch = (a, loose) => new SemVer(a, loose).patch
 module.exports = patch
Index: node_modules/get-intrinsic/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/get-intrinsic/package.json b/node_modules/get-intrinsic/package.json
--- a/node_modules/get-intrinsic/package.json	
+++ b/node_modules/get-intrinsic/package.json	
@@ -1,6 +1,6 @@
 {
 	"name": "get-intrinsic",
-	"version": "1.2.4",
+	"version": "1.3.0",
 	"description": "Get and robustly cache all JS language-level intrinsics at first require time",
 	"main": "index.js",
 	"exports": {
@@ -17,7 +17,7 @@
 		"pretest": "npm run lint",
 		"tests-only": "nyc tape 'test/**/*.js'",
 		"test": "npm run tests-only",
-		"posttest": "aud --production",
+		"posttest": "npx npm@'>= 10.2' audit --production",
 		"version": "auto-changelog && git add CHANGELOG.md",
 		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
 	},
@@ -43,26 +43,37 @@
 		"url": "https://github.com/ljharb/get-intrinsic/issues"
 	},
 	"homepage": "https://github.com/ljharb/get-intrinsic#readme",
+	"dependencies": {
+		"call-bind-apply-helpers": "^1.0.2",
+		"es-define-property": "^1.0.1",
+		"es-errors": "^1.3.0",
+		"es-object-atoms": "^1.1.1",
+		"function-bind": "^1.1.2",
+		"get-proto": "^1.0.1",
+		"gopd": "^1.2.0",
+		"has-symbols": "^1.1.0",
+		"hasown": "^2.0.2",
+		"math-intrinsics": "^1.1.0"
+	},
 	"devDependencies": {
-		"@ljharb/eslint-config": "^21.1.0",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
-		"call-bind": "^1.0.5",
-		"es-abstract": "^1.22.3",
-		"es-value-fixtures": "^1.4.2",
+		"@ljharb/eslint-config": "^21.1.1",
+		"auto-changelog": "^2.5.0",
+		"call-bound": "^1.0.3",
+		"encoding": "^0.1.13",
+		"es-abstract": "^1.23.9",
+		"es-value-fixtures": "^1.7.1",
 		"eslint": "=8.8.0",
 		"evalmd": "^0.0.19",
-		"for-each": "^0.3.3",
-		"gopd": "^1.0.1",
+		"for-each": "^0.3.5",
 		"make-async-function": "^1.0.0",
 		"make-async-generator-function": "^1.0.0",
 		"make-generator-function": "^2.0.0",
-		"mock-property": "^1.0.3",
+		"mock-property": "^1.1.0",
 		"npmignore": "^0.3.1",
 		"nyc": "^10.3.2",
-		"object-inspect": "^1.13.1",
+		"object-inspect": "^1.13.4",
 		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.4"
+		"tape": "^5.9.0"
 	},
 	"auto-changelog": {
 		"output": "CHANGELOG.md",
@@ -72,13 +83,6 @@
 		"backfillLimit": false,
 		"hideCredit": true
 	},
-	"dependencies": {
-		"es-errors": "^1.3.0",
-		"function-bind": "^1.1.2",
-		"has-proto": "^1.0.1",
-		"has-symbols": "^1.0.3",
-		"hasown": "^2.0.0"
-	},
 	"testling": {
 		"files": "test/GetIntrinsic.js"
 	},
Index: node_modules/pg-pool/test/sizing.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/sizing.js b/node_modules/pg-pool/test/sizing.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/sizing.js	
+++ /dev/null	
@@ -1,58 +0,0 @@
-const expect = require('expect.js')
-const co = require('co')
-const _ = require('lodash')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('pool size of 1', () => {
-  it(
-    'can create a single client and use it once',
-    co.wrap(function* () {
-      const pool = new Pool({ max: 1 })
-      expect(pool.waitingCount).to.equal(0)
-      const client = yield pool.connect()
-      const res = yield client.query('SELECT $1::text as name', ['hi'])
-      expect(res.rows[0].name).to.equal('hi')
-      client.release()
-      pool.end()
-    })
-  )
-
-  it(
-    'can create a single client and use it multiple times',
-    co.wrap(function* () {
-      const pool = new Pool({ max: 1 })
-      expect(pool.waitingCount).to.equal(0)
-      const client = yield pool.connect()
-      const wait = pool.connect()
-      expect(pool.waitingCount).to.equal(1)
-      client.release()
-      const client2 = yield wait
-      expect(client).to.equal(client2)
-      client2.release()
-      return yield pool.end()
-    })
-  )
-
-  it(
-    'can only send 1 query at a time',
-    co.wrap(function* () {
-      const pool = new Pool({ max: 1 })
-
-      // the query text column name changed in PostgreSQL 9.2
-      const versionResult = yield pool.query('SHOW server_version_num')
-      const version = parseInt(versionResult.rows[0].server_version_num, 10)
-      const queryColumn = version < 90200 ? 'current_query' : 'query'
-
-      const queryText = 'SELECT COUNT(*) as counts FROM pg_stat_activity WHERE ' + queryColumn + ' = $1'
-      const queries = _.times(20, () => pool.query(queryText, [queryText]))
-      const results = yield Promise.all(queries)
-      const counts = results.map((res) => parseInt(res.rows[0].counts, 10))
-      expect(counts).to.eql(_.times(20, (i) => 1))
-      return yield pool.end()
-    })
-  )
-})
Index: node_modules/postgresql-client/cjs/util/stringify-for-sql.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/stringify-for-sql.js b/node_modules/postgresql-client/cjs/util/stringify-for-sql.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/stringify-for-sql.js	
+++ /dev/null	
@@ -1,30 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.stringifyValueForSQL = exports.stringifyArrayForSQL = void 0;
-const uuid_type_js_1 = require("../data-types/uuid-type.js");
-const escape_literal_js_1 = require("./escape-literal.js");
-function stringifyArrayForSQL(v, options, encode) {
-    const arr = v.map(x => stringifyValueForSQL(x, options, encode));
-    return 'ARRAY[' + arr.join(',') + ']';
-}
-exports.stringifyArrayForSQL = stringifyArrayForSQL;
-function stringifyValueForSQL(v, options, encode) {
-    if (v == null)
-        return 'null';
-    if (typeof v === 'boolean')
-        return v ? 'true' : 'false';
-    if (Array.isArray(v))
-        return stringifyArrayForSQL(v, options, encode);
-    if (encode)
-        v = encode(v, options || {});
-    if (typeof v === 'number')
-        return '' + v;
-    if (typeof v === 'bigint')
-        return v.toString();
-    if (typeof v === 'string' && uuid_type_js_1.UuidType.isType(v))
-        return (0, escape_literal_js_1.escapeLiteral)('' + v) + '::uuid';
-    if (typeof v === 'object')
-        return (0, escape_literal_js_1.escapeLiteral)(JSON.stringify(v)) + '::json';
-    return (0, escape_literal_js_1.escapeLiteral)('' + v);
-}
-exports.stringifyValueForSQL = stringifyValueForSQL;
Index: node_modules/pg-protocol/dist/buffer-writer.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/buffer-writer.js.map b/node_modules/pg-protocol/dist/buffer-writer.js.map
--- a/node_modules/pg-protocol/dist/buffer-writer.js.map	
+++ b/node_modules/pg-protocol/dist/buffer-writer.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"buffer-writer.js","sourceRoot":"","sources":["../src/buffer-writer.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"buffer-writer.js","sourceRoot":"","sources":["../src/buffer-writer.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
Index: node_modules/has-property-descriptors/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-property-descriptors/.eslintrc b/node_modules/has-property-descriptors/.eslintrc
deleted file mode 100644
--- a/node_modules/has-property-descriptors/.eslintrc	
+++ /dev/null	
@@ -1,13 +0,0 @@
-{
-	"root": true,
-
-	"extends": "@ljharb",
-
-	"rules": {
-		"func-name-matching": 0,
-		"id-length": 0,
-		"new-cap": [2, {
-			"capIsNewExceptions": ["GetIntrinsic"],
-		}],
-	},
-}
Index: node_modules/pg-protocol/dist/inbound-parser.test.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/inbound-parser.test.js.map b/node_modules/pg-protocol/dist/inbound-parser.test.js.map
--- a/node_modules/pg-protocol/dist/inbound-parser.test.js.map	
+++ b/node_modules/pg-protocol/dist/inbound-parser.test.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"inbound-parser.test.js","sourceRoot":"","sources":["../src/inbound-parser.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"inbound-parser.test.js","sourceRoot":"","sources":["../src/inbound-parser.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
Index: node_modules/postgresql-client/node_modules/postgres-bytea/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/index.js b/node_modules/postgresql-client/node_modules/postgres-bytea/index.js
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/index.js	
+++ /dev/null	
@@ -1,6 +0,0 @@
-'use strict'
-
-exports = module.exports = require('./decode')
-
-exports.Encoder = require('./encoder')
-exports.Decoder = require('./decoder')
Index: node_modules/semver/ranges/intersects.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/intersects.js b/node_modules/semver/ranges/intersects.js
--- a/node_modules/semver/ranges/intersects.js	
+++ b/node_modules/semver/ranges/intersects.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const Range = require('../classes/range')
 const intersects = (r1, r2, options) => {
   r1 = new Range(r1, options)
Index: node_modules/postgresql-client/typings/connection/portal.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/connection/portal.d.ts b/node_modules/postgresql-client/typings/connection/portal.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/connection/portal.d.ts	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import { QueryOptions } from '../interfaces/query-options.js';
-import { Protocol } from '../protocol/protocol.js';
-import { Maybe } from '../types.js';
-import { Connection } from './connection.js';
-import type { PreparedStatement } from './prepared-statement.js';
-export interface PortalExecuteResult {
-    code: Protocol.BackendMessageCode;
-    rows?: any[];
-    command?: string;
-    rowCount?: number;
-}
-export declare class Portal {
-    private readonly _statement;
-    private readonly _name?;
-    private _columnFormat;
-    constructor(statement: PreparedStatement, name: string);
-    get connection(): Connection;
-    get name(): Maybe<string>;
-    bind(params: Maybe<any[]>, queryOptions: QueryOptions): Promise<void>;
-    retrieveFields(): Promise<Protocol.RowDescription[]>;
-    execute(fetchCount?: number): Promise<PortalExecuteResult>;
-    close(): Promise<void>;
-}
Index: node_modules/postgresql-client/esm/connection/portal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/connection/portal.js b/node_modules/postgresql-client/esm/connection/portal.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/connection/portal.js	
+++ /dev/null	
@@ -1,144 +0,0 @@
-import { DEFAULT_COLUMN_FORMAT } from '../constants.js';
-import { GlobalTypeMap } from '../data-type-map.js';
-import { Protocol } from '../protocol/protocol.js';
-import { getIntlConnection } from './intl-connection.js';
-export class Portal {
-    constructor(statement, name) {
-        this._columnFormat = DEFAULT_COLUMN_FORMAT;
-        this._statement = statement;
-        this._name = name;
-    }
-    get connection() {
-        return this._statement.connection;
-    }
-    get name() {
-        return this._name;
-    }
-    async bind(params, queryOptions) {
-        const intoCon = getIntlConnection(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            this._columnFormat = queryOptions.columnFormat != null ? queryOptions.columnFormat : Protocol.DataFormat.binary;
-            socket.sendBindMessage({
-                typeMap: queryOptions.typeMap || GlobalTypeMap,
-                statement: this._statement.name,
-                portal: this.name,
-                paramTypes: this._statement.paramTypes,
-                params,
-                queryOptions,
-            });
-            socket.sendFlushMessage();
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case Protocol.BackendMessageCode.BindComplete:
-                        done();
-                        break;
-                    case Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-    async retrieveFields() {
-        const intoCon = getIntlConnection(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendDescribeMessage({ type: 'P', name: this.name });
-            socket.sendFlushMessage();
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    case Protocol.BackendMessageCode.NoData:
-                        done();
-                        break;
-                    case Protocol.BackendMessageCode.RowDescription:
-                        done(undefined, msg.fields);
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-    async execute(fetchCount) {
-        const intoCon = getIntlConnection(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendExecuteMessage({ portal: this.name, fetchCount: fetchCount || 100 });
-            socket.sendFlushMessage();
-            const rows = [];
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    case Protocol.BackendMessageCode.NoData:
-                        done(undefined, { code });
-                        break;
-                    case Protocol.BackendMessageCode.DataRow:
-                        if (Array.isArray(this._columnFormat)) {
-                            rows.push(msg.columns.map((buf, i) => this._columnFormat[i] === Protocol.DataFormat.text ? buf.toString('utf8') : buf));
-                        }
-                        else if (this._columnFormat === Protocol.DataFormat.binary)
-                            rows.push(msg.columns);
-                        else
-                            rows.push(msg.columns.map((buf) => buf.toString('utf8')));
-                        break;
-                    case Protocol.BackendMessageCode.PortalSuspended:
-                        done(undefined, { code, rows });
-                        break;
-                    case Protocol.BackendMessageCode.CommandComplete:
-                        done(undefined, {
-                            code,
-                            rows,
-                            command: msg.command,
-                            rowCount: msg.rowCount,
-                        });
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-    async close() {
-        const intoCon = getIntlConnection(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendCloseMessage({ type: 'P', name: this.name });
-            socket.sendSyncMessage();
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    case Protocol.BackendMessageCode.CloseComplete:
-                        break;
-                    case Protocol.BackendMessageCode.ReadyForQuery:
-                        intoCon.transactionStatus = msg.status;
-                        done();
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-}
Index: node_modules/postgresql-client/typings/util/parse-datetime.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/parse-datetime.d.ts b/node_modules/postgresql-client/typings/util/parse-datetime.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/parse-datetime.d.ts	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export declare function parseDateTime(str: string, parseTime?: boolean, parseTimeZone?: boolean, utc?: boolean): Date | number;
Index: node_modules/putil-merge/lib/merge.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/putil-merge/lib/merge.js b/node_modules/putil-merge/lib/merge.js
deleted file mode 100644
--- a/node_modules/putil-merge/lib/merge.js	
+++ /dev/null	
@@ -1,122 +0,0 @@
-/* putil-merge
- ------------------------
- (c) 2017-present Panates
- This file may be freely distributed under the MIT license.
- */
-
-/**
- *
- * @param {Object} target
- * @param {Object} source
- * @param {Object} options
- * @param {boolean|Function} [options.deep]
- * @param {boolean} [options.clone]
- * @param {boolean} [options.combine]
- * @param {boolean} [options.descriptor]
- * @param {Function} [options.filter]
- * @param {Boolean|Function} [options.arrayMerge]
- * @return {Object}
- */
-function merge(target, source, options = {}) {
-  if (!(isObject(target) || typeof target=== 'function'))
-    throw new TypeError('Property "target" requires object or function type');
-  if (typeof target=== 'function' && options.clone)
-    throw new TypeError('Can not clone a function');
-  if (!source)
-    return target;
-  if (!(isObject(source) || typeof source=== 'function'))
-    throw new TypeError('Property "source" requires object or function type');
-  const optionDeep = options.deep;
-  const optionDescriptor = options.descriptor;
-  const optionClone = options.clone;
-  const optionFilter = options.filter;
-  const optionCombine = options.combine;
-  const optionArrayMerge = options.arrayMerge;
-
-  if (source === target) return target;
-  const keys = Object.getOwnPropertyNames(source);
-  keys.push(...Object.getOwnPropertySymbols(source));
-  for (const key of keys) {
-    if (key === '__proto__' || key === 'constructor')
-      continue;
-    if (optionFilter && !optionFilter(source, key))
-      continue;
-    if (optionCombine && target.hasOwnProperty(key))
-      continue;
-
-    const descriptor = Object.getOwnPropertyDescriptor(source, key);
-
-    if (optionDescriptor && (descriptor.get || descriptor.set)) {
-      Object.defineProperty(target, key, descriptor);
-      continue;
-    }
-    let srcVal = source[key];
-    if (srcVal === undefined)
-      continue;
-
-    delete descriptor.get;
-    delete descriptor.set;
-    if (!optionDescriptor) {
-      descriptor.enumerable = true;
-      descriptor.configurable = true;
-      descriptor.writable = true;
-    }
-
-    let trgVal = target[key];
-    if (isPlainObject(srcVal)) {
-      if (optionDeep === true || (typeof optionDeep === 'function' && optionDeep(srcVal))) {
-        if (!isObject(trgVal)) {
-          descriptor.value = trgVal = {};
-          Object.defineProperty(target, key, descriptor);
-        }
-        merge(trgVal, srcVal, options);
-        continue;
-      }
-      if (optionClone)
-        srcVal = merge({}, srcVal, options);
-    } else if (Array.isArray(srcVal)) {
-      if (optionArrayMerge && Array.isArray(trgVal)) {
-        if (typeof optionArrayMerge === 'function')
-          srcVal = optionArrayMerge(trgVal, srcVal);
-        else
-          srcVal = merge.arrayCombine(trgVal, srcVal);
-      } else if (optionClone)
-        srcVal = srcVal.slice();
-    }
-    descriptor.value = srcVal;
-    Object.defineProperty(target, key, descriptor);
-  }
-  return target;
-}
-
-merge.all = function all(objects, options = {}) {
-  const target = objects[0];
-  for (const [i, o] of objects.entries()) {
-    if (i > 0)
-      merge(target, o, options);
-  }
-  return target;
-};
-
-merge.arrayCombine = function(target, source) {
-  return target.concat(source.filter((v) => !target.includes(v)));
-};
-
-const isObject = (v) => v && (
-    (typeof v === 'object' && !Array.isArray(v)));
-
-const objCtorStr = Function.prototype.toString.call(Object);
-
-const isPlainObject = (obj) => {
-  if (typeof obj === 'object' && Object.prototype.toString.call(obj) === '[object Object]') {
-    const proto = Object.getPrototypeOf(obj);
-    if (proto) {
-      const ctor = Object.prototype.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
-      return typeof ctor === 'function' && (ctor instanceof ctor) &&
-          Function.prototype.toString.call(ctor) === objCtorStr;
-    } else return true;
-  }
-  return false;
-}
-
-module.exports = merge;
Index: node_modules/strict-typed-events/cjs/async-event-emitter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/strict-typed-events/cjs/async-event-emitter.js b/node_modules/strict-typed-events/cjs/async-event-emitter.js
--- a/node_modules/strict-typed-events/cjs/async-event-emitter.js	
+++ b/node_modules/strict-typed-events/cjs/async-event-emitter.js	
@@ -1,11 +1,9 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.AsyncEventEmitter = void 0;
+const tslib_1 = require("tslib");
 const events_1 = require("events");
-const putil_promisify_1 = __importDefault(require("putil-promisify"));
+const putil_promisify_1 = tslib_1.__importDefault(require("putil-promisify"));
 class AsyncEventEmitter extends events_1.EventEmitter {
     async emitAsync(event, ...args) {
         const listeners = this.rawListeners(event);
Index: node_modules/postgresql-client/typings/data-types/json-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/json-type.d.ts b/node_modules/postgresql-client/typings/data-types/json-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/json-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const JsonType: DataType;
-export declare const ArrayJsonType: DataType;
Index: node_modules/postgresql-client/cjs/data-type-map.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-type-map.js b/node_modules/postgresql-client/cjs/data-type-map.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-type-map.js	
+++ /dev/null	
@@ -1,119 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.GlobalTypeMap = exports.DataTypeMap = void 0;
-const constants_js_1 = require("./constants.js");
-const bool_type_js_1 = require("./data-types/bool-type.js");
-const box_type_js_1 = require("./data-types/box-type.js");
-const bytea_type_js_1 = require("./data-types/bytea-type.js");
-const char_type_js_1 = require("./data-types/char-type.js");
-const circle_type_js_1 = require("./data-types/circle-type.js");
-const date_type_js_1 = require("./data-types/date-type.js");
-const float4_type_js_1 = require("./data-types/float4-type.js");
-const float8_type_js_1 = require("./data-types/float8-type.js");
-const int2_type_js_1 = require("./data-types/int2-type.js");
-const int2_vector_type_js_1 = require("./data-types/int2-vector-type.js");
-const int4_type_js_1 = require("./data-types/int4-type.js");
-const int8_type_js_1 = require("./data-types/int8-type.js");
-const json_type_js_1 = require("./data-types/json-type.js");
-const jsonb_type_js_1 = require("./data-types/jsonb-type.js");
-const lseg_type_js_1 = require("./data-types/lseg-type.js");
-const numeric_type_js_1 = require("./data-types/numeric-type.js");
-const oid_type_js_1 = require("./data-types/oid-type.js");
-const point_type_js_1 = require("./data-types/point-type.js");
-const time_type_js_1 = require("./data-types/time-type.js");
-const timestamp_type_js_1 = require("./data-types/timestamp-type.js");
-const timestamptz_type_js_1 = require("./data-types/timestamptz-type.js");
-const uuid_type_js_1 = require("./data-types/uuid-type.js");
-const varchar_type_js_1 = require("./data-types/varchar-type.js");
-class DataTypeMap {
-    constructor(other) {
-        this._itemsByOID = {};
-        this._items = [];
-        if (other instanceof DataTypeMap)
-            Object.assign(this._items, other._items);
-    }
-    get(oid) {
-        return this._itemsByOID[oid];
-    }
-    register(dataTypes) {
-        dataTypes = Array.isArray(dataTypes) ? dataTypes : [dataTypes];
-        for (const t of dataTypes) {
-            this._itemsByOID[t.oid] = t;
-            const i = this._items.findIndex(tt => tt.oid === t.oid);
-            if (i >= 0)
-                this._items[i] = t;
-            else
-                this._items.push(t);
-        }
-    }
-    determine(value) {
-        if (value == null)
-            return constants_js_1.DataTypeOIDs.unknown;
-        const valueIsArray = Array.isArray(value);
-        let i;
-        let t;
-        for (i = this._items.length - 1; i >= 0; i--) {
-            t = this._items[i];
-            if (valueIsArray) {
-                if (t.elementsOID && t.isType(value[0]))
-                    return t.oid;
-            }
-            else if (!t.elementsOID && t.isType(value))
-                return t.oid;
-        }
-        return constants_js_1.DataTypeOIDs.unknown;
-    }
-}
-exports.DataTypeMap = DataTypeMap;
-exports.GlobalTypeMap = new DataTypeMap();
-exports.GlobalTypeMap.register([oid_type_js_1.OidType, oid_type_js_1.VectorOidType, oid_type_js_1.ArrayOidType]);
-exports.GlobalTypeMap.register([jsonb_type_js_1.JsonbType, jsonb_type_js_1.ArrayJsonbType]);
-exports.GlobalTypeMap.register([json_type_js_1.JsonType, json_type_js_1.ArrayJsonType]);
-exports.GlobalTypeMap.register([bool_type_js_1.BoolType, bool_type_js_1.ArrayBoolType]);
-exports.GlobalTypeMap.register([numeric_type_js_1.NumericType, numeric_type_js_1.ArrayNumericType]);
-exports.GlobalTypeMap.register([float4_type_js_1.Float4Type, float4_type_js_1.ArrayFloat4Type]);
-exports.GlobalTypeMap.register([float8_type_js_1.Float8Type, float8_type_js_1.ArrayFloat8Type]);
-exports.GlobalTypeMap.register([int2_type_js_1.Int2Type, int2_type_js_1.ArrayInt2Type]);
-exports.GlobalTypeMap.register([int4_type_js_1.Int4Type, int4_type_js_1.ArrayInt4Type]);
-exports.GlobalTypeMap.register([int8_type_js_1.Int8Type, int8_type_js_1.ArrayInt8Type]);
-exports.GlobalTypeMap.register([bytea_type_js_1.ByteaType, bytea_type_js_1.ArrayByteaType]);
-exports.GlobalTypeMap.register([circle_type_js_1.CircleType, circle_type_js_1.ArrayCircleType]);
-exports.GlobalTypeMap.register([point_type_js_1.PointType, point_type_js_1.ArrayPointType]);
-exports.GlobalTypeMap.register([lseg_type_js_1.LsegType, lseg_type_js_1.ArrayLsegType]);
-exports.GlobalTypeMap.register([box_type_js_1.BoxType, box_type_js_1.ArrayBoxType]);
-exports.GlobalTypeMap.register([int2_vector_type_js_1.Int2VectorType, int2_vector_type_js_1.ArrayInt2VectorType]);
-exports.GlobalTypeMap.register({ ...varchar_type_js_1.VarcharType, name: 'bpchar', oid: constants_js_1.DataTypeOIDs.bpchar });
-exports.GlobalTypeMap.register({
-    ...varchar_type_js_1.ArrayVarcharType,
-    name: '_bpchar',
-    oid: constants_js_1.DataTypeOIDs._bpchar,
-    elementsOID: constants_js_1.DataTypeOIDs.bpchar,
-});
-exports.GlobalTypeMap.register({ ...varchar_type_js_1.VarcharType, name: 'name', oid: constants_js_1.DataTypeOIDs.name });
-exports.GlobalTypeMap.register({
-    ...varchar_type_js_1.ArrayVarcharType,
-    name: '_name',
-    oid: constants_js_1.DataTypeOIDs._name,
-    elementsOID: constants_js_1.DataTypeOIDs.name,
-});
-exports.GlobalTypeMap.register({ ...varchar_type_js_1.VarcharType, name: 'text', oid: constants_js_1.DataTypeOIDs.text });
-exports.GlobalTypeMap.register({
-    ...varchar_type_js_1.ArrayVarcharType,
-    name: '_text',
-    oid: constants_js_1.DataTypeOIDs._text,
-    elementsOID: constants_js_1.DataTypeOIDs.text,
-});
-exports.GlobalTypeMap.register({ ...varchar_type_js_1.VarcharType, name: 'xml', oid: constants_js_1.DataTypeOIDs.xml });
-exports.GlobalTypeMap.register({
-    ...varchar_type_js_1.ArrayVarcharType,
-    name: '_xml',
-    oid: constants_js_1.DataTypeOIDs._xml,
-    elementsOID: constants_js_1.DataTypeOIDs.xml,
-});
-exports.GlobalTypeMap.register([varchar_type_js_1.VarcharType, varchar_type_js_1.ArrayVarcharType]);
-exports.GlobalTypeMap.register([uuid_type_js_1.UuidType, uuid_type_js_1.ArrayUuidType]);
-exports.GlobalTypeMap.register([char_type_js_1.CharType, char_type_js_1.ArrayCharType]);
-exports.GlobalTypeMap.register([timestamptz_type_js_1.TimestamptzType, timestamptz_type_js_1.ArrayTimestamptzType]);
-exports.GlobalTypeMap.register([time_type_js_1.TimeType, time_type_js_1.ArrayTimeType]);
-exports.GlobalTypeMap.register([date_type_js_1.DateType, date_type_js_1.ArrayDateType]);
-exports.GlobalTypeMap.register([timestamp_type_js_1.TimestampType, timestamp_type_js_1.ArrayTimestampType]);
Index: node_modules/set-function-length/.github/FUNDING.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/.github/FUNDING.yml b/node_modules/set-function-length/.github/FUNDING.yml
deleted file mode 100644
--- a/node_modules/set-function-length/.github/FUNDING.yml	
+++ /dev/null	
@@ -1,12 +0,0 @@
-# These are supported funding model platforms
-
-github: [ljharb]
-patreon: # Replace with a single Patreon username
-open_collective: # Replace with a single Open Collective username
-ko_fi: # Replace with a single Ko-fi username
-tidelift: npm/set-function-name
-community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
-liberapay: # Replace with a single Liberapay username
-issuehunt: # Replace with a single IssueHunt username
-otechie: # Replace with a single Otechie username
-custom: # Replace with a single custom sponsorship URL
Index: node_modules/has-symbols/test/shams/core-js.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-symbols/test/shams/core-js.js b/node_modules/has-symbols/test/shams/core-js.js
--- a/node_modules/has-symbols/test/shams/core-js.js	
+++ b/node_modules/has-symbols/test/shams/core-js.js	
@@ -8,6 +8,7 @@
 		t.equal(typeof Symbol(), 'symbol');
 		t.end();
 	});
+	// @ts-expect-error TS is stupid and doesn't know about top level return
 	return;
 }
 
Index: node_modules/postgresql-client/typings/protocol/database-error.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/database-error.d.ts b/node_modules/postgresql-client/typings/protocol/database-error.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/database-error.d.ts	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import { Protocol } from './protocol.js';
-export declare class DatabaseError extends Error {
-    severity?: string;
-    code?: string;
-    detail?: string;
-    hint?: string;
-    position?: number;
-    internalPosition?: string;
-    internalQuery?: string;
-    where?: string;
-    schema?: string;
-    table?: string;
-    column?: string;
-    dataType?: string;
-    constraint?: string;
-    lineNr?: number;
-    colNr?: number;
-    line?: string;
-    constructor(msg: Protocol.ErrorResponseMessage);
-}
Index: node_modules/postgresql-client/cjs/util/wrap-row-description.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/wrap-row-description.js b/node_modules/postgresql-client/cjs/util/wrap-row-description.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/wrap-row-description.js	
+++ /dev/null	
@@ -1,35 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.wrapRowDescription = void 0;
-const constants_js_1 = require("../constants.js");
-function wrapRowDescription(typeMap, fields, columnFormat) {
-    return fields.map((f, idx) => {
-        const cf = Array.isArray(columnFormat) ? columnFormat[idx] : columnFormat;
-        const x = {
-            fieldName: f.fieldName,
-            tableId: f.tableId,
-            columnId: f.columnId,
-            dataTypeId: f.dataTypeId,
-            dataTypeName: constants_js_1.DataTypeNames[f.dataTypeId] || '',
-            jsType: cf === constants_js_1.DataFormat.binary ? 'Buffer' : 'string',
-        };
-        x.isArray = x.dataTypeName.startsWith('_');
-        if (x.isArray) {
-            x.elementDataTypeName = x.dataTypeName.substring(1);
-            for (const oid of Object.keys(constants_js_1.DataTypeNames)) {
-                if (constants_js_1.DataTypeNames[oid] === x.elementDataTypeName)
-                    x.elementDataTypeId = parseInt(oid, 10);
-            }
-        }
-        if (f.fixedSize && f.fixedSize > 0)
-            x.fixedSize = f.fixedSize;
-        if (f.modifier && f.modifier > 0)
-            x.modifier = f.modifier;
-        const reg = typeMap.get(x.dataTypeId);
-        if (reg) {
-            x.jsType = reg.jsType;
-        }
-        return x;
-    });
-}
-exports.wrapRowDescription = wrapRowDescription;
Index: node_modules/postgresql-client/typings/data-types/time-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/time-type.d.ts b/node_modules/postgresql-client/typings/data-types/time-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/time-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const TimeType: DataType;
-export declare const ArrayTimeType: DataType;
Index: node_modules/postgresql-client/esm/data-types/timestamptz-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/timestamptz-type.js b/node_modules/postgresql-client/esm/data-types/timestamptz-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/timestamptz-type.js	
+++ /dev/null	
@@ -1,70 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { parseDateTime } from '../util/parse-datetime.js';
-const timeShift = 946684800000;
-const timeMul = 4294967296;
-export const TimestamptzType = {
-    name: 'timestamptz',
-    oid: DataTypeOIDs.timestamptz,
-    jsType: 'Date',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.timestamptz);
-        const hi = v.readInt32BE();
-        const lo = v.readUInt32BE(4);
-        if (lo === 0xffffffff && hi === 0x7fffffff)
-            return fetchAsString ? 'infinity' : Infinity;
-        if (lo === 0x00000000 && hi === -0x80000000)
-            return fetchAsString ? '-infinity' : -Infinity;
-        // Shift from 2000 to 1970
-        let d = new Date((lo + hi * timeMul) / 1000 + timeShift);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());
-        return fetchAsString ? dateToTimestamptzString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = parseDateTime(v, true, true, options.utcDates);
-        if (v === Infinity) {
-            buf.writeInt32BE(0x7fffffff); // hi
-            buf.writeUInt32BE(0xffffffff); // lo
-            return;
-        }
-        if (v === -Infinity) {
-            buf.writeInt32BE(-0x80000000); // hi
-            buf.writeUInt32BE(0x00000000); // lo
-            return;
-        }
-        if (!(v instanceof Date))
-            v = new Date(v);
-        let n = v.getTime();
-        n = (n - timeShift) * 1000;
-        const hi = Math.floor(n / timeMul);
-        const lo = n - hi * timeMul;
-        buf.writeInt32BE(hi);
-        buf.writeUInt32BE(lo);
-    },
-    parseText(v, options) {
-        const d = parseDateTime(v, true, true, options.utcDates);
-        if (options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.timestamptz)) {
-            if (d instanceof Date)
-                return dateToTimestamptzString(d);
-            if (d === Infinity)
-                return 'infinity';
-            if (d === -Infinity)
-                return '-infinity';
-            return '';
-        }
-        return d;
-    },
-    isType(v) {
-        return v instanceof Date;
-    },
-};
-function dateToTimestamptzString(d) {
-    return d.toISOString().replace('T', ' ');
-}
-export const ArrayTimestamptzType = {
-    ...TimestamptzType,
-    name: '_timestamptz',
-    oid: DataTypeOIDs._timestamptz,
-    elementsOID: DataTypeOIDs.timestamptz,
-};
Index: node_modules/postgresql-client/esm/util/get-parsers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/get-parsers.js b/node_modules/postgresql-client/esm/util/get-parsers.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/get-parsers.js	
+++ /dev/null	
@@ -1,38 +0,0 @@
-import { DataFormat } from '../constants.js';
-import { decodeBinaryArray } from './decode-binaryarray.js';
-import { parsePostgresArray } from './parse-array.js';
-const DefaultColumnParser = (v) => v;
-export function getParsers(typeMap, fields) {
-    const parsers = new Array(fields.length);
-    const l = fields.length;
-    let f;
-    let i;
-    for (i = 0; i < l; i++) {
-        f = fields[i];
-        const dataTypeReg = typeMap.get(f.dataTypeId);
-        if (dataTypeReg) {
-            const isArray = !!dataTypeReg.elementsOID;
-            if (f.format === DataFormat.binary) {
-                const decode = dataTypeReg.parseBinary;
-                if (decode) {
-                    parsers[i] = !isArray
-                        ? decode
-                        : (v, options) => decodeBinaryArray(v, decode, options);
-                }
-            }
-            else if (f.format === DataFormat.text) {
-                const parse = dataTypeReg.parseText;
-                if (parse) {
-                    parsers[i] = !isArray
-                        ? parse
-                        : (v, options) => parsePostgresArray(v, {
-                            transform: x => parse(x, options),
-                            separator: dataTypeReg.arraySeparator,
-                        });
-                }
-            }
-        }
-        parsers[i] = parsers[i] || DefaultColumnParser;
-    }
-    return parsers;
-}
Index: node_modules/has-property-descriptors/.github/FUNDING.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-property-descriptors/.github/FUNDING.yml b/node_modules/has-property-descriptors/.github/FUNDING.yml
deleted file mode 100644
--- a/node_modules/has-property-descriptors/.github/FUNDING.yml	
+++ /dev/null	
@@ -1,12 +0,0 @@
-# These are supported funding model platforms
-
-github: [ljharb]
-patreon: # Replace with a single Patreon username
-open_collective: # Replace with a single Open Collective username
-ko_fi: # Replace with a single Ko-fi username
-tidelift: npm/has-property-descriptors
-community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
-liberapay: # Replace with a single Liberapay username
-issuehunt: # Replace with a single IssueHunt username
-otechie: # Replace with a single Otechie username
-custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
Index: node_modules/postgresql-client/typings/protocol/buffer-reader.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/buffer-reader.d.ts b/node_modules/postgresql-client/typings/protocol/buffer-reader.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/buffer-reader.d.ts	
+++ /dev/null	
@@ -1,18 +0,0 @@
-/// <reference types="node" />
-export declare class BufferReader {
-    buffer: Buffer;
-    offset: number;
-    constructor(buffer: Buffer);
-    get length(): number;
-    readUInt8(): number;
-    readUInt16BE(): number;
-    readInt16BE(): number;
-    readUInt32BE(): number;
-    readInt32BE(): number;
-    readCString(encoding?: BufferEncoding): string;
-    readLString(len: number, encoding?: BufferEncoding): string | null;
-    readBuffer(len?: number): Buffer;
-    moveBy(n: number): this;
-    moveTo(pos: number): this;
-    private _checkReadable;
-}
Index: node_modules/object-inspect/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/object-inspect/index.js b/node_modules/object-inspect/index.js
--- a/node_modules/object-inspect/index.js	
+++ b/node_modules/object-inspect/index.js	
@@ -69,10 +69,21 @@
 var inspectCustom = utilInspect.custom;
 var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
 
+var quotes = {
+    __proto__: null,
+    'double': '"',
+    single: "'"
+};
+var quoteREs = {
+    __proto__: null,
+    'double': /(["\\])/g,
+    single: /(['\\])/g
+};
+
 module.exports = function inspect_(obj, options, depth, seen) {
     var opts = options || {};
 
-    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
+    if (has(opts, 'quoteStyle') && !has(quotes, opts.quoteStyle)) {
         throw new TypeError('option "quoteStyle" must be "single" or "double"');
     }
     if (
@@ -244,7 +255,10 @@
     if (typeof window !== 'undefined' && obj === window) {
         return '{ [object Window] }';
     }
-    if (obj === global) {
+    if (
+        (typeof globalThis !== 'undefined' && obj === globalThis)
+        || (typeof global !== 'undefined' && obj === global)
+    ) {
         return '{ [object globalThis] }';
     }
     if (!isDate(obj) && !isRegExp(obj)) {
@@ -264,7 +278,8 @@
 };
 
 function wrapQuotes(s, defaultStyle, opts) {
-    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
+    var style = opts.quoteStyle || defaultStyle;
+    var quoteChar = quotes[style];
     return quoteChar + s + quoteChar;
 }
 
@@ -272,13 +287,16 @@
     return $replace.call(String(s), /"/g, '&quot;');
 }
 
-function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
+function canTrustToString(obj) {
+    return !toStringTag || !(typeof obj === 'object' && (toStringTag in obj || typeof obj[toStringTag] !== 'undefined'));
+}
+function isArray(obj) { return toStr(obj) === '[object Array]' && canTrustToString(obj); }
+function isDate(obj) { return toStr(obj) === '[object Date]' && canTrustToString(obj); }
+function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && canTrustToString(obj); }
+function isError(obj) { return toStr(obj) === '[object Error]' && canTrustToString(obj); }
+function isString(obj) { return toStr(obj) === '[object String]' && canTrustToString(obj); }
+function isNumber(obj) { return toStr(obj) === '[object Number]' && canTrustToString(obj); }
+function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && canTrustToString(obj); }
 
 // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
 function isSymbol(obj) {
@@ -422,8 +440,10 @@
         var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
         return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
     }
+    var quoteRE = quoteREs[opts.quoteStyle || 'single'];
+    quoteRE.lastIndex = 0;
     // eslint-disable-next-line no-control-regex
-    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
+    var s = $replace.call($replace.call(str, quoteRE, '\\$1'), /[\x00-\x1f]/g, lowbyte);
     return wrapQuotes(s, 'single', opts);
 }
 
Index: node_modules/postgresql-client/typings/protocol/backend.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/backend.d.ts b/node_modules/postgresql-client/typings/protocol/backend.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/backend.d.ts	
+++ /dev/null	
@@ -1,9 +0,0 @@
-/// <reference types="node" />
-import { Protocol } from './protocol.js';
-declare type ParseCallback = (code: Protocol.BackendMessageCode, data?: any) => void;
-export declare class Backend {
-    private _buf?;
-    reset(): void;
-    parse(data: Buffer, callback: ParseCallback): void;
-}
-export {};
Index: node_modules/pg-cloudflare/src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-cloudflare/src/index.ts b/node_modules/pg-cloudflare/src/index.ts
--- a/node_modules/pg-cloudflare/src/index.ts	
+++ b/node_modules/pg-cloudflare/src/index.ts	
@@ -37,7 +37,8 @@
       if (connectListener) this.once('connect', connectListener)
 
       const options: SocketOptions = this.ssl ? { secureTransport: 'starttls' } : {}
-      const { connect } = await import('cloudflare:sockets')
+      const mod = await import('cloudflare:sockets')
+      const connect = mod.connect
       this._cfSocket = connect(`${host}:${port}`, options)
       this._cfWriter = this._cfSocket.writable.getWriter()
       this._addClosedHandler()
@@ -61,6 +62,7 @@
   }
 
   async _listen() {
+    // eslint-disable-next-line no-constant-condition
     while (true) {
       log('awaiting receive from CF socket')
       const { done, value } = await this._cfReader!.read()
Index: node_modules/semver/internal/parse-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/internal/parse-options.js b/node_modules/semver/internal/parse-options.js
--- a/node_modules/semver/internal/parse-options.js	
+++ b/node_modules/semver/internal/parse-options.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 // parse out just the options we care about
 const looseOption = Object.freeze({ loose: true })
 const emptyOpts = Object.freeze({ })
Index: node_modules/postgresql-client/cjs/data-types/box-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/box-type.js b/node_modules/postgresql-client/cjs/data-types/box-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/box-type.js	
+++ /dev/null	
@@ -1,52 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayBoxType = exports.BoxType = void 0;
-const constants_js_1 = require("../constants.js");
-const BOX_PATTERN1 = /^\( *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *\)$/;
-const BOX_PATTERN2 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\)$/;
-const BOX_PATTERN3 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-exports.BoxType = {
-    name: 'box',
-    oid: constants_js_1.DataTypeOIDs.box,
-    jsType: 'object',
-    arraySeparator: ';',
-    parseBinary(v) {
-        return {
-            x1: v.readDoubleBE(0),
-            y1: v.readDoubleBE(8),
-            x2: v.readDoubleBE(16),
-            y2: v.readDoubleBE(24),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x1);
-        buf.writeDoubleBE(v.y1);
-        buf.writeDoubleBE(v.x2);
-        buf.writeDoubleBE(v.y2);
-    },
-    parseText(v) {
-        const m = v.match(BOX_PATTERN1) || v.match(BOX_PATTERN2) || v.match(BOX_PATTERN3);
-        if (!m)
-            return undefined;
-        return {
-            x1: parseFloat(m[1]),
-            y1: parseFloat(m[2]),
-            x2: parseFloat(m[3]),
-            y2: parseFloat(m[4]),
-        };
-    },
-    isType(v) {
-        return (typeof v === 'object' &&
-            Object.keys(v).length === 4 &&
-            typeof v.x1 === 'number' &&
-            typeof v.y1 === 'number' &&
-            typeof v.x2 === 'number' &&
-            typeof v.y2 === 'number');
-    },
-};
-exports.ArrayBoxType = {
-    ...exports.BoxType,
-    name: '_box',
-    oid: constants_js_1.DataTypeOIDs._box,
-    elementsOID: constants_js_1.DataTypeOIDs.box,
-};
Index: node_modules/has-proto/.github/FUNDING.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/.github/FUNDING.yml b/node_modules/has-proto/.github/FUNDING.yml
deleted file mode 100644
--- a/node_modules/has-proto/.github/FUNDING.yml	
+++ /dev/null	
@@ -1,12 +0,0 @@
-# These are supported funding model platforms
-
-github: [ljharb]
-patreon: # Replace with a single Patreon username
-open_collective: # Replace with a single Open Collective username
-ko_fi: # Replace with a single Ko-fi username
-tidelift: npm/has-proto
-community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
-liberapay: # Replace with a single Liberapay username
-issuehunt: # Replace with a single IssueHunt username
-otechie: # Replace with a single Otechie username
-custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
Index: node_modules/jwa/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/jwa/index.js b/node_modules/jwa/index.js
--- a/node_modules/jwa/index.js	
+++ b/node_modules/jwa/index.js	
@@ -1,4 +1,3 @@
-var bufferEqual = require('buffer-equal-constant-time');
 var Buffer = require('safe-buffer').Buffer;
 var crypto = require('crypto');
 var formatEcdsa = require('ecdsa-sig-formatter');
@@ -135,10 +134,25 @@
   }
 }
 
+var bufferEqual;
+var timingSafeEqual = 'timingSafeEqual' in crypto ? function timingSafeEqual(a, b) {
+  if (a.byteLength !== b.byteLength) {
+    return false;
+  }
+
+  return crypto.timingSafeEqual(a, b)
+} : function timingSafeEqual(a, b) {
+  if (!bufferEqual) {
+    bufferEqual = require('buffer-equal-constant-time');
+  }
+
+  return bufferEqual(a, b)
+}
+
 function createHmacVerifier(bits) {
   return function verify(thing, signature, secret) {
     var computedSig = createHmacSigner(bits)(thing, secret);
-    return bufferEqual(Buffer.from(signature), Buffer.from(computedSig));
+    return timingSafeEqual(Buffer.from(signature), Buffer.from(computedSig));
   }
 }
 
Index: node_modules/postgresql-client/esm/protocol/frontend.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/frontend.js b/node_modules/postgresql-client/esm/protocol/frontend.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/frontend.js	
+++ /dev/null	
@@ -1,214 +0,0 @@
-import { DEFAULT_COLUMN_FORMAT } from '../constants.js';
-import { encodeBinaryArray } from '../util/encode-binaryarray.js';
-import { stringifyArrayLiteral } from '../util/stringify-arrayliteral.js';
-import { Protocol } from './protocol.js';
-import { SmartBuffer } from './smart-buffer.js';
-const DataFormat = Protocol.DataFormat;
-const StaticFlushBuffer = Buffer.from([Protocol.FrontendMessageCode.Flush, 0x00, 0x00, 0x00, 0x04]);
-const StaticTerminateBuffer = Buffer.from([Protocol.FrontendMessageCode.Terminate, 0x00, 0x00, 0x00, 0x04]);
-const StaticSyncBuffer = Buffer.from([Protocol.FrontendMessageCode.Sync, 0x00, 0x00, 0x00, 0x04]);
-export class Frontend {
-    constructor(options) {
-        this._io = new SmartBuffer(options?.buffer);
-    }
-    getSSLRequestMessage() {
-        return this._io
-            .start()
-            .writeUInt32BE(8) // Length of message contents in bytes, including self.
-            .writeUInt16BE(1234)
-            .writeUInt16BE(5679)
-            .flush();
-    }
-    getStartupMessage(args) {
-        const io = this._io
-            .start()
-            .writeInt32BE(0) // Preserve length
-            .writeInt16BE(Protocol.VERSION_MAJOR)
-            .writeInt16BE(Protocol.VERSION_MINOR);
-        for (const [k, v] of Object.entries(args)) {
-            if (k !== 'client_encoding')
-                io.writeCString(k, 'utf8').writeCString(v, 'utf8');
-        }
-        io.writeCString('client_encoding', 'utf8').writeCString('UTF8', 'utf8').writeUInt8(0);
-        return setLengthAndFlush(io, 0);
-    }
-    getPasswordMessage(password) {
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.PasswordMessage)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(password, 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getSASLMessage(sasl) {
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.PasswordMessage)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(sasl.mechanism, 'utf8')
-            .writeLString(sasl.clientFirstMessage);
-        return setLengthAndFlush(io, 1);
-    }
-    getSASLFinalMessage(session) {
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.PasswordMessage)
-            .writeInt32BE(0) // Preserve header
-            .writeString(session.clientFinalMessage);
-        return setLengthAndFlush(io, 1);
-    }
-    getParseMessage(args) {
-        if (args.statement && args.statement.length > 63)
-            throw new Error('Query name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.Parse)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(args.statement || '', 'utf8')
-            .writeCString(args.sql, 'utf8')
-            .writeUInt16BE(args.paramTypes ? args.paramTypes.length : 0);
-        if (args.paramTypes) {
-            for (const t of args.paramTypes) {
-                io.writeUInt32BE(t || 0);
-            }
-        }
-        return setLengthAndFlush(io, 1);
-    }
-    getBindMessage(args) {
-        if (args.portal && args.portal.length > 63)
-            throw new Error('Portal name length must be lower than 63');
-        if (args.statement && args.statement.length > 63)
-            throw new Error('Query name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.Bind)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(args.portal || '', 'utf8')
-            .writeCString(args.statement || '', 'utf8');
-        const { params, paramTypes, queryOptions } = args;
-        const columnFormat = queryOptions.columnFormat != null ? queryOptions.columnFormat : DEFAULT_COLUMN_FORMAT;
-        if (params && params.length) {
-            io.writeInt16BE(params.length);
-            const formatOffset = io.offset;
-            for (let i = 0; i < params.length; i++) {
-                io.writeInt16BE(0); // Preserve
-            }
-            // Write parameter values
-            io.writeUInt16BE(params.length);
-            for (let i = 0; i < params?.length; i++) {
-                let v = params[i];
-                if (v == null) {
-                    io.writeInt32BE(-1);
-                    continue;
-                }
-                const dataTypeOid = paramTypes ? paramTypes[i] : undefined;
-                const dt = dataTypeOid ? args.typeMap.get(dataTypeOid) : undefined;
-                if (dt) {
-                    if (typeof dt.encodeBinary === 'function') {
-                        // Set param format to binary
-                        io.buffer.writeInt16BE(Protocol.DataFormat.binary, formatOffset + i * 2);
-                        // Preserve data length
-                        io.writeInt32BE(0);
-                        const dataOffset = io.offset;
-                        if (dt.elementsOID) {
-                            // If data type is array
-                            v = Array.isArray(v) ? v : [v];
-                            encodeBinaryArray(io, v, dt.elementsOID, queryOptions, dt.encodeBinary, dt.encodeCalculateDim);
-                        }
-                        else {
-                            dt.encodeBinary(io, v, queryOptions);
-                        }
-                        io.buffer.writeInt32BE(io.length - dataOffset, dataOffset - 4); // Update length
-                    }
-                    else if (typeof dt.encodeText === 'function') {
-                        v = dt.elementsOID ? stringifyArrayLiteral(v, queryOptions, dt.encodeText) : dt.encodeText(v, queryOptions);
-                        io.writeLString(v, 'utf8');
-                    }
-                }
-                else if (Buffer.isBuffer(v)) {
-                    // Set param format to binary
-                    io.buffer.writeInt16BE(Protocol.DataFormat.binary, formatOffset + i * 2);
-                    // Preserve data length
-                    io.writeInt32BE(0);
-                    const dataOffset = io.offset;
-                    io.writeBuffer(v);
-                    io.buffer.writeInt32BE(io.length - dataOffset, dataOffset - 4); // Update length
-                }
-                else {
-                    io.writeLString('' + v, 'utf8');
-                }
-            }
-        }
-        else {
-            io.writeUInt16BE(0);
-            io.writeUInt16BE(0);
-        }
-        if (Array.isArray(columnFormat)) {
-            io.writeUInt16BE(columnFormat.length);
-            for (let i = 0; i < columnFormat.length; i++) {
-                io.writeUInt16BE(columnFormat[i]);
-            }
-        }
-        else if (columnFormat === DataFormat.binary) {
-            io.writeUInt16BE(1);
-            io.writeUInt16BE(DataFormat.binary);
-        }
-        else
-            io.writeUInt16BE(0);
-        return setLengthAndFlush(io, 1);
-    }
-    getDescribeMessage(args) {
-        if (args.name && args.name.length > 63)
-            throw new Error(args.type === 'P' ? 'Portal' : 'Statement' + 'name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.Describe)
-            .writeInt32BE(0) // Preserve header
-            .writeUInt8(args.type.charCodeAt(0))
-            .writeCString(args.name || '', 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getExecuteMessage(args) {
-        if (args.fetchCount && (args.fetchCount < 0 || args.fetchCount > 4294967295))
-            throw new Error('fetchCount can be between 0 and 4294967295');
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.Execute)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(args.portal || '', 'utf8')
-            .writeUInt32BE(args.fetchCount || 0);
-        return setLengthAndFlush(io, 1);
-    }
-    getCloseMessage(args) {
-        if (args.name && args.name.length > 63)
-            throw new Error(args.type === 'P' ? 'Portal' : 'Statement' + 'name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.Close)
-            .writeInt32BE(0) // Preserve header
-            .writeUInt8(args.type.charCodeAt(0))
-            .writeCString(args.name || '', 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getQueryMessage(sql) {
-        const io = this._io
-            .start()
-            .writeInt8(Protocol.FrontendMessageCode.Query)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(sql || '', 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getFlushMessage() {
-        return StaticFlushBuffer;
-    }
-    getTerminateMessage() {
-        return StaticTerminateBuffer;
-    }
-    getSyncMessage() {
-        return StaticSyncBuffer;
-    }
-}
-function setLengthAndFlush(io, lengthOffset) {
-    io.buffer.writeUInt32BE(io.length - lengthOffset, lengthOffset);
-    return io.flush();
-}
Index: node_modules/define-data-property/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/test/index.js b/node_modules/define-data-property/test/index.js
deleted file mode 100644
--- a/node_modules/define-data-property/test/index.js	
+++ /dev/null	
@@ -1,392 +0,0 @@
-'use strict';
-
-var test = require('tape');
-var v = require('es-value-fixtures');
-var forEach = require('for-each');
-var inspect = require('object-inspect');
-var hasOwn = require('hasown');
-var hasPropertyDescriptors = require('has-property-descriptors')();
-var getOwnPropertyDescriptors = require('object.getownpropertydescriptors');
-var ownKeys = require('reflect.ownkeys');
-
-var defineDataProperty = require('../');
-
-test('defineDataProperty', function (t) {
-	t.test('argument validation', function (st) {
-		forEach(v.primitives, function (nonObject) {
-			st['throws'](
-				// @ts-expect-error
-				function () { defineDataProperty(nonObject, 'key', 'value'); },
-				TypeError,
-				'throws on non-object input: ' + inspect(nonObject)
-			);
-		});
-
-		forEach(v.nonPropertyKeys, function (nonPropertyKey) {
-			st['throws'](
-				// @ts-expect-error
-				function () { defineDataProperty({}, nonPropertyKey, 'value'); },
-				TypeError,
-				'throws on non-PropertyKey input: ' + inspect(nonPropertyKey)
-			);
-		});
-
-		forEach(v.nonBooleans, function (nonBoolean) {
-			if (nonBoolean !== null) {
-				st['throws'](
-					// @ts-expect-error
-					function () { defineDataProperty({}, 'key', 'value', nonBoolean); },
-					TypeError,
-					'throws on non-boolean nonEnumerable: ' + inspect(nonBoolean)
-				);
-
-				st['throws'](
-					// @ts-expect-error
-					function () { defineDataProperty({}, 'key', 'value', false, nonBoolean); },
-					TypeError,
-					'throws on non-boolean nonWritable: ' + inspect(nonBoolean)
-				);
-
-				st['throws'](
-					// @ts-expect-error
-					function () { defineDataProperty({}, 'key', 'value', false, false, nonBoolean); },
-					TypeError,
-					'throws on non-boolean nonConfigurable: ' + inspect(nonBoolean)
-				);
-			}
-		});
-
-		st.end();
-	});
-
-	t.test('normal data property', function (st) {
-		/** @type {Record<PropertyKey, string>} */
-		var obj = { existing: 'existing property' };
-		st.ok(hasOwn(obj, 'existing'), 'has initial own property');
-		st.equal(obj.existing, 'existing property', 'has expected initial value');
-
-		var res = defineDataProperty(obj, 'added', 'added property');
-		st.equal(res, void undefined, 'returns `undefined`');
-		st.ok(hasOwn(obj, 'added'), 'has expected own property');
-		st.equal(obj.added, 'added property', 'has expected value');
-
-		defineDataProperty(obj, 'existing', 'new value');
-		st.ok(hasOwn(obj, 'existing'), 'still has expected own property');
-		st.equal(obj.existing, 'new value', 'has new expected value');
-
-		defineDataProperty(obj, 'explicit1', 'new value', false);
-		st.ok(hasOwn(obj, 'explicit1'), 'has expected own property (explicit enumerable)');
-		st.equal(obj.explicit1, 'new value', 'has new expected value (explicit enumerable)');
-
-		defineDataProperty(obj, 'explicit2', 'new value', false, false);
-		st.ok(hasOwn(obj, 'explicit2'), 'has expected own property (explicit writable)');
-		st.equal(obj.explicit2, 'new value', 'has new expected value (explicit writable)');
-
-		defineDataProperty(obj, 'explicit3', 'new value', false, false, false);
-		st.ok(hasOwn(obj, 'explicit3'), 'has expected own property (explicit configurable)');
-		st.equal(obj.explicit3, 'new value', 'has new expected value (explicit configurable)');
-
-		st.end();
-	});
-
-	t.test('loose mode', { skip: !hasPropertyDescriptors }, function (st) {
-		var obj = { existing: 'existing property' };
-
-		defineDataProperty(obj, 'added', 'added value 1', true, null, null, true);
-		st.deepEqual(
-			getOwnPropertyDescriptors(obj),
-			{
-				existing: {
-					configurable: true,
-					enumerable: true,
-					value: 'existing property',
-					writable: true
-				},
-				added: {
-					configurable: true,
-					enumerable: !hasPropertyDescriptors,
-					value: 'added value 1',
-					writable: true
-				}
-			},
-			'in loose mode, obj still adds property 1'
-		);
-
-		defineDataProperty(obj, 'added', 'added value 2', false, true, null, true);
-		st.deepEqual(
-			getOwnPropertyDescriptors(obj),
-			{
-				existing: {
-					configurable: true,
-					enumerable: true,
-					value: 'existing property',
-					writable: true
-				},
-				added: {
-					configurable: true,
-					enumerable: true,
-					value: 'added value 2',
-					writable: !hasPropertyDescriptors
-				}
-			},
-			'in loose mode, obj still adds property 2'
-		);
-
-		defineDataProperty(obj, 'added', 'added value 3', false, false, true, true);
-		st.deepEqual(
-			getOwnPropertyDescriptors(obj),
-			{
-				existing: {
-					configurable: true,
-					enumerable: true,
-					value: 'existing property',
-					writable: true
-				},
-				added: {
-					configurable: !hasPropertyDescriptors,
-					enumerable: true,
-					value: 'added value 3',
-					writable: true
-				}
-			},
-			'in loose mode, obj still adds property 3'
-		);
-
-		st.end();
-	});
-
-	t.test('non-normal data property, ES3', { skip: hasPropertyDescriptors }, function (st) {
-		/** @type {Record<PropertyKey, string>} */
-		var obj = { existing: 'existing property' };
-
-		st['throws'](
-			function () { defineDataProperty(obj, 'added', 'added value', true); },
-			SyntaxError,
-			'nonEnumerable throws a Syntax Error'
-		);
-
-		st['throws'](
-			function () { defineDataProperty(obj, 'added', 'added value', false, true); },
-			SyntaxError,
-			'nonWritable throws a Syntax Error'
-		);
-
-		st['throws'](
-			function () { defineDataProperty(obj, 'added', 'added value', false, false, true); },
-			SyntaxError,
-			'nonWritable throws a Syntax Error'
-		);
-
-		st.deepEqual(
-			ownKeys(obj),
-			['existing'],
-			'obj still has expected keys'
-		);
-		st.equal(obj.existing, 'existing property', 'obj still has expected values');
-
-		st.end();
-	});
-
-	t.test('new non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
-		/** @type {Record<PropertyKey, string>} */
-		var obj = { existing: 'existing property' };
-
-		defineDataProperty(obj, 'nonEnum', null, true);
-		defineDataProperty(obj, 'nonWrit', null, false, true);
-		defineDataProperty(obj, 'nonConf', null, false, false, true);
-
-		st.deepEqual(
-			getOwnPropertyDescriptors(obj),
-			{
-				existing: {
-					configurable: true,
-					enumerable: true,
-					value: 'existing property',
-					writable: true
-				},
-				nonEnum: {
-					configurable: true,
-					enumerable: false,
-					value: null,
-					writable: true
-				},
-				nonWrit: {
-					configurable: true,
-					enumerable: true,
-					value: null,
-					writable: false
-				},
-				nonConf: {
-					configurable: false,
-					enumerable: true,
-					value: null,
-					writable: true
-				}
-			},
-			'obj has expected property descriptors'
-		);
-
-		st.end();
-	});
-
-	t.test('existing non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
-		// test case changing an existing non-normal property
-
-		/** @type {Record<string, null | string>} */
-		var obj = {};
-		Object.defineProperty(obj, 'nonEnum', { configurable: true, enumerable: false, value: null, writable: true });
-		Object.defineProperty(obj, 'nonWrit', { configurable: true, enumerable: true, value: null, writable: false });
-		Object.defineProperty(obj, 'nonConf', { configurable: false, enumerable: true, value: null, writable: true });
-
-		st.deepEqual(
-			getOwnPropertyDescriptors(obj),
-			{
-				nonEnum: {
-					configurable: true,
-					enumerable: false,
-					value: null,
-					writable: true
-				},
-				nonWrit: {
-					configurable: true,
-					enumerable: true,
-					value: null,
-					writable: false
-				},
-				nonConf: {
-					configurable: false,
-					enumerable: true,
-					value: null,
-					writable: true
-				}
-			},
-			'obj initially has expected property descriptors'
-		);
-
-		defineDataProperty(obj, 'nonEnum', 'new value', false);
-		defineDataProperty(obj, 'nonWrit', 'new value', false, false);
-		st['throws'](
-			function () { defineDataProperty(obj, 'nonConf', 'new value', false, false, false); },
-			TypeError,
-			'can not alter a nonconfigurable property'
-		);
-
-		st.deepEqual(
-			getOwnPropertyDescriptors(obj),
-			{
-				nonEnum: {
-					configurable: true,
-					enumerable: true,
-					value: 'new value',
-					writable: true
-				},
-				nonWrit: {
-					configurable: true,
-					enumerable: true,
-					value: 'new value',
-					writable: true
-				},
-				nonConf: {
-					configurable: false,
-					enumerable: true,
-					value: null,
-					writable: true
-				}
-			},
-			'obj ends up with expected property descriptors'
-		);
-
-		st.end();
-	});
-
-	t.test('frozen object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
-		var frozen = Object.freeze({ existing: true });
-
-		st['throws'](
-			function () { defineDataProperty(frozen, 'existing', 'new value'); },
-			TypeError,
-			'frozen object can not modify an existing property'
-		);
-
-		st['throws'](
-			function () { defineDataProperty(frozen, 'new', 'new property'); },
-			TypeError,
-			'frozen object can not add a new property'
-		);
-
-		st.end();
-	});
-
-	t.test('sealed object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
-		var sealed = Object.seal({ existing: true });
-		st.deepEqual(
-			Object.getOwnPropertyDescriptor(sealed, 'existing'),
-			{
-				configurable: false,
-				enumerable: true,
-				value: true,
-				writable: true
-			},
-			'existing value on sealed object has expected descriptor'
-		);
-
-		defineDataProperty(sealed, 'existing', 'new value');
-
-		st.deepEqual(
-			Object.getOwnPropertyDescriptor(sealed, 'existing'),
-			{
-				configurable: false,
-				enumerable: true,
-				value: 'new value',
-				writable: true
-			},
-			'existing value on sealed object has changed descriptor'
-		);
-
-		st['throws'](
-			function () { defineDataProperty(sealed, 'new', 'new property'); },
-			TypeError,
-			'sealed object can not add a new property'
-		);
-
-		st.end();
-	});
-
-	t.test('nonextensible object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
-		var nonExt = Object.preventExtensions({ existing: true });
-
-		st.deepEqual(
-			Object.getOwnPropertyDescriptor(nonExt, 'existing'),
-			{
-				configurable: true,
-				enumerable: true,
-				value: true,
-				writable: true
-			},
-			'existing value on non-extensible object has expected descriptor'
-		);
-
-		defineDataProperty(nonExt, 'existing', 'new value', true);
-
-		st.deepEqual(
-			Object.getOwnPropertyDescriptor(nonExt, 'existing'),
-			{
-				configurable: true,
-				enumerable: false,
-				value: 'new value',
-				writable: true
-			},
-			'existing value on non-extensible object has changed descriptor'
-		);
-
-		st['throws'](
-			function () { defineDataProperty(nonExt, 'new', 'new property'); },
-			TypeError,
-			'non-extensible object can not add a new property'
-		);
-
-		st.end();
-	});
-
-	t.end();
-});
Index: node_modules/has-symbols/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-symbols/index.js b/node_modules/has-symbols/index.js
--- a/node_modules/has-symbols/index.js	
+++ b/node_modules/has-symbols/index.js	
@@ -3,6 +3,7 @@
 var origSymbol = typeof Symbol !== 'undefined' && Symbol;
 var hasSymbolSham = require('./shams');
 
+/** @type {import('.')} */
 module.exports = function hasNativeSymbols() {
 	if (typeof origSymbol !== 'function') { return false; }
 	if (typeof Symbol !== 'function') { return false; }
Index: node_modules/postgresql-client/node_modules/postgres-bytea/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/package.json b/node_modules/postgresql-client/node_modules/postgres-bytea/package.json
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/package.json	
+++ /dev/null	
@@ -1,38 +0,0 @@
-{
-  "name": "postgres-bytea",
-  "main": "index.js",
-  "version": "3.0.0",
-  "description": "Postgres bytea parser",
-  "license": "MIT",
-  "repository": "bendrucker/postgres-bytea",
-  "author": {
-    "name": "Ben Drucker",
-    "email": "bvdrucker@gmail.com",
-    "url": "bendrucker.me"
-  },
-  "engines": {
-    "node": ">= 6"
-  },
-  "scripts": {
-    "test": "standard && tape *.js"
-  },
-  "keywords": [
-    "bytea",
-    "postgres",
-    "binary",
-    "parser"
-  ],
-  "dependencies": {
-    "obuf": "~1.1.2"
-  },
-  "devDependencies": {
-    "concat-stream": "2.0.0",
-    "standard": "^14.0.0",
-    "stream-to-promise": "^3.0.0",
-    "tape": "^5.0.0",
-    "tape-promise": "4.0.0"
-  },
-  "files": [
-    "*.js"
-  ]
-}
Index: node_modules/postgresql-client/typings/util/encode-binaryarray.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/encode-binaryarray.d.ts b/node_modules/postgresql-client/typings/util/encode-binaryarray.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/encode-binaryarray.d.ts	
+++ /dev/null	
@@ -1,5 +0,0 @@
-import type { DataMappingOptions } from '../interfaces/data-mapping-options.js';
-import type { SmartBuffer } from '../protocol/smart-buffer.js';
-import type { EncodeBinaryFunction, OID } from '../types.js';
-import { EncodeCalculateDimFunction } from '../types.js';
-export declare function encodeBinaryArray(io: SmartBuffer, value: any[], itemOid: OID, options: DataMappingOptions, encode: EncodeBinaryFunction, encodeCalculateDimFn?: EncodeCalculateDimFunction): void;
Index: node_modules/encodeurl/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/encodeurl/index.js b/node_modules/encodeurl/index.js
--- a/node_modules/encodeurl/index.js	
+++ b/node_modules/encodeurl/index.js	
@@ -19,7 +19,7 @@
  * @private
  */
 
-var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g
+var ENCODE_CHARS_REGEXP = /(?:[^\x21\x23-\x3B\x3D\x3F-\x5F\x61-\x7A\x7C\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g
 
 /**
  * RegExp to match unmatched surrogate pair.
Index: node_modules/express/History.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/express/History.md b/node_modules/express/History.md
--- a/node_modules/express/History.md	
+++ b/node_modules/express/History.md	
@@ -1,3 +1,44 @@
+4.21.2 / 2024-11-06
+==========
+
+  * deps: path-to-regexp@0.1.12
+    - Fix backtracking protection
+  * deps: path-to-regexp@0.1.11
+    - Throws an error on invalid path values
+
+4.21.1 / 2024-10-08
+==========
+
+  * Backported a fix for [CVE-2024-47764](https://nvd.nist.gov/vuln/detail/CVE-2024-47764)
+
+
+4.21.0 / 2024-09-11
+==========
+
+  * Deprecate `res.location("back")` and `res.redirect("back")` magic string
+  * deps: serve-static@1.16.2
+    * includes send@0.19.0
+  * deps: finalhandler@1.3.1
+  * deps: qs@6.13.0
+
+4.20.0 / 2024-09-10
+==========
+  * deps: serve-static@0.16.0
+    * Remove link renderization in html while redirecting
+  * deps: send@0.19.0
+    * Remove link renderization in html while redirecting
+  * deps: body-parser@0.6.0
+    * add `depth` option to customize the depth level in the parser
+    * IMPORTANT: The default `depth` level for parsing URL-encoded data is now `32` (previously was `Infinity`)
+  * Remove link renderization in html while using `res.redirect`
+  * deps: path-to-regexp@0.1.10
+    - Adds support for named matching groups in the routes using a regex
+    - Adds backtracking protection to parameters without regexes defined
+  * deps: encodeurl@~2.0.0
+    - Removes encoding of `\`, `|`, and `^` to align better with URL spec
+  * Deprecate passing `options.maxAge` and `options.expires` to `res.clearCookie`
+    - Will be ignored in v5, clearCookie will set a cookie with an expires in the past to instruct clients to delete the cookie
+
 4.19.2 / 2024-03-25
 ==========
 
Index: node_modules/has-property-descriptors/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-property-descriptors/test/index.js b/node_modules/has-property-descriptors/test/index.js
deleted file mode 100644
--- a/node_modules/has-property-descriptors/test/index.js	
+++ /dev/null	
@@ -1,57 +0,0 @@
-'use strict';
-
-var test = require('tape');
-
-var hasPropertyDescriptors = require('../');
-
-var sentinel = {};
-
-test('hasPropertyDescriptors', function (t) {
-	t.equal(typeof hasPropertyDescriptors, 'function', 'is a function');
-	t.equal(typeof hasPropertyDescriptors.hasArrayLengthDefineBug, 'function', '`hasArrayLengthDefineBug` property is a function');
-
-	var yes = hasPropertyDescriptors();
-	t.test('property descriptors', { skip: !yes }, function (st) {
-		var o = { a: sentinel };
-
-		st.deepEqual(
-			Object.getOwnPropertyDescriptor(o, 'a'),
-			{
-				configurable: true,
-				enumerable: true,
-				value: sentinel,
-				writable: true
-			},
-			'has expected property descriptor'
-		);
-
-		Object.defineProperty(o, 'a', { enumerable: false, writable: false });
-
-		st.deepEqual(
-			Object.getOwnPropertyDescriptor(o, 'a'),
-			{
-				configurable: true,
-				enumerable: false,
-				value: sentinel,
-				writable: false
-			},
-			'has expected property descriptor after [[Define]]'
-		);
-
-		st.end();
-	});
-
-	var arrayBug = hasPropertyDescriptors.hasArrayLengthDefineBug();
-	t.test('defining array lengths', { skip: !yes || arrayBug }, function (st) {
-		var arr = [1, , 3]; // eslint-disable-line no-sparse-arrays
-		st.equal(arr.length, 3, 'array starts with length 3');
-
-		Object.defineProperty(arr, 'length', { value: 5 });
-
-		st.equal(arr.length, 5, 'array ends with length 5');
-
-		st.end();
-	});
-
-	t.end();
-});
Index: node_modules/postgresql-client/typings/interfaces/command-result.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/command-result.d.ts b/node_modules/postgresql-client/typings/interfaces/command-result.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/command-result.d.ts	
+++ /dev/null	
@@ -1,28 +0,0 @@
-import { Row } from '../types.js';
-import type { FieldInfo } from './field-info.js';
-export interface CommandResult {
-    /**
-     * Name of the command (INSERT, SELECT, UPDATE, etc.)
-     */
-    command?: string;
-    /**
-     * Contains information about fields in column order
-     */
-    fields?: FieldInfo[];
-    /**
-     * Contains array of row data
-     */
-    rows?: Row[];
-    /**
-     * Contains row type
-     */
-    rowType?: 'array' | 'object';
-    /**
-     * Time elapsed to execute command
-     */
-    executeTime?: number;
-    /**
-     * How many rows affected
-     */
-    rowsAffected?: number;
-}
Index: node_modules/postgresql-client/esm/util/parse-time.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/parse-time.js b/node_modules/postgresql-client/esm/util/parse-time.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/parse-time.js	
+++ /dev/null	
@@ -1,25 +0,0 @@
-import { fastParseInt } from './fast-parseint.js';
-// eslint-disable-next-line
-// noinspection RegExpUnnecessaryNonCapturingGroup
-export const STRICT_TIME_PATTERN = /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(?:\.(\d+))?(?:(Z)|(?:([+-])([01]?[0-9]|2[0-3]):?([0-5][0-9])?))?$/;
-// noinspection RegExpUnnecessaryNonCapturingGroup
-export const TIME_PATTERN = /^([01][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?(?:\.(\d+))?(?:(Z)|(?:([+-])([01]?[0-9]|2[0-3]):?([0-5][0-9])?))?$/;
-export function parseTime(str, parseTimeZone, utc) {
-    const m = str.match(TIME_PATTERN);
-    if (!m)
-        return new Date('invalid');
-    const args = [1970, 0, 1, 0, 0, 0, 0];
-    for (let i = 1; i < 4; i++) {
-        const s = m[i];
-        args[i + 2] = fastParseInt(s) || 0;
-    }
-    if (parseTimeZone && m[6]) {
-        const r = m[9] === '-' ? -1 : 1;
-        args[3] -= (fastParseInt(m[7]) || 0) * r;
-        args[4] -= (fastParseInt(m[8]) || 0) * r;
-        return new Date(Date.UTC(...args));
-    }
-    if (m[5] || utc)
-        return new Date(Date.UTC(...args));
-    return new Date(...args);
-}
Index: node_modules/pg-cloudflare/dist/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-cloudflare/dist/index.js b/node_modules/pg-cloudflare/dist/index.js
--- a/node_modules/pg-cloudflare/dist/index.js	
+++ b/node_modules/pg-cloudflare/dist/index.js	
@@ -1,8 +1,11 @@
-import { EventEmitter } from 'events';
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.CloudflareSocket = void 0;
+const events_1 = require("events");
 /**
  * Wrapper around the Cloudflare built-in socket that can be used by the `Connection`.
  */
-export class CloudflareSocket extends EventEmitter {
+class CloudflareSocket extends events_1.EventEmitter {
     constructor(ssl) {
         super();
         this.ssl = ssl;
@@ -32,7 +35,8 @@
             if (connectListener)
                 this.once('connect', connectListener);
             const options = this.ssl ? { secureTransport: 'starttls' } : {};
-            const { connect } = await import('cloudflare:sockets');
+            const mod = await import('cloudflare:sockets');
+            const connect = mod.connect;
             this._cfSocket = connect(`${host}:${port}`, options);
             this._cfWriter = this._cfSocket.writable.getWriter();
             this._addClosedHandler();
@@ -54,6 +58,7 @@
         }
     }
     async _listen() {
+        // eslint-disable-next-line no-constant-condition
         while (true) {
             log('awaiting receive from CF socket');
             const { done, value } = await this._cfReader.read();
@@ -129,6 +134,7 @@
         }).catch((e) => this.emit('error', e));
     }
 }
+exports.CloudflareSocket = CloudflareSocket;
 const debug = false;
 function dump(data) {
     if (data instanceof Uint8Array || data instanceof ArrayBuffer) {
Index: node_modules/define-data-property/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/.eslintrc b/node_modules/define-data-property/.eslintrc
deleted file mode 100644
--- a/node_modules/define-data-property/.eslintrc	
+++ /dev/null	
@@ -1,24 +0,0 @@
-{
-	"root": true,
-
-	"extends": "@ljharb",
-
-	"rules": {
-		"complexity": 0,
-		"id-length": 0,
-		"new-cap": ["error", {
-			"capIsNewExceptions": [
-				"GetIntrinsic",
-			],
-		}],
-	},
-
-	"overrides": [
-		{
-			"files": "test/**",
-			"rules": {
-				"max-lines-per-function": "off",
-			},
-		},
-	],
-}
Index: node_modules/dotenv/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/CHANGELOG.md b/node_modules/dotenv/CHANGELOG.md
--- a/node_modules/dotenv/CHANGELOG.md	
+++ b/node_modules/dotenv/CHANGELOG.md	
@@ -2,13 +2,58 @@
 
 All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.
 
-## [Unreleased](https://github.com/motdotla/dotenv/compare/v16.4.5...master)
+## [Unreleased](https://github.com/motdotla/dotenv/compare/v16.6.1...master)
+
+## [16.6.1](https://github.com/motdotla/dotenv/compare/v16.6.0...v16.6.1) (2025-06-27)
+
+### Changed
+
+- Default `quiet` to true – hiding the runtime log message ([#874](https://github.com/motdotla/dotenv/pull/874))
+- NOTICE: 17.0.0 will be released with quiet defaulting to false. Use `config({ quiet: true })` to suppress.
+- And check out the new [dotenvx](https://github.com/dotenvx/dotenvx). As coding workflows evolve and agents increasingly handle secrets, encrypted .env files offer a much safer way to deploy both agents and code together with secure secrets. Simply switch `require('dotenv').config()` for `require('@dotenvx/dotenvx').config()`.
+
+## [16.6.0](https://github.com/motdotla/dotenv/compare/v16.5.0...v16.6.0) (2025-06-26)
+
+### Added
+
+- Default log helpful message `[dotenv@16.6.0] injecting env (1) from .env` ([#870](https://github.com/motdotla/dotenv/pull/870))
+- Use `{ quiet: true }` to suppress
+- Aligns dotenv more closely with [dotenvx](https://github.com/dotenvx/dotenvx).
+
+## [16.5.0](https://github.com/motdotla/dotenv/compare/v16.4.7...v16.5.0) (2025-04-07)
+
+### Added
+
+- 🎉 Added new sponsor [Graphite](https://graphite.dev/?utm_source=github&utm_medium=repo&utm_campaign=dotenv) - *the AI developer productivity platform helping teams on GitHub ship higher quality software, faster*.
+
+> [!TIP]
+> **[Become a sponsor](https://github.com/sponsors/motdotla)**
+> 
+> The dotenvx README is viewed thousands of times DAILY on GitHub and NPM.
+> Sponsoring dotenv is a great way to get in front of developers and give back to the developer community at the same time.
+
+### Changed
+
+- Remove `_log` method. Use `_debug` [#862](https://github.com/motdotla/dotenv/pull/862)
+
+## [16.4.7](https://github.com/motdotla/dotenv/compare/v16.4.6...v16.4.7) (2024-12-03)
+
+### Changed
+
+- Ignore `.tap` folder when publishing. (oops, sorry about that everyone. - @motdotla) [#848](https://github.com/motdotla/dotenv/pull/848)
+
+## [16.4.6](https://github.com/motdotla/dotenv/compare/v16.4.5...v16.4.6) (2024-12-02)
+
+### Changed
+
+- Clean up stale dev dependencies [#847](https://github.com/motdotla/dotenv/pull/847)
+- Various README updates clarifying usage and alternative solutions using [dotenvx](https://github.com/dotenvx/dotenvx)
 
 ## [16.4.5](https://github.com/motdotla/dotenv/compare/v16.4.4...v16.4.5) (2024-02-19)
 
 ### Changed
 
-- 🐞 fix recent regression when using `path` option. return to historical behavior: do not attempt to auto find `.env` if `path` set. (regression was introduced in `16.4.3`) [#814](https://github.com/motdotla/dotenv/pull/814)
+- 🐞 Fix recent regression when using `path` option. return to historical behavior: do not attempt to auto find `.env` if `path` set. (regression was introduced in `16.4.3`) [#814](https://github.com/motdotla/dotenv/pull/814)
 
 ## [16.4.4](https://github.com/motdotla/dotenv/compare/v16.4.3...v16.4.4) (2024-02-13)
 
Index: node_modules/.bin/semver
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/.bin/semver b/node_modules/.bin/semver
--- a/node_modules/.bin/semver	
+++ b/node_modules/.bin/semver	
@@ -1,1 +1,16 @@
-../semver/bin/semver.js
\ No newline at end of file
+#!/bin/sh
+basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
+
+case `uname` in
+    *CYGWIN*|*MINGW*|*MSYS*)
+        if command -v cygpath > /dev/null 2>&1; then
+            basedir=`cygpath -w "$basedir"`
+        fi
+    ;;
+esac
+
+if [ -x "$basedir/node" ]; then
+  exec "$basedir/node"  "$basedir/../semver/bin/semver.js" "$@"
+else 
+  exec node  "$basedir/../semver/bin/semver.js" "$@"
+fi
Index: node_modules/call-bind/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/test/index.js b/node_modules/call-bind/test/index.js
deleted file mode 100644
--- a/node_modules/call-bind/test/index.js	
+++ /dev/null	
@@ -1,80 +0,0 @@
-'use strict';
-
-var callBind = require('../');
-var bind = require('function-bind');
-var gOPD = require('gopd');
-var hasStrictMode = require('has-strict-mode')();
-var forEach = require('for-each');
-var inspect = require('object-inspect');
-var v = require('es-value-fixtures');
-
-var test = require('tape');
-
-/*
- * older engines have length nonconfigurable
- * in io.js v3, it is configurable except on bound functions, hence the .bind()
- */
-var functionsHaveConfigurableLengths = !!(
-	gOPD
-	&& Object.getOwnPropertyDescriptor
-	&& Object.getOwnPropertyDescriptor(bind.call(function () {}), 'length').configurable
-);
-
-test('callBind', function (t) {
-	forEach(v.nonFunctions, function (nonFunction) {
-		t['throws'](
-			function () { callBind(nonFunction); },
-			TypeError,
-			inspect(nonFunction) + ' is not a function'
-		);
-	});
-
-	var sentinel = { sentinel: true };
-	var func = function (a, b) {
-		// eslint-disable-next-line no-invalid-this
-		return [!hasStrictMode && this === global ? undefined : this, a, b];
-	};
-	t.equal(func.length, 2, 'original function length is 2');
-	t.deepEqual(func(), [undefined, undefined, undefined], 'unbound func with too few args');
-	t.deepEqual(func(1, 2), [undefined, 1, 2], 'unbound func with right args');
-	t.deepEqual(func(1, 2, 3), [undefined, 1, 2], 'unbound func with too many args');
-
-	var bound = callBind(func);
-	t.equal(bound.length, func.length + 1, 'function length is preserved', { skip: !functionsHaveConfigurableLengths });
-	t.deepEqual(bound(), [undefined, undefined, undefined], 'bound func with too few args');
-	t.deepEqual(bound(1, 2), [hasStrictMode ? 1 : Object(1), 2, undefined], 'bound func with right args');
-	t.deepEqual(bound(1, 2, 3), [hasStrictMode ? 1 : Object(1), 2, 3], 'bound func with too many args');
-
-	var boundR = callBind(func, sentinel);
-	t.equal(boundR.length, func.length, 'function length is preserved', { skip: !functionsHaveConfigurableLengths });
-	t.deepEqual(boundR(), [sentinel, undefined, undefined], 'bound func with receiver, with too few args');
-	t.deepEqual(boundR(1, 2), [sentinel, 1, 2], 'bound func with receiver, with right args');
-	t.deepEqual(boundR(1, 2, 3), [sentinel, 1, 2], 'bound func with receiver, with too many args');
-
-	var boundArg = callBind(func, sentinel, 1);
-	t.equal(boundArg.length, func.length - 1, 'function length is preserved', { skip: !functionsHaveConfigurableLengths });
-	t.deepEqual(boundArg(), [sentinel, 1, undefined], 'bound func with receiver and arg, with too few args');
-	t.deepEqual(boundArg(2), [sentinel, 1, 2], 'bound func with receiver and arg, with right arg');
-	t.deepEqual(boundArg(2, 3), [sentinel, 1, 2], 'bound func with receiver and arg, with too many args');
-
-	t.test('callBind.apply', function (st) {
-		var aBound = callBind.apply(func);
-		st.deepEqual(aBound(sentinel), [sentinel, undefined, undefined], 'apply-bound func with no args');
-		st.deepEqual(aBound(sentinel, [1], 4), [sentinel, 1, undefined], 'apply-bound func with too few args');
-		st.deepEqual(aBound(sentinel, [1, 2], 4), [sentinel, 1, 2], 'apply-bound func with right args');
-
-		var aBoundArg = callBind.apply(func);
-		st.deepEqual(aBoundArg(sentinel, [1, 2, 3], 4), [sentinel, 1, 2], 'apply-bound func with too many args');
-		st.deepEqual(aBoundArg(sentinel, [1, 2], 4), [sentinel, 1, 2], 'apply-bound func with right args');
-		st.deepEqual(aBoundArg(sentinel, [1], 4), [sentinel, 1, undefined], 'apply-bound func with too few args');
-
-		var aBoundR = callBind.apply(func, sentinel);
-		st.deepEqual(aBoundR([1, 2, 3], 4), [sentinel, 1, 2], 'apply-bound func with receiver and too many args');
-		st.deepEqual(aBoundR([1, 2], 4), [sentinel, 1, 2], 'apply-bound func with receiver and right args');
-		st.deepEqual(aBoundR([1], 4), [sentinel, 1, undefined], 'apply-bound func with receiver and too few args');
-
-		st.end();
-	});
-
-	t.end();
-});
Index: node_modules/nopt/examples/my-program.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nopt/examples/my-program.js b/node_modules/nopt/examples/my-program.js
deleted file mode 100644
--- a/node_modules/nopt/examples/my-program.js	
+++ /dev/null	
@@ -1,30 +0,0 @@
-#!/usr/bin/env node
-
-//process.env.DEBUG_NOPT = 1
-
-// my-program.js
-var nopt = require("../lib/nopt")
-  , Stream = require("stream").Stream
-  , path = require("path")
-  , knownOpts = { "foo" : [String, null]
-                , "bar" : [Stream, Number]
-                , "baz" : path
-                , "bloo" : [ "big", "medium", "small" ]
-                , "flag" : Boolean
-                , "pick" : Boolean
-                }
-  , shortHands = { "foofoo" : ["--foo", "Mr. Foo"]
-                 , "b7" : ["--bar", "7"]
-                 , "m" : ["--bloo", "medium"]
-                 , "p" : ["--pick"]
-                 , "f" : ["--flag", "true"]
-                 , "g" : ["--flag"]
-                 , "s" : "--flag"
-                 }
-             // everything is optional.
-             // knownOpts and shorthands default to {}
-             // arg list defaults to process.argv
-             // slice defaults to 2
-  , parsed = nopt(knownOpts, shortHands, process.argv, 2)
-
-console.log("parsed =\n"+ require("util").inspect(parsed))
Index: node_modules/postgresql-client/cjs/protocol/protocol.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/protocol.js b/node_modules/postgresql-client/cjs/protocol/protocol.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/protocol.js	
+++ /dev/null	
@@ -1,71 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Protocol = void 0;
-var Protocol;
-(function (Protocol) {
-    Protocol.VERSION_MAJOR = 3;
-    Protocol.VERSION_MINOR = 0;
-    // https://www.postgresql.org/docs/9.3/protocol-message-formats.html
-    let BackendMessageCode;
-    (function (BackendMessageCode) {
-        BackendMessageCode[BackendMessageCode["Authentication"] = 82] = "Authentication";
-        BackendMessageCode[BackendMessageCode["BackendKeyData"] = 75] = "BackendKeyData";
-        BackendMessageCode[BackendMessageCode["BindComplete"] = 50] = "BindComplete";
-        BackendMessageCode[BackendMessageCode["CloseComplete"] = 51] = "CloseComplete";
-        BackendMessageCode[BackendMessageCode["CommandComplete"] = 67] = "CommandComplete";
-        BackendMessageCode[BackendMessageCode["CopyData"] = 100] = "CopyData";
-        BackendMessageCode[BackendMessageCode["CopyDone"] = 99] = "CopyDone";
-        BackendMessageCode[BackendMessageCode["CopyInResponse"] = 103] = "CopyInResponse";
-        BackendMessageCode[BackendMessageCode["CopyOutResponse"] = 72] = "CopyOutResponse";
-        BackendMessageCode[BackendMessageCode["CopyBothResponse"] = 87] = "CopyBothResponse";
-        BackendMessageCode[BackendMessageCode["DataRow"] = 68] = "DataRow";
-        BackendMessageCode[BackendMessageCode["EmptyQueryResponse"] = 73] = "EmptyQueryResponse";
-        BackendMessageCode[BackendMessageCode["ErrorResponse"] = 69] = "ErrorResponse";
-        BackendMessageCode[BackendMessageCode["FunctionCallResponse"] = 86] = "FunctionCallResponse";
-        BackendMessageCode[BackendMessageCode["NegotiateProtocolVersion"] = 118] = "NegotiateProtocolVersion";
-        BackendMessageCode[BackendMessageCode["NoData"] = 110] = "NoData";
-        BackendMessageCode[BackendMessageCode["NoticeResponse"] = 78] = "NoticeResponse";
-        BackendMessageCode[BackendMessageCode["NotificationResponse"] = 65] = "NotificationResponse";
-        BackendMessageCode[BackendMessageCode["ParameterDescription"] = 116] = "ParameterDescription";
-        BackendMessageCode[BackendMessageCode["ParameterStatus"] = 83] = "ParameterStatus";
-        BackendMessageCode[BackendMessageCode["ParseComplete"] = 49] = "ParseComplete";
-        BackendMessageCode[BackendMessageCode["PortalSuspended"] = 115] = "PortalSuspended";
-        BackendMessageCode[BackendMessageCode["ReadyForQuery"] = 90] = "ReadyForQuery";
-        BackendMessageCode[BackendMessageCode["RowDescription"] = 84] = "RowDescription";
-    })(BackendMessageCode = Protocol.BackendMessageCode || (Protocol.BackendMessageCode = {}));
-    let FrontendMessageCode;
-    (function (FrontendMessageCode) {
-        FrontendMessageCode[FrontendMessageCode["Bind"] = 66] = "Bind";
-        FrontendMessageCode[FrontendMessageCode["Close"] = 67] = "Close";
-        FrontendMessageCode[FrontendMessageCode["CopyData"] = 100] = "CopyData";
-        FrontendMessageCode[FrontendMessageCode["CopyDone"] = 99] = "CopyDone";
-        FrontendMessageCode[FrontendMessageCode["CopyFail"] = 102] = "CopyFail";
-        FrontendMessageCode[FrontendMessageCode["Describe"] = 68] = "Describe";
-        FrontendMessageCode[FrontendMessageCode["Execute"] = 69] = "Execute";
-        FrontendMessageCode[FrontendMessageCode["Flush"] = 72] = "Flush";
-        FrontendMessageCode[FrontendMessageCode["FunctionCall"] = 70] = "FunctionCall";
-        FrontendMessageCode[FrontendMessageCode["Parse"] = 80] = "Parse";
-        FrontendMessageCode[FrontendMessageCode["PasswordMessage"] = 112] = "PasswordMessage";
-        FrontendMessageCode[FrontendMessageCode["Query"] = 81] = "Query";
-        FrontendMessageCode[FrontendMessageCode["Sync"] = 83] = "Sync";
-        FrontendMessageCode[FrontendMessageCode["Terminate"] = 88] = "Terminate";
-    })(FrontendMessageCode = Protocol.FrontendMessageCode || (Protocol.FrontendMessageCode = {}));
-    let AuthenticationMessageKind;
-    (function (AuthenticationMessageKind) {
-        AuthenticationMessageKind["KerberosV5"] = "KerberosV5";
-        AuthenticationMessageKind["CleartextPassword"] = "CleartextPassword";
-        AuthenticationMessageKind["MD5Password"] = "MD5Password";
-        AuthenticationMessageKind["SCMCredential"] = "SCMCredential";
-        AuthenticationMessageKind["GSS"] = "GSS";
-        AuthenticationMessageKind["SSPI"] = "SSPI";
-        AuthenticationMessageKind["GSSContinue"] = "GSSContinue";
-        AuthenticationMessageKind["SASL"] = "SASL";
-        AuthenticationMessageKind["SASLContinue"] = "SASLContinue";
-        AuthenticationMessageKind["SASLFinal"] = "SASLFinal";
-    })(AuthenticationMessageKind = Protocol.AuthenticationMessageKind || (Protocol.AuthenticationMessageKind = {}));
-    let DataFormat;
-    (function (DataFormat) {
-        DataFormat[DataFormat["text"] = 0] = "text";
-        DataFormat[DataFormat["binary"] = 1] = "binary";
-    })(DataFormat = Protocol.DataFormat || (Protocol.DataFormat = {}));
-})(Protocol || (exports.Protocol = Protocol = {}));
Index: .idea/jsLibraryMappings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jsLibraryMappings.xml b/.idea/jsLibraryMappings.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/jsLibraryMappings.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JavaScriptLibraryMappings">
+    <includedPredefinedLibrary name="Node.js Core" />
+  </component>
+</project>
\ No newline at end of file
Index: node_modules/nopt/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nopt/package.json b/node_modules/nopt/package.json
deleted file mode 100644
--- a/node_modules/nopt/package.json	
+++ /dev/null	
@@ -1,12 +0,0 @@
-{ "name" : "nopt"
-, "version" : "1.0.10"
-, "description" : "Option parsing for Node, supporting types, shorthands, etc. Used by npm."
-, "author" : "Isaac Z. Schlueter <i@izs.me> (http://blog.izs.me/)"
-, "main" : "lib/nopt.js"
-, "scripts" : { "test" : "node lib/nopt.js" }
-, "repository" : "http://github.com/isaacs/nopt"
-, "bin" : "./bin/nopt.js"
-, "license" :
-  { "type" : "MIT"
-  , "url" : "https://github.com/isaacs/nopt/raw/master/LICENSE" }
-, "dependencies" : { "abbrev" : "1" }}
Index: node_modules/postgresql-client/cjs/interfaces/database-connection-params.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/database-connection-params.js b/node_modules/postgresql-client/cjs/interfaces/database-connection-params.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/database-connection-params.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/es-define-property/tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/es-define-property/tsconfig.json b/node_modules/es-define-property/tsconfig.json
--- a/node_modules/es-define-property/tsconfig.json	
+++ b/node_modules/es-define-property/tsconfig.json	
@@ -1,47 +1,7 @@
 {
+	"extends": "@ljharb/tsconfig",
 	"compilerOptions": {
-		/* Visit https://aka.ms/tsconfig.json to read more about this file */
-
-		/* Projects */
-
-		/* Language and Environment */
-		"target": "es2022",																	/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
-		// "lib": [],																				/* Specify a set of bundled library declaration files that describe the target runtime environment. */
-		// "noLib": true,																		/* Disable including any library files, including the default lib.d.ts. */
-		"useDefineForClassFields": true,										 /* Emit ECMAScript-standard-compliant class fields. */
-		// "moduleDetection": "auto",												/* Control what method is used to detect module-format JS files. */
-
-		/* Modules */
-		"module": "commonjs",																/* Specify what module code is generated. */
-		// "rootDir": "./",																	/* Specify the root folder within your source files. */
-		// "moduleResolution": "node",											 /* Specify how TypeScript looks up a file from a given module specifier. */
-		// "baseUrl": "./",																	/* Specify the base directory to resolve non-relative module names. */
-		// "paths": {},																			/* Specify a set of entries that re-map imports to additional lookup locations. */
-		// "rootDirs": [],																	 /* Allow multiple folders to be treated as one when resolving modules. */
-		// "typeRoots": ["types"],													 /* Specify multiple folders that act like `./node_modules/@types`. */
-		"resolveJsonModule": true,													 /* Enable importing .json files. */
-		// "allowArbitraryExtensions": true,								 /* Enable importing files with any extension, provided a declaration file is present. */
-
-		/* JavaScript Support */
-		"allowJs": true,																		 /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
-		"checkJs": true,																		 /* Enable error reporting in type-checked JavaScript files. */
-		"maxNodeModuleJsDepth": 1,													 /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */
-
-		/* Emit */
-		"declaration": true,																 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
-		"declarationMap": true,															/* Create sourcemaps for d.ts files. */
-		"noEmit": true,																			/* Disable emitting files from a compilation. */
-
-		/* Interop Constraints */
-		"allowSyntheticDefaultImports": true,								/* Allow `import x from y` when a module doesn't have a default export. */
-		"esModuleInterop": true,														 /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
-		"forceConsistentCasingInFileNames": true,						/* Ensure that casing is correct in imports. */
-
-		/* Type Checking */
-		"strict": true,																			/* Enable all strict type-checking options. */
-
-		/* Completeness */
-		// "skipLibCheck": true															/* Skip type checking all .d.ts files. */
+		"target": "es2022",
 	},
 	"exclude": [
 		"coverage",
Index: node_modules/body-parser/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/README.md b/node_modules/body-parser/README.md
--- a/node_modules/body-parser/README.md	
+++ b/node_modules/body-parser/README.md	
@@ -4,6 +4,7 @@
 [![NPM Downloads][npm-downloads-image]][npm-url]
 [![Build Status][ci-image]][ci-url]
 [![Test Coverage][coveralls-image]][coveralls-url]
+[![OpenSSF Scorecard Badge][ossf-scorecard-badge]][ossf-scorecard-visualizer]
 
 Node.js body parsing middleware.
 
@@ -277,6 +278,10 @@
 where `buf` is a `Buffer` of the raw request body and `encoding` is the
 encoding of the request. The parsing can be aborted by throwing an error.
 
+#### depth
+
+The `depth` option is used to configure the maximum depth of the `qs` library when `extended` is `true`. This allows you to limit the amount of keys that are parsed and can be useful to prevent certain types of abuse. Defaults to `32`. It is recommended to keep this value as low as possible.
+
 ## Errors
 
 The middlewares provided by this module create errors using the
@@ -373,6 +378,10 @@
 the `type` property is set to `'encoding.unsupported'`, and the `encoding`
 property is set to the encoding that is unsupported.
 
+### The input exceeded the depth
+
+This error occurs when using `bodyParser.urlencoded` with the `extended` property set to `true` and the input exceeds the configured `depth` option. The `status` property is set to `400`. It is recommended to review the `depth` option and evaluate if it requires a higher value. When the `depth` option is set to `32` (default value), the error will not be thrown.
+
 ## Examples
 
 ### Express/Connect top-level generic
@@ -463,3 +472,5 @@
 [npm-downloads-image]: https://badgen.net/npm/dm/body-parser
 [npm-url]: https://npmjs.org/package/body-parser
 [npm-version-image]: https://badgen.net/npm/v/body-parser
+[ossf-scorecard-badge]: https://api.scorecard.dev/projects/github.com/expressjs/body-parser/badge
+[ossf-scorecard-visualizer]: https://ossf.github.io/scorecard-visualizer/#/projects/github.com/expressjs/body-parser
\ No newline at end of file
Index: node_modules/semver/functions/coerce.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/coerce.js b/node_modules/semver/functions/coerce.js
--- a/node_modules/semver/functions/coerce.js	
+++ b/node_modules/semver/functions/coerce.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const parse = require('./parse')
 const { safeRe: re, t } = require('../internal/re')
Index: node_modules/postgresql-client/typings/data-types/point-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/point-type.d.ts b/node_modules/postgresql-client/typings/data-types/point-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/point-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const PointType: DataType;
-export declare const ArrayPointType: DataType;
Index: node_modules/postgresql-client/cjs/data-types/bool-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/bool-type.js b/node_modules/postgresql-client/cjs/data-types/bool-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/bool-type.js	
+++ /dev/null	
@@ -1,27 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayBoolType = exports.BoolType = void 0;
-const constants_js_1 = require("../constants.js");
-exports.BoolType = {
-    name: 'bool',
-    oid: constants_js_1.DataTypeOIDs.bool,
-    jsType: 'boolean',
-    parseBinary(v) {
-        return !!v.readUInt8();
-    },
-    encodeBinary(buf, v) {
-        buf.writeInt8(v ? 1 : 0);
-    },
-    parseText(v) {
-        return v === 'TRUE' || v === 't' || v === 'true' || v === 'y' || v === 'yes' || v === 'on' || v === '1';
-    },
-    isType(v) {
-        return typeof v === 'boolean';
-    },
-};
-exports.ArrayBoolType = {
-    ...exports.BoolType,
-    name: '_bool',
-    oid: constants_js_1.DataTypeOIDs._bool,
-    elementsOID: constants_js_1.DataTypeOIDs.bool,
-};
Index: node_modules/semver/functions/lte.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/lte.js b/node_modules/semver/functions/lte.js
--- a/node_modules/semver/functions/lte.js	
+++ b/node_modules/semver/functions/lte.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const lte = (a, b, loose) => compare(a, b, loose) <= 0
 module.exports = lte
Index: .idea/hotel-reservation.iml
===================================================================
diff --git a/.idea/hotel-reservation.iml b/.idea/hotel-reservation.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/hotel-reservation.iml	
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/temp" />
+      <excludeFolder url="file://$MODULE_DIR$/tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/.trunk" />
+      <excludeFolder url="file://$MODULE_DIR$/.vscode" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: node_modules/braces/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/CHANGELOG.md b/node_modules/braces/CHANGELOG.md
deleted file mode 100644
--- a/node_modules/braces/CHANGELOG.md	
+++ /dev/null	
@@ -1,184 +0,0 @@
-# Release history
-
-All notable changes to this project will be documented in this file.
-
-The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
-and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).
-
-<details>
-  <summary><strong>Guiding Principles</strong></summary>
-
-- Changelogs are for humans, not machines.
-- There should be an entry for every single version.
-- The same types of changes should be grouped.
-- Versions and sections should be linkable.
-- The latest version comes first.
-- The release date of each versions is displayed.
-- Mention whether you follow Semantic Versioning.
-
-</details>
-
-<details>
-  <summary><strong>Types of changes</strong></summary>
-
-Changelog entries are classified using the following labels _(from [keep-a-changelog](http://keepachangelog.com/)_):
-
-- `Added` for new features.
-- `Changed` for changes in existing functionality.
-- `Deprecated` for soon-to-be removed features.
-- `Removed` for now removed features.
-- `Fixed` for any bug fixes.
-- `Security` in case of vulnerabilities.
-
-</details>
-
-## [3.0.0] - 2018-04-08
-
-v3.0 is a complete refactor, resulting in a faster, smaller codebase, with fewer deps, and a more accurate parser and compiler. 
-
-**Breaking Changes**
-
-- The undocumented `.makeRe` method was removed
-
-**Non-breaking changes**
-
-- Caching was removed
-
-## [2.3.2] - 2018-04-08
-
-- start refactoring
-- cover sets
-- better range handling
-
-## [2.3.1] - 2018-02-17
-
-- Remove unnecessary escape in Regex. (#14)
-
-## [2.3.0] - 2017-10-19
-
-- minor code reorganization
-- optimize regex
-- expose `maxLength` option
-
-## [2.2.1] - 2017-05-30
-
-- don't condense when braces contain extglobs
-
-## [2.2.0] - 2017-05-28
-
-- ensure word boundaries are preserved
-- fixes edge case where extglob characters precede a brace pattern
-
-## [2.1.1] - 2017-04-27
-
-- use snapdragon-node
-- handle edge case
-- optimizations, lint
-
-## [2.0.4] - 2017-04-11
-
-- pass opts to compiler
-- minor optimization in create method
-- re-write parser handlers to remove negation regex
-
-## [2.0.3] - 2016-12-10
-
-- use split-string
-- clear queue at the end
-- adds sequences example
-- add unit tests
-
-## [2.0.2] - 2016-10-21
-
-- fix comma handling in nested extglobs
-
-## [2.0.1] - 2016-10-20
-
-- add comments
-- more tests, ensure quotes are stripped
-
-## [2.0.0] - 2016-10-19
-
-- don't expand braces inside character classes
-- add quantifier pattern
-
-## [1.8.5] - 2016-05-21
-
-- Refactor (#10)
-
-## [1.8.4] - 2016-04-20
-
-- fixes https://github.com/jonschlinkert/micromatch/issues/66
-
-## [1.8.0] - 2015-03-18
-
-- adds exponent examples, tests
-- fixes the first example in https://github.com/jonschlinkert/micromatch/issues/38
-
-## [1.6.0] - 2015-01-30
-
-- optimizations, `bash` mode:
-- improve path escaping
-
-## [1.5.0] - 2015-01-28
-
-- Merge pull request #5 from eush77/lib-files
-
-## [1.4.0] - 2015-01-24
-
-- add extglob tests
-- externalize exponent function
-- better whitespace handling
-
-## [1.3.0] - 2015-01-24
-
-- make regex patterns explicity
-
-## [1.1.0] - 2015-01-11
-
-- don't create a match group with `makeRe`
-
-## [1.0.0] - 2014-12-23
-
-- Merge commit '97b05f5544f8348736a8efaecf5c32bbe3e2ad6e'
-- support empty brace syntax
-- better bash coverage
-- better support for regex strings
-
-## [0.1.4] - 2014-11-14
-
-- improve recognition of bad args, recognize mismatched argument types
-- support escaping
-- remove pathname-expansion
-- support whitespace in patterns
-
-## [0.1.0]
-
-- first commit
-
-[2.3.2]: https://github.com/micromatch/braces/compare/2.3.1...2.3.2
-[2.3.1]: https://github.com/micromatch/braces/compare/2.3.0...2.3.1
-[2.3.0]: https://github.com/micromatch/braces/compare/2.2.1...2.3.0
-[2.2.1]: https://github.com/micromatch/braces/compare/2.2.0...2.2.1
-[2.2.0]: https://github.com/micromatch/braces/compare/2.1.1...2.2.0
-[2.1.1]: https://github.com/micromatch/braces/compare/2.1.0...2.1.1
-[2.1.0]: https://github.com/micromatch/braces/compare/2.0.4...2.1.0
-[2.0.4]: https://github.com/micromatch/braces/compare/2.0.3...2.0.4
-[2.0.3]: https://github.com/micromatch/braces/compare/2.0.2...2.0.3
-[2.0.2]: https://github.com/micromatch/braces/compare/2.0.1...2.0.2
-[2.0.1]: https://github.com/micromatch/braces/compare/2.0.0...2.0.1
-[2.0.0]: https://github.com/micromatch/braces/compare/1.8.5...2.0.0
-[1.8.5]: https://github.com/micromatch/braces/compare/1.8.4...1.8.5
-[1.8.4]: https://github.com/micromatch/braces/compare/1.8.0...1.8.4
-[1.8.0]: https://github.com/micromatch/braces/compare/1.6.0...1.8.0
-[1.6.0]: https://github.com/micromatch/braces/compare/1.5.0...1.6.0
-[1.5.0]: https://github.com/micromatch/braces/compare/1.4.0...1.5.0
-[1.4.0]: https://github.com/micromatch/braces/compare/1.3.0...1.4.0
-[1.3.0]: https://github.com/micromatch/braces/compare/1.2.0...1.3.0
-[1.2.0]: https://github.com/micromatch/braces/compare/1.1.0...1.2.0
-[1.1.0]: https://github.com/micromatch/braces/compare/1.0.0...1.1.0
-[1.0.0]: https://github.com/micromatch/braces/compare/0.1.4...1.0.0
-[0.1.4]: https://github.com/micromatch/braces/compare/0.1.0...0.1.4
-
-[Unreleased]: https://github.com/micromatch/braces/compare/0.1.0...HEAD
-[keep-a-changelog]: https://github.com/olivierlacan/keep-a-changelog
\ No newline at end of file
Index: node_modules/semver/functions/satisfies.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/satisfies.js b/node_modules/semver/functions/satisfies.js
--- a/node_modules/semver/functions/satisfies.js	
+++ b/node_modules/semver/functions/satisfies.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const Range = require('../classes/range')
 const satisfies = (version, range, options) => {
   try {
Index: node_modules/set-function-length/env.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/env.d.ts b/node_modules/set-function-length/env.d.ts
deleted file mode 100644
--- a/node_modules/set-function-length/env.d.ts	
+++ /dev/null	
@@ -1,9 +0,0 @@
-declare const env: {
-	__proto__: null,
-	boundFnsHaveConfigurableLengths: boolean;
-	boundFnsHaveWritableLengths: boolean;
-	functionsHaveConfigurableLengths: boolean;
-	functionsHaveWritableLengths: boolean;
-};
-
-export = env;
\ No newline at end of file
Index: node_modules/postgresql-client/typings/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/index.d.ts b/node_modules/postgresql-client/typings/index.d.ts
--- a/node_modules/postgresql-client/typings/index.d.ts	
+++ b/node_modules/postgresql-client/typings/index.d.ts	
@@ -1,25 +1,1 @@
-export * from './constants.js';
-export * from './data-type-map.js';
-export * from './types.js';
-export * from './connection/bind-param.js';
-export * from './connection/connection.js';
-export * from './connection/cursor.js';
-export * from './connection/pool.js';
-export * from './connection/prepared-statement.js';
-export * from './interfaces/command-result.js';
-export * from './interfaces/data-mapping-options.js';
-export * from './interfaces/data-type.js';
-export * from './interfaces/database-connection-params.js';
-export * from './interfaces/field-info.js';
-export * from './interfaces/query-options.js';
-export * from './interfaces/query-result.js';
-export * from './interfaces/script-execute-options.js';
-export * from './interfaces/script-result.js';
-export * from './interfaces/statement-prepare-options.js';
-export * from './util/connection-config.js';
-export * from './util/escape-literal.js';
-export * from './util/parse-datetime.js';
-export * from './util/stringify-arrayliteral.js';
-export * from './util/stringify-for-sql.js';
-export * from './protocol/smart-buffer.js';
-export * from './protocol/database-error.js';
+export * from 'postgrejs';
Index: node_modules/postgresql-client/typings/util/escape-literal.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/escape-literal.d.ts b/node_modules/postgresql-client/typings/util/escape-literal.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/escape-literal.d.ts	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export declare function escapeLiteral(str: string): string;
Index: node_modules/postgresql-client/cjs/data-types/timestamptz-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/timestamptz-type.js b/node_modules/postgresql-client/cjs/data-types/timestamptz-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/timestamptz-type.js	
+++ /dev/null	
@@ -1,73 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayTimestamptzType = exports.TimestamptzType = void 0;
-const constants_js_1 = require("../constants.js");
-const parse_datetime_js_1 = require("../util/parse-datetime.js");
-const timeShift = 946684800000;
-const timeMul = 4294967296;
-exports.TimestamptzType = {
-    name: 'timestamptz',
-    oid: constants_js_1.DataTypeOIDs.timestamptz,
-    jsType: 'Date',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.timestamptz);
-        const hi = v.readInt32BE();
-        const lo = v.readUInt32BE(4);
-        if (lo === 0xffffffff && hi === 0x7fffffff)
-            return fetchAsString ? 'infinity' : Infinity;
-        if (lo === 0x00000000 && hi === -0x80000000)
-            return fetchAsString ? '-infinity' : -Infinity;
-        // Shift from 2000 to 1970
-        let d = new Date((lo + hi * timeMul) / 1000 + timeShift);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());
-        return fetchAsString ? dateToTimestamptzString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = (0, parse_datetime_js_1.parseDateTime)(v, true, true, options.utcDates);
-        if (v === Infinity) {
-            buf.writeInt32BE(0x7fffffff); // hi
-            buf.writeUInt32BE(0xffffffff); // lo
-            return;
-        }
-        if (v === -Infinity) {
-            buf.writeInt32BE(-0x80000000); // hi
-            buf.writeUInt32BE(0x00000000); // lo
-            return;
-        }
-        if (!(v instanceof Date))
-            v = new Date(v);
-        let n = v.getTime();
-        n = (n - timeShift) * 1000;
-        const hi = Math.floor(n / timeMul);
-        const lo = n - hi * timeMul;
-        buf.writeInt32BE(hi);
-        buf.writeUInt32BE(lo);
-    },
-    parseText(v, options) {
-        const d = (0, parse_datetime_js_1.parseDateTime)(v, true, true, options.utcDates);
-        if (options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.timestamptz)) {
-            if (d instanceof Date)
-                return dateToTimestamptzString(d);
-            if (d === Infinity)
-                return 'infinity';
-            if (d === -Infinity)
-                return '-infinity';
-            return '';
-        }
-        return d;
-    },
-    isType(v) {
-        return v instanceof Date;
-    },
-};
-function dateToTimestamptzString(d) {
-    return d.toISOString().replace('T', ' ');
-}
-exports.ArrayTimestamptzType = {
-    ...exports.TimestamptzType,
-    name: '_timestamptz',
-    oid: constants_js_1.DataTypeOIDs._timestamptz,
-    elementsOID: constants_js_1.DataTypeOIDs.timestamptz,
-};
Index: node_modules/pg-protocol/src/testing/test-buffers.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/testing/test-buffers.ts b/node_modules/pg-protocol/src/testing/test-buffers.ts
--- a/node_modules/pg-protocol/src/testing/test-buffers.ts	
+++ b/node_modules/pg-protocol/src/testing/test-buffers.ts	
@@ -47,7 +47,7 @@
 
   rowDescription: function (fields: any[]) {
     fields = fields || []
-    var buf = new BufferList()
+    const buf = new BufferList()
     buf.addInt16(fields.length)
     fields.forEach(function (field) {
       buf
@@ -64,7 +64,7 @@
 
   parameterDescription: function (dataTypeIDs: number[]) {
     dataTypeIDs = dataTypeIDs || []
-    var buf = new BufferList()
+    const buf = new BufferList()
     buf.addInt16(dataTypeIDs.length)
     dataTypeIDs.forEach(function (dataTypeID) {
       buf.addInt32(dataTypeID)
@@ -74,13 +74,13 @@
 
   dataRow: function (columns: any[]) {
     columns = columns || []
-    var buf = new BufferList()
+    const buf = new BufferList()
     buf.addInt16(columns.length)
     columns.forEach(function (col) {
       if (col == null) {
         buf.addInt32(-1)
       } else {
-        var strBuf = Buffer.from(col, 'utf8')
+        const strBuf = Buffer.from(col, 'utf8')
         buf.addInt32(strBuf.length)
         buf.add(strBuf)
       }
@@ -98,7 +98,7 @@
 
   errorOrNotice: function (fields: any) {
     fields = fields || []
-    var buf = new BufferList()
+    const buf = new BufferList()
     fields.forEach(function (field: any) {
       buf.addChar(field.type)
       buf.addCString(field.value)
Index: node_modules/ts-gems/lib/dto.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/dto.d.ts b/node_modules/ts-gems/lib/dto.d.ts
--- a/node_modules/ts-gems/lib/dto.d.ts	
+++ b/node_modules/ts-gems/lib/dto.d.ts	
@@ -1,6 +1,6 @@
 import { IfNoDeepValue } from './helpers.js';
-import { DeepNullish } from './nullish.js';
-import { DeepPartial } from './partial.js';
+import { DeeperNullish } from './nullish.js';
+import { DeeperPartial } from './partial.js';
 import { IfNever } from './type-check.js';
 
 /**
@@ -9,17 +9,17 @@
  */
 export type DTO<T> = {
   [K in keyof T as IfNever<
-    Exclude<T[K], undefined | Function>,
+    Exclude<NonNullable<T[K]>, Function>,
     never,
     K
-  >]: Exclude<T[K], undefined | null> extends (infer U)[] // Deep process arrays
+  >]: NonNullable<T[K]> extends (infer U)[] // Deep process arrays
     ? DTO<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined | null>> extends true
-      ? Exclude<T[K], undefined | null>
+      IfNoDeepValue<NonNullable<T[K]>> extends true
+      ? NonNullable<T[K]>
       : // Deep process objects
-        DTO<Exclude<T[K], undefined | null>>;
+        DTO<NonNullable<T[K]>>;
 };
 
-export type PartialDTO<T> = DeepPartial<DTO<T>>;
-export type PatchDTO<T> = DeepNullish<DTO<T>>;
+export type PartialDTO<T> = DeeperPartial<DTO<T>>;
+export type PatchDTO<T> = DeeperNullish<DTO<T>>;
Index: node_modules/pg-connection-string/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-connection-string/package.json b/node_modules/pg-connection-string/package.json
--- a/node_modules/pg-connection-string/package.json	
+++ b/node_modules/pg-connection-string/package.json	
@@ -1,13 +1,20 @@
 {
   "name": "pg-connection-string",
-  "version": "2.6.4",
+  "version": "2.9.1",
   "description": "Functions for dealing with a PostgresSQL connection string",
   "main": "./index.js",
   "types": "./index.d.ts",
+  "exports": {
+    ".": {
+      "types": "./index.d.ts",
+      "import": "./esm/index.mjs",
+      "require": "./index.js",
+      "default": "./index.js"
+    }
+  },
   "scripts": {
-    "test": "istanbul cover _mocha && npm run check-coverage",
-    "check-coverage": "istanbul check-coverage --statements 100 --branches 100 --lines 100 --functions 100",
-    "coveralls": "cat ./coverage/lcov.info | ./node_modules/.bin/coveralls"
+    "test": "nyc --reporter=lcov mocha && npm run check-coverage",
+    "check-coverage": "nyc check-coverage --statements 100 --branches 100 --lines 100 --functions 100"
   },
   "repository": {
     "type": "git",
@@ -27,14 +34,19 @@
   },
   "homepage": "https://github.com/brianc/node-postgres/tree/master/packages/pg-connection-string",
   "devDependencies": {
+    "@types/pg": "^8.12.0",
     "chai": "^4.1.1",
     "coveralls": "^3.0.4",
     "istanbul": "^0.4.5",
-    "mocha": "^7.1.2"
+    "mocha": "^10.5.2",
+    "nyc": "^15",
+    "tsx": "^4.19.4",
+    "typescript": "^4.0.3"
   },
   "files": [
     "index.js",
-    "index.d.ts"
+    "index.d.ts",
+    "esm"
   ],
-  "gitHead": "a37a93bf7990220517a40cf16b8e72d4c3e6cef5"
+  "gitHead": "cd877a57612a39335a97b593111710d26126279d"
 }
Index: node_modules/side-channel/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/CHANGELOG.md b/node_modules/side-channel/CHANGELOG.md
--- a/node_modules/side-channel/CHANGELOG.md	
+++ b/node_modules/side-channel/CHANGELOG.md	
@@ -5,6 +5,21 @@
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+## [v1.1.0](https://github.com/ljharb/side-channel/compare/v1.0.6...v1.1.0) - 2024-12-11
+
+### Commits
+
+- [Refactor] extract implementations to `side-channel-weakmap`, `side-channel-map`, `side-channel-list` [`ada5955`](https://github.com/ljharb/side-channel/commit/ada595549a5c4c6c853756d598846b180941c6da)
+- [New] add `channel.delete` [`c01d2d3`](https://github.com/ljharb/side-channel/commit/c01d2d3fd51dbb1ce6da72ad7916e61bd6172aad)
+- [types] improve types [`0c54356`](https://github.com/ljharb/side-channel/commit/0c5435651417df41b8cc1a5f7cdce8bffae68cde)
+- [readme] add content [`be24868`](https://github.com/ljharb/side-channel/commit/be248682ac294b0e22c883092c45985aa91c490a)
+- [actions] split out node 10-20, and 20+ [`c4488e2`](https://github.com/ljharb/side-channel/commit/c4488e241ef3d49a19fe266ac830a2e644305911)
+- [types] use shared tsconfig [`0e0d57c`](https://github.com/ljharb/side-channel/commit/0e0d57c2ff17c7b45c6cbd43ebcf553edc9e3adc)
+- [Dev Deps] update `@ljharb/eslint-config`, `@ljharb/tsconfig`, `@types/get-intrinsic`, `@types/object-inspect`, `@types/tape`, `auto-changelog`, `tape` [`fb4f622`](https://github.com/ljharb/side-channel/commit/fb4f622e64a99a1e40b6e5cd7691674a9dc429e4)
+- [Deps] update `call-bind`, `get-intrinsic`, `object-inspect` [`b78336b`](https://github.com/ljharb/side-channel/commit/b78336b886172d1b457d414ac9e28de8c5fecc78)
+- [Tests] replace `aud` with `npm audit` [`ee3ab46`](https://github.com/ljharb/side-channel/commit/ee3ab4690d954311c35115651bcfd45edd205aa1)
+- [Dev Deps] add missing peer dep [`c03e21a`](https://github.com/ljharb/side-channel/commit/c03e21a7def3b67cdc15ae22316884fefcb2f6a8)
+
 ## [v1.0.6](https://github.com/ljharb/side-channel/compare/v1.0.5...v1.0.6) - 2024-02-29
 
 ### Commits
Index: node_modules/finalhandler/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/finalhandler/HISTORY.md b/node_modules/finalhandler/HISTORY.md
--- a/node_modules/finalhandler/HISTORY.md	
+++ b/node_modules/finalhandler/HISTORY.md	
@@ -1,3 +1,18 @@
+v1.3.1 / 2024-09-11
+==================
+
+  * deps: encodeurl@~2.0.0
+
+v1.3.0 / 2024-09-03
+==================
+
+  * ignore status message for HTTP/2 (#53)
+
+v1.2.1 / 2024-09-02
+==================
+
+  * Gracefully handle when handling an error and socket is null
+
 1.2.0 / 2022-03-22
 ==================
 
Index: node_modules/postgresql-client/esm/protocol/pg-socket.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/pg-socket.js b/node_modules/postgresql-client/esm/protocol/pg-socket.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/pg-socket.js	
+++ /dev/null	
@@ -1,338 +0,0 @@
-import crypto from 'crypto';
-import net from 'net';
-import promisify from 'putil-promisify';
-import tls from 'tls';
-import { ConnectionState } from '../constants.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { Backend } from './backend.js';
-import { DatabaseError } from './database-error.js';
-import { Frontend } from './frontend.js';
-import { Protocol } from './protocol.js';
-import { SASL } from './sasl.js';
-const DEFAULT_PORT_NUMBER = 5432;
-const COMMAND_RESULT_PATTERN = /^([^\d]+)(?: (\d+)(?: (\d+))?)?$/;
-export class PgSocket extends SafeEventEmitter {
-    constructor(options) {
-        super();
-        this.options = options;
-        this._state = ConnectionState.CLOSED;
-        this._backend = new Backend();
-        this._sessionParameters = {};
-        this._frontend = new Frontend({ buffer: options.buffer });
-        this.setMaxListeners(99);
-    }
-    get state() {
-        if (!this._socket || this._socket.destroyed)
-            this._state = ConnectionState.CLOSED;
-        return this._state;
-    }
-    get processID() {
-        return this._processID;
-    }
-    get secretKey() {
-        return this._secretKey;
-    }
-    get sessionParameters() {
-        return this._sessionParameters;
-    }
-    connect() {
-        if (this._socket)
-            return;
-        this._state = ConnectionState.CONNECTING;
-        const options = this.options;
-        const socket = (this._socket = new net.Socket());
-        const errorHandler = err => {
-            this._state = ConnectionState.CLOSED;
-            this._removeListeners();
-            this._reset();
-            socket.destroy();
-            this._socket = undefined;
-            this.emit('error', err);
-        };
-        const connectHandler = () => {
-            socket.setTimeout(0);
-            if (this.options.keepAlive || this.options.keepAlive == null)
-                socket.setKeepAlive(true);
-            if (options.ssl) {
-                socket.write(this._frontend.getSSLRequestMessage());
-                socket.once('data', x => {
-                    this._removeListeners();
-                    if (x.toString() === 'S') {
-                        const tslOptions = { ...options.ssl, socket };
-                        if (options.host && net.isIP(options.host) === 0)
-                            tslOptions.servername = options.host;
-                        const tlsSocket = (this._socket = tls.connect(tslOptions));
-                        tlsSocket.once('error', errorHandler);
-                        tlsSocket.once('secureConnect', () => {
-                            this._removeListeners();
-                            this._handleConnect();
-                        });
-                        return;
-                    }
-                    if (x.toString() === 'N')
-                        return errorHandler(new Error('Server does not support SSL connections'));
-                    return errorHandler(new Error('There was an error establishing an SSL connection'));
-                });
-            }
-            else {
-                this._handleConnect();
-            }
-        };
-        socket.setNoDelay(true);
-        socket.setTimeout(options.connectTimeoutMs || 30000, () => errorHandler(new Error('Connection timed out')));
-        socket.once('error', errorHandler);
-        socket.once('connect', connectHandler);
-        this.emit('connecting');
-        if (options.host && options.host.startsWith('/'))
-            socket.connect(options.host);
-        else
-            socket.connect(options.port || DEFAULT_PORT_NUMBER, options.host || 'localhost');
-    }
-    close() {
-        if (!this._socket || this._socket.destroyed) {
-            this._state = ConnectionState.CLOSED;
-            this._socket = undefined;
-            this._reset();
-            return;
-        }
-        if (this._state === ConnectionState.CLOSING)
-            return;
-        const socket = this._socket;
-        this._state = ConnectionState.CLOSING;
-        this._removeListeners();
-        socket.once('close', () => this._handleClose());
-        socket.destroy();
-    }
-    sendParseMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendParseMessage', args });
-        this._send(this._frontend.getParseMessage(args), cb);
-    }
-    sendBindMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendBindMessage', args });
-        this._send(this._frontend.getBindMessage(args), cb);
-    }
-    sendDescribeMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendDescribeMessage', args });
-        this._send(this._frontend.getDescribeMessage(args), cb);
-    }
-    sendExecuteMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendDescribeMessage', args });
-        this._send(this._frontend.getExecuteMessage(args), cb);
-    }
-    sendCloseMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendCloseMessage', args });
-        this._send(this._frontend.getCloseMessage(args), cb);
-    }
-    sendQueryMessage(sql, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendQueryMessage', sql });
-        this._send(this._frontend.getQueryMessage(sql), cb);
-    }
-    sendFlushMessage(cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendFlushMessage' });
-        this._send(this._frontend.getFlushMessage(), cb);
-    }
-    sendTerminateMessage(cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendTerminateMessage' });
-        this._send(this._frontend.getTerminateMessage(), cb);
-    }
-    sendSyncMessage() {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendSyncMessage' });
-        this._send(this._frontend.getSyncMessage());
-    }
-    capture(callback) {
-        return new Promise((resolve, reject) => {
-            const done = (err, result) => {
-                this.removeListener('error', errorHandler);
-                this.removeListener('message', msgHandler);
-                if (err)
-                    reject(err);
-                else
-                    resolve(result);
-            };
-            const errorHandler = (err) => {
-                this.removeListener('message', msgHandler);
-                reject(err);
-            };
-            const msgHandler = (code, msg) => {
-                const x = callback(code, msg, done);
-                if (promisify.isPromise(x))
-                    x.catch(err => done(err));
-            };
-            this.once('error', errorHandler);
-            this.on('message', msgHandler);
-        });
-    }
-    _removeListeners() {
-        if (!this._socket)
-            return;
-        this._socket.removeAllListeners('error');
-        this._socket.removeAllListeners('connect');
-        this._socket.removeAllListeners('data');
-        this._socket.removeAllListeners('close');
-    }
-    _reset() {
-        this._backend.reset();
-        this._sessionParameters = {};
-        this._processID = undefined;
-        this._secretKey = undefined;
-        this._saslSession = undefined;
-    }
-    _handleConnect() {
-        const socket = this._socket;
-        if (!socket)
-            return;
-        this._state = ConnectionState.AUTHORIZING;
-        this._reset();
-        socket.on('data', (data) => this._handleData(data));
-        socket.on('error', (err) => this._handleError(err));
-        socket.on('close', () => this._handleClose());
-        this._send(this._frontend.getStartupMessage({
-            user: this.options.user || 'postgres',
-            database: this.options.database || '',
-        }));
-    }
-    _handleClose() {
-        this._reset();
-        this._socket = undefined;
-        this._state = ConnectionState.CLOSED;
-        this.emit('close');
-    }
-    _handleError(err) {
-        if (this._state !== ConnectionState.READY) {
-            this._socket?.end();
-        }
-        this.emit('error', err);
-    }
-    _handleData(data) {
-        this._backend.parse(data, (code, payload) => {
-            try {
-                switch (code) {
-                    case Protocol.BackendMessageCode.Authentication:
-                        this._handleAuthenticationMessage(payload);
-                        break;
-                    case Protocol.BackendMessageCode.ErrorResponse:
-                        this.emit('error', new DatabaseError(payload));
-                        break;
-                    case Protocol.BackendMessageCode.NoticeResponse:
-                        this.emit('notice', payload);
-                        break;
-                    case Protocol.BackendMessageCode.NotificationResponse:
-                        this.emit('notification', payload);
-                        break;
-                    case Protocol.BackendMessageCode.ParameterStatus:
-                        this._handleParameterStatus(payload);
-                        break;
-                    case Protocol.BackendMessageCode.BackendKeyData:
-                        this._handleBackendKeyData(payload);
-                        break;
-                    case Protocol.BackendMessageCode.ReadyForQuery:
-                        if (this._state !== ConnectionState.READY) {
-                            this._state = ConnectionState.READY;
-                            this.emit('ready');
-                        }
-                        else
-                            this.emit('message', code, payload);
-                        break;
-                    case Protocol.BackendMessageCode.CommandComplete: {
-                        const msg = this._handleCommandComplete(payload);
-                        this.emit('message', code, msg);
-                        break;
-                    }
-                    default:
-                        this.emit('message', code, payload);
-                }
-            }
-            catch (e) {
-                this._handleError(e);
-            }
-        });
-    }
-    _resolvePassword(cb) {
-        (async () => {
-            const pass = typeof this.options.password === 'function' ? await this.options.password() : this.options.password;
-            cb(pass || '');
-        })().catch(err => this._handleError(err));
-    }
-    _handleAuthenticationMessage(msg) {
-        if (!msg) {
-            this.emit('authenticate');
-            return;
-        }
-        switch (msg.kind) {
-            case Protocol.AuthenticationMessageKind.CleartextPassword:
-                this._resolvePassword(password => {
-                    this._send(this._frontend.getPasswordMessage(password));
-                });
-                break;
-            case Protocol.AuthenticationMessageKind.MD5Password:
-                this._resolvePassword(password => {
-                    const md5 = (x) => crypto.createHash('md5').update(x, 'utf8').digest('hex');
-                    const l = md5(password + this.options.user);
-                    const r = md5(Buffer.concat([Buffer.from(l), msg.salt]));
-                    const pass = 'md5' + r;
-                    this._send(this._frontend.getPasswordMessage(pass));
-                });
-                break;
-            case Protocol.AuthenticationMessageKind.SASL: {
-                if (!msg.mechanisms.includes('SCRAM-SHA-256'))
-                    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported');
-                const saslSession = (this._saslSession = SASL.createSession(this.options.user || '', 'SCRAM-SHA-256'));
-                this._send(this._frontend.getSASLMessage(saslSession));
-                break;
-            }
-            case Protocol.AuthenticationMessageKind.SASLContinue: {
-                const saslSession = this._saslSession;
-                if (!saslSession)
-                    throw new Error('SASL: Session not started yet');
-                this._resolvePassword(password => {
-                    SASL.continueSession(saslSession, password, msg.data);
-                    const buf = this._frontend.getSASLFinalMessage(saslSession);
-                    this._send(buf);
-                });
-                break;
-            }
-            case Protocol.AuthenticationMessageKind.SASLFinal: {
-                const session = this._saslSession;
-                if (!session)
-                    throw new Error('SASL: Session not started yet');
-                SASL.finalizeSession(session, msg.data);
-                this._saslSession = undefined;
-                break;
-            }
-        }
-    }
-    _handleParameterStatus(msg) {
-        this._sessionParameters[msg.name] = msg.value;
-    }
-    _handleBackendKeyData(msg) {
-        this._processID = msg.processID;
-        this._secretKey = msg.secretKey;
-    }
-    _handleCommandComplete(msg) {
-        const m = msg.command && msg.command.match(COMMAND_RESULT_PATTERN);
-        const result = {
-            command: m[1],
-        };
-        if (m[3] != null) {
-            result.oid = parseInt(m[2], 10);
-            result.rowCount = parseInt(m[3], 10);
-        }
-        else if (m[2])
-            result.rowCount = parseInt(m[2], 10);
-        return result;
-    }
-    _send(data, cb) {
-        if (this._socket && this._socket.writable) {
-            this._socket.write(data, cb);
-        }
-    }
-}
Index: node_modules/postgresql-client/cjs/data-types/uuid-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/uuid-type.js b/node_modules/postgresql-client/cjs/data-types/uuid-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/uuid-type.js	
+++ /dev/null	
@@ -1,39 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayUuidType = exports.UuidType = void 0;
-const constants_js_1 = require("../constants.js");
-const GUID_PATTERN = /^[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$/;
-exports.UuidType = {
-    name: 'uuid',
-    oid: constants_js_1.DataTypeOIDs.uuid,
-    jsType: 'String',
-    parseBinary(v) {
-        return (v.toString('hex', 0, 4) +
-            '-' +
-            v.toString('hex', 4, 6) +
-            '-' +
-            v.toString('hex', 6, 8) +
-            '-' +
-            v.toString('hex', 8, 10) +
-            '-' +
-            v.toString('hex', 10, 16));
-    },
-    encodeBinary(buf, v) {
-        if (!GUID_PATTERN.test(v))
-            throw new Error(`"${v}" is not a valid guid value`);
-        const b = Buffer.from(v.replace(/-/g, ''), 'hex');
-        buf.writeBuffer(b);
-    },
-    parseText(v) {
-        return v;
-    },
-    isType(v) {
-        return typeof v === 'string' && GUID_PATTERN.test(v);
-    },
-};
-exports.ArrayUuidType = {
-    ...exports.UuidType,
-    name: '_uuid',
-    oid: constants_js_1.DataTypeOIDs._uuid,
-    elementsOID: constants_js_1.DataTypeOIDs.uuid,
-};
Index: node_modules/finalhandler/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/finalhandler/README.md b/node_modules/finalhandler/README.md
--- a/node_modules/finalhandler/README.md	
+++ b/node_modules/finalhandler/README.md	
@@ -143,5 +143,5 @@
 [coveralls-url]: https://coveralls.io/r/pillarjs/finalhandler?branch=master
 [downloads-image]: https://img.shields.io/npm/dm/finalhandler.svg
 [downloads-url]: https://npmjs.org/package/finalhandler
-[github-actions-ci-image]: https://img.shields.io/github/workflow/status/pillarjs/finalhandler/ci/master?label=ci
-[github-actions-ci-url]: https://github.com/jshttp/pillarjs/finalhandler?query=workflow%3Aci
+[github-actions-ci-image]: https://github.com/pillarjs/finalhandler/actions/workflows/ci.yml/badge.svg
+[github-actions-ci-url]: https://github.com/pillarjs/finalhandler/actions/workflows/ci.yml
Index: node_modules/has-proto/tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/tsconfig.json b/node_modules/has-proto/tsconfig.json
deleted file mode 100644
--- a/node_modules/has-proto/tsconfig.json	
+++ /dev/null	
@@ -1,49 +0,0 @@
-{
-  "compilerOptions": {
-    /* Visit https://aka.ms/tsconfig to read more about this file */
-
-    /* Projects */
-
-    /* Language and Environment */
-    "target": "ESNext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
-    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
-    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
-    "useDefineForClassFields": true,                     /* Emit ECMAScript-standard-compliant class fields. */
-    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
-
-    /* Modules */
-    "module": "commonjs",                                /* Specify what module code is generated. */
-    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
-    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
-    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
-    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
-    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
-    "typeRoots": ["types"],                              /* Specify multiple folders that act like './node_modules/@types'. */
-    "resolveJsonModule": true,                           /* Enable importing .json files. */
-    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
-
-    /* JavaScript Support */
-    "allowJs": true,                                     /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
-    "checkJs": true,                                     /* Enable error reporting in type-checked JavaScript files. */
-    "maxNodeModuleJsDepth": 0,                           /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
-
-    /* Emit */
-    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
-    "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
-    "noEmit": true,                                      /* Disable emitting files from a compilation. */
-
-    /* Interop Constraints */
-    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
-    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
-    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
-
-    /* Type Checking */
-    "strict": true,                                      /* Enable all strict type-checking options. */
-
-    /* Completeness */
-    //"skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
-  },
-  "exclude": [
-    "coverage"
-  ]
-}
Index: node_modules/merge-descriptors/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/merge-descriptors/README.md b/node_modules/merge-descriptors/README.md
--- a/node_modules/merge-descriptors/README.md	
+++ b/node_modules/merge-descriptors/README.md	
@@ -1,4 +1,4 @@
-# Merge Descriptors
+# merge-descriptors
 
 [![NPM Version][npm-image]][npm-url]
 [![NPM Downloads][downloads-image]][downloads-url]
@@ -27,12 +27,13 @@
 
 ### merge(destination, source)
 
-Redefines `destination`'s descriptors with `source`'s.
+Redefines `destination`'s descriptors with `source`'s. The return value is the
+`destination` object.
 
 ### merge(destination, source, false)
 
 Defines `source`'s descriptors on `destination` if `destination` does not have
-a descriptor by the same name.
+a descriptor by the same name. The return value is the `destination` object.
 
 ## License
 
Index: node_modules/semver/classes/range.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/classes/range.js b/node_modules/semver/classes/range.js
--- a/node_modules/semver/classes/range.js	
+++ b/node_modules/semver/classes/range.js	
@@ -1,3 +1,7 @@
+'use strict'
+
+const SPACE_CHARACTERS = /\s+/g
+
 // hoisted class for cyclic dependency
 class Range {
   constructor (range, options) {
@@ -18,7 +22,7 @@
       // just put it in the set and return
       this.raw = range.value
       this.set = [[range]]
-      this.format()
+      this.formatted = undefined
       return this
     }
 
@@ -29,10 +33,7 @@
     // First reduce all whitespace as much as possible so we do not have to rely
     // on potentially slow regexes like \s*. This is then stored and used for
     // future error messages as well.
-    this.raw = range
-      .trim()
-      .split(/\s+/)
-      .join(' ')
+    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')
 
     // First, split on ||
     this.set = this.raw
@@ -66,14 +67,29 @@
       }
     }
 
-    this.format()
+    this.formatted = undefined
+  }
+
+  get range () {
+    if (this.formatted === undefined) {
+      this.formatted = ''
+      for (let i = 0; i < this.set.length; i++) {
+        if (i > 0) {
+          this.formatted += '||'
+        }
+        const comps = this.set[i]
+        for (let k = 0; k < comps.length; k++) {
+          if (k > 0) {
+            this.formatted += ' '
+          }
+          this.formatted += comps[k].toString().trim()
+        }
+      }
+    }
+    return this.formatted
   }
 
   format () {
-    this.range = this.set
-      .map((comps) => comps.join(' ').trim())
-      .join('||')
-      .trim()
     return this.range
   }
 
Index: node_modules/postgresql-client/typings/connection/connection.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/connection/connection.d.ts b/node_modules/postgresql-client/typings/connection/connection.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/connection/connection.d.ts	
+++ /dev/null	
@@ -1,110 +0,0 @@
-/// <reference types="node" />
-import { ConnectionState } from '../constants.js';
-import { ConnectionConfiguration } from '../interfaces/database-connection-params.js';
-import { QueryOptions } from '../interfaces/query-options.js';
-import { QueryResult } from '../interfaces/query-result.js';
-import { ScriptExecuteOptions } from '../interfaces/script-execute-options.js';
-import { ScriptResult } from '../interfaces/script-result.js';
-import { StatementPrepareOptions } from '../interfaces/statement-prepare-options.js';
-import { DatabaseError } from '../protocol/database-error.js';
-import { Protocol } from '../protocol/protocol.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { Maybe } from '../types.js';
-import { IntlConnection } from './intl-connection.js';
-import type { Pool } from './pool.js';
-import { PreparedStatement } from './prepared-statement.js';
-export type NotificationMessage = Protocol.NotificationResponseMessage;
-export type NotificationCallback = (msg: NotificationMessage) => any;
-export declare class Connection extends SafeEventEmitter implements AsyncDisposable {
-    protected readonly _pool?: Pool;
-    protected readonly _intlCon: IntlConnection;
-    protected readonly _notificationListeners: SafeEventEmitter;
-    protected _closing: boolean;
-    constructor(pool: Pool, intlCon: IntlConnection);
-    constructor(config?: ConnectionConfiguration | string);
-    /**
-     * Returns configuration object
-     */
-    get config(): ConnectionConfiguration;
-    /**
-     * Returns true if connection is in a transaction
-     */
-    get inTransaction(): boolean;
-    /**
-     * Returns current state of the connection
-     */
-    get state(): ConnectionState;
-    /**
-     * Returns processId of current session
-     */
-    get processID(): Maybe<number>;
-    /**
-     * Returns information parameters for current session
-     */
-    get sessionParameters(): Record<string, string>;
-    /**
-     * Returns secret key of current session
-     */
-    get secretKey(): Maybe<number>;
-    /**
-     * Connects to the server
-     */
-    connect(): Promise<void>;
-    /**
-     * Closes connection. You can define how long time the connection will
-     * wait for active queries before terminating the connection.
-     * On the end of the given time, it forces to close the socket and than emits `terminate` event.
-     *
-     * @param terminateWait {number} - Determines how long the connection will wait for active queries before terminating.
-     */
-    close(terminateWait?: number): Promise<void>;
-    /**
-     * Executes single or multiple SQL scripts using Simple Query protocol.
-     *
-     * @param sql {string} - SQL script that will be executed
-     * @param options {ScriptExecuteOptions} - Execute options
-     */
-    execute(sql: string, options?: ScriptExecuteOptions): Promise<ScriptResult>;
-    query(sql: string, options?: QueryOptions): Promise<QueryResult>;
-    /**
-     * Creates a PreparedStatement instance
-     * @param sql {string} - SQL script that will be executed
-     * @param options {StatementPrepareOptions} - Options
-     */
-    prepare(sql: string, options?: StatementPrepareOptions): Promise<PreparedStatement>;
-    /**
-     * Starts a transaction
-     */
-    startTransaction(): Promise<void>;
-    /**
-     * Commits current transaction
-     */
-    commit(): Promise<void>;
-    /**
-     * Rolls back current transaction
-     */
-    rollback(): Promise<void>;
-    /**
-     * Starts transaction and creates a savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    savepoint(name: string): Promise<void>;
-    /**
-     * Rolls back current transaction to given savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    rollbackToSavepoint(name: string): Promise<void>;
-    /**
-     * Releases savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    releaseSavepoint(name: string): Promise<void>;
-    listen(channel: string, callback: NotificationCallback): Promise<void>;
-    unListen(channel: string): Promise<void>;
-    unListenAll(): Promise<void>;
-    protected _handleNotification(msg: NotificationMessage): void;
-    protected _close(): Promise<void>;
-    protected _handleError(err: DatabaseError, script: string): DatabaseError;
-    protected _captureErrorStack<T>(promise: Promise<T>): Promise<T>;
-    [Symbol.asyncDispose](): Promise<void>;
-}
Index: node_modules/postgresql-client/esm/data-types/json-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/json-type.js b/node_modules/postgresql-client/esm/data-types/json-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/json-type.js	
+++ /dev/null	
@@ -1,35 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-export const JsonType = {
-    name: 'json',
-    oid: DataTypeOIDs.json,
-    jsType: 'string',
-    parseBinary(v, options) {
-        const content = v.toString('utf8');
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.jsonb);
-        if (fetchAsString)
-            return content;
-        return content ? JSON.parse(content) : undefined;
-    },
-    encodeText(v) {
-        if (typeof v === 'object' || typeof v === 'bigint')
-            return JSON.stringify(v);
-        if (typeof v === 'boolean')
-            return v ? 'true' : 'false';
-        return '' + v;
-    },
-    parseText(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.jsonb);
-        if (fetchAsString)
-            return v;
-        return v ? JSON.parse(v) : null;
-    },
-    isType(v) {
-        return v && typeof v === 'object';
-    },
-};
-export const ArrayJsonType = {
-    ...JsonType,
-    name: '_json',
-    oid: DataTypeOIDs._json,
-    elementsOID: DataTypeOIDs.json,
-};
Index: node_modules/postgresql-client/typings/data-types/numeric-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/numeric-type.d.ts b/node_modules/postgresql-client/typings/data-types/numeric-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/numeric-type.d.ts	
+++ /dev/null	
@@ -1,12 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const NumericType: DataType;
-export declare const ArrayNumericType: DataType;
-/**
- * Convert a number from binary representation to text representation.
- * @param digits array of shorts that can be decoded as the number String
- * @param scale the scale of the number binary representation
- * @param weight the weight of the number binary representation
- * @param sign the sign of the number
- * @return String the number as String
- */
-export declare function numberBytesToString(digits: number[], scale: number, weight: number, sign: number): string;
Index: node_modules/pg-pool/test/submittable.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/submittable.js b/node_modules/pg-pool/test/submittable.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/submittable.js	
+++ /dev/null	
@@ -1,19 +0,0 @@
-'use strict'
-const Cursor = require('pg-cursor')
-const expect = require('expect.js')
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('submittle', () => {
-  it('is returned from the query method', false, (done) => {
-    const pool = new Pool()
-    const cursor = pool.query(new Cursor('SELECT * from generate_series(0, 1000)'))
-    cursor.read((err, rows) => {
-      expect(err).to.be(undefined)
-      expect(!!rows).to.be.ok()
-      cursor.close(done)
-    })
-  })
-})
Index: node_modules/pg-protocol/src/b.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/b.ts b/node_modules/pg-protocol/src/b.ts
--- a/node_modules/pg-protocol/src/b.ts	
+++ b/node_modules/pg-protocol/src/b.ts	
@@ -1,20 +1,17 @@
 // file for microbenchmarking
 
-import { Writer } from './buffer-writer'
-import { serialize } from './index'
 import { BufferReader } from './buffer-reader'
 
 const LOOPS = 1000
 let count = 0
-let start = Date.now()
-const writer = new Writer()
+const start = performance.now()
 
 const reader = new BufferReader()
 const buffer = Buffer.from([33, 33, 33, 33, 33, 33, 33, 0])
 
 const run = () => {
   if (count > LOOPS) {
-    console.log(Date.now() - start)
+    console.log(performance.now() - start)
     return
   }
   count++
Index: node_modules/.bin/nodetouch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/.bin/nodetouch b/node_modules/.bin/nodetouch
--- a/node_modules/.bin/nodetouch	
+++ b/node_modules/.bin/nodetouch	
@@ -1,1 +1,16 @@
-../touch/bin/nodetouch.js
\ No newline at end of file
+#!/bin/sh
+basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
+
+case `uname` in
+    *CYGWIN*|*MINGW*|*MSYS*)
+        if command -v cygpath > /dev/null 2>&1; then
+            basedir=`cygpath -w "$basedir"`
+        fi
+    ;;
+esac
+
+if [ -x "$basedir/node" ]; then
+  exec "$basedir/node"  "$basedir/../touch/bin/nodetouch.js" "$@"
+else 
+  exec node  "$basedir/../touch/bin/nodetouch.js" "$@"
+fi
Index: node_modules/postgresql-client/typings/data-types/varchar-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/varchar-type.d.ts b/node_modules/postgresql-client/typings/data-types/varchar-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/varchar-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const VarcharType: DataType;
-export declare const ArrayVarcharType: DataType;
Index: node_modules/set-function-length/env.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/env.js b/node_modules/set-function-length/env.js
deleted file mode 100644
--- a/node_modules/set-function-length/env.js	
+++ /dev/null	
@@ -1,25 +0,0 @@
-'use strict';
-
-var gOPD = require('gopd');
-var bind = require('function-bind');
-
-var unbound = gOPD && gOPD(function () {}, 'length');
-// @ts-expect-error ts(2555) TS is overly strict with .call
-var bound = gOPD && gOPD(bind.call(function () {}), 'length');
-
-var functionsHaveConfigurableLengths = !!(unbound && unbound.configurable);
-
-var functionsHaveWritableLengths = !!(unbound && unbound.writable);
-
-var boundFnsHaveConfigurableLengths = !!(bound && bound.configurable);
-
-var boundFnsHaveWritableLengths = !!(bound && bound.writable);
-
-/** @type {import('./env')} */
-module.exports = {
-	__proto__: null,
-	boundFnsHaveConfigurableLengths: boundFnsHaveConfigurableLengths,
-	boundFnsHaveWritableLengths: boundFnsHaveWritableLengths,
-	functionsHaveConfigurableLengths: functionsHaveConfigurableLengths,
-	functionsHaveWritableLengths: functionsHaveWritableLengths
-};
Index: node_modules/semver/ranges/to-comparators.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/to-comparators.js b/node_modules/semver/ranges/to-comparators.js
--- a/node_modules/semver/ranges/to-comparators.js	
+++ b/node_modules/semver/ranges/to-comparators.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const Range = require('../classes/range')
 
 // Mostly just for testing and legacy API reasons
Index: node_modules/postgresql-client/cjs/data-types/char-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/char-type.js b/node_modules/postgresql-client/cjs/data-types/char-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/char-type.js	
+++ /dev/null	
@@ -1,27 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayCharType = exports.CharType = void 0;
-const constants_js_1 = require("../constants.js");
-exports.CharType = {
-    name: 'char',
-    oid: constants_js_1.DataTypeOIDs.char,
-    jsType: 'string',
-    parseBinary(v) {
-        return v.toString('utf8');
-    },
-    encodeBinary(buf, v) {
-        buf.writeString((v ? '' + v : ' ')[0], 'utf8');
-    },
-    parseText(v) {
-        return '' + v;
-    },
-    isType(v) {
-        return typeof v === 'string' && v.length === 1;
-    },
-};
-exports.ArrayCharType = {
-    ...exports.CharType,
-    name: '_char',
-    oid: constants_js_1.DataTypeOIDs._char,
-    elementsOID: constants_js_1.DataTypeOIDs.char,
-};
Index: node_modules/brace-expansion/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/brace-expansion/package.json b/node_modules/brace-expansion/package.json
--- a/node_modules/brace-expansion/package.json	
+++ b/node_modules/brace-expansion/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "brace-expansion",
   "description": "Brace expansion as known from sh/bash",
-  "version": "1.1.11",
+  "version": "1.1.12",
   "repository": {
     "type": "git",
     "url": "git://github.com/juliangruber/brace-expansion.git"
@@ -43,5 +43,8 @@
       "iphone/6.0..latest",
       "android-browser/4.2..latest"
     ]
+  },
+  "publishConfig": {
+    "tag": "1.x"
   }
 }
Index: node_modules/semver/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/package.json b/node_modules/semver/package.json
--- a/node_modules/semver/package.json	
+++ b/node_modules/semver/package.json	
@@ -1,20 +1,21 @@
 {
   "name": "semver",
-  "version": "7.6.2",
+  "version": "7.7.2",
   "description": "The semantic version parser used by npm.",
   "main": "index.js",
   "scripts": {
     "test": "tap",
     "snap": "tap",
-    "lint": "eslint \"**/*.{js,cjs,ts,mjs,jsx,tsx}\"",
+    "lint": "npm run eslint",
     "postlint": "template-oss-check",
-    "lintfix": "npm run lint -- --fix",
+    "lintfix": "npm run eslint -- --fix",
     "posttest": "npm run lint",
-    "template-oss-apply": "template-oss-apply --force"
+    "template-oss-apply": "template-oss-apply --force",
+    "eslint": "eslint \"**/*.{js,cjs,ts,mjs,jsx,tsx}\""
   },
   "devDependencies": {
-    "@npmcli/eslint-config": "^4.0.0",
-    "@npmcli/template-oss": "4.22.0",
+    "@npmcli/eslint-config": "^5.0.0",
+    "@npmcli/template-oss": "4.24.3",
     "benchmark": "^2.1.4",
     "tap": "^16.0.0"
   },
@@ -51,7 +52,7 @@
   "author": "GitHub Inc.",
   "templateOSS": {
     "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
-    "version": "4.22.0",
+    "version": "4.24.3",
     "engines": ">=10",
     "distPaths": [
       "classes/",
Index: node_modules/postgresql-client/node_modules/postgres-bytea/decoder.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/decoder.js b/node_modules/postgresql-client/node_modules/postgres-bytea/decoder.js
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/decoder.js	
+++ /dev/null	
@@ -1,56 +0,0 @@
-'use strict'
-
-const BufferList = require('obuf')
-const { Transform } = require('stream')
-
-const State = {
-  READ_PREFIX: 1,
-  READ_DATA: 2
-}
-
-class ByteaDecoder extends Transform {
-  constructor () {
-    super()
-    this._incomingChunks = new BufferList()
-    this._state = State.READ_PREFIX
-  }
-
-  _transform (chunk, encoding, callback) {
-    this._incomingChunks.push(chunk)
-
-    while (true) {
-      if (this._state === State.READ_PREFIX) {
-        if (this._incomingChunks.has(3)) {
-          const prefix = this._incomingChunks.take(3)
-          const prefixString = prefix.toString()
-          if (prefixString !== '\\\\x') {
-            return this.emit('error', new Error(`Expected double-escaped postgres bytea hex format prefix, received: '${prefixString}'`))
-          }
-          this._state = State.READ_DATA
-          continue
-        } else {
-          break
-        }
-      }
-
-      if (this._state === State.READ_DATA) {
-        if (this._incomingChunks.size >= 2) {
-          // two hex characters are needed to parse a byte. read even number of chars, and let remainder roll over
-          let evenChunk
-          const isEvenLength = this._incomingChunks.size % 2 === 0
-          if (isEvenLength) {
-            evenChunk = this._incomingChunks.take(this._incomingChunks.size)
-          } else {
-            evenChunk = this._incomingChunks.take(this._incomingChunks.size - 1)
-          }
-          this.push(Buffer.from(evenChunk.toString(), 'hex'))
-        }
-        break
-      }
-    }
-
-    callback()
-  }
-}
-
-module.exports = ByteaDecoder
Index: node_modules/semver/preload.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/preload.js b/node_modules/semver/preload.js
--- a/node_modules/semver/preload.js	
+++ b/node_modules/semver/preload.js	
@@ -1,2 +1,4 @@
+'use strict'
+
 // XXX remove in v8 or beyond
 module.exports = require('./index.js')
Index: node_modules/dotenv/lib/env-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/lib/env-options.js b/node_modules/dotenv/lib/env-options.js
--- a/node_modules/dotenv/lib/env-options.js	
+++ b/node_modules/dotenv/lib/env-options.js	
@@ -9,6 +9,10 @@
   options.path = process.env.DOTENV_CONFIG_PATH
 }
 
+if (process.env.DOTENV_CONFIG_QUIET != null) {
+  options.quiet = process.env.DOTENV_CONFIG_QUIET
+}
+
 if (process.env.DOTENV_CONFIG_DEBUG != null) {
   options.debug = process.env.DOTENV_CONFIG_DEBUG
 }
Index: node_modules/postgresql-client/typings/util/stringify-arrayliteral.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/stringify-arrayliteral.d.ts b/node_modules/postgresql-client/typings/util/stringify-arrayliteral.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/stringify-arrayliteral.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import { DataMappingOptions } from '../interfaces/data-mapping-options.js';
-import { EncodeTextFunction } from '../types.js';
-export declare function stringifyArrayLiteral(value: any[], options?: DataMappingOptions, encode?: EncodeTextFunction): string;
Index: node_modules/postgresql-client/typings/util/convert-row-to-object.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/convert-row-to-object.d.ts b/node_modules/postgresql-client/typings/util/convert-row-to-object.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/convert-row-to-object.d.ts	
+++ /dev/null	
@@ -1,2 +0,0 @@
-import { FieldInfo } from '../interfaces/field-info.js';
-export declare function convertRowToObject(fields: FieldInfo[], row: any[]): any;
Index: node_modules/semver/functions/rsort.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/rsort.js b/node_modules/semver/functions/rsort.js
--- a/node_modules/semver/functions/rsort.js	
+++ b/node_modules/semver/functions/rsort.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compareBuild = require('./compare-build')
 const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
 module.exports = rsort
Index: node_modules/qs/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/CHANGELOG.md b/node_modules/qs/CHANGELOG.md
--- a/node_modules/qs/CHANGELOG.md	
+++ b/node_modules/qs/CHANGELOG.md	
@@ -1,4 +1,58 @@
-## **6.11.0
+## **6.13.0**
+- [New] `parse`: add `strictDepth` option (#511)
+- [Tests] use `npm audit` instead of `aud`
+
+## **6.12.3**
+- [Fix] `parse`: properly account for `strictNullHandling` when `allowEmptyArrays`
+- [meta] fix changelog indentation
+
+## **6.12.2**
+- [Fix] `parse`: parse encoded square brackets (#506)
+- [readme] add CII best practices badge
+
+## **6.12.1**
+- [Fix] `parse`: Disable `decodeDotInKeys` by default to restore previous behavior (#501)
+- [Performance] `utils`: Optimize performance under large data volumes, reduce memory usage, and speed up processing (#502)
+- [Refactor] `utils`: use `+=`
+- [Tests] increase coverage
+
+## **6.12.0**
+
+- [New] `parse`/`stringify`: add `decodeDotInKeys`/`encodeDotKeys` options (#488)
+- [New] `parse`: add `duplicates` option
+- [New] `parse`/`stringify`: add `allowEmptyArrays` option to allow [] in object values (#487)
+- [Refactor] `parse`/`stringify`: move allowDots config logic to its own variable
+- [Refactor] `stringify`: move option-handling code into `normalizeStringifyOptions`
+- [readme] update readme, add logos (#484)
+- [readme] `stringify`: clarify default `arrayFormat` behavior
+- [readme] fix line wrapping
+- [readme] remove dead badges
+- [Deps] update `side-channel`
+- [meta] make the dist build 50% smaller
+- [meta] add `sideEffects` flag
+- [meta] run build in prepack, not prepublish
+- [Tests] `parse`: remove useless tests; add coverage
+- [Tests] `stringify`: increase coverage
+- [Tests] use `mock-property`
+- [Tests] `stringify`: improve coverage
+- [Dev Deps] update `@ljharb/eslint-config `, `aud`, `has-override-mistake`, `has-property-descriptors`, `mock-property`, `npmignore`, `object-inspect`, `tape`
+- [Dev Deps] pin `glob`, since v10.3.8+ requires a broken `jackspeak`
+- [Dev Deps] pin `jackspeak` since 2.1.2+ depends on npm aliases, which kill the install process in npm < 6
+
+## **6.11.2**
+- [Fix] `parse`: Fix parsing when the global Object prototype is frozen (#473)
+- [Tests] add passing test cases with empty keys (#473)
+
+## **6.11.1**
+- [Fix] `stringify`: encode comma values more consistently (#463)
+- [readme] add usage of `filter` option for injecting custom serialization, i.e. of custom types (#447)
+- [meta] remove extraneous code backticks (#457)
+- [meta] fix changelog markdown
+- [actions] update checkout action
+- [actions] restrict action permissions
+- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `object-inspect`, `tape`
+
+## **6.11.0**
 - [New] [Fix] `stringify`: revert 0e903c0; add `commaRoundTrip` option (#442)
 - [readme] fix version badge
 
@@ -238,7 +292,7 @@
 
 ## **6.5.3**
 - [Fix] `parse`: ignore `__proto__` keys (#428)
-- [Fix]` `utils.merge`: avoid a crash with a null target and a truthy non-array source
+- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source
 - [Fix] correctly parse nested arrays
 - [Fix] `stringify`: fix a crash with `strictNullHandling` and a custom `filter`/`serializeDate` (#279)
 - [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided
@@ -291,7 +345,7 @@
 - [Fix] fix for an impossible situation: when the formatter is called with a non-string value
 - [Fix] use `safer-buffer` instead of `Buffer` constructor
 - [Fix] `utils.merge`: avoid a crash with a null target and an array source
-- [Fix]` `utils.merge`: avoid a crash with a null target and a truthy non-array source
+- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source
 - [Fix] `stringify`: fix a crash with `strictNullHandling` and a custom `filter`/`serializeDate` (#279)
 - [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided
 - [Fix] when `parseArrays` is false, properly handle keys ending in `[]`
@@ -320,7 +374,7 @@
 - [Fix] `parse`: ignore `__proto__` keys (#428)
 - [Fix] fix for an impossible situation: when the formatter is called with a non-string value
 - [Fix] `utils.merge`: avoid a crash with a null target and an array source
-- [Fix]` `utils.merge`: avoid a crash with a null target and a truthy non-array source
+- [Fix] `utils.merge`: avoid a crash with a null target and a truthy non-array source
 - [Fix] `stringify`: fix a crash with `strictNullHandling` and a custom `filter`/`serializeDate` (#279)
 - [Fix] `utils`: `merge`: fix crash when `source` is a truthy primitive & no options are provided
 - [Fix] when `parseArrays` is false, properly handle keys ending in `[]`
@@ -407,7 +461,7 @@
 - [New] add "encoder" and "decoder" options, for custom param encoding/decoding (#160)
 - [Fix] fix compacting of nested sparse arrays (#150)
 
-## **6.1.2
+## **6.1.2**
 - [Fix] follow `allowPrototypes` option during merge (#201, #200)
 - [Fix] chmod a-x
 - [Fix] support keys starting with brackets (#202, #200)
Index: node_modules/side-channel/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/index.d.ts b/node_modules/side-channel/index.d.ts
--- a/node_modules/side-channel/index.d.ts	
+++ b/node_modules/side-channel/index.d.ts	
@@ -1,27 +1,14 @@
+import getSideChannelList from 'side-channel-list';
+import getSideChannelMap from 'side-channel-map';
+import getSideChannelWeakMap from 'side-channel-weakmap';
+
 declare namespace getSideChannel {
-	type Key = unknown;
-	type ListNode<T> = {
-		key: Key;
-		next: ListNode<T>;
-		value: T;
-	};
-	type RootNode<T> = {
-		key: object;
-		next: null | ListNode<T>;
-	};
-	function listGetNode<T>(list: RootNode<T>, key: ListNode<T>['key']): ListNode<T> | void;
-	function listGet<T>(objects: RootNode<T>, key: ListNode<T>['key']): T | void;
-	function listSet<T>(objects: RootNode<T>, key: ListNode<T>['key'], value: T): void;
-	function listHas<T>(objects: RootNode<T>, key: ListNode<T>['key']): boolean;
-
-	type Channel = {
-		assert: (key: Key) => void;
-		has: (key: Key) => boolean;
-		get: <T>(key: Key) => T;
-		set: <T>(key: Key, value: T) => void;
-	}
+	type Channel<K, V> =
+		| getSideChannelList.Channel<K, V>
+		| ReturnType<Exclude<typeof getSideChannelMap<K, V>, false>>
+		| ReturnType<Exclude<typeof getSideChannelWeakMap<K, V>, false>>;
 }
 
-declare function getSideChannel(): getSideChannel.Channel;
+declare function getSideChannel<K, V>(): getSideChannel.Channel<K, V>;
 
 export = getSideChannel;
Index: node_modules/semver/functions/clean.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/clean.js b/node_modules/semver/functions/clean.js
--- a/node_modules/semver/functions/clean.js	
+++ b/node_modules/semver/functions/clean.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const parse = require('./parse')
 const clean = (version, options) => {
   const s = parse(version.trim().replace(/^[=v]+/, ''), options)
Index: node_modules/nodemon/node_modules/ms/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/ms/package.json b/node_modules/nodemon/node_modules/ms/package.json
--- a/node_modules/nodemon/node_modules/ms/package.json	
+++ b/node_modules/nodemon/node_modules/ms/package.json	
@@ -1,8 +1,8 @@
 {
   "name": "ms",
-  "version": "2.1.2",
+  "version": "2.1.3",
   "description": "Tiny millisecond conversion utility",
-  "repository": "zeit/ms",
+  "repository": "vercel/ms",
   "main": "./index",
   "files": [
     "index.js"
@@ -28,10 +28,11 @@
   },
   "license": "MIT",
   "devDependencies": {
-    "eslint": "4.12.1",
+    "eslint": "4.18.2",
     "expect.js": "0.3.1",
     "husky": "0.14.3",
     "lint-staged": "5.0.0",
-    "mocha": "4.0.1"
+    "mocha": "4.0.1",
+    "prettier": "2.0.5"
   }
 }
Index: node_modules/cookie/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/cookie/README.md b/node_modules/cookie/README.md
--- a/node_modules/cookie/README.md	
+++ b/node_modules/cookie/README.md	
@@ -2,9 +2,9 @@
 
 [![NPM Version][npm-version-image]][npm-url]
 [![NPM Downloads][npm-downloads-image]][npm-url]
-[![Node.js Version][node-version-image]][node-version-url]
-[![Build Status][travis-image]][travis-url]
-[![Test Coverage][coveralls-image]][coveralls-url]
+[![Node.js Version][node-image]][node-url]
+[![Build Status][ci-image]][ci-url]
+[![Coverage Status][coveralls-image]][coveralls-url]
 
 Basic HTTP cookie parser and serializer for HTTP servers.
 
@@ -107,14 +107,39 @@
 `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,
 so if both are set, they should point to the same date and time.
 
+##### partitioned
+
+Specifies the `boolean` value for the [`Partitioned` `Set-Cookie`](rfc-cutler-httpbis-partitioned-cookies)
+attribute. When truthy, the `Partitioned` attribute is set, otherwise it is not. By default, the
+`Partitioned` attribute is not set.
+
+**note** This is an attribute that has not yet been fully standardized, and may change in the future.
+This also means many clients may ignore this attribute until they understand it.
+
+More information about can be found in [the proposal](https://github.com/privacycg/CHIPS).
+
 ##### path
 
 Specifies the value for the [`Path` `Set-Cookie` attribute][rfc-6265-5.2.4]. By default, the path
 is considered the ["default path"][rfc-6265-5.1.4].
 
+##### priority
+
+Specifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].
+
+  - `'low'` will set the `Priority` attribute to `Low`.
+  - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.
+  - `'high'` will set the `Priority` attribute to `High`.
+
+More information about the different priority levels can be found in
+[the specification][rfc-west-cookie-priority-00-4.1].
+
+**note** This is an attribute that has not yet been fully standardized, and may change in the future.
+This also means many clients may ignore this attribute until they understand it.
+
 ##### sameSite
 
-Specifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][rfc-6265bis-03-4.1.2.7].
+Specifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][rfc-6265bis-09-5.4.7].
 
   - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
   - `false` will not set the `SameSite` attribute.
@@ -123,7 +148,7 @@
   - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
 
 More information about the different enforcement levels can be found in
-[the specification][rfc-6265bis-03-4.1.2.7].
+[the specification][rfc-6265bis-09-5.4.7].
 
 **note** This is an attribute that has not yet been fully standardized, and may change in the future.
 This also means many clients may ignore this attribute until they understand it.
@@ -198,40 +223,75 @@
 ```
 $ npm run bench
 
-> cookie@0.3.1 bench cookie
+> cookie@0.5.0 bench
 > node benchmark/index.js
 
-  http_parser@2.8.0
-  node@6.14.2
-  v8@5.1.281.111
-  uv@1.16.1
-  zlib@1.2.11
-  ares@1.10.1-DEV
-  icu@58.2
-  modules@48
-  napi@3
-  openssl@1.0.2o
+  node@18.18.2
+  acorn@8.10.0
+  ada@2.6.0
+  ares@1.19.1
+  brotli@1.0.9
+  cldr@43.1
+  icu@73.2
+  llhttp@6.0.11
+  modules@108
+  napi@9
+  nghttp2@1.57.0
+  nghttp3@0.7.0
+  ngtcp2@0.8.1
+  openssl@3.0.10+quic
+  simdutf@3.2.14
+  tz@2023c
+  undici@5.26.3
+  unicode@15.0
+  uv@1.44.2
+  uvwasi@0.0.18
+  v8@10.2.154.26-node.26
+  zlib@1.2.13.1-motley
+
+> node benchmark/parse-top.js
+
+  cookie.parse - top sites
+
+  14 tests completed.
+
+  parse accounts.google.com x 2,588,913 ops/sec ±0.74% (186 runs sampled)
+  parse apple.com           x 2,370,002 ops/sec ±0.69% (186 runs sampled)
+  parse cloudflare.com      x 2,213,102 ops/sec ±0.88% (188 runs sampled)
+  parse docs.google.com     x 2,194,157 ops/sec ±1.03% (184 runs sampled)
+  parse drive.google.com    x 2,265,084 ops/sec ±0.79% (187 runs sampled)
+  parse en.wikipedia.org    x   457,099 ops/sec ±0.81% (186 runs sampled)
+  parse linkedin.com        x   504,407 ops/sec ±0.89% (186 runs sampled)
+  parse maps.google.com     x 1,230,959 ops/sec ±0.98% (186 runs sampled)
+  parse microsoft.com       x   926,294 ops/sec ±0.88% (184 runs sampled)
+  parse play.google.com     x 2,311,338 ops/sec ±0.83% (185 runs sampled)
+  parse support.google.com  x 1,508,850 ops/sec ±0.86% (186 runs sampled)
+  parse www.google.com      x 1,022,582 ops/sec ±1.32% (182 runs sampled)
+  parse youtu.be            x   332,136 ops/sec ±1.02% (185 runs sampled)
+  parse youtube.com         x   323,833 ops/sec ±0.77% (183 runs sampled)
 
 > node benchmark/parse.js
 
-  cookie.parse
+  cookie.parse - generic
 
   6 tests completed.
 
-  simple      x 1,200,691 ops/sec ±1.12% (189 runs sampled)
-  decode      x 1,012,994 ops/sec ±0.97% (186 runs sampled)
-  unquote     x 1,074,174 ops/sec ±2.43% (186 runs sampled)
-  duplicates  x   438,424 ops/sec ±2.17% (184 runs sampled)
-  10 cookies  x   147,154 ops/sec ±1.01% (186 runs sampled)
-  100 cookies x    14,274 ops/sec ±1.07% (187 runs sampled)
+  simple      x 3,214,032 ops/sec ±1.61% (183 runs sampled)
+  decode      x   587,237 ops/sec ±1.16% (187 runs sampled)
+  unquote     x 2,954,618 ops/sec ±1.35% (183 runs sampled)
+  duplicates  x   857,008 ops/sec ±0.89% (187 runs sampled)
+  10 cookies  x   292,133 ops/sec ±0.89% (187 runs sampled)
+  100 cookies x    22,610 ops/sec ±0.68% (187 runs sampled)
 ```
 
 ## References
 
 - [RFC 6265: HTTP State Management Mechanism][rfc-6265]
-- [Same-site Cookies][rfc-6265bis-03-4.1.2.7]
+- [Same-site Cookies][rfc-6265bis-09-5.4.7]
 
-[rfc-6265bis-03-4.1.2.7]: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7
+[rfc-cutler-httpbis-partitioned-cookies]: https://tools.ietf.org/html/draft-cutler-httpbis-partitioned-cookies/
+[rfc-west-cookie-priority-00-4.1]: https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1
+[rfc-6265bis-09-5.4.7]: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7
 [rfc-6265]: https://tools.ietf.org/html/rfc6265
 [rfc-6265-5.1.4]: https://tools.ietf.org/html/rfc6265#section-5.1.4
 [rfc-6265-5.2.1]: https://tools.ietf.org/html/rfc6265#section-5.2.1
@@ -246,12 +306,12 @@
 
 [MIT](LICENSE)
 
+[ci-image]: https://badgen.net/github/checks/jshttp/cookie/master?label=ci
+[ci-url]: https://github.com/jshttp/cookie/actions/workflows/ci.yml
 [coveralls-image]: https://badgen.net/coveralls/c/github/jshttp/cookie/master
 [coveralls-url]: https://coveralls.io/r/jshttp/cookie?branch=master
-[node-version-image]: https://badgen.net/npm/node/cookie
-[node-version-url]: https://nodejs.org/en/download
+[node-image]: https://badgen.net/npm/node/cookie
+[node-url]: https://nodejs.org/en/download
 [npm-downloads-image]: https://badgen.net/npm/dm/cookie
 [npm-url]: https://npmjs.org/package/cookie
 [npm-version-image]: https://badgen.net/npm/v/cookie
-[travis-image]: https://badgen.net/travis/jshttp/cookie/master
-[travis-url]: https://travis-ci.org/jshttp/cookie
Index: node_modules/abbrev/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/abbrev/package.json b/node_modules/abbrev/package.json
deleted file mode 100644
--- a/node_modules/abbrev/package.json	
+++ /dev/null	
@@ -1,21 +0,0 @@
-{
-  "name": "abbrev",
-  "version": "1.1.1",
-  "description": "Like ruby's abbrev module, but in js",
-  "author": "Isaac Z. Schlueter <i@izs.me>",
-  "main": "abbrev.js",
-  "scripts": {
-    "test": "tap test.js --100",
-    "preversion": "npm test",
-    "postversion": "npm publish",
-    "postpublish": "git push origin --all; git push origin --tags"
-  },
-  "repository": "http://github.com/isaacs/abbrev-js",
-  "license": "ISC",
-  "devDependencies": {
-    "tap": "^10.1"
-  },
-  "files": [
-    "abbrev.js"
-  ]
-}
Index: node_modules/semver/functions/prerelease.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/prerelease.js b/node_modules/semver/functions/prerelease.js
--- a/node_modules/semver/functions/prerelease.js	
+++ b/node_modules/semver/functions/prerelease.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const parse = require('./parse')
 const prerelease = (version, options) => {
   const parsed = parse(version, options)
Index: node_modules/postgresql-client/typings/util/parse-time.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/parse-time.d.ts b/node_modules/postgresql-client/typings/util/parse-time.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/parse-time.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-export declare const STRICT_TIME_PATTERN: RegExp;
-export declare const TIME_PATTERN: RegExp;
-export declare function parseTime(str: string, parseTimeZone?: boolean, utc?: boolean): Date;
Index: node_modules/postgresql-client/cjs/util/connection-config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/connection-config.js b/node_modules/postgresql-client/cjs/util/connection-config.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/connection-config.js	
+++ /dev/null	
@@ -1,65 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.parseConnectionString = exports.getConnectionConfig = void 0;
-const putil_merge_1 = __importDefault(require("putil-merge"));
-const config_from_env_js_1 = require("./config-from-env.js");
-function getConnectionConfig(config) {
-    const cfg = (0, config_from_env_js_1.configFromEnv)();
-    if (typeof config === 'string') {
-        (0, putil_merge_1.default)(cfg, parseConnectionString(config));
-    }
-    else if (typeof config === 'object') {
-        (0, putil_merge_1.default)(cfg, config);
-    }
-    if (cfg.host) {
-        const x = parseConnectionString('' + cfg.host);
-        (0, putil_merge_1.default)(cfg, x);
-    }
-    cfg.user = cfg.user || 'postgres';
-    cfg.database = cfg.database || 'postgres';
-    cfg.host = cfg.host || '127.0.0.1';
-    return cfg;
-}
-exports.getConnectionConfig = getConnectionConfig;
-function parseConnectionString(str) {
-    if (str.startsWith('/'))
-        str = 'socket:/' + str;
-    if (!str.includes('://'))
-        str = 'postgres://' + str;
-    const parsed = new URL(str);
-    const getFirst = (v) => {
-        return typeof v === 'string' ? v : Array.isArray(v) ? v[0] : '';
-    };
-    const cfg = {};
-    cfg.host = decodeURI(parsed.hostname || '');
-    if (parsed.port)
-        cfg.port = parseInt(parsed.port, 10);
-    if (parsed.protocol === 'socket:' || parsed.protocol === 'unix:') {
-        if (!cfg.host.startsWith('/'))
-            cfg.host = '/' + cfg.host;
-        cfg.host += decodeURI(parsed.pathname || '');
-        if (parsed.searchParams.get('db'))
-            cfg.database = decodeURI(getFirst(parsed.searchParams.get('db')));
-    }
-    else if (parsed.protocol === 'pg:' || parsed.protocol === 'postgres:') {
-        if (parsed.pathname)
-            cfg.database = decodeURI(parsed.pathname.substring(1));
-    }
-    if (parsed.searchParams.get('host'))
-        cfg.host = decodeURI(getFirst(parsed.searchParams.get('host')));
-    if (parsed.searchParams.get('db'))
-        cfg.database = decodeURI(getFirst(parsed.searchParams.get('db')));
-    if (parsed.searchParams.get('schema'))
-        cfg.schema = decodeURI(getFirst(parsed.searchParams.get('schema')));
-    if (parsed.searchParams.get('application_name'))
-        cfg.applicationName = decodeURI(getFirst(parsed.searchParams.get('application_name')));
-    if (parsed.username)
-        cfg.user = parsed.username;
-    if (parsed.password)
-        cfg.password = parsed.password;
-    return cfg;
-}
-exports.parseConnectionString = parseConnectionString;
Index: node_modules/postgresql-client/typings/interfaces/script-result.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/script-result.d.ts b/node_modules/postgresql-client/typings/interfaces/script-result.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/script-result.d.ts	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import type { CommandResult } from './command-result.js';
-export interface ScriptResult {
-    /**
-     * Array of command result for each sql command in the script
-     */
-    results: CommandResult[];
-    /**
-     * Command count in the script
-     */
-    totalCommands: number;
-    /**
-     * Total execution time
-     */
-    totalTime: number;
-}
Index: node_modules/set-function-length/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/index.d.ts b/node_modules/set-function-length/index.d.ts
deleted file mode 100644
--- a/node_modules/set-function-length/index.d.ts	
+++ /dev/null	
@@ -1,7 +0,0 @@
-declare namespace setFunctionLength {
-    type Func = (...args: unknown[]) => unknown;
-}
-
-declare function setFunctionLength<T extends setFunctionLength.Func = setFunctionLength.Func>(fn: T, length: number, loose?: boolean): T;
-
-export = setFunctionLength;
\ No newline at end of file
Index: node_modules/postgresql-client/esm/data-types/int4-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/int4-type.js b/node_modules/postgresql-client/esm/data-types/int4-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/int4-type.js	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { fastParseInt } from '../util/fast-parseint.js';
-export const Int4Type = {
-    name: 'int4',
-    oid: DataTypeOIDs.int4,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readInt32BE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeInt32BE(fastParseInt(v));
-    },
-    parseText: fastParseInt,
-    isType(v) {
-        return typeof v === 'number' && Number.isInteger(v) && v <= Number.MAX_SAFE_INTEGER;
-    },
-};
-export const ArrayInt4Type = {
-    ...Int4Type,
-    name: '_int4',
-    oid: DataTypeOIDs._int4,
-    elementsOID: DataTypeOIDs.int4,
-};
Index: routes/usersRoute.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/usersRoute.js b/routes/usersRoute.js
--- a/routes/usersRoute.js	
+++ b/routes/usersRoute.js	
@@ -2,6 +2,7 @@
 
 const router = express.Router()
 
+
 const {
   getAllUsers,
   getSingleUser,
Index: node_modules/gopd/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/gopd/test/index.js b/node_modules/gopd/test/index.js
--- a/node_modules/gopd/test/index.js	
+++ b/node_modules/gopd/test/index.js	
@@ -10,6 +10,7 @@
 		var obj = { x: 1 };
 		st.ok('x' in obj, 'property exists');
 
+		// @ts-expect-error TS can't figure out narrowing from `skip`
 		var desc = gOPD(obj, 'x');
 		st.deepEqual(
 			desc,
@@ -25,7 +26,7 @@
 		st.end();
 	});
 
-	t.test('not supported', { skip: gOPD }, function (st) {
+	t.test('not supported', { skip: !!gOPD }, function (st) {
 		st.notOk(gOPD, 'is falsy');
 
 		st.end();
Index: node_modules/braces/lib/constants.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/lib/constants.js b/node_modules/braces/lib/constants.js
--- a/node_modules/braces/lib/constants.js	
+++ b/node_modules/braces/lib/constants.js	
@@ -1,7 +1,7 @@
 'use strict';
 
 module.exports = {
-  MAX_LENGTH: 1024 * 64,
+  MAX_LENGTH: 10000,
 
   // Digits
   CHAR_0: '0', /* 0 */
Index: node_modules/pg-pool/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/README.md b/node_modules/pg-pool/README.md
--- a/node_modules/pg-pool/README.md	
+++ b/node_modules/pg-pool/README.md	
@@ -15,17 +15,17 @@
 to use pg-pool you must first create an instance of a pool
 
 ```js
-var Pool = require('pg-pool')
+const Pool = require('pg-pool')
 
 // by default the pool uses the same
 // configuration as whatever `pg` version you have installed
-var pool = new Pool()
+const pool = new Pool()
 
 // you can pass properties to the pool
 // these properties are passed unchanged to both the node-postgres Client constructor
 // and the node-pool (https://github.com/coopernurse/node-pool) constructor
 // allowing you to fully configure the behavior of both
-var pool2 = new Pool({
+const pool2 = new Pool({
   database: 'postgres',
   user: 'brianc',
   password: 'secret!',
@@ -37,14 +37,14 @@
   maxUses: 7500, // close (and replace) a connection after it has been used 7500 times (see below for discussion)
 })
 
-//you can supply a custom client constructor
-//if you want to use the native postgres client
-var NativeClient = require('pg').native.Client
-var nativePool = new Pool({ Client: NativeClient })
+// you can supply a custom client constructor
+// if you want to use the native postgres client
+const NativeClient = require('pg').native.Client
+const nativePool = new Pool({ Client: NativeClient })
 
-//you can even pool pg-native clients directly
-var PgNativeClient = require('pg-native')
-var pgNativePool = new Pool({ Client: PgNativeClient })
+// you can even pool pg-native clients directly
+const PgNativeClient = require('pg-native')
+const pgNativePool = new Pool({ Client: PgNativeClient })
 ```
 
 ##### Note:
@@ -86,7 +86,7 @@
 pg-pool supports a fully promise-based api for acquiring clients
 
 ```js
-var pool = new Pool()
+const pool = new Pool()
 pool.connect().then(client => {
   client.query('select $1::text as name', ['pg-pool']).then(res => {
     client.release()
@@ -106,10 +106,10 @@
 ```js
 // with async/await
 (async () => {
-  var pool = new Pool()
-  var client = await pool.connect()
+  const pool = new Pool()
+  const client = await pool.connect()
   try {
-    var result = await client.query('select $1::text as name', ['brianc'])
+    const result = await client.query('select $1::text as name', ['brianc'])
     console.log('hello from', result.rows[0])
   } finally {
     client.release()
@@ -118,9 +118,9 @@
 
 // with co
 co(function * () {
-  var client = yield pool.connect()
+  const client = yield pool.connect()
   try {
-    var result = yield client.query('select $1::text as name', ['brianc'])
+    const result = yield client.query('select $1::text as name', ['brianc'])
     console.log('hello from', result.rows[0])
   } finally {
     client.release()
@@ -133,16 +133,16 @@
 because its so common to just run a query and return the client to the pool afterward pg-pool has this built-in:
 
 ```js
-var pool = new Pool()
-var time = await pool.query('SELECT NOW()')
-var name = await pool.query('select $1::text as name', ['brianc'])
+const pool = new Pool()
+const time = await pool.query('SELECT NOW()')
+const name = await pool.query('select $1::text as name', ['brianc'])
 console.log(name.rows[0].name, 'says hello at', time.rows[0].now)
 ```
 
 you can also use a callback here if you'd like:
 
 ```js
-var pool = new Pool()
+const pool = new Pool()
 pool.query('SELECT $1::text as name', ['brianc'], function (err, res) {
   console.log(res.rows[0].name) // brianc
 })
@@ -158,7 +158,7 @@
 pg-pool still and will always support the traditional callback api for acquiring a client.  This is the exact API node-postgres has shipped with for years:
 
 ```js
-var pool = new Pool()
+const pool = new Pool()
 pool.connect((err, client, done) => {
   if (err) return done(err)
 
@@ -178,8 +178,8 @@
 will shutdown gracefully.  If you don't want to wait for the timeout you can end the pool as follows:
 
 ```js
-var pool = new Pool()
-var client = await pool.connect()
+const pool = new Pool()
+const client = await pool.connect()
 console.log(await client.query('select now()'))
 client.release()
 await pool.end()
@@ -194,7 +194,7 @@
 
 // correct usage: create the pool and let it live
 // 'globally' here, controlling access to it through exported methods
-var pool = new pg.Pool()
+const pool = new pg.Pool()
 
 // this is the right way to export the query method
 module.exports.query = (text, values) => {
@@ -208,7 +208,7 @@
   // every time we called 'connect' to get a new client?
   // that's a bad thing & results in creating an unbounded
   // number of pools & therefore connections
-  var aPool = new pg.Pool()
+  const aPool = new pg.Pool()
   return aPool.connect()
 }
 ```
@@ -245,7 +245,7 @@
 const Pool = require('pg-pool')
 const pool = new Pool()
 
-var count = 0
+const count = 0
 
 pool.on('connect', client => {
   client.count = count++
@@ -265,27 +265,27 @@
 
 #### acquire
 
-Fired whenever the a client is acquired from the pool
+Fired whenever a client is acquired from the pool
 
 Example:
 
 This allows you to count the number of clients which have ever been acquired from the pool.
 
 ```js
-var Pool = require('pg-pool')
-var pool = new Pool()
+const Pool = require('pg-pool')
+const pool = new Pool()
 
-var acquireCount = 0
+const acquireCount = 0
 pool.on('acquire', function (client) {
   acquireCount++
 })
 
-var connectCount = 0
+const connectCount = 0
 pool.on('connect', function () {
   connectCount++
 })
 
-for (var i = 0; i < 200; i++) {
+for (let i = 0; i < 200; i++) {
   pool.query('SELECT NOW()')
 }
 
@@ -324,7 +324,7 @@
 You can use any other promise implementation you'd like.  The pool also allows you to configure the promise implementation on a per-pool level:
 
 ```js
-var bluebirdPool = new Pool({
+const bluebirdPool = new Pool({
   Promise: require('bluebird')
 })
 ```
Index: node_modules/pg-protocol/dist/buffer-reader.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/buffer-reader.js b/node_modules/pg-protocol/dist/buffer-reader.js
--- a/node_modules/pg-protocol/dist/buffer-reader.js	
+++ b/node_modules/pg-protocol/dist/buffer-reader.js	
@@ -28,6 +28,11 @@
         this.offset += 4;
         return result;
     }
+    uint32() {
+        const result = this.buffer.readUInt32BE(this.offset);
+        this.offset += 4;
+        return result;
+    }
     string(length) {
         const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);
         this.offset += length;
@@ -36,6 +41,7 @@
     cstring() {
         const start = this.offset;
         let end = start;
+        // eslint-disable-next-line no-empty
         while (this.buffer[end++] !== 0) { }
         this.offset = end;
         return this.buffer.toString(this.encoding, start, end - 1);
Index: node_modules/postgresql-client/cjs/data-types/point-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/point-type.js b/node_modules/postgresql-client/cjs/data-types/point-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/point-type.js	
+++ /dev/null	
@@ -1,39 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayPointType = exports.PointType = void 0;
-const constants_js_1 = require("../constants.js");
-const POINT_PATTERN1 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\)$/;
-const POINT_PATTERN2 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-exports.PointType = {
-    name: 'point',
-    oid: constants_js_1.DataTypeOIDs.point,
-    jsType: 'object',
-    parseBinary(v) {
-        return {
-            x: v.readDoubleBE(0),
-            y: v.readDoubleBE(8),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x);
-        buf.writeDoubleBE(v.y);
-    },
-    parseText(v) {
-        const m = v.match(POINT_PATTERN1) || v.match(POINT_PATTERN2);
-        if (!m)
-            return undefined;
-        return {
-            x: parseFloat(m[1]),
-            y: parseFloat(m[2]),
-        };
-    },
-    isType(v) {
-        return typeof v === 'object' && Object.keys(v).length === 2 && typeof v.x === 'number' && typeof v.y === 'number';
-    },
-};
-exports.ArrayPointType = {
-    ...exports.PointType,
-    name: '_point',
-    oid: constants_js_1.DataTypeOIDs._point,
-    elementsOID: constants_js_1.DataTypeOIDs.point,
-};
Index: node_modules/lightning-pool/esm/pool-request.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/pool-request.d.ts b/node_modules/lightning-pool/esm/pool-request.d.ts
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/pool-request.d.ts	
+++ /dev/null	
@@ -1,10 +0,0 @@
-import { Callback } from './definitions.js';
-import { Pool } from './pool.js';
-export declare class PoolRequest {
-    created: number;
-    callback: Callback;
-    timeoutHandle: any;
-    timedOut: boolean;
-    constructor(pool: Pool, callback?: Callback);
-    stopTimout(): void;
-}
Index: node_modules/pg/lib/stream.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/stream.js b/node_modules/pg/lib/stream.js
--- a/node_modules/pg/lib/stream.js	
+++ b/node_modules/pg/lib/stream.js	
@@ -1,28 +1,83 @@
-/**
- * Get a socket stream compatible with the current runtime environment.
- * @returns {Duplex}
- */
-module.exports.getStream = function getStream(ssl) {
-  const net = require('net')
-  if (typeof net.Socket === 'function') {
-    return new net.Socket()
-  } else {
-    const { CloudflareSocket } = require('pg-cloudflare')
-    return new CloudflareSocket(ssl)
-  }
-}
-
-/**
- * Get a TLS secured socket, compatible with the current environment,
- * using the socket and other settings given in `options`.
- * @returns {Duplex}
+const { getStream, getSecureStream } = getStreamFuncs()
+
+module.exports = {
+  /**
+   * Get a socket stream compatible with the current runtime environment.
+   * @returns {Duplex}
+   */
+  getStream,
+  /**
+   * Get a TLS secured socket, compatible with the current environment,
+   * using the socket and other settings given in `options`.
+   * @returns {Duplex}
+   */
+  getSecureStream,
+}
+
+/**
+ * The stream functions that work in Node.js
  */
-module.exports.getSecureStream = function getSecureStream(options) {
-  var tls = require('tls')
-  if (tls.connect) {
+function getNodejsStreamFuncs() {
+  function getStream(ssl) {
+    const net = require('net')
+    return new net.Socket()
+  }
+
+  function getSecureStream(options) {
+    const tls = require('tls')
     return tls.connect(options)
-  } else {
+  }
+  return {
+    getStream,
+    getSecureStream,
+  }
+}
+
+/**
+ * The stream functions that work in Cloudflare Workers
+ */
+function getCloudflareStreamFuncs() {
+  function getStream(ssl) {
+    const { CloudflareSocket } = require('pg-cloudflare')
+    return new CloudflareSocket(ssl)
+  }
+
+  function getSecureStream(options) {
     options.socket.startTls(options)
     return options.socket
   }
+  return {
+    getStream,
+    getSecureStream,
+  }
+}
+
+/**
+ * Are we running in a Cloudflare Worker?
+ *
+ * @returns true if the code is currently running inside a Cloudflare Worker.
+ */
+function isCloudflareRuntime() {
+  // Since 2022-03-21 the `global_navigator` compatibility flag is on for Cloudflare Workers
+  // which means that `navigator.userAgent` will be defined.
+  // eslint-disable-next-line no-undef
+  if (typeof navigator === 'object' && navigator !== null && typeof navigator.userAgent === 'string') {
+    // eslint-disable-next-line no-undef
+    return navigator.userAgent === 'Cloudflare-Workers'
+  }
+  // In case `navigator` or `navigator.userAgent` is not defined then try a more sneaky approach
+  if (typeof Response === 'function') {
+    const resp = new Response(null, { cf: { thing: true } })
+    if (typeof resp.cf === 'object' && resp.cf !== null && resp.cf.thing) {
+      return true
+    }
+  }
+  return false
+}
+
+function getStreamFuncs() {
+  if (isCloudflareRuntime()) {
+    return getCloudflareStreamFuncs()
+  }
+  return getNodejsStreamFuncs()
 }
Index: node_modules/postgresql-client/cjs/util/decode-binaryarray.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/decode-binaryarray.js b/node_modules/postgresql-client/cjs/util/decode-binaryarray.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/decode-binaryarray.js	
+++ /dev/null	
@@ -1,39 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.decodeBinaryArray = void 0;
-const buffer_reader_js_1 = require("../protocol/buffer-reader.js");
-function decodeBinaryArray(buf, decoder, options = {}) {
-    if (!buf.length)
-        return null;
-    const io = new buffer_reader_js_1.BufferReader(buf);
-    const ndims = io.readInt32BE();
-    io.readInt32BE(); // hasNulls
-    const elementOID = io.readInt32BE(); // element oid
-    if (ndims === 0)
-        return [];
-    const dims = [];
-    const readDim = (level) => {
-        const elemCount = dims[level];
-        const target = new Array(elemCount);
-        for (let i = 0; i < elemCount; i++) {
-            if (level < dims.length - 1) {
-                target[i] = readDim(level + 1);
-                continue;
-            }
-            const len = io.readInt32BE();
-            if (len === -1)
-                target[i] = null;
-            else {
-                const b = io.readBuffer(len);
-                target[i] = decoder(b, { ...options, elementOID });
-            }
-        }
-        return target;
-    };
-    for (let d = 0; d < ndims; d++) {
-        dims[d] = io.readInt32BE();
-        io.readInt32BE(); // LBound
-    }
-    return readDim(0);
-}
-exports.decodeBinaryArray = decodeBinaryArray;
Index: node_modules/semver/functions/major.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/major.js b/node_modules/semver/functions/major.js
--- a/node_modules/semver/functions/major.js	
+++ b/node_modules/semver/functions/major.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const major = (a, loose) => new SemVer(a, loose).major
 module.exports = major
Index: node_modules/nodemon/node_modules/ms/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/ms/index.js b/node_modules/nodemon/node_modules/ms/index.js
--- a/node_modules/nodemon/node_modules/ms/index.js	
+++ b/node_modules/nodemon/node_modules/ms/index.js	
@@ -23,7 +23,7 @@
  * @api public
  */
 
-module.exports = function(val, options) {
+module.exports = function (val, options) {
   options = options || {};
   var type = typeof val;
   if (type === 'string' && val.length > 0) {
Index: node_modules/power-tasks/esm/task-queue.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/esm/task-queue.js b/node_modules/power-tasks/esm/task-queue.js
--- a/node_modules/power-tasks/esm/task-queue.js	
+++ b/node_modules/power-tasks/esm/task-queue.js	
@@ -1,6 +1,6 @@
-import { AsyncEventEmitter } from 'strict-typed-events';
-import DoublyLinked from 'doublylinked';
-import { Task } from './task.js';
+import DoublyLinked from "doublylinked";
+import { AsyncEventEmitter } from "strict-typed-events";
+import { Task } from "./task.js";
 export class TaskQueue extends AsyncEventEmitter {
     constructor(options) {
         super();
@@ -30,20 +30,20 @@
         setImmediate(() => this._pulse());
     }
     clearQueue() {
-        this._queue.forEach(task => task.abort());
+        this._queue.forEach((task) => task.abort());
         this._queue = new DoublyLinked();
     }
     abortAll() {
         if (!this.size)
             return;
         this.clearQueue();
-        this._running.forEach(task => task.abort());
+        this._running.forEach((task) => task.abort());
     }
     async wait() {
         if (!this.size)
             return Promise.resolve();
-        return new Promise(resolve => {
-            this.once('finish', resolve);
+        return new Promise((resolve) => {
+            this.once("finish", resolve);
         });
     }
     enqueuePrepend(task) {
@@ -56,14 +56,14 @@
         if (this.maxQueue && this.size >= this.maxQueue)
             throw new Error(`Queue limit (${this.maxQueue}) exceeded`);
         const taskInstance = task instanceof Task ? task : new Task(task);
-        Object.defineProperty(taskInstance, '_isManaged', {
+        Object.defineProperty(taskInstance, "_isManaged", {
             configurable: false,
             writable: false,
             enumerable: false,
-            value: true
+            value: true,
         });
-        taskInstance.once('error', (...args) => this.emitAsync('error', ...args));
-        this.emit('enqueue', taskInstance);
+        taskInstance.once("error", (...args) => this.emitAsync("error", ...args));
+        this.emit("enqueue", taskInstance);
         if (prepend)
             this._queue.unshift(taskInstance);
         else
@@ -79,10 +79,10 @@
             if (!task)
                 return;
             this._running.add(task);
-            task.prependOnceListener('finish', () => {
+            task.prependOnceListener("finish", () => {
                 this._running.delete(task);
                 if (!(this._running.size || this._queue.length))
-                    return this.emit('finish');
+                    return this.emit("finish");
                 this._pulse();
             });
             task.start();
Index: node_modules/path-to-regexp/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/path-to-regexp/index.js b/node_modules/path-to-regexp/index.js
--- a/node_modules/path-to-regexp/index.js	
+++ b/node_modules/path-to-regexp/index.js	
@@ -1,13 +1,13 @@
 /**
- * Expose `pathtoRegexp`.
+ * Expose `pathToRegexp`.
  */
 
-module.exports = pathtoRegexp;
+module.exports = pathToRegexp;
 
 /**
  * Match matching groups in a regular expression.
  */
-var MATCHING_GROUP_REGEXP = /\((?!\?)/g;
+var MATCHING_GROUP_REGEXP = /\\.|\((?:\?<(.*?)>)?(?!\?)/g;
 
 /**
  * Normalize the given path string,
@@ -25,22 +25,27 @@
  * @api private
  */
 
-function pathtoRegexp(path, keys, options) {
+function pathToRegexp(path, keys, options) {
   options = options || {};
   keys = keys || [];
   var strict = options.strict;
   var end = options.end !== false;
   var flags = options.sensitive ? '' : 'i';
+  var lookahead = options.lookahead !== false;
   var extraOffset = 0;
   var keysOffset = keys.length;
   var i = 0;
   var name = 0;
+  var pos = 0;
+  var backtrack = '';
   var m;
 
   if (path instanceof RegExp) {
     while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
+      if (m[0][0] === '\\') continue;
+
       keys.push({
-        name: name++,
+        name: m[1] || name++,
         optional: false,
         offset: m.index
       });
@@ -54,20 +59,57 @@
     // the same keys and options instance into every generation to get
     // consistent matching groups before we join the sources together.
     path = path.map(function (value) {
-      return pathtoRegexp(value, keys, options).source;
+      return pathToRegexp(value, keys, options).source;
     });
 
-    return new RegExp('(?:' + path.join('|') + ')', flags);
+    return new RegExp(path.join('|'), flags);
   }
+
+  if (typeof path !== 'string') {
+    throw new TypeError('path must be a string, array of strings, or regular expression');
+  }
+
+  path = path.replace(
+    /\\.|(\/)?(\.)?:(\w+)(\(.*?\))?(\*)?(\?)?|[.*]|\/\(/g,
+    function (match, slash, format, key, capture, star, optional, offset) {
+      if (match[0] === '\\') {
+        backtrack += match;
+        pos += 2;
+        return match;
+      }
 
-  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
-    .replace(/\/\(/g, '/(?:')
-    .replace(/([\/\.])/g, '\\$1')
-    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
+      if (match === '.') {
+        backtrack += '\\.';
+        extraOffset += 1;
+        pos += 1;
+        return '\\.';
+      }
+
+      if (slash || format) {
+        backtrack = '';
+      } else {
+        backtrack += path.slice(pos, offset);
+      }
+
+      pos = offset + match.length;
+
+      if (match === '*') {
+        extraOffset += 3;
+        return '(.*)';
+      }
+
+      if (match === '/(') {
+        backtrack += '/';
+        extraOffset += 2;
+        return '/(?:';
+      }
+
       slash = slash || '';
-      format = format || '';
-      capture = capture || '([^\\/' + format + ']+?)';
+      format = format ? '\\.' : '';
       optional = optional || '';
+      capture = capture ?
+        capture.replace(/\\.|\*/, function (m) { return m === '*' ? '(.*)' : m; }) :
+        (backtrack ? '((?:(?!/|' + backtrack + ').)+?)' : '([^/' + format + ']+?)');
 
       keys.push({
         name: key,
@@ -75,41 +117,20 @@
         offset: offset + extraOffset
       });
 
-      var result = ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + format + (optional ? slash : '') + capture
-        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
+      var result = '(?:'
+        + format + slash + capture
+        + (star ? '((?:[/' + format + '].+?)?)' : '')
         + ')'
         + optional;
 
       extraOffset += result.length - match.length;
 
       return result;
-    })
-    .replace(/\*/g, function (star, index) {
-      var len = keys.length
-
-      while (len-- > keysOffset && keys[len].offset > index) {
-        keys[len].offset += 3; // Replacement length minus asterisk length.
-      }
-
-      return '(.*)';
     });
 
   // This is a workaround for handling unnamed matching groups.
   while (m = MATCHING_GROUP_REGEXP.exec(path)) {
-    var escapeCount = 0;
-    var index = m.index;
-
-    while (path.charAt(--index) === '\\') {
-      escapeCount++;
-    }
-
-    // It's possible to escape the bracket.
-    if (escapeCount % 2 === 1) {
-      continue;
-    }
+    if (m[0][0] === '\\') continue;
 
     if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
       keys.splice(keysOffset + i, 0, {
@@ -122,8 +143,14 @@
     i++;
   }
 
+  path += strict ? '' : path[path.length - 1] === '/' ? '?' : '/?';
+
   // If the path is non-ending, match until the end or a slash.
-  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));
+  if (end) {
+    path += '$';
+  } else if (path[path.length - 1] !== '/') {
+    path += lookahead ? '(?=/|$)' : '(?:/|$)';
+  }
 
-  return new RegExp(path, flags);
+  return new RegExp('^' + path, flags);
 };
Index: node_modules/nodemon/node_modules/debug/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/debug/README.md b/node_modules/nodemon/node_modules/debug/README.md
--- a/node_modules/nodemon/node_modules/debug/README.md	
+++ b/node_modules/nodemon/node_modules/debug/README.md	
@@ -1,5 +1,5 @@
 # debug
-[![Build Status](https://travis-ci.org/debug-js/debug.svg?branch=master)](https://travis-ci.org/debug-js/debug)  [![Coverage Status](https://coveralls.io/repos/github/debug-js/debug/badge.svg?branch=master)](https://coveralls.io/github/debug-js/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers)
+[![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers)
 [![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)
 
 <img width="647" src="https://user-images.githubusercontent.com/71256/29091486-fa38524c-7c37-11e7-895f-e7ec8e1039b6.png">
Index: node_modules/call-bind/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/CHANGELOG.md b/node_modules/call-bind/CHANGELOG.md
deleted file mode 100644
--- a/node_modules/call-bind/CHANGELOG.md	
+++ /dev/null	
@@ -1,93 +0,0 @@
-# Changelog
-
-All notable changes to this project will be documented in this file.
-
-The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
-and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
-
-## [v1.0.7](https://github.com/ljharb/call-bind/compare/v1.0.6...v1.0.7) - 2024-02-12
-
-### Commits
-
-- [Refactor] use `es-define-property` [`09b76a0`](https://github.com/ljharb/call-bind/commit/09b76a01634440461d44a80c9924ec4b500f3b03)
-- [Deps] update `get-intrinsic`, `set-function-length` [`ad5136d`](https://github.com/ljharb/call-bind/commit/ad5136ddda2a45c590959829ad3dce0c9f4e3590)
-
-## [v1.0.6](https://github.com/ljharb/call-bind/compare/v1.0.5...v1.0.6) - 2024-02-05
-
-### Commits
-
-- [Dev Deps] update `aud`, `npmignore`, `tape` [`d564d5c`](https://github.com/ljharb/call-bind/commit/d564d5ce3e06a19df4d499c77f8d1a9da44e77aa)
-- [Deps] update `get-intrinsic`, `set-function-length` [`cfc2bdc`](https://github.com/ljharb/call-bind/commit/cfc2bdca7b633df0e0e689e6b637f668f1c6792e)
-- [Refactor] use `es-errors`, so things that only need those do not need `get-intrinsic` [`64cd289`](https://github.com/ljharb/call-bind/commit/64cd289ae5862c250a4ca80aa8d461047c166af5)
-- [meta] add missing `engines.node` [`32a4038`](https://github.com/ljharb/call-bind/commit/32a4038857b62179f7f9b7b3df2c5260036be582)
-
-## [v1.0.5](https://github.com/ljharb/call-bind/compare/v1.0.4...v1.0.5) - 2023-10-19
-
-### Commits
-
-- [Fix] throw an error on non-functions as early as possible [`f262408`](https://github.com/ljharb/call-bind/commit/f262408f822c840fbc268080f3ad7c429611066d)
-- [Deps] update `set-function-length` [`3fff271`](https://github.com/ljharb/call-bind/commit/3fff27145a1e3a76a5b74f1d7c3c43d0fa3b9871)
-
-## [v1.0.4](https://github.com/ljharb/call-bind/compare/v1.0.3...v1.0.4) - 2023-10-19
-
-## [v1.0.3](https://github.com/ljharb/call-bind/compare/v1.0.2...v1.0.3) - 2023-10-19
-
-### Commits
-
-- [actions] reuse common workflows [`a994df6`](https://github.com/ljharb/call-bind/commit/a994df69f401f4bf735a4ccd77029b85d1549453)
-- [meta] use `npmignore` to autogenerate an npmignore file [`eef3ef2`](https://github.com/ljharb/call-bind/commit/eef3ef21e1f002790837fedb8af2679c761fbdf5)
-- [readme] flesh out content [`1845ccf`](https://github.com/ljharb/call-bind/commit/1845ccfd9976a607884cfc7157c93192cc16cf22)
-- [actions] use `node/install` instead of `node/run`; use `codecov` action [`5b47d53`](https://github.com/ljharb/call-bind/commit/5b47d53d2fd74af5ea0a44f1d51e503cd42f7a90)
-- [Refactor] use `set-function-length` [`a0e165c`](https://github.com/ljharb/call-bind/commit/a0e165c5dc61db781cbc919b586b1c2b8da0b150)
-- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`9c50103`](https://github.com/ljharb/call-bind/commit/9c50103f44137279a817317cf6cc421a658f85b4)
-- [meta] simplify "exports" [`019c6d0`](https://github.com/ljharb/call-bind/commit/019c6d06b0e1246ceed8e579f57e44441cbbf6d9)
-- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `auto-changelog`, `safe-publish-latest`, `tape` [`23bd718`](https://github.com/ljharb/call-bind/commit/23bd718a288d3b03042062b4ef5153b3cea83f11)
-- [actions] update codecov uploader [`62552d7`](https://github.com/ljharb/call-bind/commit/62552d79cc79e05825e99aaba134ae5b37f33da5)
-- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `auto-changelog`, `tape` [`ec81665`](https://github.com/ljharb/call-bind/commit/ec81665b300f87eabff597afdc8b8092adfa7afd)
-- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `safe-publish-latest`, `tape` [`35d67fc`](https://github.com/ljharb/call-bind/commit/35d67fcea883e686650f736f61da5ddca2592de8)
-- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `tape` [`0266d8d`](https://github.com/ljharb/call-bind/commit/0266d8d2a45086a922db366d0c2932fa463662ff)
-- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`43a5b28`](https://github.com/ljharb/call-bind/commit/43a5b28a444e710e1bbf92adb8afb5cf7523a223)
-- [Deps] update `define-data-property`, `function-bind`, `get-intrinsic` [`780eb36`](https://github.com/ljharb/call-bind/commit/780eb36552514f8cc99c70821ce698697c2726a5)
-- [Dev Deps] update `aud`, `tape` [`90d50ad`](https://github.com/ljharb/call-bind/commit/90d50ad03b061e0268b3380b0065fcaec183dc05)
-- [meta] use `prepublishOnly` script for npm 7+ [`44c5433`](https://github.com/ljharb/call-bind/commit/44c5433b7980e02b4870007046407cf6fc543329)
-- [Deps] update `get-intrinsic` [`86bfbfc`](https://github.com/ljharb/call-bind/commit/86bfbfcf34afdc6eabc93ce3d408548d0e27d958)
-- [Deps] update `get-intrinsic` [`5c53354`](https://github.com/ljharb/call-bind/commit/5c5335489be0294c18cd7a8bb6e08226ee019ff5)
-- [actions] update checkout action [`4c393a8`](https://github.com/ljharb/call-bind/commit/4c393a8173b3c8e5b30d5b3297b3b94d48bf87f3)
-- [Deps] update `get-intrinsic` [`4e70bde`](https://github.com/ljharb/call-bind/commit/4e70bdec0626acb11616d66250fc14565e716e91)
-- [Deps] update `get-intrinsic` [`55ae803`](https://github.com/ljharb/call-bind/commit/55ae803a920bd93c369cd798c20de31f91e9fc60)
-
-## [v1.0.2](https://github.com/ljharb/call-bind/compare/v1.0.1...v1.0.2) - 2021-01-11
-
-### Commits
-
-- [Fix] properly include the receiver in the bound length [`dbae7bc`](https://github.com/ljharb/call-bind/commit/dbae7bc676c079a0d33c0a43e9ef92cb7b01345d)
-
-## [v1.0.1](https://github.com/ljharb/call-bind/compare/v1.0.0...v1.0.1) - 2021-01-08
-
-### Commits
-
-- [Tests] migrate tests to Github Actions [`b6db284`](https://github.com/ljharb/call-bind/commit/b6db284c36f8ccd195b88a6764fe84b7223a0da1)
-- [meta] do not publish github action workflow files [`ec7fe46`](https://github.com/ljharb/call-bind/commit/ec7fe46e60cfa4764ee943d2755f5e5a366e578e)
-- [Fix] preserve original function’s length when possible [`adbceaa`](https://github.com/ljharb/call-bind/commit/adbceaa3cac4b41ea78bb19d7ccdbaaf7e0bdadb)
-- [Tests] gather coverage data on every job [`d69e23c`](https://github.com/ljharb/call-bind/commit/d69e23cc65f101ba1d4c19bb07fa8eb0ec624be8)
-- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `tape` [`2fd3586`](https://github.com/ljharb/call-bind/commit/2fd3586c5d47b335364c14293114c6b625ae1f71)
-- [Deps] update `get-intrinsic` [`f23e931`](https://github.com/ljharb/call-bind/commit/f23e9318cc271c2add8bb38cfded85ee7baf8eee)
-- [Deps] update `get-intrinsic` [`72d9f44`](https://github.com/ljharb/call-bind/commit/72d9f44e184465ba8dd3fb48260bbcff234985f2)
-- [meta] fix FUNDING.yml [`e723573`](https://github.com/ljharb/call-bind/commit/e723573438c5a68dcec31fb5d96ea6b7e4a93be8)
-- [eslint] ignore coverage output [`15e76d2`](https://github.com/ljharb/call-bind/commit/15e76d28a5f43e504696401e5b31ebb78ee1b532)
-- [meta] add Automatic Rebase and Require Allow Edits workflows [`8fa4dab`](https://github.com/ljharb/call-bind/commit/8fa4dabb23ba3dd7bb92c9571c1241c08b56e4b6)
-
-## v1.0.0 - 2020-10-30
-
-### Commits
-
-- Initial commit [`306cf98`](https://github.com/ljharb/call-bind/commit/306cf98c7ec9e7ef66b653ec152277ac1381eb50)
-- Tests [`e10d0bb`](https://github.com/ljharb/call-bind/commit/e10d0bbdadc7a10ecedc9a1c035112d3e368b8df)
-- Implementation [`43852ed`](https://github.com/ljharb/call-bind/commit/43852eda0f187327b7fad2423ca972149a52bd65)
-- npm init [`408f860`](https://github.com/ljharb/call-bind/commit/408f860b773a2f610805fd3613d0d71bac1b6249)
-- [meta] add Automatic Rebase and Require Allow Edits workflows [`fb349b2`](https://github.com/ljharb/call-bind/commit/fb349b2e48defbec8b5ec8a8395cc8f69f220b13)
-- [meta] add `auto-changelog` [`c4001fc`](https://github.com/ljharb/call-bind/commit/c4001fc43031799ef908211c98d3b0fb2b60fde4)
-- [meta] add "funding"; create `FUNDING.yml` [`d4d6d29`](https://github.com/ljharb/call-bind/commit/d4d6d2974a14bc2e98830468eda7fe6d6a776717)
-- [Tests] add `npm run lint` [`dedfb98`](https://github.com/ljharb/call-bind/commit/dedfb98bd0ecefb08ddb9a94061bd10cde4332af)
-- Only apps should have lockfiles [`54ac776`](https://github.com/ljharb/call-bind/commit/54ac77653db45a7361dc153d2f478e743f110650)
-- [meta] add `safe-publish-latest` [`9ea8e43`](https://github.com/ljharb/call-bind/commit/9ea8e435b950ce9b705559cd651039f9bf40140f)
Index: node_modules/cookie-parser/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/cookie-parser/HISTORY.md b/node_modules/cookie-parser/HISTORY.md
--- a/node_modules/cookie-parser/HISTORY.md	
+++ b/node_modules/cookie-parser/HISTORY.md	
@@ -1,3 +1,27 @@
+1.4.7 / 2024-10-08
+==========
+
+  * deps: cookie@0.7.2
+    - Fix object assignment of `hasOwnProperty`
+  * deps: cookie@0.7.1
+    - Allow leading dot for domain
+      - Although not permitted in the spec, some users expect this to work and user agents ignore the leading dot according to spec
+    - Add fast path for `serialize` without options, use `obj.hasOwnProperty` when parsing
+  * deps: cookie@0.7.0
+    - perf: parse cookies ~10% faster
+    - fix: narrow the validation of cookies to match RFC6265
+    - fix: add `main` to `package.json` for rspack
+  * deps: cookie@0.6.0
+    - Add `partitioned` option
+  * deps: cookie@0.5.0
+    - Add `priority` option
+    - Fix `expires` option to reject invalid dates
+    - pref: improve default decode speed
+    - pref: remove slow string split in parse
+  * deps: cookie@0.4.2
+    - pref: read value only when assigning in parse
+    - pref: remove unnecessary regexp in parse
+
 1.4.6 / 2021-11-16
 ==================
 
Index: node_modules/semver/functions/lt.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/lt.js b/node_modules/semver/functions/lt.js
--- a/node_modules/semver/functions/lt.js	
+++ b/node_modules/semver/functions/lt.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const lt = (a, b, loose) => compare(a, b, loose) < 0
 module.exports = lt
Index: node_modules/postgresql-client/cjs/data-types/int2-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/int2-type.js b/node_modules/postgresql-client/cjs/data-types/int2-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/int2-type.js	
+++ /dev/null	
@@ -1,26 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayInt2Type = exports.Int2Type = void 0;
-const constants_js_1 = require("../constants.js");
-const fast_parseint_js_1 = require("../util/fast-parseint.js");
-exports.Int2Type = {
-    name: 'int2',
-    oid: constants_js_1.DataTypeOIDs.int2,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readInt16BE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeInt16BE((0, fast_parseint_js_1.fastParseInt)(v));
-    },
-    parseText: fast_parseint_js_1.fastParseInt,
-    isType(v) {
-        return typeof v === 'number' && Number.isInteger(v) && v >= -32768 && v <= 32767;
-    },
-};
-exports.ArrayInt2Type = {
-    ...exports.Int2Type,
-    name: '_int2',
-    oid: constants_js_1.DataTypeOIDs._int2,
-    elementsOID: constants_js_1.DataTypeOIDs.int2,
-};
Index: node_modules/postgresql-client/typings/data-types/timestamp-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/timestamp-type.d.ts b/node_modules/postgresql-client/typings/data-types/timestamp-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/timestamp-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const TimestampType: DataType;
-export declare const ArrayTimestampType: DataType;
Index: node_modules/semver/classes/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/classes/index.js b/node_modules/semver/classes/index.js
--- a/node_modules/semver/classes/index.js	
+++ b/node_modules/semver/classes/index.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 module.exports = {
   SemVer: require('./semver.js'),
   Range: require('./range.js'),
Index: node_modules/pg-cloudflare/dist/index.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-cloudflare/dist/index.js.map b/node_modules/pg-cloudflare/dist/index.js.map
--- a/node_modules/pg-cloudflare/dist/index.js.map	
+++ b/node_modules/pg-cloudflare/dist/index.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
Index: node_modules/ts-gems/lib/logical.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/logical.d.ts b/node_modules/ts-gems/lib/logical.d.ts
--- a/node_modules/ts-gems/lib/logical.d.ts	
+++ b/node_modules/ts-gems/lib/logical.d.ts	
@@ -1,4 +1,4 @@
-import { IfNever } from './type-check';
+import { IfNever } from './type-check.js';
 
 export type And<T1, T2, T3 = true, T4 = true, T5 = true, T6 = true> =
   IfNever<Exclude<T1, undefined | null | false>> extends true
Index: node_modules/has-proto/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/README.md b/node_modules/has-proto/README.md
deleted file mode 100644
--- a/node_modules/has-proto/README.md	
+++ /dev/null	
@@ -1,38 +0,0 @@
-# has-proto <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
-
-[![github actions][actions-image]][actions-url]
-[![coverage][codecov-image]][codecov-url]
-[![License][license-image]][license-url]
-[![Downloads][downloads-image]][downloads-url]
-
-[![npm badge][npm-badge-png]][package-url]
-
-Does this environment have the ability to set the [[Prototype]] of an object on creation with `__proto__`?
-
-## Example
-
-```js
-var hasProto = require('has-proto');
-var assert = require('assert');
-
-assert.equal(typeof hasProto(), 'boolean');
-```
-
-## Tests
-Simply clone the repo, `npm install`, and run `npm test`
-
-[package-url]: https://npmjs.org/package/has-proto
-[npm-version-svg]: https://versionbadg.es/inspect-js/has-proto.svg
-[deps-svg]: https://david-dm.org/inspect-js/has-proto.svg
-[deps-url]: https://david-dm.org/inspect-js/has-proto
-[dev-deps-svg]: https://david-dm.org/inspect-js/has-proto/dev-status.svg
-[dev-deps-url]: https://david-dm.org/inspect-js/has-proto#info=devDependencies
-[npm-badge-png]: https://nodei.co/npm/has-proto.png?downloads=true&stars=true
-[license-image]: https://img.shields.io/npm/l/has-proto.svg
-[license-url]: LICENSE
-[downloads-image]: https://img.shields.io/npm/dm/has-proto.svg
-[downloads-url]: https://npm-stat.com/charts.html?package=has-proto
-[codecov-image]: https://codecov.io/gh/inspect-js/has-proto/branch/main/graphs/badge.svg
-[codecov-url]: https://app.codecov.io/gh/inspect-js/has-proto/
-[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/inspect-js/has-proto
-[actions-url]: https://github.com/inspect-js/has-proto/actions
Index: node_modules/semver/ranges/valid.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/valid.js b/node_modules/semver/ranges/valid.js
--- a/node_modules/semver/ranges/valid.js	
+++ b/node_modules/semver/ranges/valid.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const Range = require('../classes/range')
 const validRange = (range, options) => {
   try {
Index: node_modules/postgresql-client/typings/util/parse-row.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/parse-row.d.ts b/node_modules/postgresql-client/typings/util/parse-row.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/parse-row.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import { DataMappingOptions } from '../interfaces/data-mapping-options.js';
-import { AnyParseFunction } from '../types.js';
-export declare function parseRow(parsers: AnyParseFunction[], row: any[], options: DataMappingOptions): void;
Index: node_modules/postgresql-client/node_modules/postgres-bytea/decode.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/decode.js b/node_modules/postgresql-client/node_modules/postgres-bytea/decode.js
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/decode.js	
+++ /dev/null	
@@ -1,40 +0,0 @@
-'use strict'
-
-module.exports = byteaToBinary
-
-function byteaToBinary (input) {
-  if (/^\\x/.test(input)) {
-    return byteaHexFormatToBinary(input)
-  }
-  return byteaEscapeFormatToBinary(input)
-}
-
-function byteaHexFormatToBinary (input) {
-  return Buffer.from(input.substr(2), 'hex')
-}
-
-function byteaEscapeFormatToBinary (input) {
-  let output = ''
-  let i = 0
-  while (i < input.length) {
-    if (input[i] !== '\\') {
-      output += input[i]
-      ++i
-    } else {
-      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {
-        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))
-        i += 4
-      } else {
-        let backslashes = 1
-        while (i + backslashes < input.length && input[i + backslashes] === '\\') {
-          backslashes++
-        }
-        for (let k = 0; k < Math.floor(backslashes / 2); ++k) {
-          output += '\\'
-        }
-        i += Math.floor(backslashes / 2) * 2
-      }
-    }
-  }
-  return Buffer.from(output, 'binary')
-}
Index: TODO.MD
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TODO.MD b/TODO.MD
--- a/TODO.MD	
+++ b/TODO.MD	
@@ -21,6 +21,8 @@
 
 ## add all controllers for models
 
+####  TODO: ADD MOVE DATABASE CONNECTION DETAILS TO .ENV FILE
+
 - user
 - reservation
 - rooms
Index: node_modules/semver/functions/compare-loose.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/compare-loose.js b/node_modules/semver/functions/compare-loose.js
--- a/node_modules/semver/functions/compare-loose.js	
+++ b/node_modules/semver/functions/compare-loose.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const compareLoose = (a, b) => compare(a, b, true)
 module.exports = compareLoose
Index: node_modules/pg-pool/test/error-handling.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/error-handling.js b/node_modules/pg-pool/test/error-handling.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/error-handling.js	
+++ /dev/null	
@@ -1,260 +0,0 @@
-'use strict'
-const net = require('net')
-const co = require('co')
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('pool error handling', function () {
-  it('Should complete these queries without dying', function (done) {
-    const pool = new Pool()
-    let errors = 0
-    let shouldGet = 0
-    function runErrorQuery() {
-      shouldGet++
-      return new Promise(function (resolve, reject) {
-        pool
-          .query("SELECT 'asd'+1 ")
-          .then(function (res) {
-            reject(res) // this should always error
-          })
-          .catch(function (err) {
-            errors++
-            resolve(err)
-          })
-      })
-    }
-    const ps = []
-    for (let i = 0; i < 5; i++) {
-      ps.push(runErrorQuery())
-    }
-    Promise.all(ps).then(function () {
-      expect(shouldGet).to.eql(errors)
-      pool.end(done)
-    })
-  })
-
-  it('Catches errors in client.query', async function () {
-    let caught = false
-    const pool = new Pool()
-    try {
-      await pool.query(null)
-    } catch (e) {
-      caught = true
-    }
-    pool.end()
-    expect(caught).to.be(true)
-  })
-
-  describe('calling release more than once', () => {
-    it(
-      'should throw each time',
-      co.wrap(function* () {
-        const pool = new Pool()
-        const client = yield pool.connect()
-        client.release()
-        expect(() => client.release()).to.throwError()
-        expect(() => client.release()).to.throwError()
-        return yield pool.end()
-      })
-    )
-
-    it('should throw each time with callbacks', function (done) {
-      const pool = new Pool()
-
-      pool.connect(function (err, client, clientDone) {
-        expect(err).not.to.be.an(Error)
-        clientDone()
-
-        expect(() => clientDone()).to.throwError()
-        expect(() => clientDone()).to.throwError()
-
-        pool.end(done)
-      })
-    })
-  })
-
-  describe('using an ended pool', () => {
-    it('rejects all additional promises', (done) => {
-      const pool = new Pool()
-      const promises = []
-      pool.end().then(() => {
-        const squash = (promise) => promise.catch((e) => 'okay!')
-        promises.push(squash(pool.connect()))
-        promises.push(squash(pool.query('SELECT NOW()')))
-        promises.push(squash(pool.end()))
-        Promise.all(promises).then((res) => {
-          expect(res).to.eql(['okay!', 'okay!', 'okay!'])
-          done()
-        })
-      })
-    })
-
-    it('returns an error on all additional callbacks', (done) => {
-      const pool = new Pool()
-      pool.end(() => {
-        pool.query('SELECT *', (err) => {
-          expect(err).to.be.an(Error)
-          pool.connect((err) => {
-            expect(err).to.be.an(Error)
-            pool.end((err) => {
-              expect(err).to.be.an(Error)
-              done()
-            })
-          })
-        })
-      })
-    })
-  })
-
-  describe('error from idle client', () => {
-    it(
-      'removes client from pool',
-      co.wrap(function* () {
-        const pool = new Pool()
-        const client = yield pool.connect()
-        expect(pool.totalCount).to.equal(1)
-        expect(pool.waitingCount).to.equal(0)
-        expect(pool.idleCount).to.equal(0)
-        client.release()
-        yield new Promise((resolve, reject) => {
-          process.nextTick(() => {
-            let poolError
-            pool.once('error', (err) => {
-              poolError = err
-            })
-
-            let clientError
-            client.once('error', (err) => {
-              clientError = err
-            })
-
-            client.emit('error', new Error('expected'))
-
-            expect(clientError.message).to.equal('expected')
-            expect(poolError.message).to.equal('expected')
-            expect(pool.idleCount).to.equal(0)
-            expect(pool.totalCount).to.equal(0)
-            pool.end().then(resolve, reject)
-          })
-        })
-      })
-    )
-  })
-
-  describe('error from in-use client', () => {
-    it(
-      'keeps the client in the pool',
-      co.wrap(function* () {
-        const pool = new Pool()
-        const client = yield pool.connect()
-        expect(pool.totalCount).to.equal(1)
-        expect(pool.waitingCount).to.equal(0)
-        expect(pool.idleCount).to.equal(0)
-
-        yield new Promise((resolve, reject) => {
-          process.nextTick(() => {
-            let poolError
-            pool.once('error', (err) => {
-              poolError = err
-            })
-
-            let clientError
-            client.once('error', (err) => {
-              clientError = err
-            })
-
-            client.emit('error', new Error('expected'))
-
-            expect(clientError.message).to.equal('expected')
-            expect(poolError).not.to.be.ok()
-            expect(pool.idleCount).to.equal(0)
-            expect(pool.totalCount).to.equal(1)
-            client.release()
-            pool.end().then(resolve, reject)
-          })
-        })
-      })
-    )
-  })
-
-  describe('passing a function to pool.query', () => {
-    it('calls back with error', (done) => {
-      const pool = new Pool()
-      console.log('passing fn to query')
-      pool.query((err) => {
-        expect(err).to.be.an(Error)
-        pool.end(done)
-      })
-    })
-  })
-
-  describe('pool with lots of errors', () => {
-    it(
-      'continues to work and provide new clients',
-      co.wrap(function* () {
-        const pool = new Pool({ max: 1 })
-        const errors = []
-        for (var i = 0; i < 20; i++) {
-          try {
-            yield pool.query('invalid sql')
-          } catch (err) {
-            errors.push(err)
-          }
-        }
-        expect(errors).to.have.length(20)
-        expect(pool.idleCount).to.equal(0)
-        expect(pool.query).to.be.a(Function)
-        const res = yield pool.query('SELECT $1::text as name', ['brianc'])
-        expect(res.rows).to.have.length(1)
-        expect(res.rows[0].name).to.equal('brianc')
-        return pool.end()
-      })
-    )
-  })
-
-  it('should continue with queued items after a connection failure', (done) => {
-    const closeServer = net
-      .createServer((socket) => {
-        socket.destroy()
-      })
-      .unref()
-
-    closeServer.listen(() => {
-      const pool = new Pool({ max: 1, port: closeServer.address().port, host: 'localhost' })
-      pool.connect((err) => {
-        expect(err).to.be.an(Error)
-        if (err.code) {
-          expect(err.code).to.be('ECONNRESET')
-        }
-      })
-      pool.connect((err) => {
-        expect(err).to.be.an(Error)
-        if (err.code) {
-          expect(err.code).to.be('ECONNRESET')
-        }
-        closeServer.close(() => {
-          pool.end(done)
-        })
-      })
-    })
-  })
-
-  it('handles post-checkout client failures in pool.query', (done) => {
-    const pool = new Pool({ max: 1 })
-    pool.on('error', () => {
-      // We double close the connection in this test, prevent exception caused by that
-    })
-    pool.query('SELECT pg_sleep(5)', [], (err) => {
-      expect(err).to.be.an(Error)
-      done()
-    })
-
-    setTimeout(() => {
-      pool._clients[0].end()
-    }, 1000)
-  })
-})
Index: node_modules/postgresql-client/cjs/protocol/backend.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/backend.js b/node_modules/postgresql-client/cjs/protocol/backend.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/backend.js	
+++ /dev/null	
@@ -1,256 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Backend = void 0;
-const buffer_reader_js_1 = require("./buffer-reader.js");
-const protocol_js_1 = require("./protocol.js");
-// 1 byte message type, 4 byte frame length
-const HEADER_LENGTH = 5;
-const ErrorFieldTypes = {
-    M: 'message',
-    S: 'severity',
-    V: 'severity',
-    C: 'code',
-    D: 'detail',
-    H: 'hint',
-    P: 'position',
-    p: 'internalPosition',
-    q: 'internalQuery',
-    W: 'where',
-    s: 'schema',
-    t: 'table',
-    c: 'column',
-    d: 'dataType',
-    n: 'constraint',
-    F: 'file',
-    L: 'line',
-    R: 'routine',
-};
-class Backend {
-    reset() {
-        this._buf = undefined;
-    }
-    parse(data, callback) {
-        if (this._buf) {
-            data = Buffer.concat([this._buf, data]);
-            this._buf = undefined;
-        }
-        const io = new buffer_reader_js_1.BufferReader(data);
-        let offsetBookmark;
-        while (io.length - io.offset >= HEADER_LENGTH) {
-            offsetBookmark = io.offset;
-            const code = io.readUInt8();
-            const len = io.readUInt32BE();
-            // Check if frame data not received yet
-            if (io.length - io.offset < len - 4) {
-                io.offset = offsetBookmark;
-                this._buf = io.readBuffer();
-                return;
-            }
-            const parser = MessageParsers[code];
-            const v = parser && parser(io, code, len);
-            callback(code, v);
-            // Set offset to next message
-            io.offset = offsetBookmark + len + 1;
-        }
-        if (io.offset < io.length)
-            this._buf = io.readBuffer(io.length - io.offset);
-    }
-}
-exports.Backend = Backend;
-const MessageParsers = {
-    [protocol_js_1.Protocol.BackendMessageCode.Authentication]: parseAuthentication,
-    [protocol_js_1.Protocol.BackendMessageCode.BackendKeyData]: parseBackendKeyData,
-    [protocol_js_1.Protocol.BackendMessageCode.CommandComplete]: parseCommandComplete,
-    [protocol_js_1.Protocol.BackendMessageCode.CopyData]: parseCopyData,
-    [protocol_js_1.Protocol.BackendMessageCode.CopyInResponse]: parseCopyResponse,
-    [protocol_js_1.Protocol.BackendMessageCode.CopyOutResponse]: parseCopyResponse,
-    [protocol_js_1.Protocol.BackendMessageCode.CopyBothResponse]: parseCopyResponse,
-    [protocol_js_1.Protocol.BackendMessageCode.DataRow]: parseDataRow,
-    [protocol_js_1.Protocol.BackendMessageCode.ErrorResponse]: parseErrorResponse,
-    [protocol_js_1.Protocol.BackendMessageCode.NoticeResponse]: parseErrorResponse,
-    [protocol_js_1.Protocol.BackendMessageCode.NotificationResponse]: parseNotificationResponse,
-    [protocol_js_1.Protocol.BackendMessageCode.FunctionCallResponse]: parseFunctionCallResponse,
-    [protocol_js_1.Protocol.BackendMessageCode.NegotiateProtocolVersion]: parseNegotiateProtocolVersion,
-    [protocol_js_1.Protocol.BackendMessageCode.ParameterDescription]: parseParameterDescription,
-    [protocol_js_1.Protocol.BackendMessageCode.ParameterStatus]: parseParameterStatus,
-    [protocol_js_1.Protocol.BackendMessageCode.ReadyForQuery]: parseReadyForQuery,
-    [protocol_js_1.Protocol.BackendMessageCode.RowDescription]: parseRowDescription,
-};
-function parseAuthentication(io, code, len) {
-    const kind = io.readUInt32BE();
-    switch (kind) {
-        case 0:
-            return; // AuthenticationOk
-        case 2:
-            return {
-                kind: 'KerberosV5',
-            };
-        case 3:
-            return {
-                kind: 'CleartextPassword',
-            };
-        case 5:
-            return {
-                kind: 'MD5Password',
-                salt: io.readBuffer(len - 8),
-            };
-        case 6:
-            return {
-                kind: 'SCMCredential',
-            };
-        case 7:
-            return {
-                kind: 'GSS',
-            };
-        case 9:
-            return {
-                kind: 'SSPI',
-            };
-        case 8:
-            return {
-                kind: 'GSSContinue',
-                data: io.readBuffer(len - 8),
-            };
-        case 10: {
-            const out = {
-                kind: 'SASL',
-                mechanisms: [],
-            };
-            let mechanism;
-            while ((mechanism = io.readCString())) {
-                out.mechanisms.push(mechanism);
-            }
-            return out;
-        }
-        case 11:
-            return {
-                kind: 'SASLContinue',
-                data: io.readLString(len - 8, 'utf8'),
-            };
-        case 12:
-            return {
-                kind: 'SASLFinal',
-                data: io.readLString(len - 8, 'utf8'),
-            };
-        default:
-            throw new Error(`Unknown authentication kind (${kind})`);
-    }
-}
-function parseBackendKeyData(io) {
-    return {
-        processID: io.readUInt32BE(),
-        secretKey: io.readUInt32BE(),
-    };
-}
-function parseCommandComplete(io) {
-    return {
-        command: io.readCString('utf8'),
-    };
-}
-function parseCopyData(io, code, len) {
-    return {
-        data: io.readBuffer(len - 4),
-    };
-}
-function parseCopyResponse(io) {
-    const out = {
-        overallFormat: io.readUInt8() === 0 ? protocol_js_1.Protocol.DataFormat.text : protocol_js_1.Protocol.DataFormat.binary,
-        columnCount: io.readUInt16BE(),
-    };
-    if (out.columnCount) {
-        out.columnFormats = [];
-        for (let i = 0; i < out.columnCount; i++) {
-            out.columnFormats.push(io.readUInt16BE() === 0 ? protocol_js_1.Protocol.DataFormat.text : protocol_js_1.Protocol.DataFormat.binary);
-        }
-    }
-    return out;
-}
-function parseDataRow(io) {
-    const out = {
-        columnCount: io.readUInt16BE(),
-    };
-    if (out.columnCount) {
-        out.columns = [];
-        for (let i = 0; i < out.columnCount; i++) {
-            // The length of the column value, in bytes (this count does not include itself).
-            // Can be zero. As a special case, -1 indicates a NULL column value.
-            // No value bytes follow in the NULL case.
-            const l = io.readInt32BE();
-            if (l < 0)
-                out.columns.push(null);
-            else
-                out.columns.push(io.readBuffer(l));
-        }
-    }
-    return out;
-}
-function parseErrorResponse(io) {
-    const out = {};
-    let fieldType;
-    while ((fieldType = io.readLString(1)) !== '\0') {
-        const value = io.readCString('utf8');
-        const key = ErrorFieldTypes[fieldType];
-        if (key)
-            out[key] = value;
-    }
-    return out;
-}
-function parseNotificationResponse(io) {
-    return {
-        processId: io.readUInt32BE(),
-        channel: io.readCString(),
-        payload: io.readCString(),
-    };
-}
-function parseFunctionCallResponse(io, code, len) {
-    return {
-        result: io.readBuffer(len - 4),
-    };
-}
-function parseNegotiateProtocolVersion(io) {
-    return {
-        supportedVersionMinor: io.readUInt32BE(),
-        numberOfNotSupportedVersions: io.readUInt32BE(),
-        option: io.readCString('utf8'),
-    };
-}
-function parseParameterDescription(io) {
-    const out = {
-        parameterCount: io.readUInt32BE(),
-        parameterIds: [],
-    };
-    for (let i = 0; i < out.parameterCount; i++) {
-        out.parameterIds.push(io.readUInt32BE());
-    }
-    return out;
-}
-function parseParameterStatus(io) {
-    return {
-        name: io.readCString('utf8'),
-        value: io.readCString('utf8'),
-    };
-}
-function parseReadyForQuery(io) {
-    return {
-        status: io.readLString(1),
-    };
-}
-function parseRowDescription(io) {
-    const fieldCount = io.readUInt16BE();
-    const out = {
-        fields: [],
-    };
-    for (let i = 0; i < fieldCount; i++) {
-        const field = {
-            fieldName: io.readCString('utf8'),
-            tableId: io.readInt32BE(),
-            columnId: io.readInt16BE(),
-            dataTypeId: io.readInt32BE(),
-            fixedSize: io.readInt16BE(),
-            modifier: io.readInt32BE(),
-            format: io.readInt16BE() === 0 ? protocol_js_1.Protocol.DataFormat.text : protocol_js_1.Protocol.DataFormat.binary,
-        };
-        out.fields.push(field);
-    }
-    return out;
-}
Index: node_modules/pg-protocol/dist/index.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/index.js.map b/node_modules/pg-protocol/dist/index.js.map
--- a/node_modules/pg-protocol/dist/index.js.map	
+++ b/node_modules/pg-protocol/dist/index.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,yCAA0D;AAUtC,8FAVK,wBAAa,OAUL;AATjC,6CAAwC;AAS/B,0FATA,sBAAS,OASA;AARlB,qCAAkD;AAElD,SAAgB,KAAK,CAAC,MAA6B,EAAE,QAAyB;IAC5E,MAAM,MAAM,GAAG,IAAI,eAAM,EAAE,CAAA;IAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;IACrE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;AACpE,CAAC;AAJD,sBAIC"}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,yCAA0C;AAUtB,8FAVX,wBAAa,OAUW;AATjC,6CAAwC;AAS/B,0FATA,sBAAS,OASA;AARlB,qCAAkD;AAElD,SAAgB,KAAK,CAAC,MAA6B,EAAE,QAAyB;IAC5E,MAAM,MAAM,GAAG,IAAI,eAAM,EAAE,CAAA;IAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;IACrE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;AACpE,CAAC;AAJD,sBAIC"}
\ No newline at end of file
Index: node_modules/pg/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/README.md b/node_modules/pg/README.md
--- a/node_modules/pg/README.md	
+++ b/node_modules/pg/README.md	
@@ -46,10 +46,16 @@
 
 ## Sponsorship :two_hearts:
 
-node-postgres's continued development has been made possible in part by generous finanical support from [the community](https://github.com/brianc/node-postgres/blob/master/SPONSORS.md).
+node-postgres's continued development has been made possible in part by generous financial support from [the community](https://github.com/brianc/node-postgres/blob/master/SPONSORS.md).
 
 If you or your company are benefiting from node-postgres and would like to help keep the project financially sustainable [please consider supporting](https://github.com/sponsors/brianc) its development.
 
+### Featured sponsor
+
+Special thanks to [medplum](https://medplum.com) for their generous and thoughtful support of node-postgres!
+
+![medplum](https://raw.githubusercontent.com/medplum/medplum-logo/refs/heads/main/medplum-logo.png)
+
 ## Contributing
 
 **:heart: contributions!**
Index: node_modules/postgresql-client/cjs/interfaces/query-result.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/query-result.js b/node_modules/postgresql-client/cjs/interfaces/query-result.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/query-result.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/pg-pool/test/idle-timeout-exit.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/idle-timeout-exit.js b/node_modules/pg-pool/test/idle-timeout-exit.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/idle-timeout-exit.js	
+++ /dev/null	
@@ -1,20 +0,0 @@
-// This test is meant to be spawned from idle-timeout.js
-if (module === require.main) {
-  const allowExitOnIdle = process.env.ALLOW_EXIT_ON_IDLE === '1'
-  const Pool = require('../index')
-
-  const pool = new Pool({
-    maxLifetimeSeconds: 2,
-    idleTimeoutMillis: 200,
-    ...(allowExitOnIdle ? { allowExitOnIdle: true } : {}),
-  })
-  pool.query('SELECT NOW()', (err, res) => console.log('completed first'))
-  pool.on('remove', () => {
-    console.log('removed')
-    done()
-  })
-
-  setTimeout(() => {
-    pool.query('SELECT * from generate_series(0, 1000)', (err, res) => console.log('completed second'))
-  }, 50)
-}
Index: node_modules/pg-protocol/dist/serializer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/serializer.js b/node_modules/pg-protocol/dist/serializer.js
--- a/node_modules/pg-protocol/dist/serializer.js	
+++ b/node_modules/pg-protocol/dist/serializer.js	
@@ -10,9 +10,9 @@
         writer.addCString(key).addCString(opts[key]);
     }
     writer.addCString('client_encoding').addCString('UTF8');
-    var bodyBuffer = writer.addCString('').flush();
+    const bodyBuffer = writer.addCString('').flush();
     // this message is sent without a code
-    var length = bodyBuffer.length + 4;
+    const length = bodyBuffer.length + 4;
     return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();
 };
 const requestSsl = () => {
@@ -44,19 +44,17 @@
     // normalize missing query names to allow for null
     const name = query.name || '';
     if (name.length > 63) {
-        /* eslint-disable no-console */
         console.error('Warning! Postgres only supports 63 characters for query names.');
         console.error('You supplied %s (%s)', name, name.length);
         console.error('This can cause conflicts and silent errors executing queries');
-        /* eslint-enable no-console */
     }
     const types = query.types || emptyArray;
-    var len = types.length;
-    var buffer = writer
+    const len = types.length;
+    const buffer = writer
         .addCString(name) // name of query
         .addCString(query.text) // actual query text
         .addInt16(len);
-    for (var i = 0; i < len; i++) {
+    for (let i = 0; i < len; i++) {
         buffer.addInt32(types[i]);
     }
     return writer.flush(80 /* code.parse */);
@@ -98,6 +96,8 @@
     writeValues(values, config.valueMapper);
     writer.addInt16(len);
     writer.add(paramWriter.flush());
+    // all results use the same format code
+    writer.addInt16(1);
     // format code
     writer.addInt16(binary ? 1 /* ParamType.BINARY */ : 0 /* ParamType.STRING */);
     return writer.flush(66 /* code.bind */);
Index: node_modules/get-intrinsic/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/get-intrinsic/CHANGELOG.md b/node_modules/get-intrinsic/CHANGELOG.md
--- a/node_modules/get-intrinsic/CHANGELOG.md	
+++ b/node_modules/get-intrinsic/CHANGELOG.md	
@@ -5,6 +5,49 @@
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+## [v1.3.0](https://github.com/ljharb/get-intrinsic/compare/v1.2.7...v1.3.0) - 2025-02-22
+
+### Commits
+
+- [Dev Deps] update `es-abstract`, `es-value-fixtures`, `for-each`, `object-inspect` [`9b61553`](https://github.com/ljharb/get-intrinsic/commit/9b61553c587f1c1edbd435597e88c7d387da97dd)
+- [Deps] update `call-bind-apply-helpers`, `es-object-atoms`, `get-proto` [`a341fee`](https://github.com/ljharb/get-intrinsic/commit/a341fee0f39a403b0f0069e82c97642d5eb11043)
+- [New] add `Float16Array` [`de22116`](https://github.com/ljharb/get-intrinsic/commit/de22116b492fb989a0341bceb6e573abfaed73dc)
+
+## [v1.2.7](https://github.com/ljharb/get-intrinsic/compare/v1.2.6...v1.2.7) - 2025-01-02
+
+### Commits
+
+- [Refactor] use `get-proto` directly [`00ab955`](https://github.com/ljharb/get-intrinsic/commit/00ab95546a0980c8ad42a84253daaa8d2adcedf9)
+- [Deps] update `math-intrinsics` [`c716cdd`](https://github.com/ljharb/get-intrinsic/commit/c716cdd6bbe36b438057025561b8bb5a879ac8a0)
+- [Dev Deps] update `call-bound`, `es-abstract` [`dc648a6`](https://github.com/ljharb/get-intrinsic/commit/dc648a67eb359037dff8d8619bfa71d86debccb1)
+
+## [v1.2.6](https://github.com/ljharb/get-intrinsic/compare/v1.2.5...v1.2.6) - 2024-12-11
+
+### Commits
+
+- [Refactor] use `math-intrinsics` [`841be86`](https://github.com/ljharb/get-intrinsic/commit/841be8641a9254c4c75483b30c8871b5d5065926)
+- [Refactor] use `es-object-atoms` [`42057df`](https://github.com/ljharb/get-intrinsic/commit/42057dfa16f66f64787e66482af381cc6f31d2c1)
+- [Deps] update `call-bind-apply-helpers` [`45afa24`](https://github.com/ljharb/get-intrinsic/commit/45afa24a9ee4d6d3c172db1f555b16cb27843ef4)
+- [Dev Deps] update `call-bound` [`9cba9c6`](https://github.com/ljharb/get-intrinsic/commit/9cba9c6e70212bc163b7a5529cb25df46071646f)
+
+## [v1.2.5](https://github.com/ljharb/get-intrinsic/compare/v1.2.4...v1.2.5) - 2024-12-06
+
+### Commits
+
+- [actions] split out node 10-20, and 20+ [`6e2b9dd`](https://github.com/ljharb/get-intrinsic/commit/6e2b9dd23902665681ebe453256ccfe21d7966f0)
+- [Refactor] use `dunder-proto` and `call-bind-apply-helpers` instead of `has-proto` [`c095d17`](https://github.com/ljharb/get-intrinsic/commit/c095d179ad0f4fbfff20c8a3e0cb4fe668018998)
+- [Refactor] use `gopd` [`9841d5b`](https://github.com/ljharb/get-intrinsic/commit/9841d5b35f7ab4fd2d193f0c741a50a077920e90)
+- [Dev Deps] update `@ljharb/eslint-config`, `auto-changelog`, `es-abstract`, `es-value-fixtures`, `gopd`, `mock-property`, `object-inspect`, `tape` [`2d07e01`](https://github.com/ljharb/get-intrinsic/commit/2d07e01310cee2cbaedfead6903df128b1f5d425)
+- [Deps] update `gopd`, `has-proto`, `has-symbols`, `hasown` [`974d8bf`](https://github.com/ljharb/get-intrinsic/commit/974d8bf5baad7939eef35c25cc1dd88c10a30fa6)
+- [Dev Deps] update `call-bind`, `es-abstract`, `tape` [`df9dde1`](https://github.com/ljharb/get-intrinsic/commit/df9dde178186631ab8a3165ede056549918ce4bc)
+- [Refactor] cache `es-define-property` as well [`43ef543`](https://github.com/ljharb/get-intrinsic/commit/43ef543cb02194401420e3a914a4ca9168691926)
+- [Deps] update `has-proto`, `has-symbols`, `hasown` [`ad4949d`](https://github.com/ljharb/get-intrinsic/commit/ad4949d5467316505aad89bf75f9417ed782f7af)
+- [Tests] use `call-bound` directly [`ad5c406`](https://github.com/ljharb/get-intrinsic/commit/ad5c4069774bfe90e520a35eead5fe5ca9d69e80)
+- [Deps] update `has-proto`, `hasown` [`45414ca`](https://github.com/ljharb/get-intrinsic/commit/45414caa312333a2798953682c68f85c550627dd)
+- [Tests] replace `aud` with `npm audit` [`18d3509`](https://github.com/ljharb/get-intrinsic/commit/18d3509f79460e7924da70409ee81e5053087523)
+- [Deps] update `es-define-property` [`aadaa3b`](https://github.com/ljharb/get-intrinsic/commit/aadaa3b2188d77ad9bff394ce5d4249c49eb21f5)
+- [Dev Deps] add missing peer dep [`c296a16`](https://github.com/ljharb/get-intrinsic/commit/c296a16246d0c9a5981944f4cc5cf61fbda0cf6a)
+
 ## [v1.2.4](https://github.com/ljharb/get-intrinsic/compare/v1.2.3...v1.2.4) - 2024-02-05
 
 ### Commits
Index: node_modules/semver/internal/debug.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/internal/debug.js b/node_modules/semver/internal/debug.js
--- a/node_modules/semver/internal/debug.js	
+++ b/node_modules/semver/internal/debug.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const debug = (
   typeof process === 'object' &&
   process.env &&
Index: node_modules/braces/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/README.md b/node_modules/braces/README.md
--- a/node_modules/braces/README.md	
+++ b/node_modules/braces/README.md	
@@ -20,15 +20,15 @@
 
 Brace patterns make globs more powerful by adding the ability to match specific ranges and sequences of characters.
 
-* **Accurate** - complete support for the [Bash 4.3 Brace Expansion](www.gnu.org/software/bash/) specification (passes all of the Bash braces tests)
-* **[fast and performant](#benchmarks)** - Starts fast, runs fast and [scales well](#performance) as patterns increase in complexity.
-* **Organized code base** - The parser and compiler are easy to maintain and update when edge cases crop up.
-* **Well-tested** - Thousands of test assertions, and passes all of the Bash, minimatch, and [brace-expansion](https://github.com/juliangruber/brace-expansion) unit tests (as of the date this was written).
-* **Safer** - You shouldn't have to worry about users defining aggressive or malicious brace patterns that can break your application. Braces takes measures to prevent malicious regex that can be used for DDoS attacks (see [catastrophic backtracking](https://www.regular-expressions.info/catastrophic.html)).
-* [Supports lists](#lists) - (aka "sets") `a/{b,c}/d` => `['a/b/d', 'a/c/d']`
-* [Supports sequences](#sequences) - (aka "ranges") `{01..03}` => `['01', '02', '03']`
-* [Supports steps](#steps) - (aka "increments") `{2..10..2}` => `['2', '4', '6', '8', '10']`
-* [Supports escaping](#escaping) - To prevent evaluation of special characters.
+- **Accurate** - complete support for the [Bash 4.3 Brace Expansion](www.gnu.org/software/bash/) specification (passes all of the Bash braces tests)
+- **[fast and performant](#benchmarks)** - Starts fast, runs fast and [scales well](#performance) as patterns increase in complexity.
+- **Organized code base** - The parser and compiler are easy to maintain and update when edge cases crop up.
+- **Well-tested** - Thousands of test assertions, and passes all of the Bash, minimatch, and [brace-expansion](https://github.com/juliangruber/brace-expansion) unit tests (as of the date this was written).
+- **Safer** - You shouldn't have to worry about users defining aggressive or malicious brace patterns that can break your application. Braces takes measures to prevent malicious regex that can be used for DDoS attacks (see [catastrophic backtracking](https://www.regular-expressions.info/catastrophic.html)).
+- [Supports lists](#lists) - (aka "sets") `a/{b,c}/d` => `['a/b/d', 'a/c/d']`
+- [Supports sequences](#sequences) - (aka "ranges") `{01..03}` => `['01', '02', '03']`
+- [Supports steps](#steps) - (aka "increments") `{2..10..2}` => `['2', '4', '6', '8', '10']`
+- [Supports escaping](#escaping) - To prevent evaluation of special characters.
 
 ## Usage
 
@@ -52,9 +52,9 @@
 **Compiled**
 
 ```js
-console.log(braces('a/{x,y,z}/b')); 
+console.log(braces('a/{x,y,z}/b'));
 //=> ['a/(x|y|z)/b']
-console.log(braces(['a/{01..20}/b', 'a/{1..5}/b'])); 
+console.log(braces(['a/{01..20}/b', 'a/{1..5}/b']));
 //=> [ 'a/(0[1-9]|1[0-9]|20)/b', 'a/([1-5])/b' ]
 ```
 
@@ -87,13 +87,13 @@
 Expand ranges of characters (like Bash "sequences"):
 
 ```js
-console.log(braces.expand('{1..3}'));                // ['1', '2', '3']
-console.log(braces.expand('a/{1..3}/b'));            // ['a/1/b', 'a/2/b', 'a/3/b']
-console.log(braces('{a..c}', { expand: true }));     // ['a', 'b', 'c']
+console.log(braces.expand('{1..3}')); // ['1', '2', '3']
+console.log(braces.expand('a/{1..3}/b')); // ['a/1/b', 'a/2/b', 'a/3/b']
+console.log(braces('{a..c}', { expand: true })); // ['a', 'b', 'c']
 console.log(braces('foo/{a..c}', { expand: true })); // ['foo/a', 'foo/b', 'foo/c']
 
 // supports zero-padded ranges
-console.log(braces('a/{01..03}/b'));   //=> ['a/(0[1-3])/b']
+console.log(braces('a/{01..03}/b')); //=> ['a/(0[1-3])/b']
 console.log(braces('a/{001..300}/b')); //=> ['a/(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)/b']
 ```
 
@@ -178,12 +178,12 @@
 
 **Type**: `Number`
 
-**Default**: `65,536`
+**Default**: `10,000`
 
 **Description**: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera.
 
 ```js
-console.log(braces('a/{b,c}/d', { maxLength: 3 }));  //=> throws an error
+console.log(braces('a/{b,c}/d', { maxLength: 3 })); //=> throws an error
 ```
 
 ### options.expand
@@ -244,7 +244,7 @@
   transform(value, index) {
     // When non-numeric values are passed, "value" is a character code.
     return 'foo/' + String.fromCharCode(value) + '-' + index;
-  }
+  },
 });
 console.log(alpha);
 //=> [ 'x/foo/a-0/y', 'x/foo/b-1/y', 'x/foo/c-2/y', 'x/foo/d-3/y', 'x/foo/e-4/y' ]
@@ -257,9 +257,9 @@
   transform(value) {
     // when numeric values are passed, "value" is a number
     return 'foo/' + value * 2;
-  }
+  },
 });
-console.log(numeric); 
+console.log(numeric);
 //=> [ 'foo/2', 'foo/4', 'foo/6', 'foo/8', 'foo/10' ]
 ```
 
@@ -281,19 +281,19 @@
 const braces = require('braces');
 console.log(braces('a/b{1,3}/{x,y,z}'));
 //=> [ 'a/b(1|3)/(x|y|z)' ]
-console.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true}));
+console.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true }));
 //=> [ 'a/b{1,3}/(x|y|z)' ]
-console.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true, expand: true}));
+console.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true, expand: true }));
 //=> [ 'a/b{1,3}/x', 'a/b{1,3}/y', 'a/b{1,3}/z' ]
 ```
 
-### options.unescape
+### options.keepEscaping
 
 **Type**: `Boolean`
 
 **Default**: `undefined`
 
-**Description**: Strip backslashes that were used for escaping from the result.
+**Description**: Do not strip backslashes that were used for escaping from the result.
 
 ## What is "brace expansion"?
 
@@ -301,8 +301,8 @@
 
 In addition to "expansion", braces are also used for matching. In other words:
 
-* [brace expansion](#brace-expansion) is for generating new lists
-* [brace matching](#brace-matching) is for filtering existing lists
+- [brace expansion](#brace-expansion) is for generating new lists
+- [brace matching](#brace-matching) is for filtering existing lists
 
 <details>
 <summary><strong>More about brace expansion</strong> (click to expand)</summary>
@@ -382,9 +382,9 @@
 
 **"brace bombs"**
 
-* brace expansion can eat up a huge amount of processing resources
-* as brace patterns increase _linearly in size_, the system resources required to expand the pattern increase exponentially
-* users can accidentally (or intentially) exhaust your system's resources resulting in the equivalent of a DoS attack (bonus: no programming knowledge is required!)
+- brace expansion can eat up a huge amount of processing resources
+- as brace patterns increase _linearly in size_, the system resources required to expand the pattern increase exponentially
+- users can accidentally (or intentially) exhaust your system's resources resulting in the equivalent of a DoS attack (bonus: no programming knowledge is required!)
 
 For a more detailed explanation with examples, see the [geometric complexity](#geometric-complexity) section.
 
@@ -406,8 +406,8 @@
 But add an element to a set, and we get a n-fold Cartesian product with `O(n^c)` complexity:
 
 ```
-{1,2,3}{4,5,6}{7,8,9} => (3X3X3) => 147 148 149 157 158 159 167 168 169 247 248 
-                                    249 257 258 259 267 268 269 347 348 349 357 
+{1,2,3}{4,5,6}{7,8,9} => (3X3X3) => 147 148 149 157 158 159 167 168 169 247 248
+                                    249 257 258 259 267 268 269 347 348 349 357
                                     358 359 367 368 369
 ```
 
@@ -424,9 +424,9 @@
 
 Interested in learning more about brace expansion?
 
-* [linuxjournal/bash-brace-expansion](http://www.linuxjournal.com/content/bash-brace-expansion)
-* [rosettacode/Brace_expansion](https://rosettacode.org/wiki/Brace_expansion)
-* [cartesian product](https://en.wikipedia.org/wiki/Cartesian_product)
+- [linuxjournal/bash-brace-expansion](http://www.linuxjournal.com/content/bash-brace-expansion)
+- [rosettacode/Brace_expansion](https://rosettacode.org/wiki/Brace_expansion)
+- [cartesian product](https://en.wikipedia.org/wiki/Cartesian_product)
 
 </details>
 
@@ -444,25 +444,25 @@
 
 Minimatch gets exponentially slower as patterns increase in complexity, braces does not. The following results were generated using `braces()` and `minimatch.braceExpand()`, respectively.
 
-| **Pattern**                 | **braces**         | **[minimatch][]**            |
-| ---                         | ---                | ---                          |
-| `{1..9007199254740991}`[^1] | `298 B` (5ms 459μs)|  N/A (freezes)               |
-| `{1..1000000000000000}`     | `41 B` (1ms 15μs)  |  N/A (freezes)               |
-| `{1..100000000000000}`      | `40 B` (890μs)     |  N/A (freezes)               |
-| `{1..10000000000000}`       | `39 B` (2ms 49μs)  |  N/A (freezes)               |
-| `{1..1000000000000}`        | `38 B` (608μs)     |  N/A (freezes)               |
-| `{1..100000000000}`         | `37 B` (397μs)     |  N/A (freezes)               |
-| `{1..10000000000}`          | `35 B` (983μs)     |  N/A (freezes)               |
-| `{1..1000000000}`           | `34 B` (798μs)     |  N/A (freezes)               |
-| `{1..100000000}`            | `33 B` (733μs)     |  N/A (freezes)               |
-| `{1..10000000}`             | `32 B` (5ms 632μs) | `78.89 MB` (16s 388ms 569μs) |
-| `{1..1000000}`              | `31 B` (1ms 381μs) | `6.89 MB` (1s 496ms 887μs)   |
-| `{1..100000}`               | `30 B` (950μs)     | `588.89 kB` (146ms 921μs)    |
-| `{1..10000}`                | `29 B` (1ms 114μs) | `48.89 kB` (14ms 187μs)      |
-| `{1..1000}`                 | `28 B` (760μs)     | `3.89 kB` (1ms 453μs)        |
-| `{1..100}`                  | `22 B` (345μs)     | `291 B` (196μs)              |
-| `{1..10}`                   | `10 B` (533μs)     | `20 B` (37μs)                |
-| `{1..3}`                    | `7 B` (190μs)      | `5 B` (27μs)                 |
+| **Pattern**                 | **braces**          | **[minimatch][]**            |
+| --------------------------- | ------------------- | ---------------------------- |
+| `{1..9007199254740991}`[^1] | `298 B` (5ms 459μs) | N/A (freezes)                |
+| `{1..1000000000000000}`     | `41 B` (1ms 15μs)   | N/A (freezes)                |
+| `{1..100000000000000}`      | `40 B` (890μs)      | N/A (freezes)                |
+| `{1..10000000000000}`       | `39 B` (2ms 49μs)   | N/A (freezes)                |
+| `{1..1000000000000}`        | `38 B` (608μs)      | N/A (freezes)                |
+| `{1..100000000000}`         | `37 B` (397μs)      | N/A (freezes)                |
+| `{1..10000000000}`          | `35 B` (983μs)      | N/A (freezes)                |
+| `{1..1000000000}`           | `34 B` (798μs)      | N/A (freezes)                |
+| `{1..100000000}`            | `33 B` (733μs)      | N/A (freezes)                |
+| `{1..10000000}`             | `32 B` (5ms 632μs)  | `78.89 MB` (16s 388ms 569μs) |
+| `{1..1000000}`              | `31 B` (1ms 381μs)  | `6.89 MB` (1s 496ms 887μs)   |
+| `{1..100000}`               | `30 B` (950μs)      | `588.89 kB` (146ms 921μs)    |
+| `{1..10000}`                | `29 B` (1ms 114μs)  | `48.89 kB` (14ms 187μs)      |
+| `{1..1000}`                 | `28 B` (760μs)      | `3.89 kB` (1ms 453μs)        |
+| `{1..100}`                  | `22 B` (345μs)      | `291 B` (196μs)              |
+| `{1..10}`                   | `10 B` (533μs)      | `20 B` (37μs)                |
+| `{1..3}`                    | `7 B` (190μs)       | `5 B` (27μs)                 |
 
 ### Faster algorithms
 
@@ -471,7 +471,7 @@
 _(the following results were generated using `braces.expand()` and `minimatch.braceExpand()`, respectively)_
 
 | **Pattern**     | **braces**                  | **[minimatch][]**            |
-| ---             | ---                         | ---                          |
+| --------------- | --------------------------- | ---------------------------- |
 | `{1..10000000}` | `78.89 MB` (2s 698ms 642μs) | `78.89 MB` (18s 601ms 974μs) |
 | `{1..1000000}`  | `6.89 MB` (458ms 576μs)     | `6.89 MB` (1s 491ms 621μs)   |
 | `{1..100000}`   | `588.89 kB` (20ms 728μs)    | `588.89 kB` (156ms 919μs)    |
@@ -498,37 +498,30 @@
 Braces is more accurate, without sacrificing performance.
 
 ```bash
-# range (expanded)
-  braces x 29,040 ops/sec ±3.69% (91 runs sampled))
-  minimatch x 4,735 ops/sec ±1.28% (90 runs sampled)
-
-# range (optimized for regex)
-  braces x 382,878 ops/sec ±0.56% (94 runs sampled)
-  minimatch x 1,040 ops/sec ±0.44% (93 runs sampled)
-
-# nested ranges (expanded)
-  braces x 19,744 ops/sec ±2.27% (92 runs sampled))
-  minimatch x 4,579 ops/sec ±0.50% (93 runs sampled)
-
-# nested ranges (optimized for regex)
-  braces x 246,019 ops/sec ±2.02% (93 runs sampled)
-  minimatch x 1,028 ops/sec ±0.39% (94 runs sampled)
-
-# set (expanded) 
-  braces x 138,641 ops/sec ±0.53% (95 runs sampled)
-  minimatch x 219,582 ops/sec ±0.98% (94 runs sampled)
-
-# set (optimized for regex)
-  braces x 388,408 ops/sec ±0.41% (95 runs sampled)
-  minimatch x 44,724 ops/sec ±0.91% (89 runs sampled)
-
-# nested sets (expanded)
-  braces x 84,966 ops/sec ±0.48% (94 runs sampled)
-  minimatch x 140,720 ops/sec ±0.37% (95 runs sampled)
-
-# nested sets (optimized for regex)
-  braces x 263,340 ops/sec ±2.06% (92 runs sampled)
-  minimatch x 28,714 ops/sec ±0.40% (90 runs sampled)
+● expand - range (expanded)
+     braces x 53,167 ops/sec ±0.12% (102 runs sampled)
+  minimatch x 11,378 ops/sec ±0.10% (102 runs sampled)
+● expand - range (optimized for regex)
+     braces x 373,442 ops/sec ±0.04% (100 runs sampled)
+  minimatch x 3,262 ops/sec ±0.18% (100 runs sampled)
+● expand - nested ranges (expanded)
+     braces x 33,921 ops/sec ±0.09% (99 runs sampled)
+  minimatch x 10,855 ops/sec ±0.28% (100 runs sampled)
+● expand - nested ranges (optimized for regex)
+     braces x 287,479 ops/sec ±0.52% (98 runs sampled)
+  minimatch x 3,219 ops/sec ±0.28% (101 runs sampled)
+● expand - set (expanded)
+     braces x 238,243 ops/sec ±0.19% (97 runs sampled)
+  minimatch x 538,268 ops/sec ±0.31% (96 runs sampled)
+● expand - set (optimized for regex)
+     braces x 321,844 ops/sec ±0.10% (97 runs sampled)
+  minimatch x 140,600 ops/sec ±0.15% (100 runs sampled)
+● expand - nested sets (expanded)
+     braces x 165,371 ops/sec ±0.42% (96 runs sampled)
+  minimatch x 337,720 ops/sec ±0.28% (100 runs sampled)
+● expand - nested sets (optimized for regex)
+     braces x 242,948 ops/sec ±0.12% (99 runs sampled)
+  minimatch x 87,403 ops/sec ±0.79% (96 runs sampled)
 ```
 
 ## About
@@ -566,28 +559,28 @@
 
 ### Contributors
 
-| **Commits** | **Contributor** |  
-| --- | --- |  
-| 197 | [jonschlinkert](https://github.com/jonschlinkert) |  
-| 4   | [doowb](https://github.com/doowb) |  
-| 1   | [es128](https://github.com/es128) |  
-| 1   | [eush77](https://github.com/eush77) |  
-| 1   | [hemanth](https://github.com/hemanth) |  
-| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |  
+| **Commits** | **Contributor**                                               |
+| ----------- | ------------------------------------------------------------- |
+| 197         | [jonschlinkert](https://github.com/jonschlinkert)             |
+| 4           | [doowb](https://github.com/doowb)                             |
+| 1           | [es128](https://github.com/es128)                             |
+| 1           | [eush77](https://github.com/eush77)                           |
+| 1           | [hemanth](https://github.com/hemanth)                         |
+| 1           | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |
 
 ### Author
 
 **Jon Schlinkert**
 
-* [GitHub Profile](https://github.com/jonschlinkert)
-* [Twitter Profile](https://twitter.com/jonschlinkert)
-* [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)
+- [GitHub Profile](https://github.com/jonschlinkert)
+- [Twitter Profile](https://twitter.com/jonschlinkert)
+- [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)
 
 ### License
 
 Copyright © 2019, [Jon Schlinkert](https://github.com/jonschlinkert).
 Released under the [MIT License](LICENSE).
 
-***
+---
 
-_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on April 08, 2019._
\ No newline at end of file
+_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on April 08, 2019._
Index: node_modules/pg-cloudflare/dist/empty.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-cloudflare/dist/empty.js.map b/node_modules/pg-cloudflare/dist/empty.js.map
--- a/node_modules/pg-cloudflare/dist/empty.js.map	
+++ b/node_modules/pg-cloudflare/dist/empty.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"empty.js","sourceRoot":"","sources":["../src/empty.ts"],"names":[],"mappings":"AAAA,kFAAkF;AAClF,0CAA0C;AAC1C,eAAe,EAAE,CAAA"}
\ No newline at end of file
+{"version":3,"file":"empty.js","sourceRoot":"","sources":["../src/empty.ts"],"names":[],"mappings":";;AAAA,kFAAkF;AAClF,0CAA0C;AAC1C,kBAAe,EAAE,CAAA"}
\ No newline at end of file
Index: node_modules/finalhandler/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/finalhandler/index.js b/node_modules/finalhandler/index.js
--- a/node_modules/finalhandler/index.js	
+++ b/node_modules/finalhandler/index.js	
@@ -125,7 +125,9 @@
     // cannot actually respond
     if (headersSent(res)) {
       debug('cannot %d after headers sent', status)
-      req.socket.destroy()
+      if (req.socket) {
+        req.socket.destroy()
+      }
       return
     }
 
@@ -276,7 +278,10 @@
 
     // response status
     res.statusCode = status
-    res.statusMessage = statuses.message[status]
+
+    if (req.httpVersionMajor < 2) {
+      res.statusMessage = statuses.message[status]
+    }
 
     // remove any content headers
     res.removeHeader('Content-Encoding')
Index: node_modules/encodeurl/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/encodeurl/README.md b/node_modules/encodeurl/README.md
--- a/node_modules/encodeurl/README.md	
+++ b/node_modules/encodeurl/README.md	
@@ -1,21 +1,11 @@
-# encodeurl
+# Encode URL
 
-[![NPM Version][npm-image]][npm-url]
-[![NPM Downloads][downloads-image]][downloads-url]
-[![Node.js Version][node-version-image]][node-version-url]
-[![Build Status][travis-image]][travis-url]
-[![Test Coverage][coveralls-image]][coveralls-url]
-
-Encode a URL to a percent-encoded form, excluding already-encoded sequences
+Encode a URL to a percent-encoded form, excluding already-encoded sequences.
 
 ## Installation
 
-This is a [Node.js](https://nodejs.org/en/) module available through the
-[npm registry](https://www.npmjs.com/). Installation is done using the
-[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):
-
 ```sh
-$ npm install encodeurl
+npm install encodeurl
 ```
 
 ## API
@@ -28,24 +18,13 @@
 
 Encode a URL to a percent-encoded form, excluding already-encoded sequences.
 
-This function will take an already-encoded URL and encode all the non-URL
-code points (as UTF-8 byte sequences). This function will not encode the
-"%" character unless it is not part of a valid sequence (`%20` will be
-left as-is, but `%foo` will be encoded as `%25foo`).
+This function accepts a URL and encodes all the non-URL code points (as UTF-8 byte sequences). It will not encode the "%" character unless it is not part of a valid sequence (`%20` will be left as-is, but `%foo` will be encoded as `%25foo`).
 
-This encode is meant to be "safe" and does not throw errors. It will try as
-hard as it can to properly encode the given URL, including replacing any raw,
-unpaired surrogate pairs with the Unicode replacement character prior to
-encoding.
-
-This function is _similar_ to the intrinsic function `encodeURI`, except it
-will not encode the `%` character if that is part of a valid sequence, will
-not encode `[` and `]` (for IPv6 hostnames) and will replace raw, unpaired
-surrogate pairs with the Unicode replacement character (instead of throwing).
+This encode is meant to be "safe" and does not throw errors. It will try as hard as it can to properly encode the given URL, including replacing any raw, unpaired surrogate pairs with the Unicode replacement character prior to encoding.
 
 ## Examples
 
-### Encode a URL containing user-controled data
+### Encode a URL containing user-controlled data
 
 ```js
 var encodeUrl = require('encodeurl')
@@ -97,6 +76,19 @@
 })
 ```
 
+## Similarities
+
+This function is _similar_ to the intrinsic function `encodeURI`. However, it will not encode:
+
+* The `\`, `^`, or `|` characters
+* The `%` character when it's part of a valid sequence
+* `[` and `]` (for IPv6 hostnames)
+* Replaces raw, unpaired surrogate pairs with the Unicode replacement character
+
+As a result, the encoding aligns closely with the behavior in the [WHATWG URL specification][whatwg-url]. However, this package only encodes strings and does not do any URL parsing or formatting.
+
+It is expected that any output from `new URL(url)` will not change when used with this package, as the output has already been encoded. Additionally, if we were to encode before `new URL(url)`, we do not expect the before and after encoded formats to be parsed any differently.
+
 ## Testing
 
 ```sh
@@ -115,14 +107,3 @@
 ## License
 
 [MIT](LICENSE)
-
-[npm-image]: https://img.shields.io/npm/v/encodeurl.svg
-[npm-url]: https://npmjs.org/package/encodeurl
-[node-version-image]: https://img.shields.io/node/v/encodeurl.svg
-[node-version-url]: https://nodejs.org/en/download
-[travis-image]: https://img.shields.io/travis/pillarjs/encodeurl.svg
-[travis-url]: https://travis-ci.org/pillarjs/encodeurl
-[coveralls-image]: https://img.shields.io/coveralls/pillarjs/encodeurl.svg
-[coveralls-url]: https://coveralls.io/r/pillarjs/encodeurl?branch=master
-[downloads-image]: https://img.shields.io/npm/dm/encodeurl.svg
-[downloads-url]: https://npmjs.org/package/encodeurl
Index: node_modules/pg-protocol/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/package.json b/node_modules/pg-protocol/package.json
--- a/node_modules/pg-protocol/package.json	
+++ b/node_modules/pg-protocol/package.json	
@@ -1,17 +1,26 @@
 {
   "name": "pg-protocol",
-  "version": "1.6.1",
+  "version": "1.10.3",
   "description": "The postgres client/server binary protocol, implemented in TypeScript",
   "main": "dist/index.js",
   "types": "dist/index.d.ts",
+  "exports": {
+    ".": {
+      "import": "./esm/index.js",
+      "require": "./dist/index.js",
+      "default": "./dist/index.js"
+    },
+    "./dist/*": "./dist/*.js",
+    "./dist/*.js": "./dist/*.js"
+  },
   "license": "MIT",
   "devDependencies": {
     "@types/chai": "^4.2.7",
-    "@types/mocha": "^5.2.7",
+    "@types/mocha": "^10.0.7",
     "@types/node": "^12.12.21",
     "chai": "^4.2.0",
     "chunky": "^0.0.0",
-    "mocha": "^7.1.2",
+    "mocha": "^10.5.2",
     "ts-node": "^8.5.4",
     "typescript": "^4.0.3"
   },
@@ -29,7 +38,8 @@
   },
   "files": [
     "/dist/*{js,ts,map}",
-    "/src"
+    "/src",
+    "/esm"
   ],
-  "gitHead": "b03c071d2d15af259e1e008e9628191c865e58fa"
+  "gitHead": "8f8e7315e8f7c1bb01e98fdb41c8c92585510782"
 }
Index: node_modules/call-bind/.eslintignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/.eslintignore b/node_modules/call-bind/.eslintignore
deleted file mode 100644
--- a/node_modules/call-bind/.eslintignore	
+++ /dev/null	
@@ -1,1 +0,0 @@
-coverage/
Index: node_modules/serve-static/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/serve-static/index.js b/node_modules/serve-static/index.js
--- a/node_modules/serve-static/index.js	
+++ b/node_modules/serve-static/index.js	
@@ -195,8 +195,7 @@
 
     // reformat the URL
     var loc = encodeUrl(url.format(originalUrl))
-    var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href="' + escapeHtml(loc) + '">' +
-      escapeHtml(loc) + '</a>')
+    var doc = createHtmlDocument('Redirecting', 'Redirecting to ' + escapeHtml(loc))
 
     // send redirect response
     res.statusCode = 301
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: node_modules/pg-pool/test/bring-your-own-promise.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/bring-your-own-promise.js b/node_modules/pg-pool/test/bring-your-own-promise.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/bring-your-own-promise.js	
+++ /dev/null	
@@ -1,42 +0,0 @@
-'use strict'
-const co = require('co')
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-const BluebirdPromise = require('bluebird')
-
-const Pool = require('../')
-
-const checkType = (promise) => {
-  expect(promise).to.be.a(BluebirdPromise)
-  return promise.catch((e) => undefined)
-}
-
-describe('Bring your own promise', function () {
-  it(
-    'uses supplied promise for operations',
-    co.wrap(function* () {
-      const pool = new Pool({ Promise: BluebirdPromise })
-      const client1 = yield checkType(pool.connect())
-      client1.release()
-      yield checkType(pool.query('SELECT NOW()'))
-      const client2 = yield checkType(pool.connect())
-      // TODO - make sure pg supports BYOP as well
-      client2.release()
-      yield checkType(pool.end())
-    })
-  )
-
-  it(
-    'uses promises in errors',
-    co.wrap(function* () {
-      const pool = new Pool({ Promise: BluebirdPromise, port: 48484 })
-      yield checkType(pool.connect())
-      yield checkType(pool.end())
-      yield checkType(pool.connect())
-      yield checkType(pool.query())
-      yield checkType(pool.end())
-    })
-  )
-})
Index: node_modules/nodemon/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/package.json b/node_modules/nodemon/package.json
--- a/node_modules/nodemon/package.json	
+++ b/node_modules/nodemon/package.json	
@@ -27,6 +27,7 @@
     "terminal"
   ],
   "license": "MIT",
+  "types": "./index.d.ts",
   "main": "./lib/nodemon",
   "scripts": {
     "commitmsg": "commitlint -e",
@@ -66,7 +67,7 @@
     "touch": "^3.1.0",
     "undefsafe": "^2.0.5"
   },
-  "version": "3.1.0",
+  "version": "3.1.10",
   "funding": {
     "type": "opencollective",
     "url": "https://opencollective.com/nodemon"
Index: node_modules/postgresql-client/cjs/protocol/smart-buffer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/smart-buffer.js b/node_modules/postgresql-client/cjs/protocol/smart-buffer.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/smart-buffer.js	
+++ /dev/null	
@@ -1,195 +0,0 @@
-"use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
-    Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
-    o["default"] = v;
-});
-var __importStar = (this && this.__importStar) || function (mod) {
-    if (mod && mod.__esModule) return mod;
-    var result = {};
-    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
-    __setModuleDefault(result, mod);
-    return result;
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.SmartBuffer = void 0;
-const os = __importStar(require("os"));
-const bigint_methods_js_1 = require("../util/bigint-methods.js");
-const buffer_reader_js_1 = require("./buffer-reader.js");
-class SmartBuffer extends buffer_reader_js_1.BufferReader {
-    constructor(cfg) {
-        // @ts-ignore
-        super(Buffer.allocUnsafe((cfg?.pageSize ? parseInt(cfg.pageSize, 10) : 0) || SmartBuffer.DEFAULT_PAGE_SIZE));
-        this._lastHouseKeep = 0;
-        this._stMaxPages = 1;
-        this._length = 0;
-        this._houseKeepInterval = cfg?.houseKeepInterval || 5000;
-        this.pageSize = this.buffer.length;
-        this.maxSize = cfg?.maxLength || SmartBuffer.DEFAULT_MAX_SIZE;
-        this._length = 0;
-    }
-    get capacity() {
-        return this.buffer.length;
-    }
-    get length() {
-        return this._length;
-    }
-    start() {
-        this.offset = 0;
-        this._length = 0;
-        if (this._houseKeepTimer) {
-            clearTimeout(this._houseKeepTimer);
-            this._houseKeepTimer = undefined;
-        }
-        return this;
-    }
-    flush() {
-        if (this._houseKeepTimer)
-            clearTimeout(this._houseKeepTimer);
-        const length = this.length;
-        this._length = 0;
-        const out = this.buffer.slice(0, length);
-        const pages = length ? Math.ceil(length / this.pageSize) : 1;
-        this._stMaxPages = Math.max(this._stMaxPages, pages);
-        if (this._lastHouseKeep < Date.now() + this._houseKeepInterval)
-            this._houseKeep();
-        this._houseKeepTimer = setTimeout(() => {
-            this._houseKeepTimer = undefined;
-            this._houseKeep();
-        }, this._houseKeepInterval).unref();
-        return out;
-    }
-    growSize(len) {
-        const endOffset = this.offset + len;
-        if (this.capacity < endOffset) {
-            if (endOffset > this.maxSize)
-                throw new Error('Buffer limit exceeded.');
-            const newSize = Math.ceil(endOffset / this.pageSize) * this.pageSize;
-            const newBuffer = Buffer.allocUnsafe(newSize);
-            this.buffer.copy(newBuffer);
-            this.buffer = newBuffer;
-        }
-        this._length = Math.max(this.length, endOffset);
-        return this;
-    }
-    fill(value = 0, len = 1) {
-        this.growSize(len);
-        this.buffer.fill(value, this.offset, this.offset + len);
-        this.offset += len;
-        return this;
-    }
-    writeCString(str, encoding) {
-        const len = str ? Buffer.byteLength(str, encoding) : 0;
-        this.growSize(len + 1);
-        if (str) {
-            this.buffer.write(str, this.offset, encoding);
-            this.offset += len;
-        }
-        this.writeUInt8(0);
-        return this;
-    }
-    writeLString(str, encoding) {
-        const len = str ? Buffer.byteLength(str, encoding) : 0;
-        this.growSize(len + 4);
-        this.writeInt32BE(str == null ? -1 : len);
-        if (str) {
-            if (encoding)
-                this.offset += this.buffer.write(str, this.offset, encoding);
-            else
-                this.offset += this.buffer.write(str, this.offset);
-        }
-        return this;
-    }
-    writeString(str, encoding) {
-        if (str) {
-            const len = Buffer.byteLength(str, encoding);
-            this.growSize(len);
-            this.offset += this.buffer.write(str, this.offset, encoding);
-        }
-        return this;
-    }
-    writeInt8(n) {
-        this.growSize(1);
-        this.buffer.writeInt8(n, this.offset);
-        this.offset++;
-        return this;
-    }
-    writeUInt8(n) {
-        this.growSize(1);
-        this.buffer.writeUInt8(n, this.offset);
-        this.offset++;
-        return this;
-    }
-    writeUInt16BE(n) {
-        this.growSize(2);
-        this.buffer.writeUInt16BE(n, this.offset);
-        this.offset += 2;
-        return this;
-    }
-    writeUInt32BE(n) {
-        this.growSize(4);
-        this.buffer.writeUInt32BE(n, this.offset);
-        this.offset += 4;
-        return this;
-    }
-    writeInt16BE(n) {
-        this.growSize(2);
-        this.buffer.writeInt16BE(n, this.offset);
-        this.offset += 2;
-        return this;
-    }
-    writeInt32BE(n) {
-        this.growSize(4);
-        this.buffer.writeInt32BE(n, this.offset);
-        this.offset += 4;
-        return this;
-    }
-    writeBigInt64BE(n) {
-        n = typeof n === 'bigint' ? n : BigInt(n);
-        this.growSize(8);
-        if (typeof this.buffer.writeBigInt64BE === 'function')
-            this.buffer.writeBigInt64BE(n, this.offset);
-        else
-            (0, bigint_methods_js_1.writeBigUInt64BE)(this.buffer, n, this.offset);
-        this.offset += 8;
-        return this;
-    }
-    writeFloatBE(n) {
-        this.growSize(4);
-        this.buffer.writeFloatBE(n, this.offset);
-        this.offset += 4;
-        return this;
-    }
-    writeDoubleBE(n) {
-        this.growSize(8);
-        this.buffer.writeDoubleBE(n, this.offset);
-        this.offset += 8;
-        return this;
-    }
-    writeBuffer(buffer) {
-        this.growSize(buffer.length);
-        buffer.copy(this.buffer, this.offset, 0, buffer.length);
-        this.offset += buffer.length;
-        return this;
-    }
-    _houseKeep() {
-        const needSize = this._stMaxPages * this.pageSize;
-        if (this.buffer.length > needSize)
-            this.buffer = Buffer.allocUnsafe(needSize);
-        this._stMaxPages = this.length ? Math.ceil(this.length / this.pageSize) : 1;
-    }
-}
-exports.SmartBuffer = SmartBuffer;
-SmartBuffer.DEFAULT_PAGE_SIZE = 4096;
-SmartBuffer.DEFAULT_MAX_SIZE = Math.min(Math.floor(os.totalmem() / 2), 1024 * 1024 * 1024 * 2);
Index: node_modules/postgresql-client/cjs/connection/cursor.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/connection/cursor.js b/node_modules/postgresql-client/cjs/connection/cursor.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/connection/cursor.js	
+++ /dev/null	
@@ -1,93 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Cursor = void 0;
-const doublylinked_1 = __importDefault(require("doublylinked"));
-const power_tasks_1 = require("power-tasks");
-const safe_event_emitter_js_1 = require("../safe-event-emitter.js");
-const convert_row_to_object_js_1 = require("../util/convert-row-to-object.js");
-const parse_row_js_1 = require("../util/parse-row.js");
-class Cursor extends safe_event_emitter_js_1.SafeEventEmitter {
-    constructor(statement, portal, fields, parsers, queryOptions) {
-        super();
-        this._taskQueue = new power_tasks_1.TaskQueue({ concurrency: 1 });
-        this._rows = new doublylinked_1.default();
-        this._closed = false;
-        this._statement = statement;
-        this._portal = portal;
-        this._parsers = parsers;
-        this._queryOptions = queryOptions;
-        this.fields = fields;
-    }
-    get rowType() {
-        return this._queryOptions.objectRows ? 'object' : 'array';
-    }
-    get isClosed() {
-        return this._closed;
-    }
-    async next() {
-        if (!this._rows.length) {
-            if (this._closed)
-                return;
-            await this._fetchRows();
-        }
-        return this._rows.shift();
-    }
-    async fetch(nRows) {
-        const out = [];
-        if (this._closed)
-            return out;
-        for (let i = 0; i < nRows; i++) {
-            if (!this._rows.length)
-                await this._fetchRows();
-            if (this._rows.length)
-                out.push(this._rows.shift());
-            else
-                break;
-        }
-        return out;
-    }
-    async close() {
-        if (this._closed)
-            return;
-        await this._portal.close();
-        await this._statement.close();
-        this.emit('close');
-        this._closed = true;
-    }
-    async _fetchRows() {
-        if (this._closed)
-            return;
-        const portal = this._portal;
-        await this._taskQueue
-            .enqueue(async () => {
-            const queryOptions = this._queryOptions;
-            const r = await portal.execute(queryOptions.fetchCount || 100);
-            if (r && r.rows && r.rows.length) {
-                if (this._parsers) {
-                    const objectRows = queryOptions.objectRows;
-                    const fields = this.fields;
-                    const rows = r.rows;
-                    for (let i = 0; i < rows.length; i++) {
-                        const row = rows[i];
-                        (0, parse_row_js_1.parseRow)(this._parsers, row, this._queryOptions);
-                        if (objectRows)
-                            rows[i] = (0, convert_row_to_object_js_1.convertRowToObject)(fields, row);
-                    }
-                }
-                this._rows.push(...r.rows);
-                this.emit('fetch', r.rows);
-            }
-            else {
-                await this.close();
-            }
-        })
-            .toPromise();
-    }
-    [Symbol.asyncDispose]() {
-        return this.close();
-    }
-}
-exports.Cursor = Cursor;
Index: node_modules/postgresql-client/cjs/data-types/oid-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/oid-type.js b/node_modules/postgresql-client/cjs/data-types/oid-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/oid-type.js	
+++ /dev/null	
@@ -1,32 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.VectorOidType = exports.ArrayOidType = exports.OidType = void 0;
-const constants_js_1 = require("../constants.js");
-const fast_parseint_js_1 = require("../util/fast-parseint.js");
-exports.OidType = {
-    name: 'oid',
-    oid: constants_js_1.DataTypeOIDs.oid,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readUInt32BE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeUInt32BE((0, fast_parseint_js_1.fastParseInt)(v));
-    },
-    parseText: fast_parseint_js_1.fastParseInt,
-    isType(v) {
-        return typeof v === 'number' && Number.isInteger(v) && !!constants_js_1.DataTypeNames[v];
-    },
-};
-exports.ArrayOidType = {
-    ...exports.OidType,
-    name: '_oid',
-    oid: constants_js_1.DataTypeOIDs._oid,
-    elementsOID: constants_js_1.DataTypeOIDs.oid,
-};
-exports.VectorOidType = {
-    ...exports.OidType,
-    name: '_oidvector',
-    oid: constants_js_1.DataTypeOIDs.oidvector,
-    elementsOID: constants_js_1.DataTypeOIDs.oid,
-};
Index: node_modules/semver/functions/inc.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/inc.js b/node_modules/semver/functions/inc.js
--- a/node_modules/semver/functions/inc.js	
+++ b/node_modules/semver/functions/inc.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 
 const inc = (version, release, options, identifier, identifierBase) => {
Index: node_modules/semver/ranges/subset.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/subset.js b/node_modules/semver/ranges/subset.js
--- a/node_modules/semver/ranges/subset.js	
+++ b/node_modules/semver/ranges/subset.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const Range = require('../classes/range.js')
 const Comparator = require('../classes/comparator.js')
 const { ANY } = Comparator
Index: node_modules/postgresql-client/esm/util/stringify-for-sql.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/stringify-for-sql.js b/node_modules/postgresql-client/esm/util/stringify-for-sql.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/stringify-for-sql.js	
+++ /dev/null	
@@ -1,25 +0,0 @@
-import { UuidType } from '../data-types/uuid-type.js';
-import { escapeLiteral } from './escape-literal.js';
-export function stringifyArrayForSQL(v, options, encode) {
-    const arr = v.map(x => stringifyValueForSQL(x, options, encode));
-    return 'ARRAY[' + arr.join(',') + ']';
-}
-export function stringifyValueForSQL(v, options, encode) {
-    if (v == null)
-        return 'null';
-    if (typeof v === 'boolean')
-        return v ? 'true' : 'false';
-    if (Array.isArray(v))
-        return stringifyArrayForSQL(v, options, encode);
-    if (encode)
-        v = encode(v, options || {});
-    if (typeof v === 'number')
-        return '' + v;
-    if (typeof v === 'bigint')
-        return v.toString();
-    if (typeof v === 'string' && UuidType.isType(v))
-        return escapeLiteral('' + v) + '::uuid';
-    if (typeof v === 'object')
-        return escapeLiteral(JSON.stringify(v)) + '::json';
-    return escapeLiteral('' + v);
-}
Index: node_modules/strict-typed-events/cjs/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/strict-typed-events/cjs/index.js b/node_modules/strict-typed-events/cjs/index.js
--- a/node_modules/strict-typed-events/cjs/index.js	
+++ b/node_modules/strict-typed-events/cjs/index.js	
@@ -1,18 +1,5 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __exportStar = (this && this.__exportStar) || function(m, exports) {
-    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-__exportStar(require("./async-event-emitter.js"), exports);
-__exportStar(require("./typed-events.js"), exports);
+const tslib_1 = require("tslib");
+tslib_1.__exportStar(require("./async-event-emitter.js"), exports);
+tslib_1.__exportStar(require("./typed-events.js"), exports);
Index: node_modules/semver/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/index.js b/node_modules/semver/index.js
--- a/node_modules/semver/index.js	
+++ b/node_modules/semver/index.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 // just pre-load all the stuff that index.js lazily exports
 const internalRe = require('./internal/re')
 const constants = require('./internal/constants')
Index: node_modules/semver/internal/identifiers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/internal/identifiers.js b/node_modules/semver/internal/identifiers.js
--- a/node_modules/semver/internal/identifiers.js	
+++ b/node_modules/semver/internal/identifiers.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const numeric = /^[0-9]+$/
 const compareIdentifiers = (a, b) => {
   const anum = numeric.test(a)
Index: node_modules/postgresql-client/esm/interfaces/script-execute-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/script-execute-options.js b/node_modules/postgresql-client/esm/interfaces/script-execute-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/script-execute-options.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/semver/internal/lrucache.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/internal/lrucache.js b/node_modules/semver/internal/lrucache.js
--- a/node_modules/semver/internal/lrucache.js	
+++ b/node_modules/semver/internal/lrucache.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 class LRUCache {
   constructor () {
     this.max = 1000
Index: node_modules/postgresql-client/esm/util/escape-literal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/escape-literal.js b/node_modules/postgresql-client/esm/util/escape-literal.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/escape-literal.js	
+++ /dev/null	
@@ -1,23 +0,0 @@
-// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c
-export function escapeLiteral(str) {
-    let backSlash = false;
-    let out = "'";
-    let i;
-    let c;
-    const l = str.length;
-    for (i = 0; i < l; i++) {
-        c = str[i];
-        if (c === "'")
-            out += c + c;
-        else if (c === '\\') {
-            out += c + c;
-            backSlash = true;
-        }
-        else
-            out += c;
-    }
-    out += "'";
-    if (backSlash)
-        out = ' E' + out;
-    return out;
-}
Index: node_modules/ts-gems/lib/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/index.d.ts b/node_modules/ts-gems/lib/index.d.ts
--- a/node_modules/ts-gems/lib/index.d.ts	
+++ b/node_modules/ts-gems/lib/index.d.ts	
@@ -1,25 +1,27 @@
 // noinspection JSUnusedGlobalSymbols
 
-import { DeeperMutable, DeepMutable, Mutable } from './mutable';
-import { DeeperPartial, DeepPartial } from './partial';
-import { DeeperReadonly, DeepReadonly } from './readonly';
-import { DeeperRequired, DeepRequired } from './required';
+import type { DeeperMutable, DeepMutable, Mutable } from './mutable';
+import type { DeeperPartial, DeepPartial } from './partial';
+import type { DeeperReadonly, DeepReadonly } from './readonly';
+import type { DeeperRequired, DeepRequired } from './required';
 
-export * from './combine';
-export * from './dto';
-export * from './helpers';
-export * from './logical';
-export * from './mutable';
-export * from './nullish';
-export * from './omit';
-export * from './omit-never';
-export * from './opaque';
-export * from './partial';
-export * from './pick';
-export * from './readonly';
-export * from './required';
-export * from './type-check';
-export * from './types';
+export type * from './combine';
+export type * from './dto';
+export type * from './helpers';
+export type * from './logical';
+export type * from './mutable';
+export type * from './non-nullable';
+export type * from './nullish';
+export type * from './omit';
+export type * from './omit-never';
+export type * from './omit-undefined';
+export type * from './opaque';
+export type * from './partial';
+export type * from './pick';
+export type * from './readonly';
+export type * from './required';
+export type * from './type-check';
+export type * from './types';
 
 declare function asMutable<T>(x: T): Mutable<T>;
 
@@ -46,16 +48,16 @@
 declare function asDeeperRequired<T>(x: T): DeeperRequired<T>;
 
 export {
-  asMutable,
-  asDeepMutable,
   asDeeperMutable,
-  asReadonly,
-  asDeepReadonly,
+  asDeeperPartial,
   asDeeperReadonly,
-  asPartial,
+  asDeeperRequired,
+  asDeepMutable,
   asDeepPartial,
-  asDeeperPartial,
-  asRequired,
+  asDeepReadonly,
   asDeepRequired,
-  asDeeperRequired,
+  asMutable,
+  asPartial,
+  asReadonly,
+  asRequired,
 };
Index: node_modules/power-tasks/typings/task.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/typings/task.d.ts b/node_modules/power-tasks/typings/task.d.ts
deleted file mode 100644
--- a/node_modules/power-tasks/typings/task.d.ts	
+++ /dev/null	
@@ -1,125 +0,0 @@
-/// <reference types="node" />
-/// <reference types="node" />
-import { AsyncEventEmitter } from 'strict-typed-events';
-export type TaskFunction<T = any> = (args: TaskFunctionArgs) => T | Promise<T>;
-export type TaskLike<T = any> = Task<T> | TaskFunction;
-export type TaskStatus = 'idle' | 'waiting' | 'running' | 'fulfilled' | 'failed' | 'aborting' | 'aborted';
-export interface TaskFunctionArgs {
-    task: Task;
-    signal: AbortSignal;
-}
-export interface TaskOptions {
-    /**
-     * Id of the task.
-     */
-    id?: any;
-    /**
-     * Name of the task. This value is used to for dependency tree
-     */
-    name?: string;
-    /**
-     * Arguments to be passed to task function.
-     */
-    args?: any[];
-    /**
-     * The list of child tasks
-     */
-    children?: TaskLike[] | (() => TaskLike[] | Promise<TaskLike[]>);
-    /**
-     * The list of tasks to be waited before running this task.
-     */
-    dependencies?: (Task | string)[];
-    /**
-     * Number of concurrent tasks to run in parallel
-     */
-    concurrency?: number;
-    /**
-     * Abort after first task failure
-     */
-    bail?: boolean;
-    /**
-     * Run tasks one by one
-     */
-    serial?: boolean;
-    /**
-     * Run the task exclusively. If set true, the tasks in the queue waits for this task to complete
-     * even concurrency is greater than 1
-     */
-    exclusive?: boolean;
-    /**
-     * Time in milliseconds to wait for aborting tasks
-     */
-    abortTimeout?: number;
-    onStart?: (task: Task) => void;
-    onFinish?: (task: Task) => void;
-    onRun?: (task: Task) => void;
-    onStatusChange?: (task: Task) => void;
-    onUpdate?: (task: Task, properties: string[]) => void;
-    onUpdateRecursive?: (task: Task, properties: string[]) => void;
-}
-export interface TaskUpdateValues {
-    status?: TaskStatus;
-    message?: string;
-    error?: any;
-    result?: any;
-    waitingFor?: boolean;
-}
-declare class TaskContext {
-    executingTasks: Set<Task<any>>;
-    queue: Set<Task<any>>;
-    concurrency: number;
-    triggerPulse: () => void;
-}
-declare const taskContextKey: unique symbol;
-export declare class Task<T = any> extends AsyncEventEmitter {
-    protected [taskContextKey]?: TaskContext;
-    protected _id: string;
-    protected _options: TaskOptions;
-    protected _executeFn?: TaskFunction;
-    protected _children?: Task[];
-    protected _dependencies?: Task[];
-    protected _status: TaskStatus;
-    protected _message?: string;
-    protected _executeDuration?: number;
-    protected _error?: any;
-    protected _result?: T;
-    protected _isManaged?: boolean;
-    protected _abortController: AbortController;
-    protected _abortTimer?: NodeJS.Timeout;
-    protected _waitingFor?: Set<Task>;
-    protected _failedChildren?: Task[];
-    protected _abortedChildren?: Task[];
-    protected _failedDependencies?: Task[];
-    protected _childrenLeft?: Set<Task>;
-    constructor(children: TaskLike[], options?: Omit<TaskOptions, 'children'>);
-    constructor(execute: TaskFunction, options?: TaskOptions);
-    get id(): string;
-    get name(): string | undefined;
-    get children(): Task[] | undefined;
-    get options(): TaskOptions;
-    get message(): string;
-    get status(): TaskStatus;
-    get isStarted(): boolean;
-    get isFinished(): boolean;
-    get isFailed(): boolean;
-    get executeDuration(): number | undefined;
-    get result(): any;
-    get error(): any;
-    get dependencies(): Task[] | undefined;
-    get failedChildren(): Task[] | undefined;
-    get failedDependencies(): Task[] | undefined;
-    get needWaiting(): boolean;
-    getWaitingTasks(): Task[] | undefined;
-    abort(): this;
-    start(): this;
-    toPromise(): Promise<T>;
-    protected _determineChildrenTree(callback: (err?: any) => void): void;
-    protected _determineChildrenDependencies(scope: Task[]): void;
-    protected _captureDependencies(): void;
-    protected _start(): void;
-    protected _startChildren(): void;
-    protected _pulse(): void;
-    protected _update(prop: TaskUpdateValues): void;
-    protected _abortChildren(): Promise<void>;
-}
-export {};
Index: node_modules/postgresql-client/esm/data-types/timestamp-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/timestamp-type.js b/node_modules/postgresql-client/esm/data-types/timestamp-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/timestamp-type.js	
+++ /dev/null	
@@ -1,78 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { parseDateTime } from '../util/parse-datetime.js';
-const timeShift = 946684800000;
-const timeMul = 4294967296;
-export const TimestampType = {
-    name: 'timestamp',
-    oid: DataTypeOIDs.timestamp,
-    jsType: 'Date',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.timestamp);
-        const hi = v.readInt32BE();
-        const lo = v.readUInt32BE(4);
-        if (lo === 0xffffffff && hi === 0x7fffffff)
-            return fetchAsString ? 'infinity' : Infinity;
-        if (lo === 0x00000000 && hi === -0x80000000)
-            return fetchAsString ? '-infinity' : -Infinity;
-        // Shift from 2000 to 1970
-        let d = new Date((lo + hi * timeMul) / 1000 + timeShift);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
-        return fetchAsString ? dateToTimestampString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = parseDateTime(v, true, false, options.utcDates);
-        if (v === Infinity) {
-            buf.writeInt32BE(0x7fffffff); // hi
-            buf.writeUInt32BE(0xffffffff); // lo
-            return;
-        }
-        if (v === -Infinity) {
-            buf.writeInt32BE(-0x80000000); // hi
-            buf.writeUInt32BE(0x00000000); // lo
-            return;
-        }
-        if (!(v instanceof Date))
-            v = new Date(v);
-        // Postgresql ignores timezone data so we are
-        let n = options.utcDates ? v.getTime() : v.getTime() - v.getTimezoneOffset() * 60 * 1000;
-        n = (n - timeShift) * 1000;
-        const hi = Math.floor(n / timeMul);
-        const lo = n - hi * timeMul;
-        buf.writeInt32BE(hi);
-        buf.writeUInt32BE(lo);
-    },
-    parseText(v, options) {
-        if (options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.timestamp))
-            return v;
-        return parseDateTime(v, true, false, options.utcDates);
-    },
-    isType(v) {
-        return (v instanceof Date &&
-            !(v.getFullYear() === 1970 && v.getMonth() === 0 && v.getDate() === 1) &&
-            !(v.getHours() === 0 && v.getMinutes() === 0 && v.getSeconds() === 0 && v.getMilliseconds() === 0));
-    },
-};
-function padZero(v) {
-    return v < 9 ? '0' + v : '' + v;
-}
-function dateToTimestampString(d) {
-    return (d.getFullYear() +
-        '-' +
-        padZero(d.getMonth() + 1) +
-        '-' +
-        padZero(d.getDate()) +
-        ' ' +
-        padZero(d.getHours()) +
-        ':' +
-        padZero(d.getMinutes()) +
-        ':' +
-        padZero(d.getSeconds()));
-}
-export const ArrayTimestampType = {
-    ...TimestampType,
-    name: '_timestamp',
-    oid: DataTypeOIDs._timestamp,
-    elementsOID: DataTypeOIDs.timestamp,
-};
Index: node_modules/pg-connection-string/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-connection-string/index.js b/node_modules/pg-connection-string/index.js
--- a/node_modules/pg-connection-string/index.js	
+++ b/node_modules/pg-connection-string/index.js	
@@ -5,7 +5,7 @@
 //MIT License
 
 //parses a connection string
-function parse(str) {
+function parse(str, options = {}) {
   //unix socket
   if (str.charAt(0) === '/') {
     const config = str.split(' ')
@@ -19,15 +19,20 @@
   let dummyHost = false
   if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {
     // Ensure spaces are encoded as %20
-    str = encodeURI(str).replace(/\%25(\d\d)/g, '%$1')
+    str = encodeURI(str).replace(/%25(\d\d)/g, '%$1')
   }
 
   try {
-    result = new URL(str, 'postgres://base')
-  } catch (e) {
-    // The URL is invalid so try again with a dummy host
-    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')
-    dummyHost = true
+    try {
+      result = new URL(str, 'postgres://base')
+    } catch (e) {
+      // The URL is invalid so try again with a dummy host
+      result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')
+      dummyHost = true
+    }
+  } catch (err) {
+    // Remove the input from the error message to avoid leaking sensitive information
+    err.input && (err.input = '*****REDACTED*****')
   }
 
   // We'd like to use Object.fromEntries() here but Node.js 10 does not support it
@@ -87,26 +92,122 @@
     config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()
   }
 
-  switch (config.sslmode) {
-    case 'disable': {
-      config.ssl = false
-      break
+  if (options.useLibpqCompat && config.uselibpqcompat) {
+    throw new Error('Both useLibpqCompat and uselibpqcompat are set. Please use only one of them.')
+  }
+
+  if (config.uselibpqcompat === 'true' || options.useLibpqCompat) {
+    switch (config.sslmode) {
+      case 'disable': {
+        config.ssl = false
+        break
+      }
+      case 'prefer': {
+        config.ssl.rejectUnauthorized = false
+        break
+      }
+      case 'require': {
+        if (config.sslrootcert) {
+          // If a root CA is specified, behavior of `sslmode=require` will be the same as that of `verify-ca`
+          config.ssl.checkServerIdentity = function () {}
+        } else {
+          config.ssl.rejectUnauthorized = false
+        }
+        break
+      }
+      case 'verify-ca': {
+        if (!config.ssl.ca) {
+          throw new Error(
+            'SECURITY WARNING: Using sslmode=verify-ca requires specifying a CA with sslrootcert. If a public CA is used, verify-ca allows connections to a server that somebody else may have registered with the CA, making you vulnerable to Man-in-the-Middle attacks. Either specify a custom CA certificate with sslrootcert parameter or use sslmode=verify-full for proper security.'
+          )
+        }
+        config.ssl.checkServerIdentity = function () {}
+        break
+      }
+      case 'verify-full': {
+        break
+      }
     }
-    case 'prefer':
-    case 'require':
-    case 'verify-ca':
-    case 'verify-full': {
-      break
-    }
-    case 'no-verify': {
-      config.ssl.rejectUnauthorized = false
-      break
+  } else {
+    switch (config.sslmode) {
+      case 'disable': {
+        config.ssl = false
+        break
+      }
+      case 'prefer':
+      case 'require':
+      case 'verify-ca':
+      case 'verify-full': {
+        break
+      }
+      case 'no-verify': {
+        config.ssl.rejectUnauthorized = false
+        break
+      }
     }
   }
 
   return config
 }
 
+// convert pg-connection-string ssl config to a ClientConfig.ConnectionOptions
+function toConnectionOptions(sslConfig) {
+  const connectionOptions = Object.entries(sslConfig).reduce((c, [key, value]) => {
+    // we explicitly check for undefined and null instead of `if (value)` because some
+    // options accept falsy values. Example: `ssl.rejectUnauthorized = false`
+    if (value !== undefined && value !== null) {
+      c[key] = value
+    }
+
+    return c
+  }, {})
+
+  return connectionOptions
+}
+
+// convert pg-connection-string config to a ClientConfig
+function toClientConfig(config) {
+  const poolConfig = Object.entries(config).reduce((c, [key, value]) => {
+    if (key === 'ssl') {
+      const sslConfig = value
+
+      if (typeof sslConfig === 'boolean') {
+        c[key] = sslConfig
+      }
+
+      if (typeof sslConfig === 'object') {
+        c[key] = toConnectionOptions(sslConfig)
+      }
+    } else if (value !== undefined && value !== null) {
+      if (key === 'port') {
+        // when port is not specified, it is converted into an empty string
+        // we want to avoid NaN or empty string as a values in ClientConfig
+        if (value !== '') {
+          const v = parseInt(value, 10)
+          if (isNaN(v)) {
+            throw new Error(`Invalid ${key}: ${value}`)
+          }
+
+          c[key] = v
+        }
+      } else {
+        c[key] = value
+      }
+    }
+
+    return c
+  }, {})
+
+  return poolConfig
+}
+
+// parses a connection string into ClientConfig
+function parseIntoClientConfig(str) {
+  return toClientConfig(parse(str))
+}
+
 module.exports = parse
 
 parse.parse = parse
+parse.toClientConfig = toClientConfig
+parse.parseIntoClientConfig = parseIntoClientConfig
Index: node_modules/postgresql-client/esm/util/config-from-env.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/config-from-env.js b/node_modules/postgresql-client/esm/util/config-from-env.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/config-from-env.js	
+++ /dev/null	
@@ -1,26 +0,0 @@
-import { toInt, toIntDef } from 'putil-varhelpers';
-export function configFromEnv() {
-    const env = process.env;
-    const result = {};
-    result.host = env.PGHOST || env.PGHOSTADDR;
-    if (env.PGPORT)
-        result.port = toIntDef(env.PGPORT, 5432);
-    if (env.PGDATABASE)
-        result.database = env.PGDATABASE;
-    if (env.PGUSER)
-        result.user = env.PGUSER;
-    if (env.PGPASSWORD)
-        result.password = env.PGPASSWORD;
-    if (env.PGAPPNAME)
-        result.applicationName = env.PGAPPNAME;
-    if (env.PGTZ)
-        result.timezone = env.PGTZ;
-    if (env.PGSCHEMA)
-        result.schema = env.PGSCHEMA;
-    if (env.PGCONNECT_TIMEOUT)
-        result.connectTimeoutMs = toIntDef(env.PGCONNECT_TIMEOUT, 30000);
-    if (env.PGMAX_BUFFER_SIZE) {
-        result.buffer = { maxLength: toInt(env.PGMAX_BUFFER_SIZE) };
-    }
-    return result;
-}
Index: node_modules/postgresql-client/esm/data-types/jsonb-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/jsonb-type.js b/node_modules/postgresql-client/esm/data-types/jsonb-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/jsonb-type.js	
+++ /dev/null	
@@ -1,39 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { BufferReader } from '../protocol/buffer-reader.js';
-export const JsonbType = {
-    name: 'jsonb',
-    oid: DataTypeOIDs.jsonb,
-    jsType: 'string',
-    parseBinary(v, options) {
-        const buf = new BufferReader(v);
-        if (buf.readUInt8() !== 1)
-            throw new Error('Unexpected Jsonb version value in header');
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.json);
-        const content = buf.readLString(buf.length - buf.offset);
-        if (fetchAsString)
-            return content;
-        return content ? JSON.parse(content) : undefined;
-    },
-    encodeText(v) {
-        if (typeof v === 'object' || typeof v === 'bigint')
-            return JSON.stringify(v);
-        if (typeof v === 'boolean')
-            return v ? 'true' : 'false';
-        return '\x0001' + v;
-    },
-    parseText(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.json);
-        if (fetchAsString)
-            return v;
-        return v ? JSON.parse(v) : null;
-    },
-    isType(v) {
-        return v && typeof v === 'object';
-    },
-};
-export const ArrayJsonbType = {
-    ...JsonbType,
-    name: '_jsonb',
-    oid: DataTypeOIDs._jsonb,
-    elementsOID: DataTypeOIDs.jsonb,
-};
Index: node_modules/pg-protocol/dist/parser.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/parser.js b/node_modules/pg-protocol/dist/parser.js
--- a/node_modules/pg-protocol/dist/parser.js	
+++ b/node_modules/pg-protocol/dist/parser.js	
@@ -184,9 +184,9 @@
     }
     parseField() {
         const name = this.reader.cstring();
-        const tableID = this.reader.int32();
+        const tableID = this.reader.uint32();
         const columnID = this.reader.int16();
-        const dataTypeID = this.reader.int32();
+        const dataTypeID = this.reader.uint32();
         const dataTypeSize = this.reader.int16();
         const dataTypeModifier = this.reader.int32();
         const mode = this.reader.int16() === 0 ? 'text' : 'binary';
@@ -248,15 +248,17 @@
                 }
                 break;
             case 10: // AuthenticationSASL
-                message.name = 'authenticationSASL';
-                message.mechanisms = [];
-                let mechanism;
-                do {
-                    mechanism = this.reader.cstring();
-                    if (mechanism) {
-                        message.mechanisms.push(mechanism);
-                    }
-                } while (mechanism);
+                {
+                    message.name = 'authenticationSASL';
+                    message.mechanisms = [];
+                    let mechanism;
+                    do {
+                        mechanism = this.reader.cstring();
+                        if (mechanism) {
+                            message.mechanisms.push(mechanism);
+                        }
+                    } while (mechanism);
+                }
                 break;
             case 11: // AuthenticationSASLContinue
                 message.name = 'authenticationSASLContinue';
Index: node_modules/postgresql-client/cjs/data-types/numeric-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/numeric-type.js b/node_modules/postgresql-client/cjs/data-types/numeric-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/numeric-type.js	
+++ /dev/null	
@@ -1,125 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.numberBytesToString = exports.ArrayNumericType = exports.NumericType = void 0;
-const constants_js_1 = require("../constants.js");
-const NUMERIC_NEG = 0x4000;
-const NUMERIC_NAN = 0xc000;
-const DEC_DIGITS = 4;
-const ROUND_POWERS = [0, 1000, 100, 10];
-exports.NumericType = {
-    name: 'numeric',
-    oid: constants_js_1.DataTypeOIDs.numeric,
-    jsType: 'number',
-    parseBinary(v) {
-        const len = v.readInt16BE();
-        const weight = v.readInt16BE(2);
-        const sign = v.readInt16BE(4);
-        const scale = v.readInt16BE(6);
-        if (sign === NUMERIC_NAN)
-            return NaN;
-        const digits = [];
-        for (let i = 0; i < len; i++) {
-            digits[i] = v.readInt16BE(8 + i * 2);
-        }
-        const numString = numberBytesToString(digits, scale, weight, sign);
-        return parseFloat(numString);
-    },
-    encodeText(v) {
-        const n = typeof v === 'number' ? v : parseFloat(v);
-        return '' + n;
-    },
-    parseText: parseFloat,
-    isType(v) {
-        return typeof v === 'number';
-    },
-};
-exports.ArrayNumericType = {
-    ...exports.NumericType,
-    name: '_numeric',
-    oid: constants_js_1.DataTypeOIDs._numeric,
-    elementsOID: constants_js_1.DataTypeOIDs.numeric,
-};
-/* https://github.com/pgjdbc/pgjdbc/blob/3eca3a76aa4a04cb28cb960ed674cb67db30b5e3/pgjdbc/src/main/java/org/postgresql/util/ByteConverter.java */
-/**
- * Convert a number from binary representation to text representation.
- * @param digits array of shorts that can be decoded as the number String
- * @param scale the scale of the number binary representation
- * @param weight the weight of the number binary representation
- * @param sign the sign of the number
- * @return String the number as String
- */
-function numberBytesToString(digits, scale, weight, sign) {
-    let i;
-    let d;
-    /*
-     * Allocate space for the result.
-     *
-     * i is set to the # of decimal digits before decimal point.
-     * dscale is the # of decimal digits we will print after decimal point.
-     * We may generate as many as DEC_DIGITS-1 excess digits at the end, and in addition we
-     * need room for sign, decimal point, null terminator.
-     */
-    i = (weight + 1) * DEC_DIGITS;
-    if (i <= 0)
-        i = 1;
-    /*
-     * Output a dash for negative values
-     */
-    let out = sign === NUMERIC_NEG ? '-' : '';
-    /*
-     * Output all digits before the decimal point
-     */
-    if (weight < 0) {
-        d = weight + 1;
-        out += '0';
-    }
-    else {
-        for (d = 0; d <= weight; d++) {
-            /* In the first digit, suppress extra leading decimal zeroes */
-            out += digitToString(d, digits, d !== 0);
-        }
-    }
-    /*
-     * If requested, output a decimal point and all the digits that follow it.
-     * We initially put out a multiple of DEC_DIGITS digits, then truncate if
-     * needed.
-     */
-    if (scale > 0) {
-        out += '.';
-        for (i = 0; i < scale; d++, i += DEC_DIGITS) {
-            out += digitToString(d, digits, true);
-        }
-    }
-    const extra = (i - scale) % DEC_DIGITS;
-    return out.substr(0, out.length - extra);
-}
-exports.numberBytesToString = numberBytesToString;
-/* https://github.com/pgjdbc/pgjdbc/blob/3eca3a76aa4a04cb28cb960ed674cb67db30b5e3/pgjdbc/src/main/java/org/postgresql/util/ByteConverter.java */
-/**
- * Convert a number from binary representation to text representation.
- * @param idx index of the digit to be converted in the digits array
- * @param digits array of shorts that can be decoded as the number String
- * @param alwaysPutIt a flag that indicate whether or not to put the digit char even if it is zero
- * @return String the number as String
- */
-function digitToString(idx, digits, alwaysPutIt) {
-    let out = '';
-    let dig = idx >= 0 && idx < digits.length ? digits[idx] : 0;
-    // Each dig represents 4 decimal digits (e.g. 9999)
-    // If we continue the number, then we need to print 0 as 0000 (alwaysPutIt parameter is true)
-    for (let p = 1; p < ROUND_POWERS.length; p++) {
-        const pow = ROUND_POWERS[p];
-        const d1 = Math.trunc(dig / pow);
-        dig -= d1 * pow;
-        const putit = d1 > 0;
-        if (putit || alwaysPutIt) {
-            out += d1;
-            // We printed a character, so we need to print the rest of the current digits in dig
-            // For instance, we need to keep printing 000 from 1000 even if idx==0 (== it is the very
-            // beginning)
-            alwaysPutIt = true;
-        }
-    }
-    out += dig;
-    return out;
-}
Index: node_modules/postgresql-client/typings/util/wrap-row-description.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/wrap-row-description.d.ts b/node_modules/postgresql-client/typings/util/wrap-row-description.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/wrap-row-description.d.ts	
+++ /dev/null	
@@ -1,5 +0,0 @@
-import { DataFormat } from '../constants.js';
-import { DataTypeMap } from '../data-type-map.js';
-import { FieldInfo } from '../interfaces/field-info.js';
-import { Protocol } from '../protocol/protocol.js';
-export declare function wrapRowDescription(typeMap: DataTypeMap, fields: Protocol.RowDescription[], columnFormat: DataFormat | DataFormat[]): FieldInfo[];
Index: node_modules/ts-gems/lib/types.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/types.d.ts b/node_modules/ts-gems/lib/types.d.ts
--- a/node_modules/ts-gems/lib/types.d.ts	
+++ b/node_modules/ts-gems/lib/types.d.ts	
@@ -1,39 +1,10 @@
-/**
- * Declare ReadableStream and WritableStream in case dom.d.ts is not added to the tsconfig
- * lib causing ReadableStream or WritableStream interface is not defined.
- * For developers with dom.d.ts added, the ReadableStream and WritableStream
- * interface will be merged correctly.
- *
- * This is also required for any clients with streaming interface where ReadableStream
- * or WritableStream type is also referred.
- */
-declare global {
-  export interface ReadableStream<R = any> {
-    readonly locked: boolean;
-
-    cancel(reason?: any): Promise<void>;
-
-    getReader(options: { mode: 'byob' }): ReadableStreamBYOBReader;
-
-    getReader(): ReadableStreamDefaultReader<R>;
-
-    getReader(
-      options?: ReadableStreamGetReaderOptions,
-    ): ReadableStreamReader<R>;
-  }
-
-  export interface WritableStream<W = any> {
-    readonly locked: boolean;
-
-    abort(reason?: any): Promise<void>;
-
-    getWriter(): WritableStreamDefaultWriter<W>;
-  }
-}
+/// <reference lib="dom" />
 
 /**
  * BasicPrimitive
- * @desc Type representing [`BasicPrimitive`](https://www.typescriptlang.org/docs/handbook/release-notes/overview.html#smarter-type-alias-preservation) types in TypeScript
+ * @desc Type representing
+ * [`BasicPrimitive`](https://www.typescriptlang.org/docs/handbook/release-notes/overview.html#smarter-type-alias-preservation)
+ * types in TypeScript
  */
 type BasicPrimitive = number | string | boolean;
 
Index: node_modules/has-symbols/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-symbols/package.json b/node_modules/has-symbols/package.json
--- a/node_modules/has-symbols/package.json	
+++ b/node_modules/has-symbols/package.json	
@@ -1,21 +1,23 @@
 {
 	"name": "has-symbols",
-	"version": "1.0.3",
+	"version": "1.1.0",
 	"description": "Determine if the JS environment has Symbol support. Supports spec, or shams.",
 	"main": "index.js",
 	"scripts": {
+		"prepack": "npmignore --auto --commentLines=autogenerated",
 		"prepublishOnly": "safe-publish-latest",
 		"prepublish": "not-in-publish || npm run prepublishOnly",
 		"pretest": "npm run --silent lint",
 		"test": "npm run tests-only",
-		"posttest": "aud --production",
-		"tests-only": "npm run test:stock && npm run test:staging && npm run test:shams",
+		"posttest": "npx npm@'>=10.2' audit --production",
+		"tests-only": "npm run test:stock && npm run test:shams",
 		"test:stock": "nyc node test",
 		"test:staging": "nyc node --harmony --es-staging test",
 		"test:shams": "npm run --silent test:shams:getownpropertysymbols && npm run --silent test:shams:corejs",
 		"test:shams:corejs": "nyc node test/shams/core-js.js",
 		"test:shams:getownpropertysymbols": "nyc node test/shams/get-own-property-symbols.js",
 		"lint": "eslint --ext=js,mjs .",
+		"postlint": "tsc -p . && attw -P",
 		"version": "auto-changelog && git add CHANGELOG.md",
 		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
 	},
@@ -54,15 +56,22 @@
 	},
 	"homepage": "https://github.com/ljharb/has-symbols#readme",
 	"devDependencies": {
-		"@ljharb/eslint-config": "^20.2.3",
-		"aud": "^2.0.0",
-		"auto-changelog": "^2.4.0",
+		"@arethetypeswrong/cli": "^0.17.0",
+		"@ljharb/eslint-config": "^21.1.1",
+		"@ljharb/tsconfig": "^0.2.0",
+		"@types/core-js": "^2.5.8",
+		"@types/tape": "^5.6.5",
+		"auto-changelog": "^2.5.0",
 		"core-js": "^2.6.12",
+		"encoding": "^0.1.13",
 		"eslint": "=8.8.0",
 		"get-own-property-symbols": "^0.9.5",
+		"in-publish": "^2.0.1",
+		"npmignore": "^0.3.1",
 		"nyc": "^10.3.2",
 		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.5.2"
+		"tape": "^5.9.0",
+		"typescript": "next"
 	},
 	"testling": {
 		"files": "test/index.js",
@@ -93,9 +102,10 @@
 		"backfillLimit": false,
 		"hideCredit": true
 	},
-	"greenkeeper": {
+	"publishConfig": {
 		"ignore": [
-			"core-js"
+			".github/workflows",
+			"types"
 		]
 	}
 }
Index: node_modules/braces/lib/compile.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/lib/compile.js b/node_modules/braces/lib/compile.js
--- a/node_modules/braces/lib/compile.js	
+++ b/node_modules/braces/lib/compile.js	
@@ -4,30 +4,32 @@
 const utils = require('./utils');
 
 const compile = (ast, options = {}) => {
-  let walk = (node, parent = {}) => {
-    let invalidBlock = utils.isInvalidBrace(parent);
-    let invalidNode = node.invalid === true && options.escapeInvalid === true;
-    let invalid = invalidBlock === true || invalidNode === true;
-    let prefix = options.escapeInvalid === true ? '\\' : '';
+  const walk = (node, parent = {}) => {
+    const invalidBlock = utils.isInvalidBrace(parent);
+    const invalidNode = node.invalid === true && options.escapeInvalid === true;
+    const invalid = invalidBlock === true || invalidNode === true;
+    const prefix = options.escapeInvalid === true ? '\\' : '';
     let output = '';
 
     if (node.isOpen === true) {
       return prefix + node.value;
     }
+
     if (node.isClose === true) {
+      console.log('node.isClose', prefix, node.value);
       return prefix + node.value;
     }
 
     if (node.type === 'open') {
-      return invalid ? (prefix + node.value) : '(';
+      return invalid ? prefix + node.value : '(';
     }
 
     if (node.type === 'close') {
-      return invalid ? (prefix + node.value) : ')';
+      return invalid ? prefix + node.value : ')';
     }
 
     if (node.type === 'comma') {
-      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
+      return node.prev.type === 'comma' ? '' : invalid ? node.value : '|';
     }
 
     if (node.value) {
@@ -35,8 +37,8 @@
     }
 
     if (node.nodes && node.ranges > 0) {
-      let args = utils.reduce(node.nodes);
-      let range = fill(...args, { ...options, wrap: false, toRegex: true });
+      const args = utils.reduce(node.nodes);
+      const range = fill(...args, { ...options, wrap: false, toRegex: true, strictZeros: true });
 
       if (range.length !== 0) {
         return args.length > 1 && range.length > 1 ? `(${range})` : range;
@@ -44,10 +46,11 @@
     }
 
     if (node.nodes) {
-      for (let child of node.nodes) {
+      for (const child of node.nodes) {
         output += walk(child, node);
       }
     }
+
     return output;
   };
 
Index: node_modules/semver/internal/re.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/internal/re.js b/node_modules/semver/internal/re.js
--- a/node_modules/semver/internal/re.js	
+++ b/node_modules/semver/internal/re.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const {
   MAX_SAFE_COMPONENT_LENGTH,
   MAX_SAFE_BUILD_LENGTH,
@@ -10,6 +12,7 @@
 const re = exports.re = []
 const safeRe = exports.safeRe = []
 const src = exports.src = []
+const safeSrc = exports.safeSrc = []
 const t = exports.t = {}
 let R = 0
 
@@ -42,6 +45,7 @@
   debug(name, index, value)
   t[name] = index
   src[index] = value
+  safeSrc[index] = safe
   re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
   safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
 }
@@ -74,12 +78,14 @@
 
 // ## Pre-release Version Identifier
 // A numeric identifier, or a non-numeric identifier.
+// Non-numberic identifiers include numberic identifiers but can be longer.
+// Therefore non-numberic identifiers must go first.
 
-createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
-}|${src[t.NONNUMERICIDENTIFIER]})`)
+createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NONNUMERICIDENTIFIER]
+}|${src[t.NUMERICIDENTIFIER]})`)
 
-createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
-}|${src[t.NONNUMERICIDENTIFIER]})`)
+createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NONNUMERICIDENTIFIER]
+}|${src[t.NUMERICIDENTIFIERLOOSE]})`)
 
 // ## Pre-release Version
 // Hyphen, followed by one or more dot-separated pre-release version
Index: node_modules/pg-protocol/dist/serializer.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/serializer.js.map b/node_modules/pg-protocol/dist/serializer.js.map
--- a/node_modules/pg-protocol/dist/serializer.js.map	
+++ b/node_modules/pg-protocol/dist/serializer.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../src/serializer.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../src/serializer.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
Index: node_modules/postgresql-client/cjs/util/config-from-env.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/config-from-env.js b/node_modules/postgresql-client/cjs/util/config-from-env.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/config-from-env.js	
+++ /dev/null	
@@ -1,30 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.configFromEnv = void 0;
-const putil_varhelpers_1 = require("putil-varhelpers");
-function configFromEnv() {
-    const env = process.env;
-    const result = {};
-    result.host = env.PGHOST || env.PGHOSTADDR;
-    if (env.PGPORT)
-        result.port = (0, putil_varhelpers_1.toIntDef)(env.PGPORT, 5432);
-    if (env.PGDATABASE)
-        result.database = env.PGDATABASE;
-    if (env.PGUSER)
-        result.user = env.PGUSER;
-    if (env.PGPASSWORD)
-        result.password = env.PGPASSWORD;
-    if (env.PGAPPNAME)
-        result.applicationName = env.PGAPPNAME;
-    if (env.PGTZ)
-        result.timezone = env.PGTZ;
-    if (env.PGSCHEMA)
-        result.schema = env.PGSCHEMA;
-    if (env.PGCONNECT_TIMEOUT)
-        result.connectTimeoutMs = (0, putil_varhelpers_1.toIntDef)(env.PGCONNECT_TIMEOUT, 30000);
-    if (env.PGMAX_BUFFER_SIZE) {
-        result.buffer = { maxLength: (0, putil_varhelpers_1.toInt)(env.PGMAX_BUFFER_SIZE) };
-    }
-    return result;
-}
-exports.configFromEnv = configFromEnv;
Index: node_modules/object-inspect/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/object-inspect/CHANGELOG.md b/node_modules/object-inspect/CHANGELOG.md
--- a/node_modules/object-inspect/CHANGELOG.md	
+++ b/node_modules/object-inspect/CHANGELOG.md	
@@ -5,6 +5,41 @@
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+## [v1.13.4](https://github.com/inspect-js/object-inspect/compare/v1.13.3...v1.13.4) - 2025-02-04
+
+### Commits
+
+- [Fix] avoid being fooled by a `Symbol.toStringTag` [`fa5870d`](https://github.com/inspect-js/object-inspect/commit/fa5870da468a525d2f20193700f70752f506cbf7)
+- [Tests] fix tests in node v6.0 - v6.4 [`2abfe1b`](https://github.com/inspect-js/object-inspect/commit/2abfe1bc3c69f9293c07c5cd65a9d7d87a628b84)
+- [Dev Deps] update `es-value-fixtures`, `for-each`, `has-symbols` [`3edfb01`](https://github.com/inspect-js/object-inspect/commit/3edfb01cc8cce220fba0dfdfe2dc8bc955758cdd)
+
+## [v1.13.3](https://github.com/inspect-js/object-inspect/compare/v1.13.2...v1.13.3) - 2024-11-09
+
+### Commits
+
+- [actions] split out node 10-20, and 20+ [`44395a8`](https://github.com/inspect-js/object-inspect/commit/44395a8fc1deda6718a5e125e86b9ffcaa1c7580)
+- [Fix] `quoteStyle`: properly escape only the containing quotes [`5137f8f`](https://github.com/inspect-js/object-inspect/commit/5137f8f7bea69a7fc671bb683fd35f244f38fc52)
+- [Refactor] clean up `quoteStyle` code [`450680c`](https://github.com/inspect-js/object-inspect/commit/450680cd50de4e689ee3b8e1d6db3a1bcf3fc18c)
+- [Tests] add `quoteStyle` escaping tests [`e997c59`](https://github.com/inspect-js/object-inspect/commit/e997c595aeaea84fd98ca35d7e1c3b5ab3ae26e0)
+- [Dev Deps] update `auto-changelog`, `es-value-fixtures`, `tape` [`d5a469c`](https://github.com/inspect-js/object-inspect/commit/d5a469c99ec07ccaeafc36ac4b36a93285086d48)
+- [Tests] replace `aud` with `npm audit` [`fb7815f`](https://github.com/inspect-js/object-inspect/commit/fb7815f9b72cae277a04f65bbb0543f85b88be62)
+- [Dev Deps] update `mock-property` [`11c817b`](https://github.com/inspect-js/object-inspect/commit/11c817bf10392aa017755962ba6bc89d731359ee)
+
+## [v1.13.2](https://github.com/inspect-js/object-inspect/compare/v1.13.1...v1.13.2) - 2024-06-21
+
+### Commits
+
+- [readme] update badges [`8a51e6b`](https://github.com/inspect-js/object-inspect/commit/8a51e6bedaf389ec40cc4659e9df53e8543d176e)
+- [Dev Deps] update `@ljharb/eslint-config`, `tape` [`ef05f58`](https://github.com/inspect-js/object-inspect/commit/ef05f58c9761a41416ab907299bf0fa79517014b)
+- [Dev Deps] update `error-cause`, `has-tostringtag`, `tape` [`c0c6c26`](https://github.com/inspect-js/object-inspect/commit/c0c6c26c44cee6671f7c5d43d2b91d27c5c00d90)
+- [Fix] Don't throw when `global` is not defined [`d4d0965`](https://github.com/inspect-js/object-inspect/commit/d4d096570f7dbd0e03266a96de11d05eb7b63e0f)
+- [meta] add missing `engines.node` [`17a352a`](https://github.com/inspect-js/object-inspect/commit/17a352af6fe1ba6b70a19081674231eb1a50c940)
+- [Dev Deps] update `globalthis` [`9c08884`](https://github.com/inspect-js/object-inspect/commit/9c08884aa662a149e2f11403f413927736b97da7)
+- [Dev Deps] update `error-cause` [`6af352d`](https://github.com/inspect-js/object-inspect/commit/6af352d7c3929a4cc4c55768c27bf547a5e900f4)
+- [Dev Deps] update `npmignore` [`94e617d`](https://github.com/inspect-js/object-inspect/commit/94e617d38831722562fa73dff4c895746861d267)
+- [Dev Deps] update `mock-property` [`2ac24d7`](https://github.com/inspect-js/object-inspect/commit/2ac24d7e58cd388ad093c33249e413e05bbfd6c3)
+- [Dev Deps] update `tape` [`46125e5`](https://github.com/inspect-js/object-inspect/commit/46125e58f1d1dcfb170ed3d1ea69da550ea8d77b)
+
 ## [v1.13.1](https://github.com/inspect-js/object-inspect/compare/v1.13.0...v1.13.1) - 2023-10-19
 
 ### Commits
Index: node_modules/postgresql-client/cjs/data-types/jsonb-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/jsonb-type.js b/node_modules/postgresql-client/cjs/data-types/jsonb-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/jsonb-type.js	
+++ /dev/null	
@@ -1,42 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayJsonbType = exports.JsonbType = void 0;
-const constants_js_1 = require("../constants.js");
-const buffer_reader_js_1 = require("../protocol/buffer-reader.js");
-exports.JsonbType = {
-    name: 'jsonb',
-    oid: constants_js_1.DataTypeOIDs.jsonb,
-    jsType: 'string',
-    parseBinary(v, options) {
-        const buf = new buffer_reader_js_1.BufferReader(v);
-        if (buf.readUInt8() !== 1)
-            throw new Error('Unexpected Jsonb version value in header');
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.json);
-        const content = buf.readLString(buf.length - buf.offset);
-        if (fetchAsString)
-            return content;
-        return content ? JSON.parse(content) : undefined;
-    },
-    encodeText(v) {
-        if (typeof v === 'object' || typeof v === 'bigint')
-            return JSON.stringify(v);
-        if (typeof v === 'boolean')
-            return v ? 'true' : 'false';
-        return '\x0001' + v;
-    },
-    parseText(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.json);
-        if (fetchAsString)
-            return v;
-        return v ? JSON.parse(v) : null;
-    },
-    isType(v) {
-        return v && typeof v === 'object';
-    },
-};
-exports.ArrayJsonbType = {
-    ...exports.JsonbType,
-    name: '_jsonb',
-    oid: constants_js_1.DataTypeOIDs._jsonb,
-    elementsOID: constants_js_1.DataTypeOIDs.jsonb,
-};
Index: node_modules/semver/classes/semver.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/classes/semver.js b/node_modules/semver/classes/semver.js
--- a/node_modules/semver/classes/semver.js	
+++ b/node_modules/semver/classes/semver.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const debug = require('../internal/debug')
 const { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')
 const { safeRe: re, t } = require('../internal/re')
@@ -10,7 +12,7 @@
 
     if (version instanceof SemVer) {
       if (version.loose === !!options.loose &&
-          version.includePrerelease === !!options.includePrerelease) {
+        version.includePrerelease === !!options.includePrerelease) {
         return version
       } else {
         version = version.version
@@ -176,6 +178,19 @@
   // preminor will bump the version up to the next minor release, and immediately
   // down to pre-release. premajor and prepatch work the same way.
   inc (release, identifier, identifierBase) {
+    if (release.startsWith('pre')) {
+      if (!identifier && identifierBase === false) {
+        throw new Error('invalid increment argument: identifier is empty')
+      }
+      // Avoid an invalid semver results
+      if (identifier) {
+        const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE])
+        if (!match || match[1] !== identifier) {
+          throw new Error(`invalid identifier: ${identifier}`)
+        }
+      }
+    }
+
     switch (release) {
       case 'premajor':
         this.prerelease.length = 0
@@ -206,6 +221,12 @@
         }
         this.inc('pre', identifier, identifierBase)
         break
+      case 'release':
+        if (this.prerelease.length === 0) {
+          throw new Error(`version ${this.raw} is not a prerelease`)
+        }
+        this.prerelease.length = 0
+        break
 
       case 'major':
         // If this is a pre-major version, bump up to the same major version.
@@ -249,10 +270,6 @@
       case 'pre': {
         const base = Number(identifierBase) ? 1 : 0
 
-        if (!identifier && identifierBase === false) {
-          throw new Error('invalid increment argument: identifier is empty')
-        }
-
         if (this.prerelease.length === 0) {
           this.prerelease = [base]
         } else {
Index: node_modules/postgresql-client/typings/connection/intl-connection.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/connection/intl-connection.d.ts b/node_modules/postgresql-client/typings/connection/intl-connection.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/connection/intl-connection.d.ts	
+++ /dev/null	
@@ -1,40 +0,0 @@
-import { TaskQueue } from 'power-tasks';
-import { ConnectionState } from '../constants.js';
-import { ConnectionConfiguration } from '../interfaces/database-connection-params.js';
-import { ScriptExecuteOptions } from '../interfaces/script-execute-options.js';
-import { ScriptResult } from '../interfaces/script-result.js';
-import { PgSocket } from '../protocol/pg-socket.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { Maybe } from '../types.js';
-import { Connection } from './connection.js';
-export declare class IntlConnection extends SafeEventEmitter {
-    protected _refCount: number;
-    protected _config: ConnectionConfiguration;
-    protected _onErrorSavePoint: string;
-    transactionStatus: string;
-    socket: PgSocket;
-    statementQueue: TaskQueue;
-    constructor(config?: ConnectionConfiguration | string);
-    get config(): ConnectionConfiguration;
-    get inTransaction(): boolean;
-    get state(): ConnectionState;
-    get refCount(): number;
-    get processID(): Maybe<number>;
-    get secretKey(): Maybe<number>;
-    get sessionParameters(): Record<string, string>;
-    connect(): Promise<void>;
-    close(): Promise<void>;
-    execute(sql: string, options?: ScriptExecuteOptions, cb?: (event: string, ...args: any[]) => void): Promise<ScriptResult>;
-    startTransaction(): Promise<void>;
-    savepoint(name: string): Promise<void>;
-    commit(): Promise<void>;
-    rollback(): Promise<void>;
-    rollbackToSavepoint(name: string): Promise<void>;
-    releaseSavepoint(name: string): Promise<void>;
-    ref(): void;
-    unref(): boolean;
-    assertConnected(): void;
-    protected _execute(sql: string, options?: ScriptExecuteOptions, cb?: (event: string, ...args: any[]) => void): Promise<ScriptResult>;
-    protected _onError(err: Error): void;
-}
-export declare function getIntlConnection(connection: Connection): IntlConnection;
Index: node_modules/postgresql-client/cjs/data-types/int8-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/int8-type.js b/node_modules/postgresql-client/cjs/data-types/int8-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/int8-type.js	
+++ /dev/null	
@@ -1,31 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayInt8Type = exports.Int8Type = void 0;
-const constants_js_1 = require("../constants.js");
-const bigint_methods_js_1 = require("../util/bigint-methods.js");
-const maxSafeInteger = BigInt(Number.MAX_SAFE_INTEGER);
-exports.Int8Type = {
-    name: 'int8',
-    oid: constants_js_1.DataTypeOIDs.int8,
-    jsType: 'BigInt',
-    parseBinary(buf) {
-        const v = typeof buf.readBigInt64BE === 'function' ? buf.readBigInt64BE(0) : (0, bigint_methods_js_1.readBigInt64BE)(buf);
-        return v >= -maxSafeInteger && v <= maxSafeInteger ? Number(v) : v;
-    },
-    encodeBinary(buf, v) {
-        buf.writeBigInt64BE(v);
-    },
-    parseText(s) {
-        const v = BigInt(s);
-        return v >= -maxSafeInteger && v <= maxSafeInteger ? Number(v) : v;
-    },
-    isType(v) {
-        return typeof v === 'bigint' || (typeof v === 'number' && Number.isInteger(v) && v > Number.MAX_SAFE_INTEGER);
-    },
-};
-exports.ArrayInt8Type = {
-    ...exports.Int8Type,
-    name: '_int8',
-    oid: constants_js_1.DataTypeOIDs._int8,
-    elementsOID: constants_js_1.DataTypeOIDs.int8,
-};
Index: node_modules/lightning-pool/esm/pool-request.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/pool-request.js b/node_modules/lightning-pool/esm/pool-request.js
--- a/node_modules/lightning-pool/esm/pool-request.js	
+++ b/node_modules/lightning-pool/esm/pool-request.js	
@@ -1,11 +1,10 @@
-// eslint-disable-next-line @typescript-eslint/no-empty-function
-function noop() {
-}
+function noop() { }
 export class PoolRequest {
-    constructor(pool, callback) {
+    constructor(pool, callback, options) {
         this.timedOut = false;
         this.created = Date.now();
         this.callback = callback || noop;
+        this.options = options;
         if (pool.options.acquireTimeoutMillis) {
             this.timeoutHandle = setTimeout(() => {
                 this.timedOut = true;
Index: node_modules/postgresql-client/typings/data-types/char-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/char-type.d.ts b/node_modules/postgresql-client/typings/data-types/char-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/char-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const CharType: DataType;
-export declare const ArrayCharType: DataType;
Index: node_modules/postgresql-client/cjs/connection/intl-connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/connection/intl-connection.js b/node_modules/postgresql-client/cjs/connection/intl-connection.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/connection/intl-connection.js	
+++ /dev/null	
@@ -1,243 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getIntlConnection = exports.IntlConnection = void 0;
-const power_tasks_1 = require("power-tasks");
-const putil_varhelpers_1 = require("putil-varhelpers");
-const constants_js_1 = require("../constants.js");
-const data_type_map_js_1 = require("../data-type-map.js");
-const pg_socket_js_1 = require("../protocol/pg-socket.js");
-const protocol_js_1 = require("../protocol/protocol.js");
-const safe_event_emitter_js_1 = require("../safe-event-emitter.js");
-const connection_config_js_1 = require("../util/connection-config.js");
-const convert_row_to_object_js_1 = require("../util/convert-row-to-object.js");
-const escape_literal_js_1 = require("../util/escape-literal.js");
-const get_parsers_js_1 = require("../util/get-parsers.js");
-const parse_row_js_1 = require("../util/parse-row.js");
-const wrap_row_description_js_1 = require("../util/wrap-row-description.js");
-const DataFormat = protocol_js_1.Protocol.DataFormat;
-class IntlConnection extends safe_event_emitter_js_1.SafeEventEmitter {
-    constructor(config) {
-        super();
-        this._refCount = 0;
-        this.transactionStatus = 'I';
-        this.statementQueue = new power_tasks_1.TaskQueue({ concurrency: 1 });
-        this._config = Object.freeze((0, connection_config_js_1.getConnectionConfig)(config));
-        this.socket = new pg_socket_js_1.PgSocket(this._config);
-        this.socket.on('error', err => this._onError(err));
-        this.socket.on('close', () => this.emit('close'));
-        this.socket.on('notification', payload => this.emit('notification', payload));
-        this.socket.on('connecting', () => this.emit('connecting'));
-        this._onErrorSavePoint = 'SP_' + Math.round(Math.random() * 100000000);
-    }
-    get config() {
-        return this._config;
-    }
-    get inTransaction() {
-        return this.transactionStatus === 'T' || this.transactionStatus === 'E';
-    }
-    get state() {
-        return this.socket.state;
-    }
-    get refCount() {
-        return this._refCount;
-    }
-    get processID() {
-        return this.socket.processID;
-    }
-    get secretKey() {
-        return this.socket.secretKey;
-    }
-    get sessionParameters() {
-        return this.socket.sessionParameters;
-    }
-    async connect() {
-        if (this.socket.state === constants_js_1.ConnectionState.READY)
-            return;
-        await new Promise((resolve, reject) => {
-            const handleConnectError = err => reject(err);
-            this.socket.once('ready', () => {
-                this.socket.removeListener('error', handleConnectError);
-                resolve();
-            });
-            this.socket.once('error', handleConnectError);
-            this.socket.connect();
-        });
-        let startupCommand = '';
-        if (this.config.schema)
-            startupCommand += 'SET search_path = ' + (0, escape_literal_js_1.escapeLiteral)(this.config.schema) + ';';
-        if (this.config.timezone)
-            startupCommand += 'SET timezone TO ' + (0, escape_literal_js_1.escapeLiteral)(this.config.timezone) + ';';
-        if (startupCommand)
-            await this.execute(startupCommand, { autoCommit: true });
-        this.emit('ready');
-    }
-    async close() {
-        if (this.state === constants_js_1.ConnectionState.CLOSED)
-            return;
-        this.statementQueue.clearQueue();
-        return new Promise(resolve => {
-            if (this.socket.state === constants_js_1.ConnectionState.CLOSED)
-                return;
-            this.socket.once('close', resolve);
-            this.socket.sendTerminateMessage(() => {
-                this.socket.close();
-                this.emit('close');
-            });
-        });
-    }
-    async execute(sql, options, cb) {
-        this.assertConnected();
-        return this.statementQueue
-            .enqueue(async () => {
-            const transactionCommand = sql.match(/^(\bBEGIN\b|\bCOMMIT\b|\bSTART\b|\bROLLBACK|SAVEPOINT|RELEASE\b)/i);
-            let beginFirst = false;
-            let commitLast = false;
-            if (!transactionCommand) {
-                if (!this.inTransaction &&
-                    (options?.autoCommit != null ? options?.autoCommit : this.config.autoCommit) === false) {
-                    beginFirst = true;
-                }
-                if (this.inTransaction && options?.autoCommit)
-                    commitLast = true;
-            }
-            if (beginFirst)
-                await this._execute('BEGIN');
-            const rollbackOnError = !transactionCommand &&
-                (options?.rollbackOnError != null
-                    ? options.rollbackOnError
-                    : (0, putil_varhelpers_1.coerceToBoolean)(this.config.rollbackOnError, true));
-            if (this.inTransaction && rollbackOnError)
-                await this._execute('SAVEPOINT ' + this._onErrorSavePoint);
-            try {
-                const result = await this._execute(sql, options, cb);
-                if (commitLast)
-                    await this._execute('COMMIT');
-                else if (this.inTransaction && rollbackOnError)
-                    await this._execute('RELEASE ' + this._onErrorSavePoint + ';');
-                return result;
-            }
-            catch (e) {
-                if (this.inTransaction && rollbackOnError)
-                    await this._execute('ROLLBACK TO ' + this._onErrorSavePoint + ';');
-                throw e;
-            }
-        })
-            .toPromise();
-    }
-    async startTransaction() {
-        if (!this.inTransaction)
-            await this.execute('BEGIN');
-    }
-    async savepoint(name) {
-        if (!(name && name.match(/^[a-zA-Z]\w+$/)))
-            throw new Error(`Invalid savepoint "${name}`);
-        await this.execute('BEGIN; SAVEPOINT ' + name);
-    }
-    async commit() {
-        if (this.inTransaction)
-            await this.execute('COMMIT');
-    }
-    async rollback() {
-        if (this.inTransaction)
-            await this.execute('ROLLBACK');
-    }
-    async rollbackToSavepoint(name) {
-        if (!(name && name.match(/^[a-zA-Z]\w+$/)))
-            throw new Error(`Invalid savepoint "${name}`);
-        await this.execute('ROLLBACK TO SAVEPOINT ' + name, { autoCommit: false });
-    }
-    async releaseSavepoint(name) {
-        if (!(name && name.match(/^[a-zA-Z]\w+$/)))
-            throw new Error(`Invalid savepoint "${name}`);
-        await this.execute('RELEASE SAVEPOINT ' + name, { autoCommit: false });
-    }
-    ref() {
-        this._refCount++;
-    }
-    unref() {
-        this._refCount--;
-        return !this._refCount;
-    }
-    assertConnected() {
-        if (this.state === constants_js_1.ConnectionState.CLOSING)
-            throw new Error('Connection is closing');
-        if (this.state === constants_js_1.ConnectionState.CLOSED)
-            throw new Error('Connection closed');
-    }
-    async _execute(sql, options, cb) {
-        this.ref();
-        try {
-            const startTime = Date.now();
-            const result = {
-                totalCommands: 0,
-                totalTime: 0,
-                results: [],
-            };
-            const opts = options || {};
-            this.socket.sendQueryMessage(sql);
-            let currentStart = Date.now();
-            let parsers;
-            let current = { command: undefined };
-            let fields;
-            const typeMap = opts.typeMap || data_type_map_js_1.GlobalTypeMap;
-            return await this.socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case protocol_js_1.Protocol.BackendMessageCode.NoticeResponse:
-                    case protocol_js_1.Protocol.BackendMessageCode.CopyInResponse:
-                    case protocol_js_1.Protocol.BackendMessageCode.CopyOutResponse:
-                    case protocol_js_1.Protocol.BackendMessageCode.EmptyQueryResponse:
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.RowDescription:
-                        fields = msg.fields;
-                        parsers = (0, get_parsers_js_1.getParsers)(typeMap, fields);
-                        current.fields = (0, wrap_row_description_js_1.wrapRowDescription)(typeMap, fields, DataFormat.text);
-                        current.rows = [];
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.DataRow:
-                        let row = msg.columns.map((x) => x.toString('utf8'));
-                        (0, parse_row_js_1.parseRow)(parsers, row, opts);
-                        if (opts.objectRows && current.fields)
-                            row = (0, convert_row_to_object_js_1.convertRowToObject)(current.fields, row);
-                        if (cb)
-                            cb('row', row);
-                        current.rows = current.rows || [];
-                        current.rows.push(row);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.CommandComplete:
-                        // Ignore BEGIN command that we added to sql
-                        current.command = msg.command;
-                        if (current.command === 'DELETE' || current.command === 'INSERT' || current.command === 'UPDATE')
-                            current.rowsAffected = msg.rowCount;
-                        current.executeTime = Date.now() - currentStart;
-                        if (current.rows)
-                            current.rowType = opts.objectRows && current.fields ? 'object' : 'array';
-                        result.results.push(current);
-                        if (cb)
-                            cb('command-complete', current);
-                        current = { command: undefined };
-                        currentStart = Date.now();
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.ReadyForQuery:
-                        this.transactionStatus = msg.status;
-                        result.totalTime = Date.now() - startTime;
-                        // Ignore COMMIT command that we added to sql
-                        result.totalCommands = result.results.length;
-                        done(undefined, result);
-                }
-            });
-        }
-        finally {
-            this.unref();
-        }
-    }
-    _onError(err) {
-        if (this.socket.state !== constants_js_1.ConnectionState.READY)
-            return;
-        this.emit('error', err);
-    }
-}
-exports.IntlConnection = IntlConnection;
-function getIntlConnection(connection) {
-    return connection._intlCon;
-}
-exports.getIntlConnection = getIntlConnection;
Index: node_modules/qs/lib/stringify.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/lib/stringify.js b/node_modules/qs/lib/stringify.js
--- a/node_modules/qs/lib/stringify.js	
+++ b/node_modules/qs/lib/stringify.js	
@@ -19,7 +19,6 @@
 };
 
 var isArray = Array.isArray;
-var split = String.prototype.split;
 var push = Array.prototype.push;
 var pushToArray = function (arr, valueOrArray) {
     push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
@@ -31,10 +30,13 @@
 var defaults = {
     addQueryPrefix: false,
     allowDots: false,
+    allowEmptyArrays: false,
+    arrayFormat: 'indices',
     charset: 'utf-8',
     charsetSentinel: false,
     delimiter: '&',
     encode: true,
+    encodeDotInKeys: false,
     encoder: utils.encode,
     encodeValuesOnly: false,
     format: defaultFormat,
@@ -63,8 +65,10 @@
     prefix,
     generateArrayPrefix,
     commaRoundTrip,
+    allowEmptyArrays,
     strictNullHandling,
     skipNulls,
+    encodeDotInKeys,
     encoder,
     filter,
     sort,
@@ -121,14 +125,6 @@
     if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
         if (encoder) {
             var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
-            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
-                var valuesArray = split.call(String(obj), ',');
-                var valuesJoined = '';
-                for (var i = 0; i < valuesArray.length; ++i) {
-                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));
-                }
-                return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];
-            }
             return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
         }
         return [formatter(prefix) + '=' + formatter(String(obj))];
@@ -143,6 +139,9 @@
     var objKeys;
     if (generateArrayPrefix === 'comma' && isArray(obj)) {
         // we need to join elements in
+        if (encodeValuesOnly && encoder) {
+            obj = utils.maybeMap(obj, encoder);
+        }
         objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
     } else if (isArray(filter)) {
         objKeys = filter;
@@ -151,7 +150,13 @@
         objKeys = sort ? keys.sort(sort) : keys;
     }
 
-    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;
+    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, '%2E') : prefix;
+
+    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;
+
+    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
+        return adjustedPrefix + '[]';
+    }
 
     for (var j = 0; j < objKeys.length; ++j) {
         var key = objKeys[j];
@@ -161,9 +166,10 @@
             continue;
         }
 
+        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, '%2E') : key;
         var keyPrefix = isArray(obj)
-            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix
-            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');
+            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix
+            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');
 
         sideChannel.set(object, step);
         var valueSideChannel = getSideChannel();
@@ -173,9 +179,11 @@
             keyPrefix,
             generateArrayPrefix,
             commaRoundTrip,
+            allowEmptyArrays,
             strictNullHandling,
             skipNulls,
-            encoder,
+            encodeDotInKeys,
+            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,
             filter,
             sort,
             allowDots,
@@ -196,6 +204,14 @@
         return defaults;
     }
 
+    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
+        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
+    }
+
+    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {
+        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');
+    }
+
     if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
         throw new TypeError('Encoder has to be a function.');
     }
@@ -219,13 +235,32 @@
         filter = opts.filter;
     }
 
+    var arrayFormat;
+    if (opts.arrayFormat in arrayPrefixGenerators) {
+        arrayFormat = opts.arrayFormat;
+    } else if ('indices' in opts) {
+        arrayFormat = opts.indices ? 'indices' : 'repeat';
+    } else {
+        arrayFormat = defaults.arrayFormat;
+    }
+
+    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
+        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
+    }
+
+    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
+
     return {
         addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
-        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
+        allowDots: allowDots,
+        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
+        arrayFormat: arrayFormat,
         charset: charset,
         charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
+        commaRoundTrip: opts.commaRoundTrip,
         delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
         encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
+        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
         encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
         encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
         filter: filter,
@@ -259,20 +294,8 @@
         return '';
     }
 
-    var arrayFormat;
-    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
-        arrayFormat = opts.arrayFormat;
-    } else if (opts && 'indices' in opts) {
-        arrayFormat = opts.indices ? 'indices' : 'repeat';
-    } else {
-        arrayFormat = 'indices';
-    }
-
-    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
-    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
-        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
-    }
-    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;
+    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
+    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;
 
     if (!objKeys) {
         objKeys = Object.keys(obj);
@@ -294,8 +317,10 @@
             key,
             generateArrayPrefix,
             commaRoundTrip,
+            options.allowEmptyArrays,
             options.strictNullHandling,
             options.skipNulls,
+            options.encodeDotInKeys,
             options.encode ? options.encoder : null,
             options.filter,
             options.sort,
Index: node_modules/qs/lib/parse.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/lib/parse.js b/node_modules/qs/lib/parse.js
--- a/node_modules/qs/lib/parse.js	
+++ b/node_modules/qs/lib/parse.js	
@@ -7,20 +7,24 @@
 
 var defaults = {
     allowDots: false,
+    allowEmptyArrays: false,
     allowPrototypes: false,
     allowSparse: false,
     arrayLimit: 20,
     charset: 'utf-8',
     charsetSentinel: false,
     comma: false,
+    decodeDotInKeys: false,
     decoder: utils.decode,
     delimiter: '&',
     depth: 5,
+    duplicates: 'combine',
     ignoreQueryPrefix: false,
     interpretNumericEntities: false,
     parameterLimit: 1000,
     parseArrays: true,
     plainObjects: false,
+    strictDepth: false,
     strictNullHandling: false
 };
 
@@ -49,8 +53,10 @@
 var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')
 
 var parseValues = function parseQueryStringValues(str, options) {
-    var obj = {};
+    var obj = { __proto__: null };
+
     var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
+    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');
     var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
     var parts = cleanStr.split(options.delimiter, limit);
     var skipIndex = -1; // Keep track of where the utf8 sentinel was found
@@ -102,9 +108,10 @@
             val = isArray(val) ? [val] : val;
         }
 
-        if (has.call(obj, key)) {
+        var existing = has.call(obj, key);
+        if (existing && options.duplicates === 'combine') {
             obj[key] = utils.combine(obj[key], val);
-        } else {
+        } else if (!existing || options.duplicates === 'last') {
             obj[key] = val;
         }
     }
@@ -120,24 +127,27 @@
         var root = chain[i];
 
         if (root === '[]' && options.parseArrays) {
-            obj = [].concat(leaf);
+            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))
+                ? []
+                : [].concat(leaf);
         } else {
             obj = options.plainObjects ? Object.create(null) : {};
             var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
-            var index = parseInt(cleanRoot, 10);
-            if (!options.parseArrays && cleanRoot === '') {
+            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;
+            var index = parseInt(decodedRoot, 10);
+            if (!options.parseArrays && decodedRoot === '') {
                 obj = { 0: leaf };
             } else if (
                 !isNaN(index)
-                && root !== cleanRoot
-                && String(index) === cleanRoot
+                && root !== decodedRoot
+                && String(index) === decodedRoot
                 && index >= 0
                 && (options.parseArrays && index <= options.arrayLimit)
             ) {
                 obj = [];
                 obj[index] = leaf;
-            } else if (cleanRoot !== '__proto__') {
-                obj[cleanRoot] = leaf;
+            } else if (decodedRoot !== '__proto__') {
+                obj[decodedRoot] = leaf;
             }
         }
 
@@ -192,9 +202,12 @@
         keys.push(segment[1]);
     }
 
-    // If there's a remainder, just add whatever is left
+    // If there's a remainder, check strictDepth option for throw, else just add whatever is left
 
     if (segment) {
+        if (options.strictDepth === true) {
+            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');
+        }
         keys.push('[' + key.slice(segment.index) + ']');
     }
 
@@ -206,7 +219,15 @@
         return defaults;
     }
 
-    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
+    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
+        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
+    }
+
+    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {
+        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');
+    }
+
+    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {
         throw new TypeError('Decoder has to be a function.');
     }
 
@@ -215,23 +236,35 @@
     }
     var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
 
+    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;
+
+    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {
+        throw new TypeError('The duplicates option must be either combine, first, or last');
+    }
+
+    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
+
     return {
-        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
+        allowDots: allowDots,
+        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
         allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
         allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
         arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
         charset: charset,
         charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
         comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
+        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
         decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
         delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
         // eslint-disable-next-line no-implicit-coercion, no-extra-parens
         depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
+        duplicates: duplicates,
         ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
         interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
         parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
         parseArrays: opts.parseArrays !== false,
         plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
+        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,
         strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
     };
 };
Index: node_modules/postgresql-client/typings/protocol/pg-socket.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/pg-socket.d.ts b/node_modules/postgresql-client/typings/protocol/pg-socket.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/pg-socket.d.ts	
+++ /dev/null	
@@ -1,51 +0,0 @@
-/// <reference types="node" />
-import { ConnectionState } from '../constants.js';
-import { ConnectionConfiguration } from '../interfaces/database-connection-params.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { Callback, Maybe } from '../types.js';
-import { Frontend } from './frontend.js';
-import { Protocol } from './protocol.js';
-export type CaptureCallback = (code: Protocol.BackendMessageCode, msg: any, done: (err: Maybe<Error>, result?: any) => void) => void | Promise<void>;
-export interface SocketError extends Error {
-    code: string;
-}
-export declare class PgSocket extends SafeEventEmitter {
-    options: ConnectionConfiguration;
-    private _state;
-    private _socket?;
-    private _backend;
-    private _frontend;
-    private _sessionParameters;
-    private _saslSession?;
-    private _processID?;
-    private _secretKey?;
-    constructor(options: ConnectionConfiguration);
-    get state(): ConnectionState;
-    get processID(): Maybe<number>;
-    get secretKey(): Maybe<number>;
-    get sessionParameters(): Record<string, string>;
-    connect(): void;
-    close(): void;
-    sendParseMessage(args: Frontend.ParseMessageArgs, cb?: Callback): void;
-    sendBindMessage(args: Frontend.BindMessageArgs, cb?: Callback): void;
-    sendDescribeMessage(args: Frontend.DescribeMessageArgs, cb?: Callback): void;
-    sendExecuteMessage(args: Frontend.ExecuteMessageArgs, cb?: Callback): void;
-    sendCloseMessage(args: Frontend.CloseMessageArgs, cb?: Callback): void;
-    sendQueryMessage(sql: string, cb?: Callback): void;
-    sendFlushMessage(cb?: Callback): void;
-    sendTerminateMessage(cb?: Callback): void;
-    sendSyncMessage(): void;
-    capture(callback: CaptureCallback): Promise<any>;
-    protected _removeListeners(): void;
-    protected _reset(): void;
-    protected _handleConnect(): void;
-    protected _handleClose(): void;
-    protected _handleError(err: unknown): void;
-    protected _handleData(data: Buffer): void;
-    protected _resolvePassword(cb: (password: string) => void): void;
-    protected _handleAuthenticationMessage(msg?: any): void;
-    protected _handleParameterStatus(msg: Protocol.ParameterStatusMessage): void;
-    protected _handleBackendKeyData(msg: Protocol.BackendKeyDataMessage): void;
-    protected _handleCommandComplete(msg: any): Protocol.CommandCompleteMessage;
-    protected _send(data: Buffer, cb?: Callback): void;
-}
Index: node_modules/postgresql-client/typings/data-types/circle-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/circle-type.d.ts b/node_modules/postgresql-client/typings/data-types/circle-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/circle-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const CircleType: DataType;
-export declare const ArrayCircleType: DataType;
Index: node_modules/nodemon/node_modules/ms/license.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/ms/license.md b/node_modules/nodemon/node_modules/ms/license.md
--- a/node_modules/nodemon/node_modules/ms/license.md	
+++ b/node_modules/nodemon/node_modules/ms/license.md	
@@ -1,6 +1,6 @@
 The MIT License (MIT)
 
-Copyright (c) 2016 Zeit, Inc.
+Copyright (c) 2020 Vercel, Inc.
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
Index: node_modules/ts-gems/lib/type-check.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/type-check.d.ts b/node_modules/ts-gems/lib/type-check.d.ts
--- a/node_modules/ts-gems/lib/type-check.d.ts	
+++ b/node_modules/ts-gems/lib/type-check.d.ts	
@@ -1,4 +1,4 @@
-import { Primitive, Type } from './types';
+import { Primitive, Type } from './types.js';
 
 type NonObj = Primitive | Function;
 
Index: node_modules/power-tasks/cjs/task-queue.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/cjs/task-queue.js b/node_modules/power-tasks/cjs/task-queue.js
--- a/node_modules/power-tasks/cjs/task-queue.js	
+++ b/node_modules/power-tasks/cjs/task-queue.js	
@@ -1,11 +1,9 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TaskQueue = void 0;
+const tslib_1 = require("tslib");
+const doublylinked_1 = tslib_1.__importDefault(require("doublylinked"));
 const strict_typed_events_1 = require("strict-typed-events");
-const doublylinked_1 = __importDefault(require("doublylinked"));
 const task_js_1 = require("./task.js");
 class TaskQueue extends strict_typed_events_1.AsyncEventEmitter {
     constructor(options) {
@@ -36,20 +34,20 @@
         setImmediate(() => this._pulse());
     }
     clearQueue() {
-        this._queue.forEach(task => task.abort());
+        this._queue.forEach((task) => task.abort());
         this._queue = new doublylinked_1.default();
     }
     abortAll() {
         if (!this.size)
             return;
         this.clearQueue();
-        this._running.forEach(task => task.abort());
+        this._running.forEach((task) => task.abort());
     }
     async wait() {
         if (!this.size)
             return Promise.resolve();
-        return new Promise(resolve => {
-            this.once('finish', resolve);
+        return new Promise((resolve) => {
+            this.once("finish", resolve);
         });
     }
     enqueuePrepend(task) {
@@ -62,14 +60,14 @@
         if (this.maxQueue && this.size >= this.maxQueue)
             throw new Error(`Queue limit (${this.maxQueue}) exceeded`);
         const taskInstance = task instanceof task_js_1.Task ? task : new task_js_1.Task(task);
-        Object.defineProperty(taskInstance, '_isManaged', {
+        Object.defineProperty(taskInstance, "_isManaged", {
             configurable: false,
             writable: false,
             enumerable: false,
-            value: true
+            value: true,
         });
-        taskInstance.once('error', (...args) => this.emitAsync('error', ...args));
-        this.emit('enqueue', taskInstance);
+        taskInstance.once("error", (...args) => this.emitAsync("error", ...args));
+        this.emit("enqueue", taskInstance);
         if (prepend)
             this._queue.unshift(taskInstance);
         else
@@ -85,10 +83,10 @@
             if (!task)
                 return;
             this._running.add(task);
-            task.prependOnceListener('finish', () => {
+            task.prependOnceListener("finish", () => {
                 this._running.delete(task);
                 if (!(this._running.size || this._queue.length))
-                    return this.emit('finish');
+                    return this.emit("finish");
                 this._pulse();
             });
             task.start();
Index: node_modules/postgresql-client/cjs/data-types/circle-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/circle-type.js b/node_modules/postgresql-client/cjs/data-types/circle-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/circle-type.js	
+++ /dev/null	
@@ -1,48 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayCircleType = exports.CircleType = void 0;
-const constants_js_1 = require("../constants.js");
-const CIRCLE_PATTERN1 = /^< *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *(-?\d+\.?\d*) *>$/;
-const CIRCLE_PATTERN2 = /^\( *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *(-?\d+\.?\d*) *\)$/;
-const CIRCLE_PATTERN3 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *(-?\d+\.?\d*)$/;
-const CIRCLE_PATTERN4 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-exports.CircleType = {
-    name: 'circle',
-    oid: constants_js_1.DataTypeOIDs.circle,
-    jsType: 'object',
-    parseBinary(v) {
-        return {
-            x: v.readDoubleBE(0),
-            y: v.readDoubleBE(8),
-            r: v.readDoubleBE(16),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x);
-        buf.writeDoubleBE(v.y);
-        buf.writeDoubleBE(v.r);
-    },
-    parseText(v) {
-        const m = v.match(CIRCLE_PATTERN1) || v.match(CIRCLE_PATTERN2) || v.match(CIRCLE_PATTERN3) || v.match(CIRCLE_PATTERN4);
-        if (!m)
-            return undefined;
-        return {
-            x: parseFloat(m[1]),
-            y: parseFloat(m[2]),
-            r: parseFloat(m[3]),
-        };
-    },
-    isType(v) {
-        return (typeof v === 'object' &&
-            Object.keys(v).length === 3 &&
-            typeof v.x === 'number' &&
-            typeof v.y === 'number' &&
-            typeof v.r === 'number');
-    },
-};
-exports.ArrayCircleType = {
-    ...exports.CircleType,
-    name: '_circle',
-    oid: constants_js_1.DataTypeOIDs._circle,
-    elementsOID: constants_js_1.DataTypeOIDs.circle,
-};
Index: node_modules/power-tasks/cjs/task.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/cjs/task.js b/node_modules/power-tasks/cjs/task.js
--- a/node_modules/power-tasks/cjs/task.js	
+++ b/node_modules/power-tasks/cjs/task.js	
@@ -1,30 +1,8 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
-    Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
-    o["default"] = v;
-});
-var __importStar = (this && this.__importStar) || function (mod) {
-    if (mod && mod.__esModule) return mod;
-    var result = {};
-    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
-    __setModuleDefault(result, mod);
-    return result;
-};
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Task = void 0;
-const os = __importStar(require("os"));
+const tslib_1 = require("tslib");
+const os = tslib_1.__importStar(require("os"));
 const strict_typed_events_1 = require("strict-typed-events");
 const utils_js_1 = require("./utils.js");
 const osCPUs = os.cpus().length;
@@ -35,14 +13,14 @@
         this.queue = new Set();
     }
 }
-const noOp = () => void (0);
-const taskContextKey = Symbol.for('power-tasks.Task.context');
+const noOp = () => undefined;
+const taskContextKey = Symbol.for("power-tasks.Task.context");
 let idGen = 0;
 class Task extends strict_typed_events_1.AsyncEventEmitter {
     constructor(arg0, options) {
         super();
-        this._id = '';
-        this._status = 'idle';
+        this._id = "";
+        this._status = "idle";
         this._abortController = new AbortController();
         this.setMaxListeners(100);
         options = options || {};
@@ -52,21 +30,21 @@
         else
             this._executeFn = arg0;
         this._options = { ...options };
-        this._id = this._options.id || '';
+        this._id = this._options.id || "";
         if (this._options.bail == null)
             this._options.bail = true;
         if (options.onStart)
-            this.on('start', options.onStart);
+            this.on("start", options.onStart);
         if (options.onFinish)
-            this.on('finish', options.onFinish);
+            this.on("finish", options.onFinish);
         if (options.onRun)
-            this.on('run', options.onRun);
+            this.on("run", options.onRun);
         if (options.onStatusChange)
-            this.on('status-change', options.onStatusChange);
+            this.on("status-change", options.onStatusChange);
         if (options.onUpdate)
-            this.on('update', options.onUpdate);
+            this.on("update", options.onUpdate);
         if (options.onUpdateRecursive)
-            this.on('update-recursive', options.onUpdateRecursive);
+            this.on("update-recursive", options.onUpdateRecursive);
     }
     get id() {
         return this._id;
@@ -81,20 +59,19 @@
         return this._options;
     }
     get message() {
-        return this._message || '';
+        return this._message || "";
     }
     get status() {
         return this._status;
     }
     get isStarted() {
-        return this.status !== 'idle' && !this.isFinished;
+        return this.status !== "idle" && !this.isFinished;
     }
     get isFinished() {
-        return this.status === 'fulfilled' || this.status === 'failed' ||
-            this.status === 'aborted';
+        return this.status === "fulfilled" || this.status === "failed" || this.status === "aborted";
     }
     get isFailed() {
-        return this.status === 'failed';
+        return this.status === "failed";
     }
     get executeDuration() {
         return this._executeDuration;
@@ -126,35 +103,36 @@
         return false;
     }
     getWaitingTasks() {
-        if (!(this.status === 'waiting' && this._waitingFor && this._waitingFor.size))
+        if (!(this.status === "waiting" && this._waitingFor && this._waitingFor.size))
             return;
         const out = Array.from(this._waitingFor);
-        if (this._children)
+        if (this._children) {
             for (const c of this._children) {
                 const childTasks = c.getWaitingTasks();
                 if (childTasks) {
-                    childTasks.forEach(t => {
+                    childTasks.forEach((t) => {
                         if (!out.includes(t))
                             out.push(t);
                     });
                 }
             }
+        }
         return out;
     }
     abort() {
-        if (this.isFinished || this.status === 'aborting')
+        if (this.isFinished || this.status === "aborting")
             return this;
         if (!this.isStarted) {
-            this._update({ status: 'aborted', message: 'aborted' });
+            this._update({ status: "aborted", message: "aborted" });
             return this;
         }
         const ctx = this[taskContextKey];
         const timeout = this.options.abortTimeout || 30000;
-        this._update({ status: 'aborting', message: 'Aborting' });
+        this._update({ status: "aborting", message: "Aborting" });
         if (timeout) {
             this._abortTimer = setTimeout(() => {
                 delete this._abortTimer;
-                this._update({ status: 'aborted', message: 'aborted' });
+                this._update({ status: "aborted", message: "aborted" });
             }, timeout).unref();
         }
         this._abortChildren()
@@ -166,15 +144,16 @@
                 this._abortController.abort();
                 return;
             }
-            this._update({ status: 'aborted', message: 'aborted' });
-        });
+            this._update({ status: "aborted", message: "aborted" });
+        })
+            .catch(noOp);
         return this;
     }
     start() {
         if (this.isStarted)
             return this;
-        this._id = this._id || ('t' + (++idGen));
-        const ctx = this[taskContextKey] = new TaskContext();
+        this._id = this._id || "t" + ++idGen;
+        const ctx = (this[taskContextKey] = new TaskContext());
         ctx.concurrency = this.options.concurrency || osCPUs;
         let pulseTimer;
         ctx.triggerPulse = () => {
@@ -189,9 +168,9 @@
             this._determineChildrenTree((err) => {
                 if (err) {
                     this._update({
-                        status: 'failed',
+                        status: "failed",
                         error: err,
-                        message: 'Unable to fetch child tasks. ' + (err.message || err)
+                        message: "Unable to fetch child tasks. " + (err.message || err),
                     });
                     return;
                 }
@@ -212,7 +191,7 @@
                     resolve(this.result);
                 return;
             }
-            this.once('finish', () => {
+            this.once("finish", () => {
                 if (this.isFailed)
                     return reject(this.error);
                 resolve(this.result);
@@ -229,13 +208,13 @@
                 return callback(err);
             if (!value)
                 return callback();
-            if (typeof value === 'function') {
+            if (typeof value === "function") {
                 try {
                     const x = value();
                     handler(undefined, x);
                 }
-                catch (err) {
-                    handler(err);
+                catch (err2) {
+                    handler(err2);
                 }
                 return;
             }
@@ -243,15 +222,14 @@
                 let idx = 1;
                 const children = value.reduce((a, v) => {
                     // noinspection SuspiciousTypeOfGuard
-                    if (typeof v === 'function') {
+                    if (typeof v === "function") {
                         v = new Task(v, { concurrency: options.concurrency, bail: options.bail });
                     }
                     if (v instanceof Task) {
                         v[taskContextKey] = ctx;
-                        v._id = v._id || (this._id + '-' + (idx++));
-                        const listeners = this.listeners('update-recursive');
-                        listeners.forEach(listener => v.on('update-recursive', listener));
-                        // ctx.allTasks.add(v);
+                        v._id = v._id || this._id + "-" + idx++;
+                        const listeners = this.listeners("update-recursive");
+                        listeners.forEach((listener) => v.on("update-recursive", listener));
                         a.push(v);
                     }
                     return a;
@@ -259,14 +237,14 @@
                 if (children && children.length) {
                     this._children = children;
                     let i = 0;
-                    const next = (err) => {
-                        if (err)
-                            return callback(err);
+                    const next = (err2) => {
+                        if (err2)
+                            return callback(err2);
                         if (i >= children.length)
                             return callback();
                         const c = children[i++];
                         if (c.options.children)
-                            c._determineChildrenTree((err) => next(err));
+                            c._determineChildrenTree((err3) => next(err3));
                         else
                             next();
                     };
@@ -276,28 +254,40 @@
                     callback();
                 return;
             }
-            if (value && typeof value.then === 'function') {
-                value
-                    .then(v => handler(undefined, v))
-                    .catch(err => handler(err));
+            if (value && typeof value.then === "function") {
+                value.then((v) => handler(undefined, v)).catch((e) => handler(e));
                 return;
             }
-            callback(new Error('Invalid value returned from children() method.'));
+            callback(new Error("Invalid value returned from children() method."));
         };
         handler(undefined, this._options.children);
     }
     _determineChildrenDependencies(scope) {
         if (!this._children)
             return;
-        const detectCircular = (t, lookup, path = '') => {
-            if (!lookup._dependencies)
-                return;
-            path = path || (t.name || t.id);
-            path += ' > ' + (lookup.name || lookup.id);
-            if (lookup._dependencies.includes(t))
-                throw new Error(`Circular dependency detected. ${path + ' > ' + (t.name || t.id)}`);
-            for (const l1 of lookup._dependencies.values())
-                detectCircular(t, l1, path);
+        const detectCircular = (t, dependencies, path = "", list) => {
+            path = path || t.name || t.id;
+            list = list || new Set();
+            for (const l1 of dependencies.values()) {
+                if (l1 === t)
+                    throw new Error(`Circular dependency detected. ${path}`);
+                if (list.has(l1))
+                    continue;
+                list.add(l1);
+                if (l1._dependencies)
+                    detectCircular(t, l1._dependencies, path + " > " + (l1.name || l1.id), list);
+                if (l1.children) {
+                    for (const c of l1.children) {
+                        if (c === t)
+                            throw new Error(`Circular dependency detected. ${path}`);
+                        if (list.has(c))
+                            continue;
+                        list.add(c);
+                        if (c._dependencies)
+                            detectCircular(t, c._dependencies, path, list);
+                    }
+                }
+            }
         };
         const subScope = [...scope, ...Array.from(this._children)];
         for (const c of this._children.values()) {
@@ -307,16 +297,14 @@
             const dependencies = [];
             const waitingFor = new Set();
             for (const dep of c.options.dependencies) {
-                const dependentTask = subScope.find(x => typeof dep === 'string' ? x.name === dep : (x === dep));
+                const dependentTask = subScope.find((x) => (typeof dep === "string" ? x.name === dep : x === dep));
                 if (!dependentTask || c === dependentTask)
                     continue;
-                detectCircular(c, dependentTask);
-                if (dependentTask._dependencies?.includes(c))
-                    throw new Error(`Task "${c.name}" has circular dependency with ${dependentTask.name}.`);
                 dependencies.push(dependentTask);
                 if (!dependentTask.isFinished)
                     waitingFor.add(dependentTask);
             }
+            detectCircular(c, dependencies);
             if (dependencies.length)
                 c._dependencies = dependencies;
             if (waitingFor.size)
@@ -331,43 +319,45 @@
         const waitingFor = this._waitingFor;
         const signal = this._abortController.signal;
         const abortSignalCallback = () => clearWait();
-        signal.addEventListener('abort', abortSignalCallback, { once: true });
+        signal.addEventListener("abort", abortSignalCallback, { once: true });
         const handleDependentAborted = () => {
-            signal.removeEventListener('abort', abortSignalCallback);
+            signal.removeEventListener("abort", abortSignalCallback);
             this._abortChildren()
                 .then(() => {
-                const isFailed = !!failedDependencies.find(d => d.status === 'failed');
-                const error = new Error('Aborted due to ' + (isFailed ? 'fail' : 'cancellation') +
-                    ' of dependent ' + (0, utils_js_1.plural)('task', !!failedDependencies.length));
+                const isFailed = !!failedDependencies.find((d) => d.status === "failed");
+                const error = new Error("Aborted due to " +
+                    (isFailed ? "fail" : "cancellation") +
+                    " of dependent " +
+                    (0, utils_js_1.plural)("task", !!failedDependencies.length));
                 error.failedDependencies = failedDependencies;
                 this._failedDependencies = failedDependencies;
                 this._update({
-                    status: isFailed ? 'failed' : 'aborted',
+                    status: isFailed ? "failed" : "aborted",
                     message: error.message,
-                    error
+                    error,
                 });
             })
                 .catch(noOp);
         };
         const clearWait = () => {
             for (const t of waitingFor) {
-                t.removeListener('finish', finishCallback);
+                t.removeListener("finish", finishCallback);
             }
             delete this._waitingFor;
         };
         const finishCallback = async (t) => {
-            if (this.isStarted && this.status !== 'waiting') {
+            if (this.isStarted && this.status !== "waiting") {
                 clearWait();
                 return;
             }
             waitingFor.delete(t);
-            if (t.isFailed || t.status === 'aborted') {
+            if (t.isFailed || t.status === "aborted") {
                 failedDependencies.push(t);
             }
             // If all dependent tasks completed
             if (!waitingFor.size) {
                 delete this._waitingFor;
-                signal.removeEventListener('abort', abortSignalCallback);
+                signal.removeEventListener("abort", abortSignalCallback);
                 // If any of dependent tasks are failed
                 if (failedDependencies.length) {
                     handleDependentAborted();
@@ -377,16 +367,16 @@
                 if (this.isStarted)
                     this._startChildren();
                 else
-                    await this.emitAsync('wait-end');
+                    await this.emitAsync("wait-end");
             }
         };
         for (const t of waitingFor.values()) {
-            if (t.isFailed || t.status === 'aborted') {
+            if (t.isFailed || t.status === "aborted") {
                 waitingFor.delete(t);
                 failedDependencies.push(t);
             }
             else
-                t.prependOnceListener('finish', finishCallback);
+                t.prependOnceListener("finish", finishCallback);
         }
         if (!waitingFor.size)
             handleDependentAborted();
@@ -396,9 +386,9 @@
             return;
         if (this._waitingFor) {
             this._update({
-                status: 'waiting',
-                message: 'Waiting for dependencies',
-                waitingFor: true
+                status: "waiting",
+                message: "Waiting for dependencies",
+                waitingFor: true,
             });
             return;
         }
@@ -411,25 +401,25 @@
             return;
         }
         const options = this.options;
-        const childrenLeft = this._childrenLeft = new Set(children);
+        const childrenLeft = (this._childrenLeft = new Set(children));
         const failedChildren = [];
         const statusChangeCallback = async (t) => {
-            if (this.status === 'aborting')
+            if (this.status === "aborting")
                 return;
-            if (t.status === 'running')
-                this._update({ status: 'running', message: 'Running' });
-            if (t.status === 'waiting')
-                this._update({ status: 'waiting', message: 'Waiting' });
+            if (t.status === "running")
+                this._update({ status: "running", message: "Running" });
+            if (t.status === "waiting")
+                this._update({ status: "waiting", message: "Waiting" });
         };
         const finishCallback = async (t) => {
-            t.removeListener('status-change', statusChangeCallback);
+            t.removeListener("status-change", statusChangeCallback);
             childrenLeft.delete(t);
-            if (t.isFailed || t.status === 'aborted') {
+            if (t.isFailed || t.status === "aborted") {
                 failedChildren.push(t);
                 if (options.bail && childrenLeft.size) {
-                    const running = !!children.find(c => c.isStarted);
+                    const running = !!children.find((c) => c.isStarted);
                     if (running)
-                        this._update({ status: 'aborting', message: 'Aborting' });
+                        this._update({ status: "aborting", message: "Aborting" });
                     this._abortChildren().catch(noOp);
                     return;
                 }
@@ -437,15 +427,17 @@
             if (!childrenLeft.size) {
                 delete this._childrenLeft;
                 if (failedChildren.length) {
-                    const isFailed = !!failedChildren.find(d => d.status === 'failed');
-                    const error = new Error('Aborted due to ' + (isFailed ? 'fail' : 'cancellation') +
-                        ' of child ' + (0, utils_js_1.plural)('task', !!failedChildren.length));
+                    const isFailed = !!failedChildren.find((d) => d.status === "failed");
+                    const error = new Error("Aborted due to " +
+                        (isFailed ? "fail" : "cancellation") +
+                        " of child " +
+                        (0, utils_js_1.plural)("task", !!failedChildren.length));
                     error.failedChildren = failedChildren;
                     this._failedChildren = failedChildren;
                     this._update({
-                        status: isFailed ? 'failed' : 'aborted',
+                        status: isFailed ? "failed" : "aborted",
                         error,
-                        message: error.message
+                        message: error.message,
                     });
                     return;
                 }
@@ -453,24 +445,21 @@
             this._pulse();
         };
         for (const c of children) {
-            c.prependOnceListener('wait-end', () => this._pulse());
-            c.prependOnceListener('finish', finishCallback);
-            c.prependListener('status-change', statusChangeCallback);
+            c.prependOnceListener("wait-end", () => this._pulse());
+            c.prependOnceListener("finish", finishCallback);
+            c.prependListener("status-change", statusChangeCallback);
         }
         this._pulse();
     }
     _pulse() {
         const ctx = this[taskContextKey];
-        if (this.isFinished ||
-            this._waitingFor ||
-            this.status === 'aborting' ||
-            ctx.executingTasks.has(this))
+        if (this.isFinished || this._waitingFor || this.status === "aborting" || ctx.executingTasks.has(this))
             return;
         const options = this.options;
         if (this._childrenLeft) {
             // Check if we can run multiple child tasks
             for (const c of this._childrenLeft) {
-                if ((c.isStarted && options.serial) || (c.status === 'running' && c.options.exclusive)) {
+                if ((c.isStarted && options.serial) || (c.status === "running" && c.options.exclusive)) {
                     c._pulse();
                     return;
                 }
@@ -482,7 +471,7 @@
                 if (c.isFinished)
                     continue;
                 hasExclusive = hasExclusive || !!c.options.exclusive;
-                hasRunning = hasRunning || c.status === 'running';
+                hasRunning = hasRunning || c.status === "running";
             }
             if (hasExclusive && hasRunning)
                 return;
@@ -498,44 +487,44 @@
                 if (c.options.exclusive && (ctx.executingTasks.size || ctx.executingTasks.size))
                     return;
                 c._start();
-                if (options.serial || (c.status === 'running' && c.options.exclusive))
+                if (options.serial || (c.status === "running" && c.options.exclusive))
                     return;
             }
         }
         if ((this._childrenLeft && this._childrenLeft.size) || ctx.executingTasks.size >= ctx.concurrency)
             return;
-        this._update({ status: 'running', message: 'Running' });
+        this._update({ status: "running", message: "Running" });
         ctx.executingTasks.add(this);
         const t = Date.now();
         const signal = this._abortController.signal;
         (async () => (this._executeFn || noOp)({
             task: this,
-            signal
+            signal,
         }))()
             .then((result) => {
             ctx.executingTasks.delete(this);
             this._executeDuration = Date.now() - t;
             this._update({
-                status: 'fulfilled',
-                message: 'Task completed',
-                result
+                status: "fulfilled",
+                message: "Task completed",
+                result,
             });
         })
-            .catch(error => {
+            .catch((error) => {
             ctx.executingTasks.delete(this);
             this._executeDuration = Date.now() - t;
-            if (error.code === 'ABORT_ERR') {
+            if (error.code === "ABORT_ERR") {
                 this._update({
-                    status: 'aborted',
+                    status: "aborted",
                     error,
-                    message: error instanceof Error ? error.message : '' + error
+                    message: error instanceof Error ? error.message : "" + error,
                 });
                 return;
             }
             this._update({
-                status: 'failed',
+                status: "failed",
                 error,
-                message: error instanceof Error ? error.message : '' + error
+                message: error instanceof Error ? error.message : "" + error,
             });
         });
     }
@@ -545,33 +534,33 @@
         const oldStarted = this.isStarted;
         if (prop.status && this._status !== prop.status) {
             this._status = prop.status;
-            keys.push('status');
+            keys.push("status");
         }
         if (prop.message && this._message !== prop.message) {
             this._message = prop.message;
-            keys.push('message');
+            keys.push("message");
         }
         if (prop.error && this._error !== prop.error) {
             this._error = prop.error;
-            keys.push('error');
+            keys.push("error");
         }
         if (prop.result && this._result !== prop.result) {
             this._result = prop.result;
-            keys.push('result');
+            keys.push("result");
         }
         if (prop.waitingFor) {
-            keys.push('waitingFor');
+            keys.push("waitingFor");
         }
         if (keys.length) {
-            if (keys.includes('status')) {
+            if (keys.includes("status")) {
                 if (!oldStarted)
-                    this.emitAsync('start', this).catch(noOp);
-                this.emitAsync('status-change', this).catch(noOp);
-                if (this._status === 'running')
-                    this.emitAsync('run', this).catch(noOp);
+                    this.emitAsync("start", this).catch(noOp);
+                this.emitAsync("status-change", this).catch(noOp);
+                if (this._status === "running")
+                    this.emitAsync("run", this).catch(noOp);
             }
-            this.emitAsync('update', this, keys).catch(noOp);
-            this.emitAsync('update-recursive', this, keys).catch(noOp);
+            this.emitAsync("update", this, keys).catch(noOp);
+            this.emitAsync("update-recursive", this, keys).catch(noOp);
             if (this.isFinished && !oldFinished) {
                 const ctx = this[taskContextKey];
                 if (this._abortTimer) {
@@ -580,8 +569,8 @@
                 }
                 delete this[taskContextKey];
                 if (this.error)
-                    this.emitAsync('error', this.error).catch(noOp);
-                this.emitAsync('finish', this).catch(noOp);
+                    this.emitAsync("error", this.error).catch(noOp);
+                this.emitAsync("finish", this).catch(noOp);
                 if (ctx)
                     ctx.triggerPulse();
             }
Index: node_modules/define-data-property/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/index.js b/node_modules/define-data-property/index.js
deleted file mode 100644
--- a/node_modules/define-data-property/index.js	
+++ /dev/null	
@@ -1,56 +0,0 @@
-'use strict';
-
-var $defineProperty = require('es-define-property');
-
-var $SyntaxError = require('es-errors/syntax');
-var $TypeError = require('es-errors/type');
-
-var gopd = require('gopd');
-
-/** @type {import('.')} */
-module.exports = function defineDataProperty(
-	obj,
-	property,
-	value
-) {
-	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
-		throw new $TypeError('`obj` must be an object or a function`');
-	}
-	if (typeof property !== 'string' && typeof property !== 'symbol') {
-		throw new $TypeError('`property` must be a string or a symbol`');
-	}
-	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
-		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
-	}
-	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
-		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
-	}
-	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
-		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
-	}
-	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
-		throw new $TypeError('`loose`, if provided, must be a boolean');
-	}
-
-	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
-	var nonWritable = arguments.length > 4 ? arguments[4] : null;
-	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
-	var loose = arguments.length > 6 ? arguments[6] : false;
-
-	/* @type {false | TypedPropertyDescriptor<unknown>} */
-	var desc = !!gopd && gopd(obj, property);
-
-	if ($defineProperty) {
-		$defineProperty(obj, property, {
-			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
-			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
-			value: value,
-			writable: nonWritable === null && desc ? desc.writable : !nonWritable
-		});
-	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
-		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
-		obj[property] = value; // eslint-disable-line no-param-reassign
-	} else {
-		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
-	}
-};
Index: node_modules/lightning-pool/esm/definitions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/definitions.js b/node_modules/lightning-pool/esm/definitions.js
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/definitions.js	
+++ /dev/null	
@@ -1,13 +0,0 @@
-export var PoolState;
-(function (PoolState) {
-    PoolState[PoolState["IDLE"] = 0] = "IDLE";
-    PoolState[PoolState["STARTED"] = 1] = "STARTED";
-    PoolState[PoolState["CLOSING"] = 2] = "CLOSING";
-    PoolState[PoolState["CLOSED"] = 3] = "CLOSED";
-})(PoolState || (PoolState = {}));
-export var ResourceState;
-(function (ResourceState) {
-    ResourceState[ResourceState["IDLE"] = 0] = "IDLE";
-    ResourceState[ResourceState["ACQUIRED"] = 1] = "ACQUIRED";
-    ResourceState[ResourceState["VALIDATION"] = 2] = "VALIDATION";
-})(ResourceState || (ResourceState = {}));
Index: node_modules/dotenv/lib/main.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/lib/main.d.ts b/node_modules/dotenv/lib/main.d.ts
--- a/node_modules/dotenv/lib/main.d.ts	
+++ b/node_modules/dotenv/lib/main.d.ts	
@@ -39,6 +39,15 @@
    */
   encoding?: string;
 
+  /**
+   * Default: `false`
+   *
+   * Suppress all output (except errors).
+   *
+   * example: `require('dotenv').config({ quiet: true })`
+   */
+  quiet?: boolean;
+
   /**
    * Default: `false`
    *
@@ -110,7 +119,7 @@
  *
  * See https://dotenvx.com/docs
  *
- * @param options - additional options. example: `{ path: './custom/path', encoding: 'latin1', debug: true, override: false }`
+ * @param options - additional options. example: `{ path: './custom/path', encoding: 'latin1', quiet: false, debug: true, override: false }`
  * @returns an object with a `parsed` key if successful or `error` key if an error occurred. example: { parsed: { KEY: 'value' } }
  *
  */
@@ -121,7 +130,7 @@
  *
  * See https://dotenvx.com/docs
  *
- * @param options - additional options. example: `{ path: './custom/path', encoding: 'latin1', debug: true, override: false }`
+ * @param options - additional options. example: `{ path: './custom/path', encoding: 'latin1', quiet: false, debug: true, override: false }`
  * @returns an object with a `parsed` key if successful or `error` key if an error occurred. example: { parsed: { KEY: 'value' } }
  *
  */
@@ -134,7 +143,7 @@
  *
  * @param processEnv - the target JSON object. in most cases use process.env but you can also pass your own JSON object
  * @param parsed - the source JSON object
- * @param options - additional options. example: `{ debug: true, override: false }`
+ * @param options - additional options. example: `{ quiet: false, debug: true, override: false }`
  * @returns {void}
  *
  */
Index: node_modules/pg/lib/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/utils.js b/node_modules/pg/lib/utils.js
--- a/node_modules/pg/lib/utils.js	
+++ b/node_modules/pg/lib/utils.js	
@@ -2,8 +2,11 @@
 
 const defaults = require('./defaults')
 
+const util = require('util')
+const { isDate } = util.types || util // Node 8 doesn't have `util.types`
+
 function escapeElement(elementRepresentation) {
-  var escaped = elementRepresentation.replace(/\\/g, '\\\\').replace(/"/g, '\\"')
+  const escaped = elementRepresentation.replace(/\\/g, '\\\\').replace(/"/g, '\\"')
 
   return '"' + escaped + '"'
 }
@@ -12,8 +15,8 @@
 // uses comma separator so won't work for types like box that use
 // a different array separator.
 function arrayString(val) {
-  var result = '{'
-  for (var i = 0; i < val.length; i++) {
+  let result = '{'
+  for (let i = 0; i < val.length; i++) {
     if (i > 0) {
       result = result + ','
     }
@@ -22,9 +25,9 @@
     } else if (Array.isArray(val[i])) {
       result = result + arrayString(val[i])
     } else if (ArrayBuffer.isView(val[i])) {
-      var item = val[i]
+      let item = val[i]
       if (!(item instanceof Buffer)) {
-        var buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength)
+        const buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength)
         if (buf.length === item.byteLength) {
           item = buf
         } else {
@@ -44,32 +47,33 @@
 // to their 'raw' counterparts for use as a postgres parameter
 // note: you can override this function to provide your own conversion mechanism
 // for complex types, etc...
-var prepareValue = function (val, seen) {
+const prepareValue = function (val, seen) {
   // null and undefined are both null for postgres
   if (val == null) {
     return null
   }
-  if (val instanceof Buffer) {
-    return val
-  }
-  if (ArrayBuffer.isView(val)) {
-    var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)
-    if (buf.length === val.byteLength) {
-      return buf
-    }
-    return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params
-  }
-  if (val instanceof Date) {
-    if (defaults.parseInputDatesAsUTC) {
-      return dateToStringUTC(val)
-    } else {
-      return dateToString(val)
-    }
-  }
-  if (Array.isArray(val)) {
-    return arrayString(val)
-  }
-  if (typeof val === 'object') {
+  if (typeof val === 'object') {
+    if (val instanceof Buffer) {
+      return val
+    }
+    if (ArrayBuffer.isView(val)) {
+      const buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)
+      if (buf.length === val.byteLength) {
+        return buf
+      }
+      return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params
+    }
+    if (isDate(val)) {
+      if (defaults.parseInputDatesAsUTC) {
+        return dateToStringUTC(val)
+      } else {
+        return dateToString(val)
+      }
+    }
+    if (Array.isArray(val)) {
+      return arrayString(val)
+    }
+
     return prepareObject(val, seen)
   }
   return val.toString()
@@ -88,35 +92,27 @@
   return JSON.stringify(val)
 }
 
-function pad(number, digits) {
-  number = '' + number
-  while (number.length < digits) {
-    number = '0' + number
-  }
-  return number
-}
-
 function dateToString(date) {
-  var offset = -date.getTimezoneOffset()
+  let offset = -date.getTimezoneOffset()
 
-  var year = date.getFullYear()
-  var isBCYear = year < 1
+  let year = date.getFullYear()
+  const isBCYear = year < 1
   if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation
 
-  var ret =
-    pad(year, 4) +
+  let ret =
+    String(year).padStart(4, '0') +
     '-' +
-    pad(date.getMonth() + 1, 2) +
+    String(date.getMonth() + 1).padStart(2, '0') +
     '-' +
-    pad(date.getDate(), 2) +
+    String(date.getDate()).padStart(2, '0') +
     'T' +
-    pad(date.getHours(), 2) +
+    String(date.getHours()).padStart(2, '0') +
     ':' +
-    pad(date.getMinutes(), 2) +
+    String(date.getMinutes()).padStart(2, '0') +
     ':' +
-    pad(date.getSeconds(), 2) +
+    String(date.getSeconds()).padStart(2, '0') +
     '.' +
-    pad(date.getMilliseconds(), 3)
+    String(date.getMilliseconds()).padStart(3, '0')
 
   if (offset < 0) {
     ret += '-'
@@ -125,30 +121,30 @@
     ret += '+'
   }
 
-  ret += pad(Math.floor(offset / 60), 2) + ':' + pad(offset % 60, 2)
+  ret += String(Math.floor(offset / 60)).padStart(2, '0') + ':' + String(offset % 60).padStart(2, '0')
   if (isBCYear) ret += ' BC'
   return ret
 }
 
 function dateToStringUTC(date) {
-  var year = date.getUTCFullYear()
-  var isBCYear = year < 1
+  let year = date.getUTCFullYear()
+  const isBCYear = year < 1
   if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation
 
-  var ret =
-    pad(year, 4) +
+  let ret =
+    String(year).padStart(4, '0') +
     '-' +
-    pad(date.getUTCMonth() + 1, 2) +
+    String(date.getUTCMonth() + 1).padStart(2, '0') +
     '-' +
-    pad(date.getUTCDate(), 2) +
+    String(date.getUTCDate()).padStart(2, '0') +
     'T' +
-    pad(date.getUTCHours(), 2) +
+    String(date.getUTCHours()).padStart(2, '0') +
     ':' +
-    pad(date.getUTCMinutes(), 2) +
+    String(date.getUTCMinutes()).padStart(2, '0') +
     ':' +
-    pad(date.getUTCSeconds(), 2) +
+    String(date.getUTCSeconds()).padStart(2, '0') +
     '.' +
-    pad(date.getUTCMilliseconds(), 3)
+    String(date.getUTCMilliseconds()).padStart(3, '0')
 
   ret += '+00:00'
   if (isBCYear) ret += ' BC'
@@ -177,11 +173,19 @@
 }
 
 const escapeLiteral = function (str) {
-  var hasBackslash = false
-  var escaped = "'"
+  let hasBackslash = false
+  let escaped = "'"
+
+  if (str == null) {
+    return "''"
+  }
 
-  for (var i = 0; i < str.length; i++) {
-    var c = str[i]
+  if (typeof str !== 'string') {
+    return "''"
+  }
+
+  for (let i = 0; i < str.length; i++) {
+    const c = str[i]
     if (c === "'") {
       escaped += c + c
     } else if (c === '\\') {
Index: node_modules/has-proto/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/index.d.ts b/node_modules/has-proto/index.d.ts
deleted file mode 100644
--- a/node_modules/has-proto/index.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-declare function hasProto(): boolean;
-
-export = hasProto;
\ No newline at end of file
Index: node_modules/semver/functions/compare.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/compare.js b/node_modules/semver/functions/compare.js
--- a/node_modules/semver/functions/compare.js	
+++ b/node_modules/semver/functions/compare.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const compare = (a, b, loose) =>
   new SemVer(a, loose).compare(new SemVer(b, loose))
Index: node_modules/lightning-pool/esm/pool-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/pool-options.js b/node_modules/lightning-pool/esm/pool-options.js
--- a/node_modules/lightning-pool/esm/pool-options.js	
+++ b/node_modules/lightning-pool/esm/pool-options.js	
@@ -10,7 +10,7 @@
     minIdle: 0,
     max: 10,
     maxQueue: 1000,
-    validation: true
+    validation: true,
 };
 export class PoolOptions extends EventEmitter {
     constructor(pool) {
@@ -47,7 +47,8 @@
         return this._acquireTimeoutMillis;
     }
     set acquireTimeoutMillis(val) {
-        this._acquireTimeoutMillis = val >= 0 ? val : defaultValues.acquireTimeoutMillis;
+        this._acquireTimeoutMillis =
+            val >= 0 ? val : defaultValues.acquireTimeoutMillis;
         this.emit('change', 'acquireTimeoutMillis', this._acquireTimeoutMillis);
     }
     get fifo() {
Index: node_modules/postgresql-client/typings/data-types/uuid-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/uuid-type.d.ts b/node_modules/postgresql-client/typings/data-types/uuid-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/uuid-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const UuidType: DataType;
-export declare const ArrayUuidType: DataType;
Index: node_modules/gopd/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/gopd/package.json b/node_modules/gopd/package.json
--- a/node_modules/gopd/package.json	
+++ b/node_modules/gopd/package.json	
@@ -1,10 +1,11 @@
 {
 	"name": "gopd",
-	"version": "1.0.1",
+	"version": "1.2.0",
 	"description": "`Object.getOwnPropertyDescriptor`, but accounts for IE's broken implementation.",
 	"main": "index.js",
 	"exports": {
 		".": "./index.js",
+		"./gOPD": "./gOPD.js",
 		"./package.json": "./package.json"
 	},
 	"sideEffects": false,
@@ -12,12 +13,13 @@
 		"prepack": "npmignore --auto --commentLines=autogenerated",
 		"prepublishOnly": "safe-publish-latest",
 		"prepublish": "not-in-publish || npm run prepublishOnly",
+		"prelint": "tsc -p . && attw -P",
 		"lint": "eslint --ext=js,mjs .",
 		"postlint": "evalmd README.md",
 		"pretest": "npm run lint",
 		"tests-only": "tape 'test/**/*.js'",
 		"test": "npm run tests-only",
-		"posttest": "aud --production",
+		"posttest": "npx npm@'>=10.2' audit --production",
 		"version": "auto-changelog && git add CHANGELOG.md",
 		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
 	},
@@ -41,19 +43,20 @@
 		"url": "https://github.com/ljharb/gopd/issues"
 	},
 	"homepage": "https://github.com/ljharb/gopd#readme",
-	"dependencies": {
-		"get-intrinsic": "^1.1.3"
-	},
 	"devDependencies": {
-		"@ljharb/eslint-config": "^21.0.0",
-		"aud": "^2.0.1",
-		"auto-changelog": "^2.4.0",
+		"@arethetypeswrong/cli": "^0.17.0",
+		"@ljharb/eslint-config": "^21.1.1",
+		"@ljharb/tsconfig": "^0.2.0",
+		"@types/tape": "^5.6.5",
+		"auto-changelog": "^2.5.0",
+		"encoding": "^0.1.13",
 		"eslint": "=8.8.0",
 		"evalmd": "^0.0.19",
 		"in-publish": "^2.0.1",
-		"npmignore": "^0.3.0",
+		"npmignore": "^0.3.1",
 		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.6.1"
+		"tape": "^5.9.0",
+		"typescript": "next"
 	},
 	"auto-changelog": {
 		"output": "CHANGELOG.md",
@@ -67,5 +70,8 @@
 		"ignore": [
 			".github/workflows"
 		]
+	},
+	"engines": {
+		"node": ">= 0.4"
 	}
 }
Index: node_modules/postgresql-client/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/package.json b/node_modules/postgresql-client/package.json
--- a/node_modules/postgresql-client/package.json	
+++ b/node_modules/postgresql-client/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "postgresql-client",
   "description": "Enterprise level PostgreSQL client for JavaScript",
-  "version": "2.11.0",
+  "version": "2.13.0",
   "author": "Panates",
   "contributors": [
     "Eray Hanoglu <e.hanoglu@panates.com>"
@@ -16,13 +16,7 @@
   "module": "./esm/index.js",
   "types": "typings/index.d.ts",
   "dependencies": {
-    "doublylinked": "^2.5.4",
-    "lightning-pool": "^4.2.2",
-    "postgres-bytea": "^3.0.0",
-    "power-tasks": "^1.7.3",
-    "putil-merge": "^3.12.1",
-    "putil-promisify": "^1.10.1",
-    "putil-varhelpers": "^1.6.5"
+    "postgrejs": "^2.15.1"
   },
   "engines": {
     "node": ">=16.0"
Index: .idea/git_toolbox_blame.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/git_toolbox_blame.xml b/.idea/git_toolbox_blame.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/git_toolbox_blame.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GitToolBoxBlameSettings">
+    <option name="version" value="2" />
+  </component>
+</project>
\ No newline at end of file
Index: node_modules/postgresql-client/cjs/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/index.js b/node_modules/postgresql-client/cjs/index.js
--- a/node_modules/postgresql-client/cjs/index.js	
+++ b/node_modules/postgresql-client/cjs/index.js	
@@ -1,41 +1,4 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __exportStar = (this && this.__exportStar) || function(m, exports) {
-    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-__exportStar(require("./constants.js"), exports);
-__exportStar(require("./data-type-map.js"), exports);
-__exportStar(require("./types.js"), exports);
-__exportStar(require("./connection/bind-param.js"), exports);
-__exportStar(require("./connection/connection.js"), exports);
-__exportStar(require("./connection/cursor.js"), exports);
-__exportStar(require("./connection/pool.js"), exports);
-__exportStar(require("./connection/prepared-statement.js"), exports);
-__exportStar(require("./interfaces/command-result.js"), exports);
-__exportStar(require("./interfaces/data-mapping-options.js"), exports);
-__exportStar(require("./interfaces/data-type.js"), exports);
-__exportStar(require("./interfaces/database-connection-params.js"), exports);
-__exportStar(require("./interfaces/field-info.js"), exports);
-__exportStar(require("./interfaces/query-options.js"), exports);
-__exportStar(require("./interfaces/query-result.js"), exports);
-__exportStar(require("./interfaces/script-execute-options.js"), exports);
-__exportStar(require("./interfaces/script-result.js"), exports);
-__exportStar(require("./interfaces/statement-prepare-options.js"), exports);
-__exportStar(require("./util/connection-config.js"), exports);
-__exportStar(require("./util/escape-literal.js"), exports);
-__exportStar(require("./util/parse-datetime.js"), exports);
-__exportStar(require("./util/stringify-arrayliteral.js"), exports);
-__exportStar(require("./util/stringify-for-sql.js"), exports);
-__exportStar(require("./protocol/smart-buffer.js"), exports);
-__exportStar(require("./protocol/database-error.js"), exports);
+const tslib_1 = require("tslib");
+tslib_1.__exportStar(require("postgrejs"), exports);
Index: node_modules/pg/lib/crypto/sasl.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/crypto/sasl.js b/node_modules/pg/lib/crypto/sasl.js
--- a/node_modules/pg/lib/crypto/sasl.js	
+++ b/node_modules/pg/lib/crypto/sasl.js	
@@ -1,22 +1,34 @@
 'use strict'
 const crypto = require('./utils')
+const { signatureAlgorithmHashFromCertificate } = require('./cert-signatures')
+
+function startSession(mechanisms, stream) {
+  const candidates = ['SCRAM-SHA-256']
+  if (stream) candidates.unshift('SCRAM-SHA-256-PLUS') // higher-priority, so placed first
 
-function startSession(mechanisms) {
-  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {
-    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported')
+  const mechanism = candidates.find((candidate) => mechanisms.includes(candidate))
+
+  if (!mechanism) {
+    throw new Error('SASL: Only mechanism(s) ' + candidates.join(' and ') + ' are supported')
+  }
+
+  if (mechanism === 'SCRAM-SHA-256-PLUS' && typeof stream.getPeerCertificate !== 'function') {
+    // this should never happen if we are really talking to a Postgres server
+    throw new Error('SASL: Mechanism SCRAM-SHA-256-PLUS requires a certificate')
   }
 
   const clientNonce = crypto.randomBytes(18).toString('base64')
+  const gs2Header = mechanism === 'SCRAM-SHA-256-PLUS' ? 'p=tls-server-end-point' : stream ? 'y' : 'n'
 
   return {
-    mechanism: 'SCRAM-SHA-256',
+    mechanism,
     clientNonce,
-    response: 'n,,n=*,r=' + clientNonce,
+    response: gs2Header + ',,n=*,r=' + clientNonce,
     message: 'SASLInitialResponse',
   }
 }
 
-async function continueSession(session, password, serverData) {
+async function continueSession(session, password, serverData, stream) {
   if (session.message !== 'SASLInitialResponse') {
     throw new Error('SASL: Last message was not SASLInitialResponse')
   }
@@ -38,19 +50,33 @@
     throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short')
   }
 
-  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce
-  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration
-  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce
-  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof
+  const clientFirstMessageBare = 'n=*,r=' + session.clientNonce
+  const serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration
+
+  // without channel binding:
+  let channelBinding = stream ? 'eSws' : 'biws' // 'y,,' or 'n,,', base64-encoded
 
-  var saltBytes = Buffer.from(sv.salt, 'base64')
-  var saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration)
-  var clientKey = await crypto.hmacSha256(saltedPassword, 'Client Key')
-  var storedKey = await crypto.sha256(clientKey)
-  var clientSignature = await crypto.hmacSha256(storedKey, authMessage)
-  var clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString('base64')
-  var serverKey = await crypto.hmacSha256(saltedPassword, 'Server Key')
-  var serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage)
+  // override if channel binding is in use:
+  if (session.mechanism === 'SCRAM-SHA-256-PLUS') {
+    const peerCert = stream.getPeerCertificate().raw
+    let hashName = signatureAlgorithmHashFromCertificate(peerCert)
+    if (hashName === 'MD5' || hashName === 'SHA-1') hashName = 'SHA-256'
+    const certHash = await crypto.hashByName(hashName, peerCert)
+    const bindingData = Buffer.concat([Buffer.from('p=tls-server-end-point,,'), Buffer.from(certHash)])
+    channelBinding = bindingData.toString('base64')
+  }
+
+  const clientFinalMessageWithoutProof = 'c=' + channelBinding + ',r=' + sv.nonce
+  const authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof
+
+  const saltBytes = Buffer.from(sv.salt, 'base64')
+  const saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration)
+  const clientKey = await crypto.hmacSha256(saltedPassword, 'Client Key')
+  const storedKey = await crypto.sha256(clientKey)
+  const clientSignature = await crypto.hmacSha256(storedKey, authMessage)
+  const clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString('base64')
+  const serverKey = await crypto.hmacSha256(saltedPassword, 'Server Key')
+  const serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage)
 
   session.message = 'SASLResponse'
   session.serverSignature = Buffer.from(serverSignatureBytes).toString('base64')
Index: node_modules/power-tasks/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/README.md b/node_modules/power-tasks/README.md
--- a/node_modules/power-tasks/README.md	
+++ b/node_modules/power-tasks/README.md	
@@ -11,13 +11,14 @@
 
 ## Installation
 
-  - `npm install power-tasks --save`
+- `npm install power-tasks --save`
 
 ## Node Compatibility
 
-  - node `>= 14.x`;
-  
+- node `>= 14.x`;
+
 ### License
+
 [MIT](LICENSE)
 
 [npm-image]: https://img.shields.io/npm/v/power-tasks.svg
@@ -31,8 +32,8 @@
 [gitter-image]: https://badges.gitter.im/panates/power-tasks.svg
 [gitter-url]: https://gitter.im/panates/power-tasks?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
 [dependencies-image]: https://david-dm.org/panates/power-tasks/status.svg
-[dependencies-url]:https://david-dm.org/panates/power-tasks
+[dependencies-url]: https://david-dm.org/panates/power-tasks
 [devdependencies-image]: https://david-dm.org/panates/power-tasks/dev-status.svg
-[devdependencies-url]:https://david-dm.org/panates/power-tasks?type=dev
+[devdependencies-url]: https://david-dm.org/panates/power-tasks?type=dev
 [quality-image]: http://npm.packagequality.com/shield/power-tasks.png
 [quality-url]: http://packagequality.com/#?package=power-tasks
Index: node_modules/set-function-length/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/package.json b/node_modules/set-function-length/package.json
deleted file mode 100644
--- a/node_modules/set-function-length/package.json	
+++ /dev/null	
@@ -1,102 +0,0 @@
-{
-	"name": "set-function-length",
-	"version": "1.2.2",
-	"description": "Set a function's length property",
-	"main": "index.js",
-	"exports": {
-		".": "./index.js",
-		"./env": "./env.js",
-		"./package.json": "./package.json"
-	},
-	"sideEffects": false,
-	"directories": {
-		"test": "test"
-	},
-	"scripts": {
-		"prepack": "npmignore --auto --commentLines=autogenerated",
-		"prepublish": "not-in-publish || npm run prepublishOnly",
-		"prepublishOnly": "safe-publish-latest",
-		"tsc": "tsc -p .",
-		"posttsc": "attw -P",
-		"prelint": "evalmd README.md",
-		"lint": "eslint --ext=js,mjs .",
-		"postlint": "npm run tsc",
-		"pretest": "npm run lint",
-		"tests-only": "nyc tape 'test/**/*.js'",
-		"test": "npm run tests-only",
-		"posttest": "aud --production",
-		"version": "auto-changelog && git add CHANGELOG.md",
-		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
-	},
-	"repository": {
-		"type": "git",
-		"url": "git+https://github.com/ljharb/set-function-length.git"
-	},
-	"keywords": [
-		"javascript",
-		"ecmascript",
-		"set",
-		"function",
-		"length",
-		"function.length"
-	],
-	"author": "Jordan Harband <ljharb@gmail.com>",
-	"license": "MIT",
-	"bugs": {
-		"url": "https://github.com/ljharb/set-function-length/issues"
-	},
-	"homepage": "https://github.com/ljharb/set-function-length#readme",
-	"dependencies": {
-		"define-data-property": "^1.1.4",
-		"es-errors": "^1.3.0",
-		"function-bind": "^1.1.2",
-		"get-intrinsic": "^1.2.4",
-		"gopd": "^1.0.1",
-		"has-property-descriptors": "^1.0.2"
-	},
-	"devDependencies": {
-		"@arethetypeswrong/cli": "^0.15.1",
-		"@ljharb/eslint-config": "^21.1.0",
-		"@ljharb/tsconfig": "^0.1.1",
-		"@types/call-bind": "^1.0.5",
-		"@types/define-properties": "^1.1.5",
-		"@types/es-value-fixtures": "^1.4.4",
-		"@types/for-each": "^0.3.3",
-		"@types/function-bind": "^1.1.10",
-		"@types/gopd": "^1.0.3",
-		"@types/has-property-descriptors": "^1.0.3",
-		"@types/object-inspect": "^1.8.4",
-		"@types/tape": "^5.6.4",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
-		"call-bind": "^1.0.7",
-		"es-value-fixtures": "^1.4.2",
-		"eslint": "=8.8.0",
-		"evalmd": "^0.0.19",
-		"for-each": "^0.3.3",
-		"in-publish": "^2.0.1",
-		"npmignore": "^0.3.1",
-		"nyc": "^10.3.2",
-		"object-inspect": "^1.13.1",
-		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.5",
-		"typescript": "next"
-	},
-	"engines": {
-		"node": ">= 0.4"
-	},
-	"auto-changelog": {
-		"output": "CHANGELOG.md",
-		"template": "keepachangelog",
-		"unreleased": false,
-		"commitLimit": false,
-		"backfillLimit": false,
-		"hideCredit": true
-	},
-	"publishConfig": {
-		"ignore": [
-			".github/workflows",
-			"test"
-		]
-	}
-}
Index: node_modules/merge-descriptors/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/merge-descriptors/package.json b/node_modules/merge-descriptors/package.json
--- a/node_modules/merge-descriptors/package.json	
+++ b/node_modules/merge-descriptors/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "merge-descriptors",
   "description": "Merge objects using descriptors",
-  "version": "1.0.1",
+  "version": "1.0.3",
   "author": {
     "name": "Jonathan Ong",
     "email": "me@jongleberry.com",
@@ -13,10 +13,17 @@
     "Mike Grabowski <grabbou@gmail.com>"
   ],
   "license": "MIT",
-  "repository": "component/merge-descriptors",
+  "repository": "sindresorhus/merge-descriptors",
+  "funding": "https://github.com/sponsors/sindresorhus",
   "devDependencies": {
-    "istanbul": "0.4.1",
-    "mocha": "1.21.5"
+    "eslint": "5.9.0",
+    "eslint-config-standard": "12.0.0",
+    "eslint-plugin-import": "2.14.0",
+    "eslint-plugin-node": "7.0.1",
+    "eslint-plugin-promise": "4.0.1",
+    "eslint-plugin-standard": "4.0.0",
+    "mocha": "5.2.0",
+    "nyc": "13.1.0"
   },
   "files": [
     "HISTORY.md",
@@ -25,8 +32,8 @@
     "index.js"
   ],
   "scripts": {
-    "test": "mocha --reporter spec --bail --check-leaks test/",
-    "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
-    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"
+    "lint": "eslint .",
+    "test": "mocha test/",
+    "test-cov": "nyc --reporter=html --reporter=text npm test"
   }
 }
Index: node_modules/postgresql-client/typings/protocol/sasl.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/sasl.d.ts b/node_modules/postgresql-client/typings/protocol/sasl.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/sasl.d.ts	
+++ /dev/null	
@@ -1,13 +0,0 @@
-export declare namespace SASL {
-    interface Session {
-        username: string;
-        mechanism: string;
-        nonce: string;
-        clientFirstMessage: string;
-        clientFinalMessage: string;
-        serverSignature: string;
-    }
-    function createSession(username: string, mechanism: string): Session;
-    function continueSession(session: Session, password: string, data: string): void;
-    function finalizeSession(session: Session, data: string): void;
-}
Index: node_modules/gopd/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/gopd/CHANGELOG.md b/node_modules/gopd/CHANGELOG.md
--- a/node_modules/gopd/CHANGELOG.md	
+++ b/node_modules/gopd/CHANGELOG.md	
@@ -5,6 +5,26 @@
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+## [v1.2.0](https://github.com/ljharb/gopd/compare/v1.1.0...v1.2.0) - 2024-12-03
+
+### Commits
+
+- [New] add `gOPD` entry point; remove `get-intrinsic` [`5b61232`](https://github.com/ljharb/gopd/commit/5b61232dedea4591a314bcf16101b1961cee024e)
+
+## [v1.1.0](https://github.com/ljharb/gopd/compare/v1.0.1...v1.1.0) - 2024-11-29
+
+### Commits
+
+- [New] add types [`f585e39`](https://github.com/ljharb/gopd/commit/f585e397886d270e4ba84e53d226e4f9ca2eb0e6)
+- [Dev Deps] update `@ljharb/eslint-config`, `auto-changelog`, `tape` [`0b8e4fd`](https://github.com/ljharb/gopd/commit/0b8e4fded64397a7726a9daa144a6cc9a5e2edfa)
+- [Dev Deps] update `aud`, `npmignore`, `tape` [`48378b2`](https://github.com/ljharb/gopd/commit/48378b2443f09a4f7efbd0fb6c3ee845a6cabcf3)
+- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`78099ee`](https://github.com/ljharb/gopd/commit/78099eeed41bfdc134c912280483689cc8861c31)
+- [Tests] replace `aud` with `npm audit` [`4e0d0ac`](https://github.com/ljharb/gopd/commit/4e0d0ac47619d24a75318a8e1f543ee04b2a2632)
+- [meta] add missing `engines.node` [`1443316`](https://github.com/ljharb/gopd/commit/14433165d07835c680155b3dfd62d9217d735eca)
+- [Deps] update `get-intrinsic` [`eee5f51`](https://github.com/ljharb/gopd/commit/eee5f51769f3dbaf578b70e2a3199116b01aa670)
+- [Deps] update `get-intrinsic` [`550c378`](https://github.com/ljharb/gopd/commit/550c3780e3a9c77b62565712a001b4ed64ea61f5)
+- [Dev Deps] add missing peer dep [`8c2ecf8`](https://github.com/ljharb/gopd/commit/8c2ecf848122e4e30abfc5b5086fb48b390dce75)
+
 ## [v1.0.1](https://github.com/ljharb/gopd/compare/v1.0.0...v1.0.1) - 2022-11-01
 
 ### Commits
Index: node_modules/postgresql-client/typings/interfaces/query-result.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/query-result.d.ts b/node_modules/postgresql-client/typings/interfaces/query-result.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/query-result.d.ts	
+++ /dev/null	
@@ -1,8 +0,0 @@
-import type { Cursor } from '../connection/cursor';
-import type { CommandResult } from './command-result.js';
-export interface QueryResult extends CommandResult {
-    /**
-     * Cursor instance
-     */
-    cursor?: Cursor;
-}
Index: node_modules/ts-gems/lib/partial.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/partial.d.ts b/node_modules/ts-gems/lib/partial.d.ts
--- a/node_modules/ts-gems/lib/partial.d.ts	
+++ b/node_modules/ts-gems/lib/partial.d.ts	
@@ -1,4 +1,4 @@
-import { IfNoDeepValue } from './helpers';
+import { IfNoDeepValue } from './helpers.js';
 import {
   DeeperOmitRequired,
   DeeperPickRequired,
@@ -6,8 +6,8 @@
   DeepPickRequired,
   OmitRequired,
   PickRequired,
-} from './required';
-import { IfNever } from './type-check';
+} from './required.js';
+import { IfNever } from './type-check.js';
 
 /**
  * Marks given keys as optional
@@ -19,28 +19,29 @@
  * Partial but deeply
  */
 export type DeepPartial<T> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: IfNoDeepValue< // Do not deep process No-Deep values
+  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: IfNoDeepValue<
+    // Do not deep process No-Deep values
     Exclude<T[K], undefined>
   > extends true
     ? T[K]
     : // Deep process objects
-      DeepPartial<Exclude<T[K], undefined>>;
+      DeepPartial<NonNullable<T[K]>>;
 };
 
 /**
  * Partial but deeply including arrays
  */
 export type DeeperPartial<T> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: Exclude< // Deep process arrays
-    T[K],
-    undefined
+  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: NonNullable<
+    // Deep process arrays
+    T[K]
   > extends (infer U)[]
     ? DeeperPartial<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K]
       : // Deep process objects
-        DeeperPartial<Exclude<T[K], undefined>>;
+        DeeperPartial<NonNullable<T[K]>>;
 };
 
 /**
Index: node_modules/lightning-pool/esm/pool.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/pool.js b/node_modules/lightning-pool/esm/pool.js
--- a/node_modules/lightning-pool/esm/pool.js	
+++ b/node_modules/lightning-pool/esm/pool.js	
@@ -2,7 +2,7 @@
 import { EventEmitter } from 'events';
 import promisify from 'putil-promisify';
 import { AbortError } from './abort-error.js';
-import { PoolState, ResourceState } from './definitions.js';
+import { PoolState, ResourceState } from './constants.js';
 import { PoolOptions } from './pool-options.js';
 import { PoolRequest } from './pool-request.js';
 import { ResourceItem } from './resource-item.js';
@@ -16,25 +16,30 @@
         this._creating = 0;
         this._requestsProcessing = 0;
         this._state = PoolState.IDLE;
-        if (typeof factory !== 'object')
+        if (typeof factory !== 'object') {
             throw new TypeError('You must provide `factory` object');
-        if (typeof factory.create !== 'function')
+        }
+        if (typeof factory.create !== 'function') {
             throw new TypeError('factory.create must be a function');
-        if (typeof factory.destroy !== 'function')
+        }
+        if (typeof factory.destroy !== 'function') {
             throw new TypeError('factory.destroy must be a function');
-        if (factory.validate && typeof factory.validate !== 'function')
+        }
+        if (factory.validate && typeof factory.validate !== 'function') {
             throw new TypeError('factory.validate can be a function');
-        if (factory.reset && typeof factory.reset !== 'function')
+        }
+        if (factory.reset && typeof factory.reset !== 'function') {
             throw new TypeError('factory.reset can be a function');
-        const opts = this._options = new PoolOptions(this);
+        }
+        const opts = (this._options = new PoolOptions(this));
+        if (config)
+            this.options.assign(config);
         opts.on('change', (prop, val) => {
             if (prop === 'houseKeepInterval')
                 this._setHouseKeep(val);
             if (prop === 'min' || prop === 'minIdle')
                 this._ensureMin();
         });
-        if (config)
-            this.options.assign(config);
         this._factory = factory;
     }
     /**
@@ -87,8 +92,9 @@
     start() {
         if (this._state === PoolState.STARTED)
             return;
-        if (this._state >= PoolState.CLOSING)
+        if (this._state >= PoolState.CLOSING) {
             throw new Error('Closed pool can not be started again');
+        }
         this._state = PoolState.STARTED;
         this._setHouseKeep(this.options.houseKeepInterval);
         this._ensureMin();
@@ -100,14 +106,15 @@
         if (typeof arg0 === 'function')
             callback = arg0;
         else {
-            terminateWait = typeof arg0 === 'number' ? arg0 :
-                (!!arg0 ? 0 : Infinity);
+            terminateWait = typeof arg0 === 'number' ? arg0 : arg0 ? 0 : Infinity;
             callback = arg1;
         }
-        if (!callback)
+        if (!callback) {
             return promisify.fromCallback(cb => this.close(terminateWait, cb));
-        if (this._state === PoolState.CLOSED || this._state === PoolState.IDLE)
+        }
+        if (this._state === PoolState.CLOSED || this._state === PoolState.IDLE) {
             return callback();
+        }
         if (this._state === PoolState.CLOSING) {
             this.once('close', callback);
             return;
@@ -144,18 +151,18 @@
     closeAsync(arg0) {
         return promisify.fromCallback(cb => this.close(arg0, cb));
     }
-    acquire(arg0) {
-        if (!arg0)
+    acquire(callback) {
+        if (!callback)
             return promisify.fromCallback(cb => this.acquire(cb));
-        const callback = arg0;
         try {
             this.start();
         }
         catch (e) {
             return callback(e);
         }
-        if (this.options.maxQueue && this.pending >= this.options.maxQueue)
+        if (this.options.maxQueue && this.pending >= this.options.maxQueue) {
             return callback(new Error('Pool queue is full'));
+        }
         this._requestQueue.push(new PoolRequest(this, callback));
         this._processNextRequest();
     }
@@ -164,8 +171,9 @@
      */
     release(resource, callback) {
         const item = this._allResources.get(resource);
-        if (item && item.state !== ResourceState.IDLE)
+        if (item && item.state !== ResourceState.IDLE) {
             this._itemSetIdle(item, callback);
+        }
         this._processNextRequest();
     }
     /**
@@ -210,8 +218,9 @@
     }
     _processNextRequest() {
         if (this._state !== PoolState.STARTED ||
-            this._requestsProcessing >= this.options.max - this.acquired)
+            this._requestsProcessing >= this.options.max - this.acquired) {
             return;
+        }
         const request = this._requestQueue.shift();
         if (!request)
             return;
@@ -234,7 +243,7 @@
                 else
                     request.callback(err);
             }
-            catch (ignored) {
+            catch {
                 // ignored
             }
             this._processNextRequest();
@@ -243,9 +252,9 @@
         if (item) {
             /* Validate resource */
             if (this.options.validation && this._factory.validate) {
-                this._itemValidate(item, (err) => {
+                this._itemValidate(item, (err, result) => {
                     /* Destroy resource on validation error */
-                    if (err) {
+                    if (err || result === false) {
                         this._itemDestroy(item);
                         this.emit('validate-error', err, item.resource);
                         this._requestsProcessing--;
@@ -267,7 +276,7 @@
         try {
             return super.emit(event, ...args);
         }
-        catch (e) {
+        catch {
             return true;
         }
     }
@@ -286,7 +295,7 @@
                 this.emit('error', err, {
                     requestTime: request ? request.created : Date.now(),
                     tries,
-                    maxRetries: this.options.acquireMaxRetries
+                    maxRetries: this.options.acquireMaxRetries,
                 });
                 if (err instanceof AbortError || tries >= maxRetries) {
                     this._creating--;
@@ -295,9 +304,10 @@
                 return setTimeout(() => tryCreate(), this.options.acquireRetryWait);
             }
             this._creating--;
-            if (this._allResources.has(obj))
-                return callback &&
-                    callback(new Error('Factory error. Resource already in pool'));
+            if (this._allResources.has(obj)) {
+                return (callback &&
+                    callback(new Error('Factory error. Resource already in pool')));
+            }
             const item = new ResourceItem(obj);
             this._itemSetIdle(item);
             this._allResources.set(obj, item);
@@ -309,8 +319,9 @@
             try {
                 const o = this._factory.create({ tries, maxRetries });
                 /* istanbul ignore next */
-                if (!o)
+                if (!o) {
                     return handleCallback(new AbortError('Factory returned no resource'));
+                }
                 promisify.await(o, handleCallback);
             }
             catch (e) {
@@ -323,8 +334,10 @@
         if (this._houseKeepTimer)
             clearInterval(this._houseKeepTimer);
         this._houseKeepTimer = undefined;
-        if (ms > 0 && this.state === PoolState.STARTED || this.state === PoolState.CLOSING)
+        if ((ms > 0 && this.state === PoolState.STARTED) ||
+            this.state === PoolState.CLOSING) {
             this._houseKeepTimer = setInterval(() => this._houseKeep(), ms);
+        }
     }
     _houseKeep() {
         const isClosing = this._state === PoolState.CLOSING;
@@ -333,10 +346,9 @@
         let n = this._idleResources.length - this.options.minIdle;
         if (isClosing || (m > 0 && n > 0)) {
             this._idleResources.every((item) => {
-                if (isClosing ||
-                    item.idleTime + this.options.idleTimeoutMillis < now) {
+                if (isClosing || item.idleTime + this.options.idleTimeoutMillis < now) {
                     this._itemDestroy(item);
-                    return isClosing || !!((--n) && (--m));
+                    return isClosing || !!(--n && --m);
                 }
                 return false;
             });
@@ -382,6 +394,8 @@
                     item.acquiredNode.remove();
                 item.acquiredNode = undefined;
                 break;
+            default:
+                break;
         }
     }
     _itemSetIdle(item, callback) {
@@ -422,25 +436,25 @@
     _itemDestroy(item, callback) {
         this._itemDetach(item);
         const handleCallback = (err) => {
-            if (err) {
+            item.destroyed = true;
+            this._allResources.delete(item.resource);
+            if (err)
                 this.emit('destroy-error', err, item.resource);
-                /* istanbul ignore next */
-                return callback && callback(err);
-            }
-            this.emit('destroy', item.resource);
-            item.destroyed = true;
+            else
+                this.emit('destroy', item.resource);
             if (callback)
-                callback();
+                callback(err);
         };
         try {
-            this._allResources.delete(item.resource);
-            this._processNextRequest();
             const o = this._factory.destroy(item.resource);
             promisify.await(o, handleCallback);
         }
         catch (e) {
             handleCallback(e);
         }
+        finally {
+            this._processNextRequest();
+        }
     }
     _itemValidate(item, callback) {
         item.state = ResourceState.VALIDATION;
@@ -450,8 +464,7 @@
             promisify.await(o, callback);
         }
         catch (e) {
-            if (callback)
-                callback(e);
+            callback?.(e);
         }
     }
 }
Index: node_modules/has-property-descriptors/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-property-descriptors/package.json b/node_modules/has-property-descriptors/package.json
deleted file mode 100644
--- a/node_modules/has-property-descriptors/package.json	
+++ /dev/null	
@@ -1,77 +0,0 @@
-{
-	"name": "has-property-descriptors",
-	"version": "1.0.2",
-	"description": "Does the environment have full property descriptor support? Handles IE 8's broken defineProperty/gOPD.",
-	"main": "index.js",
-	"exports": {
-		".": "./index.js",
-		"./package.json": "./package.json"
-	},
-	"sideEffects": false,
-	"scripts": {
-		"prepack": "npmignore --auto --commentLines=autogenerated",
-		"prepublishOnly": "safe-publish-latest",
-		"prepublish": "not-in-publish || npm run prepublishOnly",
-		"pretest": "npm run lint",
-		"prelint": "evalmd README.md",
-		"lint": "eslint --ext=js,mjs .",
-		"tests-only": "nyc tape 'test/**/*.js'",
-		"test": "npm run tests-only",
-		"posttest": "aud --production",
-		"version": "auto-changelog && git add CHANGELOG.md",
-		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
-	},
-	"repository": {
-		"type": "git",
-		"url": "git+https://github.com/inspect-js/has-property-descriptors.git"
-	},
-	"keywords": [
-		"property",
-		"descriptors",
-		"has",
-		"environment",
-		"env",
-		"defineProperty",
-		"getOwnPropertyDescriptor"
-	],
-	"author": "Jordan Harband <ljharb@gmail.com>",
-	"funding": {
-		"url": "https://github.com/sponsors/ljharb"
-	},
-	"license": "MIT",
-	"bugs": {
-		"url": "https://github.com/inspect-js/has-property-descriptors/issues"
-	},
-	"homepage": "https://github.com/inspect-js/has-property-descriptors#readme",
-	"devDependencies": {
-		"@ljharb/eslint-config": "^21.1.0",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
-		"eslint": "=8.8.0",
-		"evalmd": "^0.0.19",
-		"in-publish": "^2.0.1",
-		"npmignore": "^0.3.1",
-		"nyc": "^10.3.2",
-		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.4"
-	},
-	"dependencies": {
-		"es-define-property": "^1.0.0"
-	},
-	"testling": {
-		"files": "test/index.js"
-	},
-	"auto-changelog": {
-		"output": "CHANGELOG.md",
-		"template": "keepachangelog",
-		"unreleased": false,
-		"commitLimit": false,
-		"backfillLimit": false,
-		"hideCredit": true
-	},
-	"publishConfig": {
-		"ignore": [
-			".github/workflows"
-		]
-	}
-}
Index: node_modules/.package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/.package-lock.json b/node_modules/.package-lock.json
--- a/node_modules/.package-lock.json	
+++ b/node_modules/.package-lock.json	
@@ -3,16 +3,23 @@
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
-    "node_modules/abbrev": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
-      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
-      "dev": true
+    "node_modules/@jsopen/objects": {
+      "version": "1.6.3",
+      "resolved": "https://registry.npmjs.org/@jsopen/objects/-/objects-1.6.3.tgz",
+      "integrity": "sha512-LNtPollREyfKNqE8GwCxjt4nyi7UuWqHxDbmCYwFzTCmAeFguAAyiLarw81kE2szoRCJzHZDkyEsfY5XyzhPTA==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.8.1"
+      },
+      "engines": {
+        "node": ">= 16.0"
+      }
     },
     "node_modules/accepts": {
       "version": "1.3.8",
       "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
       "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
+      "license": "MIT",
       "dependencies": {
         "mime-types": "~2.1.34",
         "negotiator": "0.6.3"
@@ -26,6 +33,7 @@
       "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
       "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
       "dev": true,
+      "license": "ISC",
       "dependencies": {
         "normalize-path": "^3.0.0",
         "picomatch": "^2.0.4"
@@ -34,27 +42,51 @@
         "node": ">= 8"
       }
     },
+    "node_modules/append-field": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
+      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
+      "license": "MIT"
+    },
     "node_modules/array-flatten": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
-      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
+      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
+      "license": "MIT"
     },
     "node_modules/balanced-match": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
       "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
-      "dev": true
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/bcrypt": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-6.0.0.tgz",
+      "integrity": "sha512-cU8v/EGSrnH+HnxV2z0J7/blxH8gq7Xh2JFT6Aroax7UohdmiJJlxApMxtKfuI7z68NvvVcmR78k2LbT6efhRg==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "node-addon-api": "^8.3.0",
+        "node-gyp-build": "^4.8.4"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
     },
     "node_modules/bcryptjs": {
       "version": "2.4.3",
       "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
-      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
+      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ==",
+      "license": "MIT"
     },
     "node_modules/binary-extensions": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
       "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=8"
       },
@@ -63,9 +95,10 @@
       }
     },
     "node_modules/body-parser": {
-      "version": "1.20.2",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
-      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
+      "version": "1.20.3",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
+      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
+      "license": "MIT",
       "dependencies": {
         "bytes": "3.1.2",
         "content-type": "~1.0.5",
@@ -75,7 +108,7 @@
         "http-errors": "2.0.0",
         "iconv-lite": "0.4.24",
         "on-finished": "2.4.1",
-        "qs": "6.11.0",
+        "qs": "6.13.0",
         "raw-body": "2.5.2",
         "type-is": "~1.6.18",
         "unpipe": "1.0.0"
@@ -86,22 +119,24 @@
       }
     },
     "node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "balanced-match": "^1.0.0",
         "concat-map": "0.0.1"
       }
     },
     "node_modules/braces": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
-      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
-        "fill-range": "^7.0.1"
+        "fill-range": "^7.1.1"
       },
       "engines": {
         "node": ">=8"
@@ -110,26 +145,56 @@
     "node_modules/buffer-equal-constant-time": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
-      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
+      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/buffer-from": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
+      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
+      "license": "MIT"
+    },
+    "node_modules/busboy": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
+      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
+      "dependencies": {
+        "streamsearch": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=10.16.0"
+      }
     },
     "node_modules/bytes": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
       "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
-    "node_modules/call-bind": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
-      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "license": "MIT",
       "dependencies": {
-        "es-define-property": "^1.0.0",
         "es-errors": "^1.3.0",
-        "function-bind": "^1.1.2",
-        "get-intrinsic": "^1.2.4",
-        "set-function-length": "^1.2.1"
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -143,6 +208,7 @@
       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
       "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "anymatch": "~3.1.2",
         "braces": "~3.0.2",
@@ -166,12 +232,29 @@
       "version": "0.0.1",
       "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
       "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
-      "dev": true
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/concat-stream": {
+      "version": "1.6.2",
+      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
+      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
+      "engines": [
+        "node >= 0.8"
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "buffer-from": "^1.0.0",
+        "inherits": "^2.0.3",
+        "readable-stream": "^2.2.2",
+        "typedarray": "^0.0.6"
+      }
     },
     "node_modules/content-disposition": {
       "version": "0.5.4",
       "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
       "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
+      "license": "MIT",
       "dependencies": {
         "safe-buffer": "5.2.1"
       },
@@ -183,24 +266,27 @@
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
       "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/cookie": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz",
-      "integrity": "sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==",
+      "version": "0.7.2",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
+      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/cookie-parser": {
-      "version": "1.4.6",
-      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz",
-      "integrity": "sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==",
+      "version": "1.4.7",
+      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.7.tgz",
+      "integrity": "sha512-nGUvgXnotP3BsjiLX2ypbQnWoGUPIIfHQNZkkC668ntrzGWEZVW70HDEB1qnNGMicPje6EttlIgzo51YSwNQGw==",
+      "license": "MIT",
       "dependencies": {
-        "cookie": "0.4.1",
+        "cookie": "0.7.2",
         "cookie-signature": "1.0.6"
       },
       "engines": {
@@ -210,12 +296,20 @@
     "node_modules/cookie-signature": {
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
-      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
+      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
+      "license": "MIT"
+    },
+    "node_modules/core-util-is": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
+      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
+      "license": "MIT"
     },
     "node_modules/cors": {
       "version": "2.8.5",
       "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
       "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
+      "license": "MIT",
       "dependencies": {
         "object-assign": "^4",
         "vary": "^1"
@@ -228,30 +322,16 @@
       "version": "2.6.9",
       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
       "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+      "license": "MIT",
       "dependencies": {
         "ms": "2.0.0"
       }
     },
-    "node_modules/define-data-property": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
-      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
-      "dependencies": {
-        "es-define-property": "^1.0.0",
-        "es-errors": "^1.3.0",
-        "gopd": "^1.0.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/depd": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
       "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
@@ -260,15 +340,17 @@
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
       "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8",
         "npm": "1.2.8000 || >= 1.4.16"
       }
     },
     "node_modules/dotenv": {
-      "version": "16.4.5",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.5.tgz",
-      "integrity": "sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==",
+      "version": "16.6.1",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
+      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
+      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
       },
@@ -277,17 +359,33 @@
       }
     },
     "node_modules/doublylinked": {
-      "version": "2.5.4",
-      "resolved": "https://registry.npmjs.org/doublylinked/-/doublylinked-2.5.4.tgz",
-      "integrity": "sha512-jBCKDnFkEHJRjQvYEl5N9VngRV8ypHgw6a52OK4VN57eV2r2rYvgOx9uABdY78INNoW7S6auULp+KBVm/jfYqw==",
+      "version": "2.5.6",
+      "resolved": "https://registry.npmjs.org/doublylinked/-/doublylinked-2.5.6.tgz",
+      "integrity": "sha512-oskbNBycNHjQ0Zg/5DMYiqFnSeblM2BSc2Ehu5+PyBay0ESlullPp0YEjlwtG3QtN4Fb7hC9USJqNyTMftl/1A==",
+      "license": "MIT",
       "engines": {
-        "node": ">= 10.0"
+        "node": ">= 16.0"
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
       }
     },
     "node_modules/ecdsa-sig-formatter": {
       "version": "1.0.11",
       "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
       "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
+      "license": "Apache-2.0",
       "dependencies": {
         "safe-buffer": "^5.0.1"
       }
@@ -295,23 +393,23 @@
     "node_modules/ee-first": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
-      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
+      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
+      "license": "MIT"
     },
     "node_modules/encodeurl": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
-      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
+      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
     "node_modules/es-define-property": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
-      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
-      "dependencies": {
-        "get-intrinsic": "^1.2.4"
-      },
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.4"
       }
@@ -320,6 +418,19 @@
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
       "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
       "engines": {
         "node": ">= 0.4"
       }
@@ -327,47 +438,50 @@
     "node_modules/escape-html": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
-      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
+      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
+      "license": "MIT"
     },
     "node_modules/etag": {
       "version": "1.8.1",
       "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
       "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/express": {
-      "version": "4.19.2",
-      "resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
-      "integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
+      "version": "4.21.2",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
+      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
+      "license": "MIT",
       "dependencies": {
         "accepts": "~1.3.8",
         "array-flatten": "1.1.1",
-        "body-parser": "1.20.2",
+        "body-parser": "1.20.3",
         "content-disposition": "0.5.4",
         "content-type": "~1.0.4",
-        "cookie": "0.6.0",
+        "cookie": "0.7.1",
         "cookie-signature": "1.0.6",
         "debug": "2.6.9",
         "depd": "2.0.0",
-        "encodeurl": "~1.0.2",
+        "encodeurl": "~2.0.0",
         "escape-html": "~1.0.3",
         "etag": "~1.8.1",
-        "finalhandler": "1.2.0",
+        "finalhandler": "1.3.1",
         "fresh": "0.5.2",
         "http-errors": "2.0.0",
-        "merge-descriptors": "1.0.1",
+        "merge-descriptors": "1.0.3",
         "methods": "~1.1.2",
         "on-finished": "2.4.1",
         "parseurl": "~1.3.3",
-        "path-to-regexp": "0.1.7",
+        "path-to-regexp": "0.1.12",
         "proxy-addr": "~2.0.7",
-        "qs": "6.11.0",
+        "qs": "6.13.0",
         "range-parser": "~1.2.1",
         "safe-buffer": "5.2.1",
-        "send": "0.18.0",
-        "serve-static": "1.15.0",
+        "send": "0.19.0",
+        "serve-static": "1.16.2",
         "setprototypeof": "1.2.0",
         "statuses": "2.0.1",
         "type-is": "~1.6.18",
@@ -376,21 +490,27 @@
       },
       "engines": {
         "node": ">= 0.10.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/express"
       }
     },
     "node_modules/express/node_modules/cookie": {
-      "version": "0.6.0",
-      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
-      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
+      "version": "0.7.1",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
+      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/fill-range": {
-      "version": "7.0.1",
-      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
-      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "to-regex-range": "^5.0.1"
       },
@@ -399,12 +519,13 @@
       }
     },
     "node_modules/finalhandler": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
-      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
+      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
+      "license": "MIT",
       "dependencies": {
         "debug": "2.6.9",
-        "encodeurl": "~1.0.2",
+        "encodeurl": "~2.0.0",
         "escape-html": "~1.0.3",
         "on-finished": "2.4.1",
         "parseurl": "~1.3.3",
@@ -419,6 +540,7 @@
       "version": "0.2.0",
       "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
       "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -427,6 +549,7 @@
       "version": "0.5.2",
       "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
       "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -435,20 +558,27 @@
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
       "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/get-intrinsic": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
-      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "license": "MIT",
       "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
         "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
         "function-bind": "^1.1.2",
-        "has-proto": "^1.0.1",
-        "has-symbols": "^1.0.3",
-        "hasown": "^2.0.0"
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -457,11 +587,25 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
     "node_modules/glob-parent": {
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
       "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
       "dev": true,
+      "license": "ISC",
       "dependencies": {
         "is-glob": "^4.0.1"
       },
@@ -470,11 +614,12 @@
       }
     },
     "node_modules/gopd": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
-      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
-      "dependencies": {
-        "get-intrinsic": "^1.1.3"
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -485,36 +630,16 @@
       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
       "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
     },
-    "node_modules/has-property-descriptors": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
-      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
-      "dependencies": {
-        "es-define-property": "^1.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/has-proto": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
-      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/has-symbols": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
-      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.4"
       },
@@ -526,6 +651,7 @@
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
       "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
       "dependencies": {
         "function-bind": "^1.1.2"
       },
@@ -537,6 +663,7 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
       "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "license": "MIT",
       "dependencies": {
         "depd": "2.0.0",
         "inherits": "2.0.4",
@@ -551,12 +678,14 @@
     "node_modules/http-status-codes": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/http-status-codes/-/http-status-codes-2.3.0.tgz",
-      "integrity": "sha512-RJ8XvFvpPM/Dmc5SV+dC4y5PCeOhT3x1Hq0NU3rjGeg5a/CqlhZ7uudknPwZFz4aeAXDcbAyaeP7GAo9lvngtA=="
+      "integrity": "sha512-RJ8XvFvpPM/Dmc5SV+dC4y5PCeOhT3x1Hq0NU3rjGeg5a/CqlhZ7uudknPwZFz4aeAXDcbAyaeP7GAo9lvngtA==",
+      "license": "MIT"
     },
     "node_modules/iconv-lite": {
       "version": "0.4.24",
       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
       "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
+      "license": "MIT",
       "dependencies": {
         "safer-buffer": ">= 2.1.2 < 3"
       },
@@ -568,17 +697,20 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
       "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
-      "dev": true
+      "dev": true,
+      "license": "ISC"
     },
     "node_modules/inherits": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
-      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "license": "ISC"
     },
     "node_modules/ipaddr.js": {
       "version": "1.9.1",
       "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
       "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.10"
       }
@@ -588,6 +720,7 @@
       "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
       "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "binary-extensions": "^2.0.0"
       },
@@ -600,6 +733,7 @@
       "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
       "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -609,6 +743,7 @@
       "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
       "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "is-extglob": "^2.1.1"
       },
@@ -621,14 +756,22 @@
       "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
       "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=0.12.0"
       }
     },
+    "node_modules/isarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
+      "license": "MIT"
+    },
     "node_modules/jsonwebtoken": {
       "version": "9.0.2",
       "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
       "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
+      "license": "MIT",
       "dependencies": {
         "jws": "^3.2.2",
         "lodash.includes": "^4.3.0",
@@ -649,14 +792,16 @@
     "node_modules/jsonwebtoken/node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
     },
     "node_modules/jwa": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
-      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
+      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
+      "license": "MIT",
       "dependencies": {
-        "buffer-equal-constant-time": "1.0.1",
+        "buffer-equal-constant-time": "^1.0.1",
         "ecdsa-sig-formatter": "1.0.11",
         "safe-buffer": "^5.0.1"
       }
@@ -665,72 +810,97 @@
       "version": "3.2.2",
       "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
       "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
+      "license": "MIT",
       "dependencies": {
         "jwa": "^1.4.1",
         "safe-buffer": "^5.0.1"
       }
     },
     "node_modules/lightning-pool": {
-      "version": "4.2.2",
-      "resolved": "https://registry.npmjs.org/lightning-pool/-/lightning-pool-4.2.2.tgz",
-      "integrity": "sha512-KW0Df0IbjNLxy5wAsdErTKYtHGwefLRQseHNksEctyaL7gtRwJT0nqLa2uiRdNYDwKSnZtqOjSjUNtfxmfH1qw==",
+      "version": "4.11.1",
+      "resolved": "https://registry.npmjs.org/lightning-pool/-/lightning-pool-4.11.1.tgz",
+      "integrity": "sha512-I/+aDkeFvKrdC204UcGbLuVTmGaSBP6F2VtWLuFtHCn0/bzuYKpei8Z+P4+HYE3lmJdGfNHVFjLeYLQaxmpymQ==",
+      "license": "MIT",
       "dependencies": {
-        "doublylinked": "^2.5.3",
-        "putil-promisify": "^1.10.1"
+        "doublylinked": "^2.5.6",
+        "putil-promisify": "^1.10.1",
+        "tslib": "^2.8.1"
       }
     },
     "node_modules/lodash.includes": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
-      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
+      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
+      "license": "MIT"
     },
     "node_modules/lodash.isboolean": {
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
-      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
+      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
+      "license": "MIT"
     },
     "node_modules/lodash.isinteger": {
       "version": "4.0.4",
       "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
-      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
+      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
+      "license": "MIT"
     },
     "node_modules/lodash.isnumber": {
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
-      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
+      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
+      "license": "MIT"
     },
     "node_modules/lodash.isplainobject": {
       "version": "4.0.6",
       "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
-      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA=="
+      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
+      "license": "MIT"
     },
     "node_modules/lodash.isstring": {
       "version": "4.0.1",
       "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
-      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
+      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
+      "license": "MIT"
     },
     "node_modules/lodash.once": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
-      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
+      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
+      "license": "MIT"
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
     },
     "node_modules/media-typer": {
       "version": "0.3.0",
       "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
       "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/merge-descriptors": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
-      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
+      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
     },
     "node_modules/methods": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
       "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -739,6 +909,7 @@
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
       "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
+      "license": "MIT",
       "bin": {
         "mime": "cli.js"
       },
@@ -750,6 +921,7 @@
       "version": "1.52.0",
       "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
       "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -758,6 +930,7 @@
       "version": "2.1.35",
       "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
       "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "license": "MIT",
       "dependencies": {
         "mime-db": "1.52.0"
       },
@@ -770,6 +943,7 @@
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
       "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
       "dev": true,
+      "license": "ISC",
       "dependencies": {
         "brace-expansion": "^1.1.7"
       },
@@ -777,24 +951,87 @@
         "node": "*"
       }
     },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
+      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/mkdirp": {
+      "version": "0.5.6",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
+      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
+      "license": "MIT",
+      "dependencies": {
+        "minimist": "^1.2.6"
+      },
+      "bin": {
+        "mkdirp": "bin/cmd.js"
+      }
+    },
     "node_modules/ms": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
-      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
+      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
+      "license": "MIT"
+    },
+    "node_modules/multer": {
+      "version": "1.4.5-lts.2",
+      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.5-lts.2.tgz",
+      "integrity": "sha512-VzGiVigcG9zUAoCNU+xShztrlr1auZOlurXynNvO9GiWD1/mTBbUljOKY+qMeazBqXgRnjzeEgJI/wyjJUHg9A==",
+      "deprecated": "Multer 1.x is impacted by a number of vulnerabilities, which have been patched in 2.x. You should upgrade to the latest 2.x version.",
+      "license": "MIT",
+      "dependencies": {
+        "append-field": "^1.0.0",
+        "busboy": "^1.0.0",
+        "concat-stream": "^1.5.2",
+        "mkdirp": "^0.5.4",
+        "object-assign": "^4.1.1",
+        "type-is": "^1.6.4",
+        "xtend": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 6.0.0"
+      }
     },
     "node_modules/negotiator": {
       "version": "0.6.3",
       "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
       "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
+    "node_modules/node-addon-api": {
+      "version": "8.5.0",
+      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-8.5.0.tgz",
+      "integrity": "sha512-/bRZty2mXUIFY/xU5HLvveNHlswNJej+RnxBjOMkidWfwZzgTbPG1E3K5TOxRLOR+5hX7bSofy8yf1hZevMS8A==",
+      "license": "MIT",
+      "engines": {
+        "node": "^18 || ^20 || >= 21"
+      }
+    },
+    "node_modules/node-gyp-build": {
+      "version": "4.8.4",
+      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.8.4.tgz",
+      "integrity": "sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==",
+      "license": "MIT",
+      "bin": {
+        "node-gyp-build": "bin.js",
+        "node-gyp-build-optional": "optional.js",
+        "node-gyp-build-test": "build-test.js"
+      }
+    },
     "node_modules/nodemon": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.0.tgz",
-      "integrity": "sha512-xqlktYlDMCepBJd43ZQhjWwMw2obW/JRvkrLxq5RCNcuDDX1DbcPT+qT1IlIIdf+DhnWs90JpTMe+Y5KxOchvA==",
+      "version": "3.1.10",
+      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
+      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "chokidar": "^3.5.2",
         "debug": "^4",
@@ -819,12 +1056,13 @@
       }
     },
     "node_modules/nodemon/node_modules/debug": {
-      "version": "4.3.4",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
-      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
-        "ms": "2.1.2"
+        "ms": "^2.1.3"
       },
       "engines": {
         "node": ">=6.0"
@@ -836,31 +1074,18 @@
       }
     },
     "node_modules/nodemon/node_modules/ms": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
-      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
-      "dev": true
-    },
-    "node_modules/nopt": {
-      "version": "1.0.10",
-      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
-      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
       "dev": true,
-      "dependencies": {
-        "abbrev": "1"
-      },
-      "bin": {
-        "nopt": "bin/nopt.js"
-      },
-      "engines": {
-        "node": "*"
-      }
+      "license": "MIT"
     },
     "node_modules/normalize-path": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
       "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -869,14 +1094,19 @@
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
       "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/object-inspect": {
-      "version": "1.13.1",
-      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.1.tgz",
-      "integrity": "sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==",
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
@@ -884,12 +1114,14 @@
     "node_modules/obuf": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
-      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg=="
+      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==",
+      "license": "MIT"
     },
     "node_modules/on-finished": {
       "version": "2.4.1",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
       "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
+      "license": "MIT",
       "dependencies": {
         "ee-first": "1.1.1"
       },
@@ -901,31 +1133,34 @@
       "version": "1.3.3",
       "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
       "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
     "node_modules/path-to-regexp": {
-      "version": "0.1.7",
-      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
-      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
+      "version": "0.1.12",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
+      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
+      "license": "MIT"
     },
     "node_modules/pg": {
-      "version": "8.11.5",
-      "resolved": "https://registry.npmjs.org/pg/-/pg-8.11.5.tgz",
-      "integrity": "sha512-jqgNHSKL5cbDjFlHyYsCXmQDrfIX/3RsNwYqpd4N0Kt8niLuNoRNH+aazv6cOd43gPh9Y4DjQCtb+X0MH0Hvnw==",
+      "version": "8.16.3",
+      "resolved": "https://registry.npmjs.org/pg/-/pg-8.16.3.tgz",
+      "integrity": "sha512-enxc1h0jA/aq5oSDMvqyW3q89ra6XIIDZgCX9vkMrnz5DFTw/Ny3Li2lFQ+pt3L6MCgm/5o2o8HW9hiJji+xvw==",
+      "license": "MIT",
       "dependencies": {
-        "pg-connection-string": "^2.6.4",
-        "pg-pool": "^3.6.2",
-        "pg-protocol": "^1.6.1",
-        "pg-types": "^2.1.0",
-        "pgpass": "1.x"
+        "pg-connection-string": "^2.9.1",
+        "pg-pool": "^3.10.1",
+        "pg-protocol": "^1.10.3",
+        "pg-types": "2.2.0",
+        "pgpass": "1.0.5"
       },
       "engines": {
-        "node": ">= 8.0.0"
+        "node": ">= 16.0.0"
       },
       "optionalDependencies": {
-        "pg-cloudflare": "^1.1.1"
+        "pg-cloudflare": "^1.2.7"
       },
       "peerDependencies": {
         "pg-native": ">=3.0.1"
@@ -937,41 +1172,47 @@
       }
     },
     "node_modules/pg-cloudflare": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz",
-      "integrity": "sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==",
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.2.7.tgz",
+      "integrity": "sha512-YgCtzMH0ptvZJslLM1ffsY4EuGaU0cx4XSdXLRFae8bPP4dS5xL1tNB3k2o/N64cHJpwU7dxKli/nZ2lUa5fLg==",
+      "license": "MIT",
       "optional": true
     },
     "node_modules/pg-connection-string": {
-      "version": "2.6.4",
-      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.6.4.tgz",
-      "integrity": "sha512-v+Z7W/0EO707aNMaAEfiGnGL9sxxumwLl2fJvCQtMn9Fxsg+lPpPkdcyBSv/KFgpGdYkMfn+EI1Or2EHjpgLCA=="
+      "version": "2.9.1",
+      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.9.1.tgz",
+      "integrity": "sha512-nkc6NpDcvPVpZXxrreI/FOtX3XemeLl8E0qFr6F2Lrm/I8WOnaWNhIPK2Z7OHpw7gh5XJThi6j6ppgNoaT1w4w==",
+      "license": "MIT"
     },
     "node_modules/pg-int8": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
       "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
+      "license": "ISC",
       "engines": {
         "node": ">=4.0.0"
       }
     },
     "node_modules/pg-pool": {
-      "version": "3.6.2",
-      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.6.2.tgz",
-      "integrity": "sha512-Htjbg8BlwXqSBQ9V8Vjtc+vzf/6fVUuak/3/XXKA9oxZprwW3IMDQTGHP+KDmVL7rtd+R1QjbnCFPuTHm3G4hg==",
+      "version": "3.10.1",
+      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.10.1.tgz",
+      "integrity": "sha512-Tu8jMlcX+9d8+QVzKIvM/uJtp07PKr82IUOYEphaWcoBhIYkoHpLXN3qO59nAI11ripznDsEzEv8nUxBVWajGg==",
+      "license": "MIT",
       "peerDependencies": {
         "pg": ">=8.0"
       }
     },
     "node_modules/pg-protocol": {
-      "version": "1.6.1",
-      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.6.1.tgz",
-      "integrity": "sha512-jPIlvgoD63hrEuihvIg+tJhoGjUsLPn6poJY9N5CnlPd91c2T18T/9zBtLxZSb1EhYxBRoZJtzScCaWlYLtktg=="
+      "version": "1.10.3",
+      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.10.3.tgz",
+      "integrity": "sha512-6DIBgBQaTKDJyxnXaLiLR8wBpQQcGWuAESkRBX/t6OwA8YsqP+iVSiond2EDy6Y/dsGk8rh/jtax3js5NeV7JQ==",
+      "license": "MIT"
     },
     "node_modules/pg-types": {
       "version": "2.2.0",
       "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
       "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
+      "license": "MIT",
       "dependencies": {
         "pg-int8": "1.0.1",
         "postgres-array": "~2.0.0",
@@ -987,6 +1228,7 @@
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
       "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
+      "license": "MIT",
       "dependencies": {
         "split2": "^4.1.0"
       }
@@ -996,6 +1238,7 @@
       "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
       "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=8.6"
       },
@@ -1003,10 +1246,42 @@
         "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
+    "node_modules/postgrejs": {
+      "version": "2.22.4",
+      "resolved": "https://registry.npmjs.org/postgrejs/-/postgrejs-2.22.4.tgz",
+      "integrity": "sha512-ZtHefKDn7U+0hodDYtApzX/tktZ2O4kK+M5Q0PdUaOziNQoid7O0sWlxGIXzn7/ruHKsGi8DFvm9hTvptVX27w==",
+      "license": "MIT",
+      "dependencies": {
+        "@jsopen/objects": "^1.5.2",
+        "doublylinked": "^2.5.6",
+        "lightning-pool": "^4.10.1",
+        "postgres-bytea": "^3.0.0",
+        "power-tasks": "^1.11.0",
+        "putil-promisify": "^1.10.1",
+        "putil-varhelpers": "^1.6.5",
+        "tslib": "^2.8.1"
+      },
+      "engines": {
+        "node": ">=16.0"
+      }
+    },
+    "node_modules/postgrejs/node_modules/postgres-bytea": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-3.0.0.tgz",
+      "integrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==",
+      "license": "MIT",
+      "dependencies": {
+        "obuf": "~1.1.2"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/postgres": {
-      "version": "3.4.4",
-      "resolved": "https://registry.npmjs.org/postgres/-/postgres-3.4.4.tgz",
-      "integrity": "sha512-IbyN+9KslkqcXa8AO9fxpk97PA4pzewvpi2B3Dwy9u4zpV32QicaEdgmF3eSQUzdRk7ttDHQejNgAEr4XoeH4A==",
+      "version": "3.4.7",
+      "resolved": "https://registry.npmjs.org/postgres/-/postgres-3.4.7.tgz",
+      "integrity": "sha512-Jtc2612XINuBjIl/QTWsV5UvE8UHuNblcO3vVADSrKsrc6RqGX6lOW1cEo3CM2v0XG4Nat8nI+YM7/f26VxXLw==",
+      "license": "Unlicense",
       "engines": {
         "node": ">=12"
       },
@@ -1019,6 +1294,7 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
       "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
+      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
@@ -1027,6 +1303,7 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
       "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -1035,6 +1312,7 @@
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
       "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -1043,6 +1321,7 @@
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
       "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
+      "license": "MIT",
       "dependencies": {
         "xtend": "^4.0.0"
       },
@@ -1051,49 +1330,43 @@
       }
     },
     "node_modules/postgresql-client": {
-      "version": "2.11.0",
-      "resolved": "https://registry.npmjs.org/postgresql-client/-/postgresql-client-2.11.0.tgz",
-      "integrity": "sha512-QSPHcWVaiBG+JyASaDojOXvhRmsc2n8j2COdIjUDENFAtFls16Zy240asY2ENzZRQJUMAA8vpR8w4SAdI8jdbw==",
+      "version": "2.13.0",
+      "resolved": "https://registry.npmjs.org/postgresql-client/-/postgresql-client-2.13.0.tgz",
+      "integrity": "sha512-GOSQstAJiHeIwXrvARCp0y7PMwfzf+Egg0KOn1MiggykvQFr4OO8FyT0x7Yc3hcPL4iLk47z9KeAbbdVCqTP0g==",
+      "deprecated": "Package name 'postgresql-client' has been changed to 'postgrejs'. Please consider to update dependencies in your package.json",
+      "license": "MIT",
       "dependencies": {
-        "doublylinked": "^2.5.4",
-        "lightning-pool": "^4.2.2",
-        "postgres-bytea": "^3.0.0",
-        "power-tasks": "^1.7.3",
-        "putil-merge": "^3.12.1",
-        "putil-promisify": "^1.10.1",
-        "putil-varhelpers": "^1.6.5"
+        "postgrejs": "^2.15.1"
       },
       "engines": {
         "node": ">=16.0"
       }
     },
-    "node_modules/postgresql-client/node_modules/postgres-bytea": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-3.0.0.tgz",
-      "integrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==",
-      "dependencies": {
-        "obuf": "~1.1.2"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
     "node_modules/power-tasks": {
-      "version": "1.7.3",
-      "resolved": "https://registry.npmjs.org/power-tasks/-/power-tasks-1.7.3.tgz",
-      "integrity": "sha512-EnkjLfaX4PxFYHbUWyWzlE4I8SgctaW9jx4qQXrVRoELlqBXrxIMtuhHzRwsHv2qs1tO7efOcZa6/wDCdCjRfA==",
+      "version": "1.11.0",
+      "resolved": "https://registry.npmjs.org/power-tasks/-/power-tasks-1.11.0.tgz",
+      "integrity": "sha512-UAVmqOw4miD+BW4gBrL1KJb24akTUfy1XglIFB7domD7Wyj0eQAyK9F9PnYYiw1pVLoyy3L+HfCYWwN2sMwCzg==",
+      "license": "MIT",
       "dependencies": {
         "doublylinked": "^2.5.4",
-        "strict-typed-events": "^2.3.3"
+        "strict-typed-events": "^2.8.0",
+        "tslib": "^2.6.3"
       },
       "engines": {
         "node": ">=16.0"
       }
     },
+    "node_modules/process-nextick-args": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
+      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
+      "license": "MIT"
+    },
     "node_modules/proxy-addr": {
       "version": "2.0.7",
       "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
       "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
+      "license": "MIT",
       "dependencies": {
         "forwarded": "0.2.0",
         "ipaddr.js": "1.9.1"
@@ -1106,20 +1379,14 @@
       "version": "1.1.8",
       "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
       "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
-      "dev": true
-    },
-    "node_modules/putil-merge": {
-      "version": "3.12.1",
-      "resolved": "https://registry.npmjs.org/putil-merge/-/putil-merge-3.12.1.tgz",
-      "integrity": "sha512-4clPyRkJPrd5zl98AP7I3JamyXbx0ixe2CnfvGwoTyWSr7Kslcv8weoKjfU4BMBifkWIRL54l4OrNe97pYcDwQ==",
-      "engines": {
-        "node": ">= 10.0"
-      }
+      "dev": true,
+      "license": "MIT"
     },
     "node_modules/putil-promisify": {
       "version": "1.10.1",
       "resolved": "https://registry.npmjs.org/putil-promisify/-/putil-promisify-1.10.1.tgz",
       "integrity": "sha512-1jm0egJNrj5eBDRj15Cg08RNHDV91OVEHeeYjAFRcs663PXxFokndxcJAGbaO6CSErCTp8eTgC8vuOF+fvXIAA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 14.0"
       }
@@ -1128,16 +1395,18 @@
       "version": "1.6.5",
       "resolved": "https://registry.npmjs.org/putil-varhelpers/-/putil-varhelpers-1.6.5.tgz",
       "integrity": "sha512-kyu+lE5xkc65ScgaIi6rNONLXeS7jGBxl1I0rzHVsFGAAQ45D/VkuEev+t09PFB943F+CqdWFLczH6ePk5TPAA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 6.0"
       }
     },
     "node_modules/qs": {
-      "version": "6.11.0",
-      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
-      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
+      "version": "6.13.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
+      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
+      "license": "BSD-3-Clause",
       "dependencies": {
-        "side-channel": "^1.0.4"
+        "side-channel": "^1.0.6"
       },
       "engines": {
         "node": ">=0.6"
@@ -1150,6 +1419,7 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
       "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -1158,6 +1428,7 @@
       "version": "2.5.2",
       "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
       "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
+      "license": "MIT",
       "dependencies": {
         "bytes": "3.1.2",
         "http-errors": "2.0.0",
@@ -1168,11 +1439,33 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/readable-stream": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
+      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
+      "license": "MIT",
+      "dependencies": {
+        "core-util-is": "~1.0.0",
+        "inherits": "~2.0.3",
+        "isarray": "~1.0.0",
+        "process-nextick-args": "~2.0.0",
+        "safe-buffer": "~5.1.1",
+        "string_decoder": "~1.1.1",
+        "util-deprecate": "~1.0.1"
+      }
+    },
+    "node_modules/readable-stream/node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "license": "MIT"
+    },
     "node_modules/readdirp": {
       "version": "3.6.0",
       "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
       "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "picomatch": "^2.2.1"
       },
@@ -1184,6 +1477,7 @@
       "version": "1.3.8",
       "resolved": "https://registry.npmjs.org/router/-/router-1.3.8.tgz",
       "integrity": "sha512-461UFH44NtSfIlS83PUg2N7OZo86BC/kB3dY77gJdsODsBhhw7+2uE0tzTINxrY9CahCUVk1VhpWCA5i1yoIEg==",
+      "license": "MIT",
       "dependencies": {
         "array-flatten": "3.0.0",
         "debug": "2.6.9",
@@ -1200,7 +1494,14 @@
     "node_modules/router/node_modules/array-flatten": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-3.0.0.tgz",
-      "integrity": "sha512-zPMVc3ZYlGLNk4mpK1NzP2wg0ml9t7fUgDsayR5Y5rSzxQilzR9FGu/EH2jQOcKSAeAfWeylyW8juy3OkWRvNA=="
+      "integrity": "sha512-zPMVc3ZYlGLNk4mpK1NzP2wg0ml9t7fUgDsayR5Y5rSzxQilzR9FGu/EH2jQOcKSAeAfWeylyW8juy3OkWRvNA==",
+      "license": "MIT"
+    },
+    "node_modules/router/node_modules/path-to-regexp": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
+      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==",
+      "license": "MIT"
     },
     "node_modules/safe-buffer": {
       "version": "5.2.1",
@@ -1219,17 +1520,20 @@
           "type": "consulting",
           "url": "https://feross.org/support"
         }
-      ]
+      ],
+      "license": "MIT"
     },
     "node_modules/safer-buffer": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "license": "MIT"
     },
     "node_modules/semver": {
-      "version": "7.6.2",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.2.tgz",
-      "integrity": "sha512-FNAIBWCx9qcRhoHcgcJ0gvU7SN1lYU2ZXuSfl04bSC5OpvDHFyJCjdNHomPXxjQlCBU67YW64PzY7/VIEH7F2w==",
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "license": "ISC",
       "bin": {
         "semver": "bin/semver.js"
       },
@@ -1238,9 +1542,10 @@
       }
     },
     "node_modules/send": {
-      "version": "0.18.0",
-      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
-      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
+      "version": "0.19.0",
+      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
+      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
+      "license": "MIT",
       "dependencies": {
         "debug": "2.6.9",
         "depd": "2.0.0",
@@ -1260,55 +1565,106 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/send/node_modules/encodeurl": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
+      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/send/node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
     },
     "node_modules/serve-static": {
-      "version": "1.15.0",
-      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
-      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
+      "version": "1.16.2",
+      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
+      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
+      "license": "MIT",
       "dependencies": {
-        "encodeurl": "~1.0.2",
+        "encodeurl": "~2.0.0",
         "escape-html": "~1.0.3",
         "parseurl": "~1.3.3",
-        "send": "0.18.0"
+        "send": "0.19.0"
       },
       "engines": {
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/set-function-length": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
-      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
+    "node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
+      "license": "ISC"
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "license": "MIT",
       "dependencies": {
-        "define-data-property": "^1.1.4",
         "es-errors": "^1.3.0",
-        "function-bind": "^1.1.2",
-        "get-intrinsic": "^1.2.4",
-        "gopd": "^1.0.1",
-        "has-property-descriptors": "^1.0.2"
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
       },
       "engines": {
         "node": ">= 0.4"
-      }
-    },
-    "node_modules/setprototypeof": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
-      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
     },
-    "node_modules/side-channel": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
-      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "license": "MIT",
       "dependencies": {
-        "call-bind": "^1.0.7",
         "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.4",
-        "object-inspect": "^1.13.1"
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
       },
       "engines": {
         "node": ">= 0.4"
@@ -1322,6 +1678,7 @@
       "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
       "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "semver": "^7.5.3"
       },
@@ -1333,6 +1690,7 @@
       "version": "4.2.0",
       "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
       "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
+      "license": "ISC",
       "engines": {
         "node": ">= 10.x"
       }
@@ -1341,27 +1699,54 @@
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
       "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
+    "node_modules/streamsearch": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
+      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
+      "engines": {
+        "node": ">=10.0.0"
+      }
+    },
     "node_modules/strict-typed-events": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/strict-typed-events/-/strict-typed-events-2.3.3.tgz",
-      "integrity": "sha512-Vc8/N5giCVpO2n5BCskqDD9ns7RkdEq0pFd4yQk1ROULusJDbjORNvbtyEPxxK7Xqn9/NdW8XHLxv/PvUTgFsA==",
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/strict-typed-events/-/strict-typed-events-2.8.0.tgz",
+      "integrity": "sha512-mDCPe06HIzzDliG09N9ypPvx2nDgAFl3IDJe8NNCoViDWYh0E98+02WJdZnUSFWiUphaRbUDbDksg/SgiaEBDA==",
+      "license": "MIT",
       "dependencies": {
         "putil-promisify": "^1.10.1",
-        "ts-gems": "^3.1.0"
+        "ts-gems": "^3.5.0",
+        "tslib": "^2.6.3"
       },
       "engines": {
         "node": ">=16.0"
       }
     },
+    "node_modules/string_decoder": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "~5.1.0"
+      }
+    },
+    "node_modules/string_decoder/node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "license": "MIT"
+    },
     "node_modules/supports-color": {
       "version": "5.5.0",
       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
       "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "has-flag": "^3.0.0"
       },
@@ -1374,6 +1759,7 @@
       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
       "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "is-number": "^7.0.0"
       },
@@ -1385,31 +1771,38 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
       "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.6"
       }
     },
     "node_modules/touch": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
-      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
+      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
       "dev": true,
-      "dependencies": {
-        "nopt": "~1.0.10"
-      },
+      "license": "ISC",
       "bin": {
         "nodetouch": "bin/nodetouch.js"
       }
     },
     "node_modules/ts-gems": {
-      "version": "3.4.0",
-      "resolved": "https://registry.npmjs.org/ts-gems/-/ts-gems-3.4.0.tgz",
-      "integrity": "sha512-RM1TN7GRmweAdNXNM89S4tLz+Ur3HslR4ePYND6RBhRzxsiUOnfVFyTey01+9YUs8Vhxb/OsO6rHlu5xJGzBXw=="
+      "version": "3.11.3",
+      "resolved": "https://registry.npmjs.org/ts-gems/-/ts-gems-3.11.3.tgz",
+      "integrity": "sha512-zEAkPUvP9L7f6SmzXq3mtKnRr6nbWt2vMdGl2NO0b1stHFFtKcmNxZKLHyv5889gOp3InI4ki2WaZAtz85OJBg==",
+      "license": "MIT"
+    },
+    "node_modules/tslib": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
+      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
+      "license": "0BSD"
     },
     "node_modules/type-is": {
       "version": "1.6.18",
       "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
       "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
+      "license": "MIT",
       "dependencies": {
         "media-typer": "0.3.0",
         "mime-types": "~2.1.24"
@@ -1418,24 +1811,39 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/typedarray": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
+      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
+      "license": "MIT"
+    },
     "node_modules/undefsafe": {
       "version": "2.0.5",
       "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
       "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
-      "dev": true
+      "dev": true,
+      "license": "MIT"
     },
     "node_modules/unpipe": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
       "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+      "license": "MIT"
+    },
     "node_modules/utils-merge": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
       "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.4.0"
       }
@@ -1444,6 +1852,7 @@
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
       "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
@@ -1452,6 +1861,7 @@
       "version": "4.0.2",
       "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
       "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.4"
       }
Index: node_modules/postgresql-client/cjs/util/escape-literal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/escape-literal.js b/node_modules/postgresql-client/cjs/util/escape-literal.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/escape-literal.js	
+++ /dev/null	
@@ -1,27 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.escapeLiteral = void 0;
-// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c
-function escapeLiteral(str) {
-    let backSlash = false;
-    let out = "'";
-    let i;
-    let c;
-    const l = str.length;
-    for (i = 0; i < l; i++) {
-        c = str[i];
-        if (c === "'")
-            out += c + c;
-        else if (c === '\\') {
-            out += c + c;
-            backSlash = true;
-        }
-        else
-            out += c;
-    }
-    out += "'";
-    if (backSlash)
-        out = ' E' + out;
-    return out;
-}
-exports.escapeLiteral = escapeLiteral;
Index: node_modules/postgres/cf/src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/cf/src/index.js b/node_modules/postgres/cf/src/index.js
--- a/node_modules/postgres/cf/src/index.js	
+++ b/node_modules/postgres/cf/src/index.js	
@@ -205,9 +205,10 @@
     const queue = Queue()
     const c = open.length
       ? open.shift()
-      : await new Promise(r => {
-        queries.push({ reserve: r })
-        closed.length && connect(closed.shift())
+      : await new Promise((resolve, reject) => {
+        const query = { reserve: resolve, reject }
+        queries.push(query)
+        closed.length && connect(closed.shift(), query)
       })
 
     move(c, reserved)
@@ -481,7 +482,7 @@
       {}
     ),
     connection      : {
-      application_name: 'postgres.js',
+      application_name: env.PGAPPNAME || 'postgres.js',
       ...o.connection,
       ...Object.entries(query).reduce((acc, [k, v]) => (k in defaults || (acc[k] = v), acc), {})
     },
Index: node_modules/ts-gems/lib/omit.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/omit.d.ts b/node_modules/ts-gems/lib/omit.d.ts
--- a/node_modules/ts-gems/lib/omit.d.ts	
+++ b/node_modules/ts-gems/lib/omit.d.ts	
@@ -1,6 +1,6 @@
-import { IfNoDeepValue } from './helpers';
+import { IfNoDeepValue } from './helpers.js';
 import { Or } from './logical.js';
-import { IfFunction, IfNever } from './type-check';
+import { IfFunction, IfNever } from './type-check.js';
 
 /**
  * Construct a type with the properties of T except for those in type K,
@@ -18,7 +18,7 @@
     // Omit never keys
     IfNever<Exclude<T[K], undefined>>,
     // Omit functions
-    IfFunction<Exclude<T[K], undefined>>
+    IfFunction<NonNullable<T[K]>>
   > extends true
     ? never
     : K]: T[K];
@@ -45,20 +45,24 @@
   >]: IfNoDeepValue<Exclude<T[K], undefined>> extends true // Do not deep process No-Deep values
     ? Exclude<T[K], X>
     : // Deep process objects
-      DeepOmitTypes<Exclude<T[K], undefined>, X>;
+      DeepOmitTypes<NonNullable<T[K]>, X>;
 };
 
 /**
  * Omit all function properties in T deeply including arrays
  */
 export type DeeperOmitTypes<T, X> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined | X>, never, K>]: Exclude< // Deep process arrays // Do not deep process No-Deep values
-    T[K],
-    undefined
+  [K in keyof T as IfNever<
+    Exclude<T[K], undefined | X>,
+    never,
+    K
+  >]: NonNullable<
+    // Deep process arrays // Do not deep process No-Deep values
+    T[K]
   > extends (infer U)[]
     ? DeeperOmitTypes<U, X>[]
-    : IfNoDeepValue<Exclude<T[K], undefined>> extends true
+    : IfNoDeepValue<NonNullable<T[K]>> extends true
       ? Exclude<T[K], X>
       : // Deep process objects
-        DeeperOmitTypes<Exclude<T[K], undefined>, X>;
+        DeeperOmitTypes<NonNullable<T[K]>, X>;
 };
Index: node_modules/postgresql-client/typings/interfaces/data-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/data-type.d.ts b/node_modules/postgresql-client/typings/interfaces/data-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/data-type.d.ts	
+++ /dev/null	
@@ -1,31 +0,0 @@
-import type { DecodeBinaryFunction, EncodeBinaryFunction, EncodeTextFunction, OID, ParseTextFunction } from '../types.js';
-import { EncodeCalculateDimFunction } from '../types.js';
-export interface DataType {
-    oid: OID;
-    name: string;
-    elementsOID?: OID;
-    isArray?: boolean;
-    jsType: string;
-    arraySeparator?: string;
-    isType: (v: any) => boolean;
-    parseBinary: DecodeBinaryFunction;
-    parseText: ParseTextFunction;
-    encodeBinary?: EncodeBinaryFunction;
-    encodeText?: EncodeTextFunction;
-    encodeCalculateDim?: EncodeCalculateDimFunction;
-}
-export interface Point {
-    x: number;
-    y: number;
-}
-export interface Circle {
-    x: number;
-    y: number;
-    r: number;
-}
-export interface Rectangle {
-    x1: number;
-    y1: number;
-    x2: number;
-    y2: number;
-}
Index: node_modules/postgresql-client/cjs/protocol/sasl.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/sasl.js b/node_modules/postgresql-client/cjs/protocol/sasl.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/sasl.js	
+++ /dev/null	
@@ -1,108 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.SASL = void 0;
-/* eslint-disable no-bitwise */
-const crypto_1 = __importDefault(require("crypto"));
-var SASL;
-(function (SASL) {
-    const CLIENT_KEY = 'Client Key';
-    const SERVER_KEY = 'Server Key';
-    const GS2_HEADER = 'n,,';
-    function createSession(username, mechanism) {
-        const nonce = crypto_1.default.randomBytes(18).toString('base64');
-        const clientFirstMessage = `${GS2_HEADER}${firstMessageBare(username, nonce)}`;
-        return {
-            username,
-            mechanism,
-            nonce,
-            clientFirstMessage,
-        };
-    }
-    SASL.createSession = createSession;
-    function continueSession(session, password, data) {
-        const s = data.toString();
-        const items = s.split(',');
-        let nonce = '';
-        let salt = '';
-        let iteration = 0;
-        for (const i of items) {
-            switch (i[0]) {
-                case 'r':
-                    nonce = i.substring(2);
-                    break;
-                case 's':
-                    salt = i.substring(2);
-                    break;
-                case 'i':
-                    iteration = parseInt(i.substring(2), 10);
-                    break;
-            }
-        }
-        if (!nonce)
-            throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing');
-        if (!salt)
-            throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing');
-        if (!iteration)
-            throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing');
-        if (!nonce.startsWith(session.nonce))
-            throw new Error('SASL: Server nonce does not start with client nonce');
-        const serverFirstMessage = `r=${nonce},s=${salt},i=${iteration}`;
-        const clientFinalMessageWithoutProof = `c=${encode64(GS2_HEADER)},r=${nonce}`;
-        const authMessage = `${firstMessageBare(session.username, session.nonce)},${serverFirstMessage},${clientFinalMessageWithoutProof}`;
-        const saltPass = hi(password, salt, iteration);
-        const clientKey = hmac(saltPass, CLIENT_KEY);
-        const storedKey = hash(clientKey);
-        const clientSignature = hmac(storedKey, authMessage);
-        const clientProofBytes = xor(clientKey, clientSignature);
-        const clientProof = clientProofBytes.toString('base64');
-        const serverKey = hmac(saltPass, SERVER_KEY);
-        const serverSignatureBytes = hmac(serverKey, authMessage);
-        session.serverSignature = serverSignatureBytes.toString('base64');
-        session.clientFinalMessage = clientFinalMessageWithoutProof + ',p=' + clientProof;
-    }
-    SASL.continueSession = continueSession;
-    function finalizeSession(session, data) {
-        let serverSignature = '';
-        const arr = data.split(',');
-        for (const s of arr) {
-            if (s[0] === 'v')
-                serverSignature = s.substr(2);
-        }
-        if (serverSignature !== session.serverSignature)
-            throw new Error('SASL: Server signature does not match');
-    }
-    SASL.finalizeSession = finalizeSession;
-    function firstMessageBare(username, nonce) {
-        return `n=${username},r=${nonce}`;
-    }
-    /**
-     * Hi() is, essentially, PBKDF2 [RFC2898] with HMAC() as the
-     * pseudorandom function (PRF) and with dkLen == output length of
-     * HMAC() == output length of H()
-     */
-    function hi(text, salt, iterations) {
-        return crypto_1.default.pbkdf2Sync(text, Buffer.from(salt, 'base64'), iterations, 32, 'sha256');
-    }
-    const encode64 = str => Buffer.from(str).toString('base64');
-    function hmac(key, msg) {
-        return crypto_1.default.createHmac('sha256', key).update(msg).digest();
-    }
-    function hash(data) {
-        return crypto_1.default.createHash('sha256').update(data).digest();
-    }
-    function xor(a, b) {
-        a = Buffer.isBuffer(a) ? a : Buffer.from(a);
-        b = Buffer.isBuffer(b) ? b : Buffer.from(b);
-        if (a.length !== b.length)
-            throw new Error('Buffers must be of the same length');
-        const l = a.length;
-        const out = Buffer.allocUnsafe(l);
-        for (let i = 0; i < l; i++) {
-            out[i] = a[i] ^ b[i];
-        }
-        return out;
-    }
-})(SASL || (exports.SASL = SASL = {}));
Index: node_modules/nopt/lib/nopt.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nopt/lib/nopt.js b/node_modules/nopt/lib/nopt.js
deleted file mode 100644
--- a/node_modules/nopt/lib/nopt.js	
+++ /dev/null	
@@ -1,552 +0,0 @@
-// info about each config option.
-
-var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG
-  ? function () { console.error.apply(console, arguments) }
-  : function () {}
-
-var url = require("url")
-  , path = require("path")
-  , Stream = require("stream").Stream
-  , abbrev = require("abbrev")
-
-module.exports = exports = nopt
-exports.clean = clean
-
-exports.typeDefs =
-  { String  : { type: String,  validate: validateString  }
-  , Boolean : { type: Boolean, validate: validateBoolean }
-  , url     : { type: url,     validate: validateUrl     }
-  , Number  : { type: Number,  validate: validateNumber  }
-  , path    : { type: path,    validate: validatePath    }
-  , Stream  : { type: Stream,  validate: validateStream  }
-  , Date    : { type: Date,    validate: validateDate    }
-  }
-
-function nopt (types, shorthands, args, slice) {
-  args = args || process.argv
-  types = types || {}
-  shorthands = shorthands || {}
-  if (typeof slice !== "number") slice = 2
-
-  debug(types, shorthands, args, slice)
-
-  args = args.slice(slice)
-  var data = {}
-    , key
-    , remain = []
-    , cooked = args
-    , original = args.slice(0)
-
-  parse(args, data, remain, types, shorthands)
-  // now data is full
-  clean(data, types, exports.typeDefs)
-  data.argv = {remain:remain,cooked:cooked,original:original}
-  data.argv.toString = function () {
-    return this.original.map(JSON.stringify).join(" ")
-  }
-  return data
-}
-
-function clean (data, types, typeDefs) {
-  typeDefs = typeDefs || exports.typeDefs
-  var remove = {}
-    , typeDefault = [false, true, null, String, Number]
-
-  Object.keys(data).forEach(function (k) {
-    if (k === "argv") return
-    var val = data[k]
-      , isArray = Array.isArray(val)
-      , type = types[k]
-    if (!isArray) val = [val]
-    if (!type) type = typeDefault
-    if (type === Array) type = typeDefault.concat(Array)
-    if (!Array.isArray(type)) type = [type]
-
-    debug("val=%j", val)
-    debug("types=", type)
-    val = val.map(function (val) {
-      // if it's an unknown value, then parse false/true/null/numbers/dates
-      if (typeof val === "string") {
-        debug("string %j", val)
-        val = val.trim()
-        if ((val === "null" && ~type.indexOf(null))
-            || (val === "true" &&
-               (~type.indexOf(true) || ~type.indexOf(Boolean)))
-            || (val === "false" &&
-               (~type.indexOf(false) || ~type.indexOf(Boolean)))) {
-          val = JSON.parse(val)
-          debug("jsonable %j", val)
-        } else if (~type.indexOf(Number) && !isNaN(val)) {
-          debug("convert to number", val)
-          val = +val
-        } else if (~type.indexOf(Date) && !isNaN(Date.parse(val))) {
-          debug("convert to date", val)
-          val = new Date(val)
-        }
-      }
-
-      if (!types.hasOwnProperty(k)) {
-        return val
-      }
-
-      // allow `--no-blah` to set 'blah' to null if null is allowed
-      if (val === false && ~type.indexOf(null) &&
-          !(~type.indexOf(false) || ~type.indexOf(Boolean))) {
-        val = null
-      }
-
-      var d = {}
-      d[k] = val
-      debug("prevalidated val", d, val, types[k])
-      if (!validate(d, k, val, types[k], typeDefs)) {
-        if (exports.invalidHandler) {
-          exports.invalidHandler(k, val, types[k], data)
-        } else if (exports.invalidHandler !== false) {
-          debug("invalid: "+k+"="+val, types[k])
-        }
-        return remove
-      }
-      debug("validated val", d, val, types[k])
-      return d[k]
-    }).filter(function (val) { return val !== remove })
-
-    if (!val.length) delete data[k]
-    else if (isArray) {
-      debug(isArray, data[k], val)
-      data[k] = val
-    } else data[k] = val[0]
-
-    debug("k=%s val=%j", k, val, data[k])
-  })
-}
-
-function validateString (data, k, val) {
-  data[k] = String(val)
-}
-
-function validatePath (data, k, val) {
-  data[k] = path.resolve(String(val))
-  return true
-}
-
-function validateNumber (data, k, val) {
-  debug("validate Number %j %j %j", k, val, isNaN(val))
-  if (isNaN(val)) return false
-  data[k] = +val
-}
-
-function validateDate (data, k, val) {
-  debug("validate Date %j %j %j", k, val, Date.parse(val))
-  var s = Date.parse(val)
-  if (isNaN(s)) return false
-  data[k] = new Date(val)
-}
-
-function validateBoolean (data, k, val) {
-  if (val instanceof Boolean) val = val.valueOf()
-  else if (typeof val === "string") {
-    if (!isNaN(val)) val = !!(+val)
-    else if (val === "null" || val === "false") val = false
-    else val = true
-  } else val = !!val
-  data[k] = val
-}
-
-function validateUrl (data, k, val) {
-  val = url.parse(String(val))
-  if (!val.host) return false
-  data[k] = val.href
-}
-
-function validateStream (data, k, val) {
-  if (!(val instanceof Stream)) return false
-  data[k] = val
-}
-
-function validate (data, k, val, type, typeDefs) {
-  // arrays are lists of types.
-  if (Array.isArray(type)) {
-    for (var i = 0, l = type.length; i < l; i ++) {
-      if (type[i] === Array) continue
-      if (validate(data, k, val, type[i], typeDefs)) return true
-    }
-    delete data[k]
-    return false
-  }
-
-  // an array of anything?
-  if (type === Array) return true
-
-  // NaN is poisonous.  Means that something is not allowed.
-  if (type !== type) {
-    debug("Poison NaN", k, val, type)
-    delete data[k]
-    return false
-  }
-
-  // explicit list of values
-  if (val === type) {
-    debug("Explicitly allowed %j", val)
-    // if (isArray) (data[k] = data[k] || []).push(val)
-    // else data[k] = val
-    data[k] = val
-    return true
-  }
-
-  // now go through the list of typeDefs, validate against each one.
-  var ok = false
-    , types = Object.keys(typeDefs)
-  for (var i = 0, l = types.length; i < l; i ++) {
-    debug("test type %j %j %j", k, val, types[i])
-    var t = typeDefs[types[i]]
-    if (t && type === t.type) {
-      var d = {}
-      ok = false !== t.validate(d, k, val)
-      val = d[k]
-      if (ok) {
-        // if (isArray) (data[k] = data[k] || []).push(val)
-        // else data[k] = val
-        data[k] = val
-        break
-      }
-    }
-  }
-  debug("OK? %j (%j %j %j)", ok, k, val, types[i])
-
-  if (!ok) delete data[k]
-  return ok
-}
-
-function parse (args, data, remain, types, shorthands) {
-  debug("parse", args, data, remain)
-
-  var key = null
-    , abbrevs = abbrev(Object.keys(types))
-    , shortAbbr = abbrev(Object.keys(shorthands))
-
-  for (var i = 0; i < args.length; i ++) {
-    var arg = args[i]
-    debug("arg", arg)
-
-    if (arg.match(/^-{2,}$/)) {
-      // done with keys.
-      // the rest are args.
-      remain.push.apply(remain, args.slice(i + 1))
-      args[i] = "--"
-      break
-    }
-    if (arg.charAt(0) === "-") {
-      if (arg.indexOf("=") !== -1) {
-        var v = arg.split("=")
-        arg = v.shift()
-        v = v.join("=")
-        args.splice.apply(args, [i, 1].concat([arg, v]))
-      }
-      // see if it's a shorthand
-      // if so, splice and back up to re-parse it.
-      var shRes = resolveShort(arg, shorthands, shortAbbr, abbrevs)
-      debug("arg=%j shRes=%j", arg, shRes)
-      if (shRes) {
-        debug(arg, shRes)
-        args.splice.apply(args, [i, 1].concat(shRes))
-        if (arg !== shRes[0]) {
-          i --
-          continue
-        }
-      }
-      arg = arg.replace(/^-+/, "")
-      var no = false
-      while (arg.toLowerCase().indexOf("no-") === 0) {
-        no = !no
-        arg = arg.substr(3)
-      }
-
-      if (abbrevs[arg]) arg = abbrevs[arg]
-
-      var isArray = types[arg] === Array ||
-        Array.isArray(types[arg]) && types[arg].indexOf(Array) !== -1
-
-      var val
-        , la = args[i + 1]
-
-      var isBool = no ||
-        types[arg] === Boolean ||
-        Array.isArray(types[arg]) && types[arg].indexOf(Boolean) !== -1 ||
-        (la === "false" &&
-         (types[arg] === null ||
-          Array.isArray(types[arg]) && ~types[arg].indexOf(null)))
-
-      if (isBool) {
-        // just set and move along
-        val = !no
-        // however, also support --bool true or --bool false
-        if (la === "true" || la === "false") {
-          val = JSON.parse(la)
-          la = null
-          if (no) val = !val
-          i ++
-        }
-
-        // also support "foo":[Boolean, "bar"] and "--foo bar"
-        if (Array.isArray(types[arg]) && la) {
-          if (~types[arg].indexOf(la)) {
-            // an explicit type
-            val = la
-            i ++
-          } else if ( la === "null" && ~types[arg].indexOf(null) ) {
-            // null allowed
-            val = null
-            i ++
-          } else if ( !la.match(/^-{2,}[^-]/) &&
-                      !isNaN(la) &&
-                      ~types[arg].indexOf(Number) ) {
-            // number
-            val = +la
-            i ++
-          } else if ( !la.match(/^-[^-]/) && ~types[arg].indexOf(String) ) {
-            // string
-            val = la
-            i ++
-          }
-        }
-
-        if (isArray) (data[arg] = data[arg] || []).push(val)
-        else data[arg] = val
-
-        continue
-      }
-
-      if (la && la.match(/^-{2,}$/)) {
-        la = undefined
-        i --
-      }
-
-      val = la === undefined ? true : la
-      if (isArray) (data[arg] = data[arg] || []).push(val)
-      else data[arg] = val
-
-      i ++
-      continue
-    }
-    remain.push(arg)
-  }
-}
-
-function resolveShort (arg, shorthands, shortAbbr, abbrevs) {
-  // handle single-char shorthands glommed together, like
-  // npm ls -glp, but only if there is one dash, and only if
-  // all of the chars are single-char shorthands, and it's
-  // not a match to some other abbrev.
-  arg = arg.replace(/^-+/, '')
-  if (abbrevs[arg] && !shorthands[arg]) {
-    return null
-  }
-  if (shortAbbr[arg]) {
-    arg = shortAbbr[arg]
-  } else {
-    var singles = shorthands.___singles
-    if (!singles) {
-      singles = Object.keys(shorthands).filter(function (s) {
-        return s.length === 1
-      }).reduce(function (l,r) { l[r] = true ; return l }, {})
-      shorthands.___singles = singles
-    }
-    var chrs = arg.split("").filter(function (c) {
-      return singles[c]
-    })
-    if (chrs.join("") === arg) return chrs.map(function (c) {
-      return shorthands[c]
-    }).reduce(function (l, r) {
-      return l.concat(r)
-    }, [])
-  }
-
-  if (shorthands[arg] && !Array.isArray(shorthands[arg])) {
-    shorthands[arg] = shorthands[arg].split(/\s+/)
-  }
-  return shorthands[arg]
-}
-
-if (module === require.main) {
-var assert = require("assert")
-  , util = require("util")
-
-  , shorthands =
-    { s : ["--loglevel", "silent"]
-    , d : ["--loglevel", "info"]
-    , dd : ["--loglevel", "verbose"]
-    , ddd : ["--loglevel", "silly"]
-    , noreg : ["--no-registry"]
-    , reg : ["--registry"]
-    , "no-reg" : ["--no-registry"]
-    , silent : ["--loglevel", "silent"]
-    , verbose : ["--loglevel", "verbose"]
-    , h : ["--usage"]
-    , H : ["--usage"]
-    , "?" : ["--usage"]
-    , help : ["--usage"]
-    , v : ["--version"]
-    , f : ["--force"]
-    , desc : ["--description"]
-    , "no-desc" : ["--no-description"]
-    , "local" : ["--no-global"]
-    , l : ["--long"]
-    , p : ["--parseable"]
-    , porcelain : ["--parseable"]
-    , g : ["--global"]
-    }
-
-  , types =
-    { aoa: Array
-    , nullstream: [null, Stream]
-    , date: Date
-    , str: String
-    , browser : String
-    , cache : path
-    , color : ["always", Boolean]
-    , depth : Number
-    , description : Boolean
-    , dev : Boolean
-    , editor : path
-    , force : Boolean
-    , global : Boolean
-    , globalconfig : path
-    , group : [String, Number]
-    , gzipbin : String
-    , logfd : [Number, Stream]
-    , loglevel : ["silent","win","error","warn","info","verbose","silly"]
-    , long : Boolean
-    , "node-version" : [false, String]
-    , npaturl : url
-    , npat : Boolean
-    , "onload-script" : [false, String]
-    , outfd : [Number, Stream]
-    , parseable : Boolean
-    , pre: Boolean
-    , prefix: path
-    , proxy : url
-    , "rebuild-bundle" : Boolean
-    , registry : url
-    , searchopts : String
-    , searchexclude: [null, String]
-    , shell : path
-    , t: [Array, String]
-    , tag : String
-    , tar : String
-    , tmp : path
-    , "unsafe-perm" : Boolean
-    , usage : Boolean
-    , user : String
-    , username : String
-    , userconfig : path
-    , version : Boolean
-    , viewer: path
-    , _exit : Boolean
-    }
-
-; [["-v", {version:true}, []]
-  ,["---v", {version:true}, []]
-  ,["ls -s --no-reg connect -d",
-    {loglevel:"info",registry:null},["ls","connect"]]
-  ,["ls ---s foo",{loglevel:"silent"},["ls","foo"]]
-  ,["ls --registry blargle", {}, ["ls"]]
-  ,["--no-registry", {registry:null}, []]
-  ,["--no-color true", {color:false}, []]
-  ,["--no-color false", {color:true}, []]
-  ,["--no-color", {color:false}, []]
-  ,["--color false", {color:false}, []]
-  ,["--color --logfd 7", {logfd:7,color:true}, []]
-  ,["--color=true", {color:true}, []]
-  ,["--logfd=10", {logfd:10}, []]
-  ,["--tmp=/tmp -tar=gtar",{tmp:"/tmp",tar:"gtar"},[]]
-  ,["--tmp=tmp -tar=gtar",
-    {tmp:path.resolve(process.cwd(), "tmp"),tar:"gtar"},[]]
-  ,["--logfd x", {}, []]
-  ,["a -true -- -no-false", {true:true},["a","-no-false"]]
-  ,["a -no-false", {false:false},["a"]]
-  ,["a -no-no-true", {true:true}, ["a"]]
-  ,["a -no-no-no-false", {false:false}, ["a"]]
-  ,["---NO-no-No-no-no-no-nO-no-no"+
-    "-No-no-no-no-no-no-no-no-no"+
-    "-no-no-no-no-NO-NO-no-no-no-no-no-no"+
-    "-no-body-can-do-the-boogaloo-like-I-do"
-   ,{"body-can-do-the-boogaloo-like-I-do":false}, []]
-  ,["we are -no-strangers-to-love "+
-    "--you-know the-rules --and so-do-i "+
-    "---im-thinking-of=a-full-commitment "+
-    "--no-you-would-get-this-from-any-other-guy "+
-    "--no-gonna-give-you-up "+
-    "-no-gonna-let-you-down=true "+
-    "--no-no-gonna-run-around false "+
-    "--desert-you=false "+
-    "--make-you-cry false "+
-    "--no-tell-a-lie "+
-    "--no-no-and-hurt-you false"
-   ,{"strangers-to-love":false
-    ,"you-know":"the-rules"
-    ,"and":"so-do-i"
-    ,"you-would-get-this-from-any-other-guy":false
-    ,"gonna-give-you-up":false
-    ,"gonna-let-you-down":false
-    ,"gonna-run-around":false
-    ,"desert-you":false
-    ,"make-you-cry":false
-    ,"tell-a-lie":false
-    ,"and-hurt-you":false
-    },["we", "are"]]
-  ,["-t one -t two -t three"
-   ,{t: ["one", "two", "three"]}
-   ,[]]
-  ,["-t one -t null -t three four five null"
-   ,{t: ["one", "null", "three"]}
-   ,["four", "five", "null"]]
-  ,["-t foo"
-   ,{t:["foo"]}
-   ,[]]
-  ,["--no-t"
-   ,{t:["false"]}
-   ,[]]
-  ,["-no-no-t"
-   ,{t:["true"]}
-   ,[]]
-  ,["-aoa one -aoa null -aoa 100"
-   ,{aoa:["one", null, 100]}
-   ,[]]
-  ,["-str 100"
-   ,{str:"100"}
-   ,[]]
-  ,["--color always"
-   ,{color:"always"}
-   ,[]]
-  ,["--no-nullstream"
-   ,{nullstream:null}
-   ,[]]
-  ,["--nullstream false"
-   ,{nullstream:null}
-   ,[]]
-  ,["--notadate 2011-01-25"
-   ,{notadate: "2011-01-25"}
-   ,[]]
-  ,["--date 2011-01-25"
-   ,{date: new Date("2011-01-25")}
-   ,[]]
-  ].forEach(function (test) {
-    var argv = test[0].split(/\s+/)
-      , opts = test[1]
-      , rem = test[2]
-      , actual = nopt(types, shorthands, argv, 0)
-      , parsed = actual.argv
-    delete actual.argv
-    console.log(util.inspect(actual, false, 2, true), parsed.remain)
-    for (var i in opts) {
-      var e = JSON.stringify(opts[i])
-        , a = JSON.stringify(actual[i] === undefined ? null : actual[i])
-      if (e && typeof e === "object") {
-        assert.deepEqual(e, a)
-      } else {
-        assert.equal(e, a)
-      }
-    }
-    assert.deepEqual(rem, parsed.remain)
-  })
-}
Index: node_modules/postgresql-client/esm/interfaces/data-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/data-type.js b/node_modules/postgresql-client/esm/interfaces/data-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/data-type.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/touch/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/touch/index.js b/node_modules/touch/index.js
--- a/node_modules/touch/index.js	
+++ b/node_modules/touch/index.js	
@@ -41,7 +41,7 @@
 
   // {mtime: true}, {ctime: true}
   // If set to something else, then treat as epoch ms value
-  const now = parseInt(new Date(options.time || Date.now()).getTime() / 1000)
+  const now = new Date(options.time || Date.now()).getTime() / 1000
   if (!options.atime && !options.mtime)
     options.atime = options.mtime = now
   else {
@@ -129,8 +129,8 @@
   }
 
   onstatref (st) {
-    this.atime = this.atime && parseInt(st.atime.getTime()/1000, 10)
-    this.mtime = this.mtime && parseInt(st.mtime.getTime()/1000, 10)
+    this.atime = this.atime && st.atime.getTime()/1000
+    this.mtime = this.mtime && st.mtime.getTime()/1000
     if (!this.atime || !this.mtime)
       this.fstat()
     else
@@ -150,10 +150,10 @@
 
   onfstat (st) {
     if (typeof this.atime !== 'number')
-      this.atime = parseInt(st.atime.getTime()/1000, 10)
+      this.atime = st.atime.getTime()/1000
 
     if (typeof this.mtime !== 'number')
-      this.mtime = parseInt(st.mtime.getTime()/1000, 10)
+      this.mtime = st.mtime.getTime()/1000
 
     this.futimes()
   }
Index: node_modules/semver/ranges/min-satisfying.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/min-satisfying.js b/node_modules/semver/ranges/min-satisfying.js
--- a/node_modules/semver/ranges/min-satisfying.js	
+++ b/node_modules/semver/ranges/min-satisfying.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const Range = require('../classes/range')
 const minSatisfying = (versions, range, options) => {
Index: node_modules/pg/lib/defaults.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/defaults.js b/node_modules/pg/lib/defaults.js
--- a/node_modules/pg/lib/defaults.js	
+++ b/node_modules/pg/lib/defaults.js	
@@ -72,10 +72,10 @@
   keepalives_idle: 0,
 }
 
-var pgTypes = require('pg-types')
+const pgTypes = require('pg-types')
 // save default parsers
-var parseBigInteger = pgTypes.getTypeParser(20, 'text')
-var parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text')
+const parseBigInteger = pgTypes.getTypeParser(20, 'text')
+const parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text')
 
 // parse int8 so you can get your count values as actual numbers
 module.exports.__defineSetter__('parseInt8', function (val) {
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package-lock.json b/package-lock.json
--- a/package-lock.json	
+++ b/package-lock.json	
@@ -5,6 +5,7 @@
   "packages": {
     "": {
       "dependencies": {
+        "bcrypt": "^6.0.0",
         "bcryptjs": "^2.4.3",
         "body-parser": "^1.20.2",
         "cookie-parser": "^1.4.6",
@@ -13,25 +14,33 @@
         "express": "^4.19.2",
         "http-status-codes": "^2.3.0",
         "jsonwebtoken": "^9.0.2",
-        "pg": "^8.11.5",
+        "multer": "^1.4.5-lts.1",
+        "pg": "^8.16.3",
         "postgres": "^3.4.4",
         "postgresql-client": "^2.11.0",
         "router": "^1.3.8"
       },
       "devDependencies": {
-        "nodemon": "^3.1.0"
+        "nodemon": "^3.1.10"
       }
     },
-    "node_modules/abbrev": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
-      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
-      "dev": true
+    "node_modules/@jsopen/objects": {
+      "version": "1.6.3",
+      "resolved": "https://registry.npmjs.org/@jsopen/objects/-/objects-1.6.3.tgz",
+      "integrity": "sha512-LNtPollREyfKNqE8GwCxjt4nyi7UuWqHxDbmCYwFzTCmAeFguAAyiLarw81kE2szoRCJzHZDkyEsfY5XyzhPTA==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.8.1"
+      },
+      "engines": {
+        "node": ">= 16.0"
+      }
     },
     "node_modules/accepts": {
       "version": "1.3.8",
       "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
       "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
+      "license": "MIT",
       "dependencies": {
         "mime-types": "~2.1.34",
         "negotiator": "0.6.3"
@@ -45,6 +54,7 @@
       "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
       "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
       "dev": true,
+      "license": "ISC",
       "dependencies": {
         "normalize-path": "^3.0.0",
         "picomatch": "^2.0.4"
@@ -53,27 +63,51 @@
         "node": ">= 8"
       }
     },
+    "node_modules/append-field": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
+      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
+      "license": "MIT"
+    },
     "node_modules/array-flatten": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
-      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
+      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
+      "license": "MIT"
     },
     "node_modules/balanced-match": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
       "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
-      "dev": true
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/bcrypt": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-6.0.0.tgz",
+      "integrity": "sha512-cU8v/EGSrnH+HnxV2z0J7/blxH8gq7Xh2JFT6Aroax7UohdmiJJlxApMxtKfuI7z68NvvVcmR78k2LbT6efhRg==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "node-addon-api": "^8.3.0",
+        "node-gyp-build": "^4.8.4"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
     },
     "node_modules/bcryptjs": {
       "version": "2.4.3",
       "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
-      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
+      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ==",
+      "license": "MIT"
     },
     "node_modules/binary-extensions": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
       "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=8"
       },
@@ -82,9 +116,10 @@
       }
     },
     "node_modules/body-parser": {
-      "version": "1.20.2",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
-      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
+      "version": "1.20.3",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
+      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
+      "license": "MIT",
       "dependencies": {
         "bytes": "3.1.2",
         "content-type": "~1.0.5",
@@ -94,7 +129,7 @@
         "http-errors": "2.0.0",
         "iconv-lite": "0.4.24",
         "on-finished": "2.4.1",
-        "qs": "6.11.0",
+        "qs": "6.13.0",
         "raw-body": "2.5.2",
         "type-is": "~1.6.18",
         "unpipe": "1.0.0"
@@ -105,22 +140,24 @@
       }
     },
     "node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "balanced-match": "^1.0.0",
         "concat-map": "0.0.1"
       }
     },
     "node_modules/braces": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
-      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
-        "fill-range": "^7.0.1"
+        "fill-range": "^7.1.1"
       },
       "engines": {
         "node": ">=8"
@@ -129,26 +166,56 @@
     "node_modules/buffer-equal-constant-time": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
-      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
+      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/buffer-from": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
+      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
+      "license": "MIT"
+    },
+    "node_modules/busboy": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
+      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
+      "dependencies": {
+        "streamsearch": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=10.16.0"
+      }
     },
     "node_modules/bytes": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
       "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
-    "node_modules/call-bind": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
-      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "license": "MIT",
       "dependencies": {
-        "es-define-property": "^1.0.0",
         "es-errors": "^1.3.0",
-        "function-bind": "^1.1.2",
-        "get-intrinsic": "^1.2.4",
-        "set-function-length": "^1.2.1"
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -162,6 +229,7 @@
       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
       "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "anymatch": "~3.1.2",
         "braces": "~3.0.2",
@@ -185,12 +253,29 @@
       "version": "0.0.1",
       "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
       "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
-      "dev": true
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/concat-stream": {
+      "version": "1.6.2",
+      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
+      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
+      "engines": [
+        "node >= 0.8"
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "buffer-from": "^1.0.0",
+        "inherits": "^2.0.3",
+        "readable-stream": "^2.2.2",
+        "typedarray": "^0.0.6"
+      }
     },
     "node_modules/content-disposition": {
       "version": "0.5.4",
       "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
       "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
+      "license": "MIT",
       "dependencies": {
         "safe-buffer": "5.2.1"
       },
@@ -202,24 +287,27 @@
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
       "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/cookie": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz",
-      "integrity": "sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==",
+      "version": "0.7.2",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
+      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/cookie-parser": {
-      "version": "1.4.6",
-      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz",
-      "integrity": "sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==",
+      "version": "1.4.7",
+      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.7.tgz",
+      "integrity": "sha512-nGUvgXnotP3BsjiLX2ypbQnWoGUPIIfHQNZkkC668ntrzGWEZVW70HDEB1qnNGMicPje6EttlIgzo51YSwNQGw==",
+      "license": "MIT",
       "dependencies": {
-        "cookie": "0.4.1",
+        "cookie": "0.7.2",
         "cookie-signature": "1.0.6"
       },
       "engines": {
@@ -229,12 +317,20 @@
     "node_modules/cookie-signature": {
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
-      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
+      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
+      "license": "MIT"
+    },
+    "node_modules/core-util-is": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
+      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
+      "license": "MIT"
     },
     "node_modules/cors": {
       "version": "2.8.5",
       "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
       "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
+      "license": "MIT",
       "dependencies": {
         "object-assign": "^4",
         "vary": "^1"
@@ -247,30 +343,16 @@
       "version": "2.6.9",
       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
       "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+      "license": "MIT",
       "dependencies": {
         "ms": "2.0.0"
       }
     },
-    "node_modules/define-data-property": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
-      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
-      "dependencies": {
-        "es-define-property": "^1.0.0",
-        "es-errors": "^1.3.0",
-        "gopd": "^1.0.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/depd": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
       "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
@@ -279,15 +361,17 @@
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
       "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8",
         "npm": "1.2.8000 || >= 1.4.16"
       }
     },
     "node_modules/dotenv": {
-      "version": "16.4.5",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.5.tgz",
-      "integrity": "sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==",
+      "version": "16.6.1",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
+      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
+      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
       },
@@ -296,17 +380,33 @@
       }
     },
     "node_modules/doublylinked": {
-      "version": "2.5.4",
-      "resolved": "https://registry.npmjs.org/doublylinked/-/doublylinked-2.5.4.tgz",
-      "integrity": "sha512-jBCKDnFkEHJRjQvYEl5N9VngRV8ypHgw6a52OK4VN57eV2r2rYvgOx9uABdY78INNoW7S6auULp+KBVm/jfYqw==",
+      "version": "2.5.6",
+      "resolved": "https://registry.npmjs.org/doublylinked/-/doublylinked-2.5.6.tgz",
+      "integrity": "sha512-oskbNBycNHjQ0Zg/5DMYiqFnSeblM2BSc2Ehu5+PyBay0ESlullPp0YEjlwtG3QtN4Fb7hC9USJqNyTMftl/1A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 16.0"
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
       "engines": {
-        "node": ">= 10.0"
+        "node": ">= 0.4"
       }
     },
     "node_modules/ecdsa-sig-formatter": {
       "version": "1.0.11",
       "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
       "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
+      "license": "Apache-2.0",
       "dependencies": {
         "safe-buffer": "^5.0.1"
       }
@@ -314,23 +414,23 @@
     "node_modules/ee-first": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
-      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
+      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
+      "license": "MIT"
     },
     "node_modules/encodeurl": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
-      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
+      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
     "node_modules/es-define-property": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
-      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
-      "dependencies": {
-        "get-intrinsic": "^1.2.4"
-      },
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.4"
       }
@@ -339,6 +439,19 @@
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
       "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
       "engines": {
         "node": ">= 0.4"
       }
@@ -346,47 +459,50 @@
     "node_modules/escape-html": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
-      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
+      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
+      "license": "MIT"
     },
     "node_modules/etag": {
       "version": "1.8.1",
       "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
       "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/express": {
-      "version": "4.19.2",
-      "resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
-      "integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
+      "version": "4.21.2",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
+      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
+      "license": "MIT",
       "dependencies": {
         "accepts": "~1.3.8",
         "array-flatten": "1.1.1",
-        "body-parser": "1.20.2",
+        "body-parser": "1.20.3",
         "content-disposition": "0.5.4",
         "content-type": "~1.0.4",
-        "cookie": "0.6.0",
+        "cookie": "0.7.1",
         "cookie-signature": "1.0.6",
         "debug": "2.6.9",
         "depd": "2.0.0",
-        "encodeurl": "~1.0.2",
+        "encodeurl": "~2.0.0",
         "escape-html": "~1.0.3",
         "etag": "~1.8.1",
-        "finalhandler": "1.2.0",
+        "finalhandler": "1.3.1",
         "fresh": "0.5.2",
         "http-errors": "2.0.0",
-        "merge-descriptors": "1.0.1",
+        "merge-descriptors": "1.0.3",
         "methods": "~1.1.2",
         "on-finished": "2.4.1",
         "parseurl": "~1.3.3",
-        "path-to-regexp": "0.1.7",
+        "path-to-regexp": "0.1.12",
         "proxy-addr": "~2.0.7",
-        "qs": "6.11.0",
+        "qs": "6.13.0",
         "range-parser": "~1.2.1",
         "safe-buffer": "5.2.1",
-        "send": "0.18.0",
-        "serve-static": "1.15.0",
+        "send": "0.19.0",
+        "serve-static": "1.16.2",
         "setprototypeof": "1.2.0",
         "statuses": "2.0.1",
         "type-is": "~1.6.18",
@@ -395,21 +511,27 @@
       },
       "engines": {
         "node": ">= 0.10.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/express"
       }
     },
     "node_modules/express/node_modules/cookie": {
-      "version": "0.6.0",
-      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
-      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
+      "version": "0.7.1",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
+      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/fill-range": {
-      "version": "7.0.1",
-      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
-      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "to-regex-range": "^5.0.1"
       },
@@ -418,12 +540,13 @@
       }
     },
     "node_modules/finalhandler": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
-      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
+      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
+      "license": "MIT",
       "dependencies": {
         "debug": "2.6.9",
-        "encodeurl": "~1.0.2",
+        "encodeurl": "~2.0.0",
         "escape-html": "~1.0.3",
         "on-finished": "2.4.1",
         "parseurl": "~1.3.3",
@@ -438,6 +561,7 @@
       "version": "0.2.0",
       "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
       "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -446,6 +570,7 @@
       "version": "0.5.2",
       "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
       "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -456,6 +581,7 @@
       "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
       "dev": true,
       "hasInstallScript": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "darwin"
@@ -468,20 +594,27 @@
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
       "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/get-intrinsic": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
-      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "license": "MIT",
       "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
         "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
         "function-bind": "^1.1.2",
-        "has-proto": "^1.0.1",
-        "has-symbols": "^1.0.3",
-        "hasown": "^2.0.0"
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -490,11 +623,25 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
     "node_modules/glob-parent": {
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
       "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
       "dev": true,
+      "license": "ISC",
       "dependencies": {
         "is-glob": "^4.0.1"
       },
@@ -503,11 +650,12 @@
       }
     },
     "node_modules/gopd": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
-      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
-      "dependencies": {
-        "get-intrinsic": "^1.1.3"
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -518,36 +666,16 @@
       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
       "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
     },
-    "node_modules/has-property-descriptors": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
-      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
-      "dependencies": {
-        "es-define-property": "^1.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/has-proto": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
-      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/has-symbols": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
-      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.4"
       },
@@ -559,6 +687,7 @@
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
       "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
       "dependencies": {
         "function-bind": "^1.1.2"
       },
@@ -570,6 +699,7 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
       "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "license": "MIT",
       "dependencies": {
         "depd": "2.0.0",
         "inherits": "2.0.4",
@@ -584,12 +714,14 @@
     "node_modules/http-status-codes": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/http-status-codes/-/http-status-codes-2.3.0.tgz",
-      "integrity": "sha512-RJ8XvFvpPM/Dmc5SV+dC4y5PCeOhT3x1Hq0NU3rjGeg5a/CqlhZ7uudknPwZFz4aeAXDcbAyaeP7GAo9lvngtA=="
+      "integrity": "sha512-RJ8XvFvpPM/Dmc5SV+dC4y5PCeOhT3x1Hq0NU3rjGeg5a/CqlhZ7uudknPwZFz4aeAXDcbAyaeP7GAo9lvngtA==",
+      "license": "MIT"
     },
     "node_modules/iconv-lite": {
       "version": "0.4.24",
       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
       "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
+      "license": "MIT",
       "dependencies": {
         "safer-buffer": ">= 2.1.2 < 3"
       },
@@ -601,17 +733,20 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
       "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
-      "dev": true
+      "dev": true,
+      "license": "ISC"
     },
     "node_modules/inherits": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
-      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "license": "ISC"
     },
     "node_modules/ipaddr.js": {
       "version": "1.9.1",
       "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
       "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.10"
       }
@@ -621,6 +756,7 @@
       "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
       "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "binary-extensions": "^2.0.0"
       },
@@ -633,6 +769,7 @@
       "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
       "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -642,6 +779,7 @@
       "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
       "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "is-extglob": "^2.1.1"
       },
@@ -654,14 +792,22 @@
       "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
       "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=0.12.0"
       }
     },
+    "node_modules/isarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
+      "license": "MIT"
+    },
     "node_modules/jsonwebtoken": {
       "version": "9.0.2",
       "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
       "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
+      "license": "MIT",
       "dependencies": {
         "jws": "^3.2.2",
         "lodash.includes": "^4.3.0",
@@ -682,14 +828,16 @@
     "node_modules/jsonwebtoken/node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
     },
     "node_modules/jwa": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
-      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
+      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
+      "license": "MIT",
       "dependencies": {
-        "buffer-equal-constant-time": "1.0.1",
+        "buffer-equal-constant-time": "^1.0.1",
         "ecdsa-sig-formatter": "1.0.11",
         "safe-buffer": "^5.0.1"
       }
@@ -698,72 +846,97 @@
       "version": "3.2.2",
       "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
       "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
+      "license": "MIT",
       "dependencies": {
         "jwa": "^1.4.1",
         "safe-buffer": "^5.0.1"
       }
     },
     "node_modules/lightning-pool": {
-      "version": "4.2.2",
-      "resolved": "https://registry.npmjs.org/lightning-pool/-/lightning-pool-4.2.2.tgz",
-      "integrity": "sha512-KW0Df0IbjNLxy5wAsdErTKYtHGwefLRQseHNksEctyaL7gtRwJT0nqLa2uiRdNYDwKSnZtqOjSjUNtfxmfH1qw==",
+      "version": "4.11.1",
+      "resolved": "https://registry.npmjs.org/lightning-pool/-/lightning-pool-4.11.1.tgz",
+      "integrity": "sha512-I/+aDkeFvKrdC204UcGbLuVTmGaSBP6F2VtWLuFtHCn0/bzuYKpei8Z+P4+HYE3lmJdGfNHVFjLeYLQaxmpymQ==",
+      "license": "MIT",
       "dependencies": {
-        "doublylinked": "^2.5.3",
-        "putil-promisify": "^1.10.1"
+        "doublylinked": "^2.5.6",
+        "putil-promisify": "^1.10.1",
+        "tslib": "^2.8.1"
       }
     },
     "node_modules/lodash.includes": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
-      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
+      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
+      "license": "MIT"
     },
     "node_modules/lodash.isboolean": {
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
-      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
+      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
+      "license": "MIT"
     },
     "node_modules/lodash.isinteger": {
       "version": "4.0.4",
       "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
-      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
+      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
+      "license": "MIT"
     },
     "node_modules/lodash.isnumber": {
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
-      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
+      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
+      "license": "MIT"
     },
     "node_modules/lodash.isplainobject": {
       "version": "4.0.6",
       "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
-      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA=="
+      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
+      "license": "MIT"
     },
     "node_modules/lodash.isstring": {
       "version": "4.0.1",
       "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
-      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
+      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
+      "license": "MIT"
     },
     "node_modules/lodash.once": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
-      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
+      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
+      "license": "MIT"
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
     },
     "node_modules/media-typer": {
       "version": "0.3.0",
       "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
       "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/merge-descriptors": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
-      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
+      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
     },
     "node_modules/methods": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
       "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -772,6 +945,7 @@
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
       "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
+      "license": "MIT",
       "bin": {
         "mime": "cli.js"
       },
@@ -783,6 +957,7 @@
       "version": "1.52.0",
       "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
       "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -791,6 +966,7 @@
       "version": "2.1.35",
       "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
       "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "license": "MIT",
       "dependencies": {
         "mime-db": "1.52.0"
       },
@@ -803,6 +979,7 @@
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
       "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
       "dev": true,
+      "license": "ISC",
       "dependencies": {
         "brace-expansion": "^1.1.7"
       },
@@ -810,24 +987,87 @@
         "node": "*"
       }
     },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
+      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/mkdirp": {
+      "version": "0.5.6",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
+      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
+      "license": "MIT",
+      "dependencies": {
+        "minimist": "^1.2.6"
+      },
+      "bin": {
+        "mkdirp": "bin/cmd.js"
+      }
+    },
     "node_modules/ms": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
-      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
+      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
+      "license": "MIT"
+    },
+    "node_modules/multer": {
+      "version": "1.4.5-lts.2",
+      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.5-lts.2.tgz",
+      "integrity": "sha512-VzGiVigcG9zUAoCNU+xShztrlr1auZOlurXynNvO9GiWD1/mTBbUljOKY+qMeazBqXgRnjzeEgJI/wyjJUHg9A==",
+      "deprecated": "Multer 1.x is impacted by a number of vulnerabilities, which have been patched in 2.x. You should upgrade to the latest 2.x version.",
+      "license": "MIT",
+      "dependencies": {
+        "append-field": "^1.0.0",
+        "busboy": "^1.0.0",
+        "concat-stream": "^1.5.2",
+        "mkdirp": "^0.5.4",
+        "object-assign": "^4.1.1",
+        "type-is": "^1.6.4",
+        "xtend": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 6.0.0"
+      }
     },
     "node_modules/negotiator": {
       "version": "0.6.3",
       "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
       "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
+    "node_modules/node-addon-api": {
+      "version": "8.5.0",
+      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-8.5.0.tgz",
+      "integrity": "sha512-/bRZty2mXUIFY/xU5HLvveNHlswNJej+RnxBjOMkidWfwZzgTbPG1E3K5TOxRLOR+5hX7bSofy8yf1hZevMS8A==",
+      "license": "MIT",
+      "engines": {
+        "node": "^18 || ^20 || >= 21"
+      }
+    },
+    "node_modules/node-gyp-build": {
+      "version": "4.8.4",
+      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.8.4.tgz",
+      "integrity": "sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==",
+      "license": "MIT",
+      "bin": {
+        "node-gyp-build": "bin.js",
+        "node-gyp-build-optional": "optional.js",
+        "node-gyp-build-test": "build-test.js"
+      }
+    },
     "node_modules/nodemon": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.0.tgz",
-      "integrity": "sha512-xqlktYlDMCepBJd43ZQhjWwMw2obW/JRvkrLxq5RCNcuDDX1DbcPT+qT1IlIIdf+DhnWs90JpTMe+Y5KxOchvA==",
+      "version": "3.1.10",
+      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
+      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "chokidar": "^3.5.2",
         "debug": "^4",
@@ -852,12 +1092,13 @@
       }
     },
     "node_modules/nodemon/node_modules/debug": {
-      "version": "4.3.4",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
-      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
-        "ms": "2.1.2"
+        "ms": "^2.1.3"
       },
       "engines": {
         "node": ">=6.0"
@@ -869,31 +1110,18 @@
       }
     },
     "node_modules/nodemon/node_modules/ms": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
-      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
-      "dev": true
-    },
-    "node_modules/nopt": {
-      "version": "1.0.10",
-      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
-      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
       "dev": true,
-      "dependencies": {
-        "abbrev": "1"
-      },
-      "bin": {
-        "nopt": "bin/nopt.js"
-      },
-      "engines": {
-        "node": "*"
-      }
+      "license": "MIT"
     },
     "node_modules/normalize-path": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
       "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -902,14 +1130,19 @@
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
       "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/object-inspect": {
-      "version": "1.13.1",
-      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.1.tgz",
-      "integrity": "sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==",
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
@@ -917,12 +1150,14 @@
     "node_modules/obuf": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
-      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg=="
+      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==",
+      "license": "MIT"
     },
     "node_modules/on-finished": {
       "version": "2.4.1",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
       "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
+      "license": "MIT",
       "dependencies": {
         "ee-first": "1.1.1"
       },
@@ -934,31 +1169,34 @@
       "version": "1.3.3",
       "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
       "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
     "node_modules/path-to-regexp": {
-      "version": "0.1.7",
-      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
-      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
+      "version": "0.1.12",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
+      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
+      "license": "MIT"
     },
     "node_modules/pg": {
-      "version": "8.11.5",
-      "resolved": "https://registry.npmjs.org/pg/-/pg-8.11.5.tgz",
-      "integrity": "sha512-jqgNHSKL5cbDjFlHyYsCXmQDrfIX/3RsNwYqpd4N0Kt8niLuNoRNH+aazv6cOd43gPh9Y4DjQCtb+X0MH0Hvnw==",
+      "version": "8.16.3",
+      "resolved": "https://registry.npmjs.org/pg/-/pg-8.16.3.tgz",
+      "integrity": "sha512-enxc1h0jA/aq5oSDMvqyW3q89ra6XIIDZgCX9vkMrnz5DFTw/Ny3Li2lFQ+pt3L6MCgm/5o2o8HW9hiJji+xvw==",
+      "license": "MIT",
       "dependencies": {
-        "pg-connection-string": "^2.6.4",
-        "pg-pool": "^3.6.2",
-        "pg-protocol": "^1.6.1",
-        "pg-types": "^2.1.0",
-        "pgpass": "1.x"
+        "pg-connection-string": "^2.9.1",
+        "pg-pool": "^3.10.1",
+        "pg-protocol": "^1.10.3",
+        "pg-types": "2.2.0",
+        "pgpass": "1.0.5"
       },
       "engines": {
-        "node": ">= 8.0.0"
+        "node": ">= 16.0.0"
       },
       "optionalDependencies": {
-        "pg-cloudflare": "^1.1.1"
+        "pg-cloudflare": "^1.2.7"
       },
       "peerDependencies": {
         "pg-native": ">=3.0.1"
@@ -970,41 +1208,47 @@
       }
     },
     "node_modules/pg-cloudflare": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz",
-      "integrity": "sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==",
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.2.7.tgz",
+      "integrity": "sha512-YgCtzMH0ptvZJslLM1ffsY4EuGaU0cx4XSdXLRFae8bPP4dS5xL1tNB3k2o/N64cHJpwU7dxKli/nZ2lUa5fLg==",
+      "license": "MIT",
       "optional": true
     },
     "node_modules/pg-connection-string": {
-      "version": "2.6.4",
-      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.6.4.tgz",
-      "integrity": "sha512-v+Z7W/0EO707aNMaAEfiGnGL9sxxumwLl2fJvCQtMn9Fxsg+lPpPkdcyBSv/KFgpGdYkMfn+EI1Or2EHjpgLCA=="
+      "version": "2.9.1",
+      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.9.1.tgz",
+      "integrity": "sha512-nkc6NpDcvPVpZXxrreI/FOtX3XemeLl8E0qFr6F2Lrm/I8WOnaWNhIPK2Z7OHpw7gh5XJThi6j6ppgNoaT1w4w==",
+      "license": "MIT"
     },
     "node_modules/pg-int8": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
       "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
+      "license": "ISC",
       "engines": {
         "node": ">=4.0.0"
       }
     },
     "node_modules/pg-pool": {
-      "version": "3.6.2",
-      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.6.2.tgz",
-      "integrity": "sha512-Htjbg8BlwXqSBQ9V8Vjtc+vzf/6fVUuak/3/XXKA9oxZprwW3IMDQTGHP+KDmVL7rtd+R1QjbnCFPuTHm3G4hg==",
+      "version": "3.10.1",
+      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.10.1.tgz",
+      "integrity": "sha512-Tu8jMlcX+9d8+QVzKIvM/uJtp07PKr82IUOYEphaWcoBhIYkoHpLXN3qO59nAI11ripznDsEzEv8nUxBVWajGg==",
+      "license": "MIT",
       "peerDependencies": {
         "pg": ">=8.0"
       }
     },
     "node_modules/pg-protocol": {
-      "version": "1.6.1",
-      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.6.1.tgz",
-      "integrity": "sha512-jPIlvgoD63hrEuihvIg+tJhoGjUsLPn6poJY9N5CnlPd91c2T18T/9zBtLxZSb1EhYxBRoZJtzScCaWlYLtktg=="
+      "version": "1.10.3",
+      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.10.3.tgz",
+      "integrity": "sha512-6DIBgBQaTKDJyxnXaLiLR8wBpQQcGWuAESkRBX/t6OwA8YsqP+iVSiond2EDy6Y/dsGk8rh/jtax3js5NeV7JQ==",
+      "license": "MIT"
     },
     "node_modules/pg-types": {
       "version": "2.2.0",
       "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
       "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
+      "license": "MIT",
       "dependencies": {
         "pg-int8": "1.0.1",
         "postgres-array": "~2.0.0",
@@ -1020,6 +1264,7 @@
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
       "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
+      "license": "MIT",
       "dependencies": {
         "split2": "^4.1.0"
       }
@@ -1029,6 +1274,7 @@
       "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
       "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
       "dev": true,
+      "license": "MIT",
       "engines": {
         "node": ">=8.6"
       },
@@ -1036,10 +1282,42 @@
         "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
+    "node_modules/postgrejs": {
+      "version": "2.22.4",
+      "resolved": "https://registry.npmjs.org/postgrejs/-/postgrejs-2.22.4.tgz",
+      "integrity": "sha512-ZtHefKDn7U+0hodDYtApzX/tktZ2O4kK+M5Q0PdUaOziNQoid7O0sWlxGIXzn7/ruHKsGi8DFvm9hTvptVX27w==",
+      "license": "MIT",
+      "dependencies": {
+        "@jsopen/objects": "^1.5.2",
+        "doublylinked": "^2.5.6",
+        "lightning-pool": "^4.10.1",
+        "postgres-bytea": "^3.0.0",
+        "power-tasks": "^1.11.0",
+        "putil-promisify": "^1.10.1",
+        "putil-varhelpers": "^1.6.5",
+        "tslib": "^2.8.1"
+      },
+      "engines": {
+        "node": ">=16.0"
+      }
+    },
+    "node_modules/postgrejs/node_modules/postgres-bytea": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-3.0.0.tgz",
+      "integrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==",
+      "license": "MIT",
+      "dependencies": {
+        "obuf": "~1.1.2"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/postgres": {
-      "version": "3.4.4",
-      "resolved": "https://registry.npmjs.org/postgres/-/postgres-3.4.4.tgz",
-      "integrity": "sha512-IbyN+9KslkqcXa8AO9fxpk97PA4pzewvpi2B3Dwy9u4zpV32QicaEdgmF3eSQUzdRk7ttDHQejNgAEr4XoeH4A==",
+      "version": "3.4.7",
+      "resolved": "https://registry.npmjs.org/postgres/-/postgres-3.4.7.tgz",
+      "integrity": "sha512-Jtc2612XINuBjIl/QTWsV5UvE8UHuNblcO3vVADSrKsrc6RqGX6lOW1cEo3CM2v0XG4Nat8nI+YM7/f26VxXLw==",
+      "license": "Unlicense",
       "engines": {
         "node": ">=12"
       },
@@ -1052,6 +1330,7 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
       "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
+      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
@@ -1060,6 +1339,7 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
       "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -1068,6 +1348,7 @@
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
       "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
@@ -1076,6 +1357,7 @@
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
       "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
+      "license": "MIT",
       "dependencies": {
         "xtend": "^4.0.0"
       },
@@ -1084,49 +1366,43 @@
       }
     },
     "node_modules/postgresql-client": {
-      "version": "2.11.0",
-      "resolved": "https://registry.npmjs.org/postgresql-client/-/postgresql-client-2.11.0.tgz",
-      "integrity": "sha512-QSPHcWVaiBG+JyASaDojOXvhRmsc2n8j2COdIjUDENFAtFls16Zy240asY2ENzZRQJUMAA8vpR8w4SAdI8jdbw==",
+      "version": "2.13.0",
+      "resolved": "https://registry.npmjs.org/postgresql-client/-/postgresql-client-2.13.0.tgz",
+      "integrity": "sha512-GOSQstAJiHeIwXrvARCp0y7PMwfzf+Egg0KOn1MiggykvQFr4OO8FyT0x7Yc3hcPL4iLk47z9KeAbbdVCqTP0g==",
+      "deprecated": "Package name 'postgresql-client' has been changed to 'postgrejs'. Please consider to update dependencies in your package.json",
+      "license": "MIT",
       "dependencies": {
-        "doublylinked": "^2.5.4",
-        "lightning-pool": "^4.2.2",
-        "postgres-bytea": "^3.0.0",
-        "power-tasks": "^1.7.3",
-        "putil-merge": "^3.12.1",
-        "putil-promisify": "^1.10.1",
-        "putil-varhelpers": "^1.6.5"
+        "postgrejs": "^2.15.1"
       },
       "engines": {
         "node": ">=16.0"
       }
     },
-    "node_modules/postgresql-client/node_modules/postgres-bytea": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-3.0.0.tgz",
-      "integrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==",
-      "dependencies": {
-        "obuf": "~1.1.2"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
     "node_modules/power-tasks": {
-      "version": "1.7.3",
-      "resolved": "https://registry.npmjs.org/power-tasks/-/power-tasks-1.7.3.tgz",
-      "integrity": "sha512-EnkjLfaX4PxFYHbUWyWzlE4I8SgctaW9jx4qQXrVRoELlqBXrxIMtuhHzRwsHv2qs1tO7efOcZa6/wDCdCjRfA==",
+      "version": "1.11.0",
+      "resolved": "https://registry.npmjs.org/power-tasks/-/power-tasks-1.11.0.tgz",
+      "integrity": "sha512-UAVmqOw4miD+BW4gBrL1KJb24akTUfy1XglIFB7domD7Wyj0eQAyK9F9PnYYiw1pVLoyy3L+HfCYWwN2sMwCzg==",
+      "license": "MIT",
       "dependencies": {
         "doublylinked": "^2.5.4",
-        "strict-typed-events": "^2.3.3"
+        "strict-typed-events": "^2.8.0",
+        "tslib": "^2.6.3"
       },
       "engines": {
         "node": ">=16.0"
       }
     },
+    "node_modules/process-nextick-args": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
+      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
+      "license": "MIT"
+    },
     "node_modules/proxy-addr": {
       "version": "2.0.7",
       "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
       "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
+      "license": "MIT",
       "dependencies": {
         "forwarded": "0.2.0",
         "ipaddr.js": "1.9.1"
@@ -1139,20 +1415,14 @@
       "version": "1.1.8",
       "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
       "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
-      "dev": true
-    },
-    "node_modules/putil-merge": {
-      "version": "3.12.1",
-      "resolved": "https://registry.npmjs.org/putil-merge/-/putil-merge-3.12.1.tgz",
-      "integrity": "sha512-4clPyRkJPrd5zl98AP7I3JamyXbx0ixe2CnfvGwoTyWSr7Kslcv8weoKjfU4BMBifkWIRL54l4OrNe97pYcDwQ==",
-      "engines": {
-        "node": ">= 10.0"
-      }
+      "dev": true,
+      "license": "MIT"
     },
     "node_modules/putil-promisify": {
       "version": "1.10.1",
       "resolved": "https://registry.npmjs.org/putil-promisify/-/putil-promisify-1.10.1.tgz",
       "integrity": "sha512-1jm0egJNrj5eBDRj15Cg08RNHDV91OVEHeeYjAFRcs663PXxFokndxcJAGbaO6CSErCTp8eTgC8vuOF+fvXIAA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 14.0"
       }
@@ -1161,16 +1431,18 @@
       "version": "1.6.5",
       "resolved": "https://registry.npmjs.org/putil-varhelpers/-/putil-varhelpers-1.6.5.tgz",
       "integrity": "sha512-kyu+lE5xkc65ScgaIi6rNONLXeS7jGBxl1I0rzHVsFGAAQ45D/VkuEev+t09PFB943F+CqdWFLczH6ePk5TPAA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 6.0"
       }
     },
     "node_modules/qs": {
-      "version": "6.11.0",
-      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
-      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
+      "version": "6.13.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
+      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
+      "license": "BSD-3-Clause",
       "dependencies": {
-        "side-channel": "^1.0.4"
+        "side-channel": "^1.0.6"
       },
       "engines": {
         "node": ">=0.6"
@@ -1183,6 +1455,7 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
       "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
@@ -1191,6 +1464,7 @@
       "version": "2.5.2",
       "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
       "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
+      "license": "MIT",
       "dependencies": {
         "bytes": "3.1.2",
         "http-errors": "2.0.0",
@@ -1201,11 +1475,33 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/readable-stream": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
+      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
+      "license": "MIT",
+      "dependencies": {
+        "core-util-is": "~1.0.0",
+        "inherits": "~2.0.3",
+        "isarray": "~1.0.0",
+        "process-nextick-args": "~2.0.0",
+        "safe-buffer": "~5.1.1",
+        "string_decoder": "~1.1.1",
+        "util-deprecate": "~1.0.1"
+      }
+    },
+    "node_modules/readable-stream/node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "license": "MIT"
+    },
     "node_modules/readdirp": {
       "version": "3.6.0",
       "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
       "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "picomatch": "^2.2.1"
       },
@@ -1217,6 +1513,7 @@
       "version": "1.3.8",
       "resolved": "https://registry.npmjs.org/router/-/router-1.3.8.tgz",
       "integrity": "sha512-461UFH44NtSfIlS83PUg2N7OZo86BC/kB3dY77gJdsODsBhhw7+2uE0tzTINxrY9CahCUVk1VhpWCA5i1yoIEg==",
+      "license": "MIT",
       "dependencies": {
         "array-flatten": "3.0.0",
         "debug": "2.6.9",
@@ -1233,7 +1530,14 @@
     "node_modules/router/node_modules/array-flatten": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-3.0.0.tgz",
-      "integrity": "sha512-zPMVc3ZYlGLNk4mpK1NzP2wg0ml9t7fUgDsayR5Y5rSzxQilzR9FGu/EH2jQOcKSAeAfWeylyW8juy3OkWRvNA=="
+      "integrity": "sha512-zPMVc3ZYlGLNk4mpK1NzP2wg0ml9t7fUgDsayR5Y5rSzxQilzR9FGu/EH2jQOcKSAeAfWeylyW8juy3OkWRvNA==",
+      "license": "MIT"
+    },
+    "node_modules/router/node_modules/path-to-regexp": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
+      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==",
+      "license": "MIT"
     },
     "node_modules/safe-buffer": {
       "version": "5.2.1",
@@ -1252,17 +1556,20 @@
           "type": "consulting",
           "url": "https://feross.org/support"
         }
-      ]
+      ],
+      "license": "MIT"
     },
     "node_modules/safer-buffer": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "license": "MIT"
     },
     "node_modules/semver": {
-      "version": "7.6.2",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.2.tgz",
-      "integrity": "sha512-FNAIBWCx9qcRhoHcgcJ0gvU7SN1lYU2ZXuSfl04bSC5OpvDHFyJCjdNHomPXxjQlCBU67YW64PzY7/VIEH7F2w==",
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "license": "ISC",
       "bin": {
         "semver": "bin/semver.js"
       },
@@ -1271,9 +1578,10 @@
       }
     },
     "node_modules/send": {
-      "version": "0.18.0",
-      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
-      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
+      "version": "0.19.0",
+      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
+      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
+      "license": "MIT",
       "dependencies": {
         "debug": "2.6.9",
         "depd": "2.0.0",
@@ -1293,55 +1601,106 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/send/node_modules/encodeurl": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
+      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/send/node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
     },
     "node_modules/serve-static": {
-      "version": "1.15.0",
-      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
-      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
+      "version": "1.16.2",
+      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
+      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
+      "license": "MIT",
       "dependencies": {
-        "encodeurl": "~1.0.2",
+        "encodeurl": "~2.0.0",
         "escape-html": "~1.0.3",
         "parseurl": "~1.3.3",
-        "send": "0.18.0"
+        "send": "0.19.0"
       },
       "engines": {
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/set-function-length": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
-      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
+    "node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
+      "license": "ISC"
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "license": "MIT",
       "dependencies": {
-        "define-data-property": "^1.1.4",
         "es-errors": "^1.3.0",
-        "function-bind": "^1.1.2",
-        "get-intrinsic": "^1.2.4",
-        "gopd": "^1.0.1",
-        "has-property-descriptors": "^1.0.2"
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
       },
       "engines": {
         "node": ">= 0.4"
-      }
-    },
-    "node_modules/setprototypeof": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
-      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
     },
-    "node_modules/side-channel": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
-      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "license": "MIT",
       "dependencies": {
-        "call-bind": "^1.0.7",
+        "call-bound": "^1.0.2",
         "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.4",
-        "object-inspect": "^1.13.1"
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
       },
       "engines": {
         "node": ">= 0.4"
@@ -1355,6 +1714,7 @@
       "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
       "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "semver": "^7.5.3"
       },
@@ -1366,6 +1726,7 @@
       "version": "4.2.0",
       "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
       "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
+      "license": "ISC",
       "engines": {
         "node": ">= 10.x"
       }
@@ -1374,27 +1735,54 @@
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
       "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
+    "node_modules/streamsearch": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
+      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
+      "engines": {
+        "node": ">=10.0.0"
+      }
+    },
     "node_modules/strict-typed-events": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/strict-typed-events/-/strict-typed-events-2.3.3.tgz",
-      "integrity": "sha512-Vc8/N5giCVpO2n5BCskqDD9ns7RkdEq0pFd4yQk1ROULusJDbjORNvbtyEPxxK7Xqn9/NdW8XHLxv/PvUTgFsA==",
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/strict-typed-events/-/strict-typed-events-2.8.0.tgz",
+      "integrity": "sha512-mDCPe06HIzzDliG09N9ypPvx2nDgAFl3IDJe8NNCoViDWYh0E98+02WJdZnUSFWiUphaRbUDbDksg/SgiaEBDA==",
+      "license": "MIT",
       "dependencies": {
         "putil-promisify": "^1.10.1",
-        "ts-gems": "^3.1.0"
+        "ts-gems": "^3.5.0",
+        "tslib": "^2.6.3"
       },
       "engines": {
         "node": ">=16.0"
       }
     },
+    "node_modules/string_decoder": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "~5.1.0"
+      }
+    },
+    "node_modules/string_decoder/node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "license": "MIT"
+    },
     "node_modules/supports-color": {
       "version": "5.5.0",
       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
       "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "has-flag": "^3.0.0"
       },
@@ -1407,6 +1795,7 @@
       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
       "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
       "dev": true,
+      "license": "MIT",
       "dependencies": {
         "is-number": "^7.0.0"
       },
@@ -1418,31 +1807,38 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
       "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.6"
       }
     },
     "node_modules/touch": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
-      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
+      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
       "dev": true,
-      "dependencies": {
-        "nopt": "~1.0.10"
-      },
+      "license": "ISC",
       "bin": {
         "nodetouch": "bin/nodetouch.js"
       }
     },
     "node_modules/ts-gems": {
-      "version": "3.4.0",
-      "resolved": "https://registry.npmjs.org/ts-gems/-/ts-gems-3.4.0.tgz",
-      "integrity": "sha512-RM1TN7GRmweAdNXNM89S4tLz+Ur3HslR4ePYND6RBhRzxsiUOnfVFyTey01+9YUs8Vhxb/OsO6rHlu5xJGzBXw=="
+      "version": "3.11.3",
+      "resolved": "https://registry.npmjs.org/ts-gems/-/ts-gems-3.11.3.tgz",
+      "integrity": "sha512-zEAkPUvP9L7f6SmzXq3mtKnRr6nbWt2vMdGl2NO0b1stHFFtKcmNxZKLHyv5889gOp3InI4ki2WaZAtz85OJBg==",
+      "license": "MIT"
+    },
+    "node_modules/tslib": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
+      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
+      "license": "0BSD"
     },
     "node_modules/type-is": {
       "version": "1.6.18",
       "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
       "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
+      "license": "MIT",
       "dependencies": {
         "media-typer": "0.3.0",
         "mime-types": "~2.1.24"
@@ -1451,24 +1847,39 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/typedarray": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
+      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
+      "license": "MIT"
+    },
     "node_modules/undefsafe": {
       "version": "2.0.5",
       "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
       "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
-      "dev": true
+      "dev": true,
+      "license": "MIT"
     },
     "node_modules/unpipe": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
       "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
     },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+      "license": "MIT"
+    },
     "node_modules/utils-merge": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
       "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.4.0"
       }
@@ -1477,6 +1888,7 @@
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
       "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
+      "license": "MIT",
       "engines": {
         "node": ">= 0.8"
       }
@@ -1485,6 +1897,7 @@
       "version": "4.0.2",
       "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
       "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
+      "license": "MIT",
       "engines": {
         "node": ">=0.4"
       }
Index: node_modules/pg-pool/test/verify.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/verify.js b/node_modules/pg-pool/test/verify.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/verify.js	
+++ /dev/null	
@@ -1,24 +0,0 @@
-'use strict'
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('verify', () => {
-  it('verifies a client with a callback', (done) => {
-    const pool = new Pool({
-      verify: (client, cb) => {
-        cb(new Error('nope'))
-      },
-    })
-
-    pool.connect((err, client) => {
-      expect(err).to.be.an(Error)
-      expect(err.message).to.be('nope')
-      pool.end()
-      done()
-    })
-  })
-})
Index: node_modules/postgresql-client/cjs/util/bigint-methods.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/bigint-methods.js b/node_modules/postgresql-client/cjs/util/bigint-methods.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/bigint-methods.js	
+++ /dev/null	
@@ -1,42 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.writeBigUInt64BE = exports.readBigInt64BE = void 0;
-/* eslint-disable no-bitwise */
-const big0 = BigInt(0);
-const beAnd = BigInt('0xffffffff');
-const big32 = BigInt(32);
-// https://github.com/nodejs/node/blob/v13.9.0/lib/internal/buffer.js
-function readBigInt64BE(buf, offset = 0) {
-    const first = buf[offset];
-    const last = buf[offset + 7];
-    if (first === undefined || last === undefined)
-        return big0;
-    const val = (first << 24) + // Overflow
-        buf[++offset] * 2 ** 16 +
-        buf[++offset] * 2 ** 8 +
-        buf[++offset];
-    return ((BigInt(val) << big32) + BigInt(buf[++offset] * 2 ** 24 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 8 + last));
-}
-exports.readBigInt64BE = readBigInt64BE;
-function writeBigUInt64BE(buf, value, offset = 0) {
-    // @ts-ignore
-    let lo = Number(value & beAnd);
-    buf[offset + 7] = lo;
-    lo = lo >> 8;
-    buf[offset + 6] = lo;
-    lo = lo >> 8;
-    buf[offset + 5] = lo;
-    lo = lo >> 8;
-    buf[offset + 4] = lo;
-    // @ts-ignore
-    let hi = Number((value >> big32) & beAnd);
-    buf[offset + 3] = hi;
-    hi = hi >> 8;
-    buf[offset + 2] = hi;
-    hi = hi >> 8;
-    buf[offset + 1] = hi;
-    hi = hi >> 8;
-    buf[offset] = hi;
-    return offset + 8;
-}
-exports.writeBigUInt64BE = writeBigUInt64BE;
Index: node_modules/semver/functions/sort.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/sort.js b/node_modules/semver/functions/sort.js
--- a/node_modules/semver/functions/sort.js	
+++ b/node_modules/semver/functions/sort.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compareBuild = require('./compare-build')
 const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
 module.exports = sort
Index: node_modules/postgres/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/package.json b/node_modules/postgres/package.json
--- a/node_modules/postgres/package.json	
+++ b/node_modules/postgres/package.json	
@@ -1,6 +1,6 @@
 {
   "name": "postgres",
-  "version": "3.4.4",
+  "version": "3.4.7",
   "description": "Fastest full featured PostgreSQL client for Node.js",
   "type": "module",
   "module": "src/index.js",
@@ -8,7 +8,7 @@
   "exports": {
     "types": "./types/index.d.ts",
     "bun": "./src/index.js",
-    "worker": "./cf/src/index.js",
+    "workerd": "./cf/src/index.js",
     "import": "./src/index.js",
     "default": "./cjs/src/index.js"
   },
@@ -25,7 +25,7 @@
     "test": "npm run test:esm && npm run test:cjs && npm run test:deno",
     "test:esm": "node tests/index.js",
     "test:cjs": "npm run build:cjs && cd cjs/tests && node index.js && cd ../../",
-    "test:deno": "npm run build:deno && cd deno/tests && deno run --unstable --allow-all --unsafely-ignore-certificate-errors index.js && cd ../../",
+    "test:deno": "npm run build:deno && cd deno/tests && deno run --no-lock --allow-all --unsafely-ignore-certificate-errors index.js && cd ../../",
     "lint": "eslint src && eslint tests",
     "prepare": "npm run build",
     "prepublishOnly": "npm run lint"
Index: node_modules/semver/functions/parse.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/parse.js b/node_modules/semver/functions/parse.js
--- a/node_modules/semver/functions/parse.js	
+++ b/node_modules/semver/functions/parse.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const parse = (version, options, throwErrors = false) => {
   if (version instanceof SemVer) {
Index: node_modules/dotenv/lib/cli-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/lib/cli-options.js b/node_modules/dotenv/lib/cli-options.js
--- a/node_modules/dotenv/lib/cli-options.js	
+++ b/node_modules/dotenv/lib/cli-options.js	
@@ -1,11 +1,17 @@
-const re = /^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/
+const re = /^dotenv_config_(encoding|path|quiet|debug|override|DOTENV_KEY)=(.+)$/
 
 module.exports = function optionMatcher (args) {
-  return args.reduce(function (acc, cur) {
+  const options = args.reduce(function (acc, cur) {
     const matches = cur.match(re)
     if (matches) {
       acc[matches[1]] = matches[2]
     }
     return acc
   }, {})
+
+  if (!('quiet' in options)) {
+    options.quiet = 'true'
+  }
+
+  return options
 }
Index: node_modules/object-inspect/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/object-inspect/package.json b/node_modules/object-inspect/package.json
--- a/node_modules/object-inspect/package.json	
+++ b/node_modules/object-inspect/package.json	
@@ -1,31 +1,34 @@
 {
   "name": "object-inspect",
-  "version": "1.13.1",
+  "version": "1.13.4",
   "description": "string representations of objects in node and the browser",
   "main": "index.js",
   "sideEffects": false,
   "devDependencies": {
-    "@ljharb/eslint-config": "^21.1.0",
+    "@ljharb/eslint-config": "^21.1.1",
     "@pkgjs/support": "^0.0.6",
-    "auto-changelog": "^2.4.0",
+    "auto-changelog": "^2.5.0",
     "core-js": "^2.6.12",
-    "error-cause": "^1.0.6",
-    "es-value-fixtures": "^1.4.2",
+    "error-cause": "^1.0.8",
+    "es-value-fixtures": "^1.7.1",
     "eslint": "=8.8.0",
-    "for-each": "^0.3.3",
+    "for-each": "^0.3.4",
     "functions-have-names": "^1.2.3",
     "glob": "=10.3.7",
-    "globalthis": "^1.0.3",
-    "has-tostringtag": "^1.0.0",
+    "globalthis": "^1.0.4",
+    "has-symbols": "^1.1.0",
+    "has-tostringtag": "^1.0.2",
     "in-publish": "^2.0.1",
     "jackspeak": "=2.1.1",
     "make-arrow-function": "^1.2.0",
-    "mock-property": "^1.0.2",
-    "npmignore": "^0.3.0",
+    "mock-property": "^1.1.0",
+    "npmignore": "^0.3.1",
     "nyc": "^10.3.2",
     "safe-publish-latest": "^2.0.0",
+    "safer-buffer": "^2.1.2",
+    "semver": "^6.3.1",
     "string.prototype.repeat": "^1.0.0",
-    "tape": "^5.7.1"
+    "tape": "^5.9.0"
   },
   "scripts": {
     "prepack": "npmignore --auto --commentLines=autogenerated",
@@ -37,7 +40,7 @@
     "test": "npm run tests-only && npm run test:corejs",
     "tests-only": "nyc tape 'test/*.js'",
     "test:corejs": "nyc tape test-core-js.js 'test/*.js'",
-    "posttest": "npx aud --production",
+    "posttest": "npx npm@'>=10.2' audit --production",
     "version": "auto-changelog && git add CHANGELOG.md",
     "postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
   },
@@ -95,5 +98,8 @@
       "./test-core-js.js"
     ]
   },
-  "support": true
+  "support": true,
+  "engines": {
+    "node": ">= 0.4"
+  }
 }
Index: node_modules/postgresql-client/esm/interfaces/query-result.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/query-result.js b/node_modules/postgresql-client/esm/interfaces/query-result.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/query-result.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/postgresql-client/esm/data-types/bool-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/bool-type.js b/node_modules/postgresql-client/esm/data-types/bool-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/bool-type.js	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-export const BoolType = {
-    name: 'bool',
-    oid: DataTypeOIDs.bool,
-    jsType: 'boolean',
-    parseBinary(v) {
-        return !!v.readUInt8();
-    },
-    encodeBinary(buf, v) {
-        buf.writeInt8(v ? 1 : 0);
-    },
-    parseText(v) {
-        return v === 'TRUE' || v === 't' || v === 'true' || v === 'y' || v === 'yes' || v === 'on' || v === '1';
-    },
-    isType(v) {
-        return typeof v === 'boolean';
-    },
-};
-export const ArrayBoolType = {
-    ...BoolType,
-    name: '_bool',
-    oid: DataTypeOIDs._bool,
-    elementsOID: DataTypeOIDs.bool,
-};
Index: node_modules/nodemon/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/README.md b/node_modules/nodemon/README.md
--- a/node_modules/nodemon/README.md	
+++ b/node_modules/nodemon/README.md	
@@ -264,8 +264,9 @@
 Your application can handle the signal as follows.
 
 ```js
-process.once("SIGHUP", function () {
+process.on("SIGHUP", function () {
   reloadSomeConfiguration();
+  process.kill(process.pid, "SIGTERM");
 })
 ```
 
@@ -292,9 +293,10 @@
 The following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:
 
 ```js
-process.once('SIGUSR2', function () {
+// important to use `on` and not `once` as nodemon can re-send the kill signal
+process.on('SIGUSR2', function () {
   gracefulShutdown(function () {
-    process.kill(process.pid, 'SIGUSR2');
+    process.kill(process.pid, 'SIGTERM');
   });
 });
 ```
@@ -372,87 +374,64 @@
 
 <div style="overflow: hidden; margin-bottom: 80px;"><!--oc--><a title='buy instagram followers on skweezer.net today' data-id='532050' data-tier='0' href='https://skweezer.net/buy-instagram-followers'><img alt='buy instagram followers on skweezer.net today' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/b0ddcb1b-9054-4220-8d72-05131b28a2bb/logo-skweezer-icon.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Netpositive' data-id='162674' data-tier='1' href='https://najlepsibukmacherzy.pl/ranking-legalnych-bukmacherow/'><img alt='Netpositive' src='https://opencollective-production.s3.us-west-1.amazonaws.com/52acecf0-608a-11eb-b17f-5bca7c67fe7b.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='KasynoHEX' data-id='177376' data-tier='1' href='https://polskiekasynohex.org/'><img alt='KasynoHEX' src='https://opencollective-production.s3.us-west-1.amazonaws.com/2bb0d6e0-99c8-11ea-9349-199aa0d5d24a.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Casinoonlineaams.com' data-id='198634' data-tier='1' href='https://www.casinoonlineaams.com'><img alt='Casinoonlineaams.com' src='https://opencollective-production.s3.us-west-1.amazonaws.com/61bcf1d0-43ce-11ed-b562-6bf567fce1fd.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Best Aussie casinos at aussielowdepositcasino.com' data-id='215800' data-tier='1' href='https://aussielowdepositcasino.com/'><img alt='Best Aussie casinos at aussielowdepositcasino.com' src='https://user-images.githubusercontent.com/13700/151881982-04677f3d-e2e1-44ee-a168-258b242b1ef4.svg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='KasynoHEX' data-id='177376' data-tier='1' href='https://pl.polskiekasynohex.org/'><img alt='KasynoHEX' src='https://opencollective-production.s3.us-west-1.amazonaws.com/2bb0d6e0-99c8-11ea-9349-199aa0d5d24a.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Best online casinos not on GamStop in the UK' data-id='243140' data-tier='1' href='https://casino-wise.com/'><img alt='Best online casinos not on GamStop in the UK' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/f889d209-a931-4c06-a529-fe1f86c411bf/casino-wise-logo.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='freebets.ltd.uk' data-id='269861' data-tier='1' href='https://freebets.ltd.uk/'><img alt='freebets.ltd.uk' src='https://logo.clearbit.com/freebets.ltd.uk' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='TheCasinoDB' data-id='270835' data-tier='1' href='https://www.thecasinodb.com'><img alt='TheCasinoDB' src='https://logo.clearbit.com/thecasinodb.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Marketing' data-id='285700' data-tier='1' href='https://www.casinoutansvenskalicensen.se/'><img alt='Marketing' src='https://opencollective-production.s3.us-west-1.amazonaws.com/ed105cb0-b01f-11ec-935f-77c14be20a90.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Rating of best betting sites in Australia' data-id='303335' data-tier='1' href='https://hellsbet.com/en-au/'><img alt='Rating of best betting sites in Australia' src='https://opencollective-production.s3.us-west-1.amazonaws.com/aeb99e10-d1ec-11ec-88be-f9a15ca9f6f8.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='inkedin' data-id='305884' data-tier='1' href='https://inkedin.com'><img alt='inkedin' src='https://logo.clearbit.com/inkedin.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='AU Internet Pokies' data-id='318650' data-tier='1' href='http://www.australiainternetpokies.com/'><img alt='AU Internet Pokies' src='https://opencollective-production.s3.us-west-1.amazonaws.com/44dc83f0-4315-11ed-9bf2-cf65326f4741.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='CasinoAus' data-id='318653' data-tier='1' href='https://www.casinoaus.net/'><img alt='CasinoAus' src='https://opencollective-production.s3.us-west-1.amazonaws.com/1e556300-4315-11ed-b96e-8dce3aa4cf2e.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='AU Online Casinos' data-id='318656' data-tier='1' href='https://www.australiaonlinecasinosites.com/'><img alt='AU Online Casinos' src='https://opencollective-production.s3.us-west-1.amazonaws.com/f3aa3b60-2219-11ed-b2b0-83767ea0d654.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Top Australian Gambling' data-id='318659' data-tier='1' href='https://www.topaustraliangambling.com/'><img alt='Top Australian Gambling' src='https://opencollective-production.s3.us-west-1.amazonaws.com/d7687f70-2219-11ed-a0b5-97427086b4aa.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='casino online stranieri' data-id='319480' data-tier='1' href='https://www.casinostranieri.net/'><img alt='casino online stranieri' src='https://opencollective-production.s3.us-west-1.amazonaws.com/7aae8900-0c02-11ed-9aa8-2bd811fd6f10.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Goread.io' data-id='320564' data-tier='1' href='https://goread.io/buy-instagram-followers'><img alt='Goread.io' src='https://opencollective-production.s3.us-west-1.amazonaws.com/7d1302a0-0f33-11ed-a094-3dca78aec7cd.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='We are the most advanced casino guide!' data-id='321121' data-tier='1' href='https://www.sure.bet/casinos-not-on-gamstop/'><img alt='We are the most advanced casino guide!' src='https://logo.clearbit.com/sure.bet' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Best Australian online casinos. Reviewed by Correct Casinos.' data-id='322445' data-tier='1' href='https://www.correctcasinos.com/australian-online-casinos/'><img alt='Best Australian online casinos. Reviewed by Correct Casinos.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/fef95200-1551-11ed-ba3f-410c614877c8.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Casino utan svensk licens' data-id='326858' data-tier='1' href='https://casinoburst.com/casino-utan-licens/'><img alt='Casino utan svensk licens' src='https://opencollective-production.s3.us-west-1.amazonaws.com/ac61d790-1d3c-11ed-b8db-7b79b65b0dbb.PNG' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='' data-id='326865' data-tier='1' href='https://www.uudetkasinot.com'><img alt='' src='https://opencollective-production.s3.us-west-1.amazonaws.com/b6055950-df00-11eb-9caa-b58f40adecd5.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Do My Online Class - NoNeedToStudy.com' data-id='327241' data-tier='1' href='https://www.noneedtostudy.com/take-my-online-class/'><img alt='Do My Online Class - NoNeedToStudy.com' src='https://user-images.githubusercontent.com/13700/187039696-e2d8cd59-8b4e-438f-a052-69095212427d.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Slotmachineweb.com' data-id='329195' data-tier='1' href='https://www.slotmachineweb.com/'><img alt='Slotmachineweb.com' src='https://opencollective-production.s3.us-west-1.amazonaws.com/172f9eb0-22c2-11ed-a0b5-97427086b4aa.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Website dedicated to finding the best and safest licensed online casinos in India' data-id='342390' data-tier='1' href='https://www.ghotala.com/'><img alt='Website dedicated to finding the best and safest licensed online casinos in India' src='https://opencollective-production.s3.us-west-1.amazonaws.com/75afa9e0-4ac6-11ed-8d6a-fdcc8c0d0736.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='CasinoWizard' data-id='344102' data-tier='1' href='https://thecasinowizard.com/'><img alt='CasinoWizard' src='https://opencollective-production.s3.us-west-1.amazonaws.com/28b8d230-b9ab-11ec-8254-6d6dbd89fb51.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Scommesseseriea.eu' data-id='353466' data-tier='1' href='https://www.scommesseseriea.eu/'><img alt='Scommesseseriea.eu' src='https://opencollective-production.s3.us-west-1.amazonaws.com/31600a10-4df4-11ed-a07e-95365d1687ba.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Gambe Online AU' data-id='356565' data-tier='1' href='https://www.gambleonlineaustralia.com/'><img alt='Gambe Online AU' src='https://opencollective-production.s3.us-west-1.amazonaws.com/a70354f0-337f-11ed-a5da-ebb8fe99a73a.JPG' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Gamble Online' data-id='356566' data-tier='1' href='https://www.gambleonline.co'><img alt='Gamble Online' src='https://opencollective-production.s3.us-west-1.amazonaws.com/af336e80-337f-11ed-a5da-ebb8fe99a73a.JPG' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Italianonlinecasino.net' data-id='362210' data-tier='1' href='https://www2.italianonlinecasino.net/'><img alt='Italianonlinecasino.net' src='https://opencollective-production.s3.us-west-1.amazonaws.com/2e8dbbb0-22bc-11ed-b874-23b20736a51e.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='nongamstopcasinos.net' data-id='367236' data-tier='1' href='https://nongamstopcasinos.net/gb/'><img alt='nongamstopcasinos.net' src='https://opencollective-production.s3.us-west-1.amazonaws.com/fb8b5ba0-3904-11ed-8516-edd7b7687a36.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='nongamstopcasinos.net' data-id='367236' data-tier='1' href='https://www.pieria.co.uk/'><img alt='nongamstopcasinos.net' src='https://opencollective-production.s3.us-west-1.amazonaws.com/fb8b5ba0-3904-11ed-8516-edd7b7687a36.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Scommesse777' data-id='370216' data-tier='1' href='https://www.scommesse777.com/'><img alt='Scommesse777' src='https://opencollective-production.s3.us-west-1.amazonaws.com/c0346cb0-7ad4-11ed-a9cf-49dc3536976e.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Twicsy' data-id='371088' data-tier='1' href='https://twicsy.com/buy-instagram-likes'><img alt='Twicsy' src='https://opencollective-production.s3.us-west-1.amazonaws.com/19bb95b0-7be3-11ed-8734-4d07568f9c95.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='At Casinoaustraliaonline.com, we review, compare and list all the best gambling sites for Aussies.
-' data-id='380510' data-tier='1' href='https://www.casinoaustraliaonline.com/under-1-hour-withdrawal-casinos/'><img alt='At Casinoaustraliaonline.com, we review, compare and list all the best gambling sites for Aussies.
-' src='https://opencollective-production.s3.us-west-1.amazonaws.com/7c3d81f0-8cad-11ed-b048-95ec46716b47.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Casinon utan svensk licens erbjuder generösa bonusar och kampanjer. Besök coolspins.net för att utforska säkra och pålitliga alternativ.' data-id='404959' data-tier='1' href='https://coolspins.net/'><img alt='Casinon utan svensk licens erbjuder generösa bonusar och kampanjer. Besök coolspins.net för att utforska säkra och pålitliga alternativ.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/3a988fb2-66a3-43f9-a0d1-65950128c68d/casino-utan-svensk-licens-open-collective.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='BestUSCasinos' data-id='409421' data-tier='1' href='https://bestuscasinos.org'><img alt='BestUSCasinos' src='https://logo.clearbit.com/bestuscasinos.org' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='TightPoker' data-id='410184' data-tier='1' href='https://www.tightpoker.com/'><img alt='TightPoker' src='https://logo.clearbit.com/tightpoker.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Buy Instagram Likes' data-id='411448' data-tier='1' href='https://poprey.com/'><img alt='Buy Instagram Likes' src='https://opencollective-production.s3.us-west-1.amazonaws.com/fe650970-c21c-11ec-a499-b55e54a794b4.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Find the best casinos online. Casinot.biz lists and reviews online casinos. ' data-id='417601' data-tier='1' href='https://www.casinot.biz/'><img alt='Find the best casinos online. Casinot.biz lists and reviews online casinos. ' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/366e3423-81af-484a-b9f8-eebe04224407/casinot-biz-icon.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='btcgaming' data-id='419934' data-tier='1' href='https://bitcoinist.com/best-real-money-online-slots-play-slots-for-real-money/'><img alt='btcgaming' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/3ecded2c-a7c2-4291-b9ef-7db1f0128207/btcgaming.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Norway&apos;s biggest and most reliable online casino portal' data-id='422431' data-tier='1' href='https://www.nettcasino.com/'><img alt='Norway&apos;s biggest and most reliable online casino portal' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/5d739e1a-7813-489e-ab82-697daff8bf12/nettcasino.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='OnlineCasinosSpelen' data-id='423738' data-tier='1' href='https://onlinecasinosspelen.com'><img alt='OnlineCasinosSpelen' src='https://logo.clearbit.com/onlinecasinosspelen.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Beoordelen van nieuwe online casino&apos;s 2023' data-id='424449' data-tier='1' href='https://Nieuwe-Casinos.net'><img alt='Beoordelen van nieuwe online casino&apos;s 2023' src='https://logo.clearbit.com/Nieuwe-Casinos.net' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='CasinoZonderRegistratie.net - Nederlandse Top Casino&apos;s' data-id='424450' data-tier='1' href='https://casinoZonderregistratie.net/'><img alt='CasinoZonderRegistratie.net - Nederlandse Top Casino&apos;s' src='https://opencollective-production.s3.us-west-1.amazonaws.com/aeb624c0-7ae7-11ed-8d0e-bda59436695a.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='OSLabs is a nonprofit tech accelerator devoted to furthering high-impact open source software within a collaborative community of dedicated engineers and mentors' data-id='427226' data-tier='1' href='https://opensourcelabs.io'><img alt='OSLabs is a nonprofit tech accelerator devoted to furthering high-impact open source software within a collaborative community of dedicated engineers and mentors' src='https://opencollective-production.s3.us-west-1.amazonaws.com/dc95aaa0-823f-11ed-a97d-09a08de033e1.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Ilmaiset Pitkävetovihjeet ' data-id='430701' data-tier='1' href='https://www.vedonlyontibonukset.com/pitkavetovihjeet'><img alt='Ilmaiset Pitkävetovihjeet ' src='https://logo.clearbit.com/vedonlyontibonukset.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='NyeCasino.me is a website that lists the newest and best online casinos in Norway' data-id='432409' data-tier='1' href='https://www.nyecasino.me/'><img alt='NyeCasino.me is a website that lists the newest and best online casinos in Norway' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/20b616d7-bb05-4605-9904-6610a5d1e248/nyecasino200.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Famoid is a digital marketing agency that specializes in social media services and tools.' data-id='434604' data-tier='1' href='https://famoid.com/'><img alt='Famoid is a digital marketing agency that specializes in social media services and tools.' src='https://logo.clearbit.com/famoid.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='LookSlots' data-id='441291' data-tier='1' href='https://www.outlookindia.com/outlook-spotlight/slots-not-on-gamstop-new-non-gamstop-casinos-uk-news-284058'><img alt='LookSlots' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/d4c16601-f183-4239-9df6-eb2ade7a36f3/slots%20not%20on%20gamstop%20-%20non%20gamstop%20casinos.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Gives a fun for our users' data-id='443264' data-tier='1' href='https://slotoking.ua/games/'><img alt='Gives a fun for our users' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/94601d07-3205-4c60-9c2d-9b8194dbefb7/skg-blue.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='ігрові автомати беткінг' data-id='443264' data-tier='1' href='https://betking.com.ua/games/all-slots/'><img alt='ігрові автомати беткінг' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/94601d07-3205-4c60-9c2d-9b8194dbefb7/skg-blue.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='We are the leading Nearshore Technology Solutions company. We architect and engineer scalable and high-performing software solutions.' data-id='452424' data-tier='1' href='https://www.bairesdev.com/sponsoring-open-source-projects/'><img alt='We are the leading Nearshore Technology Solutions company. We architect and engineer scalable and high-performing software solutions.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/dc38bc3b-7430-4cf7-9b77-36467eb92915/logo8.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Buy real Instagram followers from Twicsy starting at only $2.97. Twicsy has been voted the best site to buy followers from the likes of US Magazine.' data-id='453050' data-tier='1' href='https://twicsy.com/buy-instagram-followers'><img alt='Buy real Instagram followers from Twicsy starting at only $2.97. Twicsy has been voted the best site to buy followers from the likes of US Magazine.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/eb3228cb-9810-42b0-9758-2a7aad5633ef/Screen%20Shot%202023-07-06%20at%209.08.54%20PM.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Buy real Instagram followers from Twicsy starting at only $2.97. Twicsy has been voted the best site to buy followers from the likes of US Magazine.' data-id='453050' data-tier='1' href='https://twicsy.com/buy-instagram-followers'><img alt='Buy real Instagram followers from Twicsy starting at only $2.97. Twicsy has been voted the best site to buy followers from the likes of US Magazine.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/f07b6f83-d0ed-43c6-91ae-ec8fa90512cd/twicsy-followers.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='SocialWick offers the best Instagram Followers in the market. If you are looking to boost your organic growth, buy Instagram followers from SocialWick' data-id='462750' data-tier='1' href='https://www.socialwick.com/instagram/followers'><img alt='SocialWick offers the best Instagram Followers in the market. If you are looking to boost your organic growth, buy Instagram followers from SocialWick' src='https://logo.clearbit.com/socialwick.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Online United States Casinos' data-id='466446' data-tier='1' href='https://www.onlineunitedstatescasinos.com/'><img alt='Online United States Casinos' src='https://logo.clearbit.com/onlineunitedstatescasinos.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='https://bestnongamstopcasinos.net' data-id='468969' data-tier='1' href='https://bestnongamstopcasinos.net/'><img alt='https://bestnongamstopcasinos.net' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/1aec3bc6-2527-4a36-9c40-c2283454be76/cropped-logo1%20%281%29.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Aviators' data-id='471843' data-tier='1' href='https://aviators.com.br'><img alt='Aviators' src='https://github-production-user-asset-6210df.s3.amazonaws.com/13700/277616726-33b554c8-24e0-4570-b8ed-293fb2ab2448.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Online iGaming platform with reliable and trusted reviews.' data-id='473786' data-tier='1' href='https://onlinecasinohex.ph/'><img alt='Online iGaming platform with reliable and trusted reviews.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/b19cbf10-3a5e-11ed-9713-c7c7fc5beda8.svg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='$1 deposit casino' data-id='480605' data-tier='1' href='https://slotcasinocanada.ca/casinos/casino-1-dollar/'><img alt='$1 deposit casino' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/3df9dabb-86ff-4f2e-8edd-f195b55a8555/scc%20logo_600x600.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Online Casinos Australia' data-id='Online Casinos Australia' data-tier='1' href='https://online-casinosaustralia.com/'><img alt='Online Casinos Australia' src='https://github-production-user-asset-6210df.s3.amazonaws.com/13700/268531585-c2b4e482-0409-4664-9aa2-95a62b0d606d.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Looking to boost your YouTube channel? Buy YouTube subscribers with Views4You and watch your audience grow!' data-id='493616' data-tier='1' href='https://views4you.com/buy-youtube-subscribers/'><img alt='Looking to boost your YouTube channel? Buy YouTube subscribers with Views4You and watch your audience grow!' src='https://logo.clearbit.com/views4you.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='casinosonlineaus' data-id='495874' data-tier='1' href='https://casinosonlineaus.com/'><img alt='casinosonlineaus' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/7fb69094-c265-4275-b295-faf6cc0c5372/imgonline-com-ua-Resize-YkHndKrIwMdOKZAz.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Verified reviews of the most reputable Canadian online casinos at leafletcasino.com' data-id='499738' data-tier='1' href='https://leafletcasino.com/'><img alt='Verified reviews of the most reputable Canadian online casinos at leafletcasino.com' src='https://opencollective-production.s3.us-west-1.amazonaws.com/4f4c1b90-6183-11eb-8d33-bbbffb3655c5.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='Buy Telegram Members' data-id='501897' data-tier='1' href='https://buycheapestfollowers.com/buy-telegram-channel-members'><img alt='Buy Telegram Members' src='https://github-production-user-asset-6210df.s3.amazonaws.com/13700/286696172-747dca05-a1e8-4d93-a9e9-95054d1566df.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Najděte nejlepší online casino v České republice' data-id='504161' data-tier='1' href='https://kasinoceske.com'><img alt='Najděte nejlepší online casino v České republice' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/e6056d09-1db2-4fde-ae54-4cee5d99f32e/CZ.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='We review the entire iGaming industry from A to Z' data-id='504258' data-tier='1' href='https://casinolandia.com'><img alt='We review the entire iGaming industry from A to Z' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/5f858add-77f1-47a2-b577-39eecb299c8c/Logo264.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Helping Swedes finding safe unlicensed casinos' data-id='506063' data-tier='1' href='https://casino-utan-svensk-licens.com/'><img alt='Helping Swedes finding safe unlicensed casinos' src='https://logo.clearbit.com/casino-utan-svensk-licens.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='free spins no deposit' data-id='slotozilla' data-tier='1' href='https://www.slotozilla.com/au/free-spins'><img alt='free spins no deposit' src='https://github-production-user-asset-6210df.s3.amazonaws.com/13700/286693953-c68112b6-ebe6-49fd-af6a-5c810a54908d.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='I migliori casinò online dagli esperti di SitiCasinoNonAAMS' data-id='508821' data-tier='1' href='https://siticasinononaams.com'><img alt='I migliori casinò online dagli esperti di SitiCasinoNonAAMS' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/857cd395-3d43-425e-979f-970e44159b6f/SitiCasino.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Best Australian Online Casinos in 2024' data-id='508822' data-tier='1' href='https://aussiecasinoreviewer.com/'><img alt='Best Australian Online Casinos in 2024' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/6ffb5045-e33e-4314-a891-5286fa4a220f/Aussiecasinoreviewer%20logo%20(2)%20(2).jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='MEGAFAMOUS.com' data-id='509686' data-tier='1' href='https://megafamous.com/buy-automatic-instagram-likes'><img alt='MEGAFAMOUS.com' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/c0af8a5d-8fe7-4925-b357-cee797841913/MEGAFAMOUS%20Instagram%20Likes%20.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='PopularityBazaar helps you quickly grow your social media accounts. Buy 100% real likes, followers, views, comments, and more to kickstart your online presence.' data-id='509894' data-tier='1' href='https://popularitybazaar.com/instagram-likes/'><img alt='PopularityBazaar helps you quickly grow your social media accounts. Buy 100% real likes, followers, views, comments, and more to kickstart your online presence.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/a2878e26-3710-453f-9a41-80eeee60a2cc/Group%201.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Non-GamStop NonStop Casino' data-id='510457' data-tier='1' href='https://uk.nonstopcasino.org/non-gamstop-casinos/'><img alt='Non-GamStop NonStop Casino' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/0330c03a-71ea-477c-a4d8-7eb4795d6120/non-stop-casino.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='philippinescasinos.ph' data-id='512007' data-tier='1' href='https://philippinescasinos.ph/gcash/'><img alt='philippinescasinos.ph' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/b758f1b0-3211-464b-a19e-95e2a5f4fa22/PhilippinesCasinos%20bigger.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Incognito' data-id='512350' data-tier='1' href='https://www.outlookindia.com/outlook-spotlight/casinos-not-on-gamstop-uk-news-302214'><img alt='Incognito' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/fdf584c2-defe-4025-ab26-15e5c5ff607e/Non%20gamstop%20casino%20Outlookindia.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='NonGamStopBets Casinos not on GamStop' data-id='515480' data-tier='1' href='https://www.nongamstopbets.com/casinos-not-on-gamstop/'><img alt='NonGamStopBets Casinos not on GamStop' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/6c22601d-6a3f-4370-91dd-a9797887372a/nongamstopbets.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Buy real Instagram followers from Stormlikes starting at only $2.97. Stormlikes has been voted the best site to buy followers from the likes of US Magazine.' data-id='517208' data-tier='1' href='https://www.stormlikes.net/buy-instagram-followers'><img alt='Buy real Instagram followers from Stormlikes starting at only $2.97. Stormlikes has been voted the best site to buy followers from the likes of US Magazine.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/07524c4d-d44f-4120-8693-30fcaa795b2b/Stormlikes%20Black%20Logo%202400x1800.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
 <a title='UpGrow is the Best Instagram Growth Service in 2024. Get more real Instagram followers with our AI-powered growth engine to get 10x faster results. ' data-id='519002' data-tier='1' href='https://www.upgrow.com/'><img alt='UpGrow is the Best Instagram Growth Service in 2024. Get more real Instagram followers with our AI-powered growth engine to get 10x faster results. ' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/63ab7268-5ce4-4e61-b9f1-93a1bd89cd3e/ms-icon-310x310.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Reviewing companies in high-risk industries like online casinos, forex brokers and crypto exchanges' data-id='519124' data-tier='1' href='https://deposit-withdraw.com/'><img alt='Reviewing companies in high-risk industries like online casinos, forex brokers and crypto exchanges' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/eb624c1e-a378-453f-9012-4f1713fff130/deposit-withdraw-logo.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='' data-id='522907' data-tier='1' href='https://justuk.club/'><img alt='' src='https://opencollective-production.s3.us-west-1.amazonaws.com/322d0540-7b1e-11ed-8258-2f5cf1347fab.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Analysis of payment methods for use in the iGaming' data-id='524205' data-tier='1' href='https://payidpokies.net/'><img alt='Analysis of payment methods for use in the iGaming' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/75b4e83e-ae6a-4e65-b2aa-a67d7daec775/PayIDPokies-com.webp' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='30 Best Casinos Not on Gamstop in 2024' data-id='525119' data-tier='1' href='https://finance.yahoo.com/news/30-best-casinos-not-gamstop-091943696.html'><img alt='30 Best Casinos Not on Gamstop in 2024' src='https://github.com/remy/nodemon/assets/13700/820935c0-7844-4ba9-9563-b1c559895c38' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
-<a title='Twitter Video Downloader HD Tool allows you to store tweets on your device (mobile or PC) for free.' data-id='525434' data-tier='1' href='https://ssstwitter.online/'><img alt='Twitter Video Downloader HD Tool allows you to store tweets on your device (mobile or PC) for free.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/ba0d1daf-a894-4d98-95f7-a44d321364b3/Screenshot%202024-01-16%20at%2011.43.22.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a><!--oc-->
+<a title='CryptoCasinos.online' data-id='525119' data-tier='1' href='https://cryptocasinos.online/'><img alt='CryptoCasinos.online' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/97712948-3b1b-4026-a109-257d879baa23/CryptoCasinos.Online-FBcover18.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='No deposit casino promo Codes 2024 - The best online Casinos websites. No deposit bonus codes, Free Spins and Promo Codes. Stake, Roobet, Jackpotcity and more.' data-id='540890' data-tier='1' href='https://www.ownedcore.com/casino'><img alt='No deposit casino promo Codes 2024 - The best online Casinos websites. No deposit bonus codes, Free Spins and Promo Codes. Stake, Roobet, Jackpotcity and more.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/8bd4b78c-95e2-4c41-b4f4-d7fd6c0e12cd/logo4-e6140c27.webp' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Online casino.' data-id='541128' data-tier='1' href='https://www.fruityking.co.nz'><img alt='Online casino.' src='https://logo.clearbit.com/fruityking.co.nz' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='SidesMedia' data-id='558019' data-tier='1' href='https://sidesmedia.com'><img alt='SidesMedia' src='https://logo.clearbit.com/sidesmedia.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Find the social proof you need to reach your audience! Boost conversions. Quickly buy Twitter Followers &amp; more with no sign-up. Taking you to the next' data-id='568449' data-tier='1' href='https://Bulkoid.com/buy-twitter-followers'><img alt='Find the social proof you need to reach your audience! Boost conversions. Quickly buy Twitter Followers &amp; more with no sign-up. Taking you to the next' src='https://logo.clearbit.com/Bulkoid.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Boost your social media presence effortlessly with top-quality Instagram and TikTok followers and likes.' data-id='579911' data-tier='1' href='https://leofame.com/buy-instagram-followers'><img alt='Boost your social media presence effortlessly with top-quality Instagram and TikTok followers and likes.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/186c0e19-b195-4228-901a-ab1b70d63ee5/WhatsApp%20Image%202024-06-21%20at%203.50.43%20AM.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Social Media Management and all kinds of followers' data-id='587050' data-tier='1' href='https://www.socialfollowers.uk/buy-tiktok-followers/'><img alt='Social Media Management and all kinds of followers' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/8941f043-5d00-4e33-a1fd-f2d27ca54963/Social%20Followers%20Uk%20logo%20black.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Trusted last mile route planning and route optimization' data-id='590147' data-tier='1' href='https://route4me.com/'><img alt='Trusted last mile route planning and route optimization' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/237386c3-48a2-47c6-97ac-5f888cdb4cda/Route4MeIconLogo.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Betwinner is an online bookmaker offering sports betting, casino games, and more.' data-id='594768' data-tier='1' href='https://guidebook.betwinner.com/'><img alt='Betwinner is an online bookmaker offering sports betting, casino games, and more.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/82cab29a-7002-4924-83bf-2eecb03d07c4/0x0.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Help users to find best and cheapest site to buy Instagram Followers' data-id='598908' data-tier='1' href='https://www.reddit.com/r/TikTokExpert/comments/1dpyujh/whats_the_best_site_to_buy_instagram_likes_views/'><img alt='Help users to find best and cheapest site to buy Instagram Followers' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/263abc3a-0841-4694-b24a-788460391613/communityIcon_66mltiw57b4d1.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rated world&apos;s #1 IG service since 2012.' data-id='602382' data-tier='1' href='https://buzzoid.com/buy-instagram-followers/'><img alt='At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rated world&apos;s #1 IG service since 2012.' src='https://logo.clearbit.com/buzzoid.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Zamsino.com' data-id='608094' data-tier='1' href='https://zamsino.com/'><img alt='Zamsino.com' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/e3e99af5-a024-4d85-8594-8fd22e506bc9/Zamsino.com%20Logo.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Feedthebot is an informative resource with free seo tools designed to help webmasters, SEO specialists, marketers, and entrepreneurs navigate and bett' data-id='612702' data-tier='1' href='https://www.feedthebot.org/'><img alt='Feedthebot is an informative resource with free seo tools designed to help webmasters, SEO specialists, marketers, and entrepreneurs navigate and bett' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/613fd973-b367-41bb-b253-34d2ebf877e8/logo-feedthebot(2).png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Reviewing and comparing online casinos available to Finnish players. In addition, we publish relevant news and blog posts about the world of iGaming.' data-id='620398' data-tier='1' href='https://uusimmatkasinot.com/'><img alt='Reviewing and comparing online casinos available to Finnish players. In addition, we publish relevant news and blog posts about the world of iGaming.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/d5326d0f-3cde-41f4-b480-78ef8a2fb015/Uusimmatkasinot_head_siteicon.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Jabka Skin' data-id='634777' data-tier='1' href='https://jabka.skin/'><img alt='Jabka Skin' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/4c272505-2e0b-4e93-9693-c7d5c07ea0c6/IMG_0161.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Онлайн казино та БК (ставки на спорт) в Україні' data-id='638974' data-tier='1' href='https://betking.com.ua/'><img alt='Онлайн казино та БК (ставки на спорт) в Україні' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/08587758-582c-4136-aba5-2519230960d3/betking.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Buy Youtube Views' data-id='641611' data-tier='1' href='https://ssmarket.net/buy-youtube-views'><img alt='Buy Youtube Views' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/bbc20da5-6350-4f69-a5a5-33b8d438fe72/favicon_kare.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Prank Caller - #1 Prank Calling App' data-id='642864' data-tier='1' href='https://prankcaller.io'><img alt='Prank Caller - #1 Prank Calling App' src='https://logo.clearbit.com/prankcaller.io' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Buzzvoice is your one-stop shop for all your social media marketing needs. With Buzzvoice, you can buy followers, comments, likes, video views and more!' data-id='646075' data-tier='1' href='https://buzzvoice.com/'><img alt='Buzzvoice is your one-stop shop for all your social media marketing needs. With Buzzvoice, you can buy followers, comments, likes, video views and more!' src='https://opencollective-production.s3.us-west-1.amazonaws.com/acd68da0-e71e-11ec-a84e-fd82f80383c1.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='At Famety, you can grow your social media following quickly, safely, and easily with just a few clicks. Rated the world’s #1 social media service since 2013.' data-id='646341' data-tier='1' href='https://www.famety.com/'><img alt='At Famety, you can grow your social media following quickly, safely, and easily with just a few clicks. Rated the world’s #1 social media service since 2013.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/cfb851d7-3d7e-451b-b872-b653b28c976f/favicon_001.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='' data-id='648524' data-tier='1' href='https://www.c19.cl/'><img alt='' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/01b96d4c-4852-4499-8c70-e3ec57d0c58c/2024-05-09_17-27%20(1).png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='non GamStop sites' data-id='649825' data-tier='1' href='https://www.stjamestheatre.co.uk/'><img alt='non GamStop sites' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/07eb5953-01b2-41cf-8e33-77b9b6df1477/%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202025-01-10%20%D0%BE%2015.29.42%20(1)%20(1).jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Buy Twitter Followers Visit TweSocial' data-id='651653' data-tier='1' href='https://twesocial.com'><img alt='Buy Twitter Followers Visit TweSocial' src='https://logo.clearbit.com/twesocial.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Useful guides about PayID pokies and casino sites for Australians' data-id='653496' data-tier='1' href='https://payid-pokies-sites.com/'><img alt='Useful guides about PayID pokies and casino sites for Australians' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/3542b01b-6b66-488b-a641-e35720fd5453/images.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Buy Instagram and TikTok followers on SocialBoosting!' data-id='653711' data-tier='1' href='https://www.socialboosting.com/buy-tiktok-followers'><img alt='Buy Instagram and TikTok followers on SocialBoosting!' src='https://logo.clearbit.com/socialboosting.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Buy Youtube Subscribers from the #1 rated company. Our exclusive high quality Youtube subscribers come with a lifetime guarantee!' data-id='654211' data-tier='1' href='https://mysocialfollowing.com/youtube/subscribers.php'><img alt='Buy Youtube Subscribers from the #1 rated company. Our exclusive high quality Youtube subscribers come with a lifetime guarantee!' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/eb5da272-eba5-49b7-b26e-d0271809edac/logo.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Слоти в казино ЮА' data-id='655295' data-tier='1' href='https://casino.ua/casino/slots/'><img alt='Слоти в казино ЮА' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/3c8fa725-e203-4c57-933c-0a884527fd5b/images.jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Best Casinos not on Gamstop in the UK 2025 – Safe &amp; Trusted' data-id='658676' data-tier='1' href='https://www.vso.org.uk/'><img alt='Best Casinos not on Gamstop in the UK 2025 – Safe &amp; Trusted' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/e8cda2e8-2516-491a-8a7f-0fa5fe94ed49/125%D1%85125%20(1).jpg' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='MagicUGC is the Best AI UGC Video Generator. Trained on billions of views, MagicUGC creates TikTok &amp; IG-ready videos with 500+ AI actors and proven viral hooks. Generate AI videos in 35+ languages, auto-test unlimited variations, and scale UGC marketing.' data-id='661239' data-tier='1' href='https://www.magicugc.com/'><img alt='MagicUGC is the Best AI UGC Video Generator. Trained on billions of views, MagicUGC creates TikTok &amp; IG-ready videos with 500+ AI actors and proven viral hooks. Generate AI videos in 35+ languages, auto-test unlimited variations, and scale UGC marketing.' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/853ae26b-75ac-49bd-8676-0060212f42cb/MagicUGC-logo-rounded%20(1).png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Buy Instagram Followers at UseViral' data-id='661787' data-tier='1' href='https://useviral.com/buy-instagram-followers'><img alt='Buy Instagram Followers at UseViral' src='https://logo.clearbit.com/useviral.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='We help improve visibility in social networks. ' data-id='663482' data-tier='1' href='https://socialboss.org/'><img alt='We help improve visibility in social networks. ' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/48fef73d-509e-47d4-a790-0f6d371338f1/socialboss%20logo.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='We are a Software Company that delivers App Development, AI/ML integrations, and Data analytics, by adding the best Engineering teams' data-id='669750' data-tier='1' href='https://www.clickittech.com/'><img alt='We are a Software Company that delivers App Development, AI/ML integrations, and Data analytics, by adding the best Engineering teams' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/b01bfc96-cb20-4f49-b3b2-55088f3f9efd/image%20(2).png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Kasinohai.com' data-id='673849' data-tier='1' href='https://www.kasinohai.com/nettikasinot'><img alt='Kasinohai.com' src='https://logo.clearbit.com/kasinohai.com' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a>
+<a title='Casino Online Chile 2025' data-id='678929' data-tier='1' href='https://www.acee.cl/'><img alt='Casino Online Chile 2025' src='https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/292c66d6-0c5c-40e8-96f0-900dcdeaaf47/acee-casino-chile.png' style='object-fit: contain; float: left; margin:12px' height='120' width='120'></a><!--oc-->
 </div>
 
 Please note that links to the sponsors above are not direct endorsements nor affiliated with any of contributors of the nodemon project.
Index: node_modules/power-tasks/esm/task.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/esm/task.js b/node_modules/power-tasks/esm/task.js
--- a/node_modules/power-tasks/esm/task.js	
+++ b/node_modules/power-tasks/esm/task.js	
@@ -1,6 +1,6 @@
-import * as os from 'os';
-import { AsyncEventEmitter } from 'strict-typed-events';
-import { plural } from './utils.js';
+import * as os from "os";
+import { AsyncEventEmitter } from "strict-typed-events";
+import { plural } from "./utils.js";
 const osCPUs = os.cpus().length;
 class TaskContext {
     constructor() {
@@ -9,14 +9,14 @@
         this.queue = new Set();
     }
 }
-const noOp = () => void (0);
-const taskContextKey = Symbol.for('power-tasks.Task.context');
+const noOp = () => undefined;
+const taskContextKey = Symbol.for("power-tasks.Task.context");
 let idGen = 0;
 export class Task extends AsyncEventEmitter {
     constructor(arg0, options) {
         super();
-        this._id = '';
-        this._status = 'idle';
+        this._id = "";
+        this._status = "idle";
         this._abortController = new AbortController();
         this.setMaxListeners(100);
         options = options || {};
@@ -26,21 +26,21 @@
         else
             this._executeFn = arg0;
         this._options = { ...options };
-        this._id = this._options.id || '';
+        this._id = this._options.id || "";
         if (this._options.bail == null)
             this._options.bail = true;
         if (options.onStart)
-            this.on('start', options.onStart);
+            this.on("start", options.onStart);
         if (options.onFinish)
-            this.on('finish', options.onFinish);
+            this.on("finish", options.onFinish);
         if (options.onRun)
-            this.on('run', options.onRun);
+            this.on("run", options.onRun);
         if (options.onStatusChange)
-            this.on('status-change', options.onStatusChange);
+            this.on("status-change", options.onStatusChange);
         if (options.onUpdate)
-            this.on('update', options.onUpdate);
+            this.on("update", options.onUpdate);
         if (options.onUpdateRecursive)
-            this.on('update-recursive', options.onUpdateRecursive);
+            this.on("update-recursive", options.onUpdateRecursive);
     }
     get id() {
         return this._id;
@@ -55,20 +55,19 @@
         return this._options;
     }
     get message() {
-        return this._message || '';
+        return this._message || "";
     }
     get status() {
         return this._status;
     }
     get isStarted() {
-        return this.status !== 'idle' && !this.isFinished;
+        return this.status !== "idle" && !this.isFinished;
     }
     get isFinished() {
-        return this.status === 'fulfilled' || this.status === 'failed' ||
-            this.status === 'aborted';
+        return this.status === "fulfilled" || this.status === "failed" || this.status === "aborted";
     }
     get isFailed() {
-        return this.status === 'failed';
+        return this.status === "failed";
     }
     get executeDuration() {
         return this._executeDuration;
@@ -100,35 +99,36 @@
         return false;
     }
     getWaitingTasks() {
-        if (!(this.status === 'waiting' && this._waitingFor && this._waitingFor.size))
+        if (!(this.status === "waiting" && this._waitingFor && this._waitingFor.size))
             return;
         const out = Array.from(this._waitingFor);
-        if (this._children)
+        if (this._children) {
             for (const c of this._children) {
                 const childTasks = c.getWaitingTasks();
                 if (childTasks) {
-                    childTasks.forEach(t => {
+                    childTasks.forEach((t) => {
                         if (!out.includes(t))
                             out.push(t);
                     });
                 }
             }
+        }
         return out;
     }
     abort() {
-        if (this.isFinished || this.status === 'aborting')
+        if (this.isFinished || this.status === "aborting")
             return this;
         if (!this.isStarted) {
-            this._update({ status: 'aborted', message: 'aborted' });
+            this._update({ status: "aborted", message: "aborted" });
             return this;
         }
         const ctx = this[taskContextKey];
         const timeout = this.options.abortTimeout || 30000;
-        this._update({ status: 'aborting', message: 'Aborting' });
+        this._update({ status: "aborting", message: "Aborting" });
         if (timeout) {
             this._abortTimer = setTimeout(() => {
                 delete this._abortTimer;
-                this._update({ status: 'aborted', message: 'aborted' });
+                this._update({ status: "aborted", message: "aborted" });
             }, timeout).unref();
         }
         this._abortChildren()
@@ -140,15 +140,16 @@
                 this._abortController.abort();
                 return;
             }
-            this._update({ status: 'aborted', message: 'aborted' });
-        });
+            this._update({ status: "aborted", message: "aborted" });
+        })
+            .catch(noOp);
         return this;
     }
     start() {
         if (this.isStarted)
             return this;
-        this._id = this._id || ('t' + (++idGen));
-        const ctx = this[taskContextKey] = new TaskContext();
+        this._id = this._id || "t" + ++idGen;
+        const ctx = (this[taskContextKey] = new TaskContext());
         ctx.concurrency = this.options.concurrency || osCPUs;
         let pulseTimer;
         ctx.triggerPulse = () => {
@@ -163,9 +164,9 @@
             this._determineChildrenTree((err) => {
                 if (err) {
                     this._update({
-                        status: 'failed',
+                        status: "failed",
                         error: err,
-                        message: 'Unable to fetch child tasks. ' + (err.message || err)
+                        message: "Unable to fetch child tasks. " + (err.message || err),
                     });
                     return;
                 }
@@ -186,7 +187,7 @@
                     resolve(this.result);
                 return;
             }
-            this.once('finish', () => {
+            this.once("finish", () => {
                 if (this.isFailed)
                     return reject(this.error);
                 resolve(this.result);
@@ -203,13 +204,13 @@
                 return callback(err);
             if (!value)
                 return callback();
-            if (typeof value === 'function') {
+            if (typeof value === "function") {
                 try {
                     const x = value();
                     handler(undefined, x);
                 }
-                catch (err) {
-                    handler(err);
+                catch (err2) {
+                    handler(err2);
                 }
                 return;
             }
@@ -217,15 +218,14 @@
                 let idx = 1;
                 const children = value.reduce((a, v) => {
                     // noinspection SuspiciousTypeOfGuard
-                    if (typeof v === 'function') {
+                    if (typeof v === "function") {
                         v = new Task(v, { concurrency: options.concurrency, bail: options.bail });
                     }
                     if (v instanceof Task) {
                         v[taskContextKey] = ctx;
-                        v._id = v._id || (this._id + '-' + (idx++));
-                        const listeners = this.listeners('update-recursive');
-                        listeners.forEach(listener => v.on('update-recursive', listener));
-                        // ctx.allTasks.add(v);
+                        v._id = v._id || this._id + "-" + idx++;
+                        const listeners = this.listeners("update-recursive");
+                        listeners.forEach((listener) => v.on("update-recursive", listener));
                         a.push(v);
                     }
                     return a;
@@ -233,14 +233,14 @@
                 if (children && children.length) {
                     this._children = children;
                     let i = 0;
-                    const next = (err) => {
-                        if (err)
-                            return callback(err);
+                    const next = (err2) => {
+                        if (err2)
+                            return callback(err2);
                         if (i >= children.length)
                             return callback();
                         const c = children[i++];
                         if (c.options.children)
-                            c._determineChildrenTree((err) => next(err));
+                            c._determineChildrenTree((err3) => next(err3));
                         else
                             next();
                     };
@@ -250,28 +250,40 @@
                     callback();
                 return;
             }
-            if (value && typeof value.then === 'function') {
-                value
-                    .then(v => handler(undefined, v))
-                    .catch(err => handler(err));
+            if (value && typeof value.then === "function") {
+                value.then((v) => handler(undefined, v)).catch((e) => handler(e));
                 return;
             }
-            callback(new Error('Invalid value returned from children() method.'));
+            callback(new Error("Invalid value returned from children() method."));
         };
         handler(undefined, this._options.children);
     }
     _determineChildrenDependencies(scope) {
         if (!this._children)
             return;
-        const detectCircular = (t, lookup, path = '') => {
-            if (!lookup._dependencies)
-                return;
-            path = path || (t.name || t.id);
-            path += ' > ' + (lookup.name || lookup.id);
-            if (lookup._dependencies.includes(t))
-                throw new Error(`Circular dependency detected. ${path + ' > ' + (t.name || t.id)}`);
-            for (const l1 of lookup._dependencies.values())
-                detectCircular(t, l1, path);
+        const detectCircular = (t, dependencies, path = "", list) => {
+            path = path || t.name || t.id;
+            list = list || new Set();
+            for (const l1 of dependencies.values()) {
+                if (l1 === t)
+                    throw new Error(`Circular dependency detected. ${path}`);
+                if (list.has(l1))
+                    continue;
+                list.add(l1);
+                if (l1._dependencies)
+                    detectCircular(t, l1._dependencies, path + " > " + (l1.name || l1.id), list);
+                if (l1.children) {
+                    for (const c of l1.children) {
+                        if (c === t)
+                            throw new Error(`Circular dependency detected. ${path}`);
+                        if (list.has(c))
+                            continue;
+                        list.add(c);
+                        if (c._dependencies)
+                            detectCircular(t, c._dependencies, path, list);
+                    }
+                }
+            }
         };
         const subScope = [...scope, ...Array.from(this._children)];
         for (const c of this._children.values()) {
@@ -281,16 +293,14 @@
             const dependencies = [];
             const waitingFor = new Set();
             for (const dep of c.options.dependencies) {
-                const dependentTask = subScope.find(x => typeof dep === 'string' ? x.name === dep : (x === dep));
+                const dependentTask = subScope.find((x) => (typeof dep === "string" ? x.name === dep : x === dep));
                 if (!dependentTask || c === dependentTask)
                     continue;
-                detectCircular(c, dependentTask);
-                if (dependentTask._dependencies?.includes(c))
-                    throw new Error(`Task "${c.name}" has circular dependency with ${dependentTask.name}.`);
                 dependencies.push(dependentTask);
                 if (!dependentTask.isFinished)
                     waitingFor.add(dependentTask);
             }
+            detectCircular(c, dependencies);
             if (dependencies.length)
                 c._dependencies = dependencies;
             if (waitingFor.size)
@@ -305,43 +315,45 @@
         const waitingFor = this._waitingFor;
         const signal = this._abortController.signal;
         const abortSignalCallback = () => clearWait();
-        signal.addEventListener('abort', abortSignalCallback, { once: true });
+        signal.addEventListener("abort", abortSignalCallback, { once: true });
         const handleDependentAborted = () => {
-            signal.removeEventListener('abort', abortSignalCallback);
+            signal.removeEventListener("abort", abortSignalCallback);
             this._abortChildren()
                 .then(() => {
-                const isFailed = !!failedDependencies.find(d => d.status === 'failed');
-                const error = new Error('Aborted due to ' + (isFailed ? 'fail' : 'cancellation') +
-                    ' of dependent ' + plural('task', !!failedDependencies.length));
+                const isFailed = !!failedDependencies.find((d) => d.status === "failed");
+                const error = new Error("Aborted due to " +
+                    (isFailed ? "fail" : "cancellation") +
+                    " of dependent " +
+                    plural("task", !!failedDependencies.length));
                 error.failedDependencies = failedDependencies;
                 this._failedDependencies = failedDependencies;
                 this._update({
-                    status: isFailed ? 'failed' : 'aborted',
+                    status: isFailed ? "failed" : "aborted",
                     message: error.message,
-                    error
+                    error,
                 });
             })
                 .catch(noOp);
         };
         const clearWait = () => {
             for (const t of waitingFor) {
-                t.removeListener('finish', finishCallback);
+                t.removeListener("finish", finishCallback);
             }
             delete this._waitingFor;
         };
         const finishCallback = async (t) => {
-            if (this.isStarted && this.status !== 'waiting') {
+            if (this.isStarted && this.status !== "waiting") {
                 clearWait();
                 return;
             }
             waitingFor.delete(t);
-            if (t.isFailed || t.status === 'aborted') {
+            if (t.isFailed || t.status === "aborted") {
                 failedDependencies.push(t);
             }
             // If all dependent tasks completed
             if (!waitingFor.size) {
                 delete this._waitingFor;
-                signal.removeEventListener('abort', abortSignalCallback);
+                signal.removeEventListener("abort", abortSignalCallback);
                 // If any of dependent tasks are failed
                 if (failedDependencies.length) {
                     handleDependentAborted();
@@ -351,16 +363,16 @@
                 if (this.isStarted)
                     this._startChildren();
                 else
-                    await this.emitAsync('wait-end');
+                    await this.emitAsync("wait-end");
             }
         };
         for (const t of waitingFor.values()) {
-            if (t.isFailed || t.status === 'aborted') {
+            if (t.isFailed || t.status === "aborted") {
                 waitingFor.delete(t);
                 failedDependencies.push(t);
             }
             else
-                t.prependOnceListener('finish', finishCallback);
+                t.prependOnceListener("finish", finishCallback);
         }
         if (!waitingFor.size)
             handleDependentAborted();
@@ -370,9 +382,9 @@
             return;
         if (this._waitingFor) {
             this._update({
-                status: 'waiting',
-                message: 'Waiting for dependencies',
-                waitingFor: true
+                status: "waiting",
+                message: "Waiting for dependencies",
+                waitingFor: true,
             });
             return;
         }
@@ -385,25 +397,25 @@
             return;
         }
         const options = this.options;
-        const childrenLeft = this._childrenLeft = new Set(children);
+        const childrenLeft = (this._childrenLeft = new Set(children));
         const failedChildren = [];
         const statusChangeCallback = async (t) => {
-            if (this.status === 'aborting')
+            if (this.status === "aborting")
                 return;
-            if (t.status === 'running')
-                this._update({ status: 'running', message: 'Running' });
-            if (t.status === 'waiting')
-                this._update({ status: 'waiting', message: 'Waiting' });
+            if (t.status === "running")
+                this._update({ status: "running", message: "Running" });
+            if (t.status === "waiting")
+                this._update({ status: "waiting", message: "Waiting" });
         };
         const finishCallback = async (t) => {
-            t.removeListener('status-change', statusChangeCallback);
+            t.removeListener("status-change", statusChangeCallback);
             childrenLeft.delete(t);
-            if (t.isFailed || t.status === 'aborted') {
+            if (t.isFailed || t.status === "aborted") {
                 failedChildren.push(t);
                 if (options.bail && childrenLeft.size) {
-                    const running = !!children.find(c => c.isStarted);
+                    const running = !!children.find((c) => c.isStarted);
                     if (running)
-                        this._update({ status: 'aborting', message: 'Aborting' });
+                        this._update({ status: "aborting", message: "Aborting" });
                     this._abortChildren().catch(noOp);
                     return;
                 }
@@ -411,15 +423,17 @@
             if (!childrenLeft.size) {
                 delete this._childrenLeft;
                 if (failedChildren.length) {
-                    const isFailed = !!failedChildren.find(d => d.status === 'failed');
-                    const error = new Error('Aborted due to ' + (isFailed ? 'fail' : 'cancellation') +
-                        ' of child ' + plural('task', !!failedChildren.length));
+                    const isFailed = !!failedChildren.find((d) => d.status === "failed");
+                    const error = new Error("Aborted due to " +
+                        (isFailed ? "fail" : "cancellation") +
+                        " of child " +
+                        plural("task", !!failedChildren.length));
                     error.failedChildren = failedChildren;
                     this._failedChildren = failedChildren;
                     this._update({
-                        status: isFailed ? 'failed' : 'aborted',
+                        status: isFailed ? "failed" : "aborted",
                         error,
-                        message: error.message
+                        message: error.message,
                     });
                     return;
                 }
@@ -427,24 +441,21 @@
             this._pulse();
         };
         for (const c of children) {
-            c.prependOnceListener('wait-end', () => this._pulse());
-            c.prependOnceListener('finish', finishCallback);
-            c.prependListener('status-change', statusChangeCallback);
+            c.prependOnceListener("wait-end", () => this._pulse());
+            c.prependOnceListener("finish", finishCallback);
+            c.prependListener("status-change", statusChangeCallback);
         }
         this._pulse();
     }
     _pulse() {
         const ctx = this[taskContextKey];
-        if (this.isFinished ||
-            this._waitingFor ||
-            this.status === 'aborting' ||
-            ctx.executingTasks.has(this))
+        if (this.isFinished || this._waitingFor || this.status === "aborting" || ctx.executingTasks.has(this))
             return;
         const options = this.options;
         if (this._childrenLeft) {
             // Check if we can run multiple child tasks
             for (const c of this._childrenLeft) {
-                if ((c.isStarted && options.serial) || (c.status === 'running' && c.options.exclusive)) {
+                if ((c.isStarted && options.serial) || (c.status === "running" && c.options.exclusive)) {
                     c._pulse();
                     return;
                 }
@@ -456,7 +467,7 @@
                 if (c.isFinished)
                     continue;
                 hasExclusive = hasExclusive || !!c.options.exclusive;
-                hasRunning = hasRunning || c.status === 'running';
+                hasRunning = hasRunning || c.status === "running";
             }
             if (hasExclusive && hasRunning)
                 return;
@@ -472,44 +483,44 @@
                 if (c.options.exclusive && (ctx.executingTasks.size || ctx.executingTasks.size))
                     return;
                 c._start();
-                if (options.serial || (c.status === 'running' && c.options.exclusive))
+                if (options.serial || (c.status === "running" && c.options.exclusive))
                     return;
             }
         }
         if ((this._childrenLeft && this._childrenLeft.size) || ctx.executingTasks.size >= ctx.concurrency)
             return;
-        this._update({ status: 'running', message: 'Running' });
+        this._update({ status: "running", message: "Running" });
         ctx.executingTasks.add(this);
         const t = Date.now();
         const signal = this._abortController.signal;
         (async () => (this._executeFn || noOp)({
             task: this,
-            signal
+            signal,
         }))()
             .then((result) => {
             ctx.executingTasks.delete(this);
             this._executeDuration = Date.now() - t;
             this._update({
-                status: 'fulfilled',
-                message: 'Task completed',
-                result
+                status: "fulfilled",
+                message: "Task completed",
+                result,
             });
         })
-            .catch(error => {
+            .catch((error) => {
             ctx.executingTasks.delete(this);
             this._executeDuration = Date.now() - t;
-            if (error.code === 'ABORT_ERR') {
+            if (error.code === "ABORT_ERR") {
                 this._update({
-                    status: 'aborted',
+                    status: "aborted",
                     error,
-                    message: error instanceof Error ? error.message : '' + error
+                    message: error instanceof Error ? error.message : "" + error,
                 });
                 return;
             }
             this._update({
-                status: 'failed',
+                status: "failed",
                 error,
-                message: error instanceof Error ? error.message : '' + error
+                message: error instanceof Error ? error.message : "" + error,
             });
         });
     }
@@ -519,33 +530,33 @@
         const oldStarted = this.isStarted;
         if (prop.status && this._status !== prop.status) {
             this._status = prop.status;
-            keys.push('status');
+            keys.push("status");
         }
         if (prop.message && this._message !== prop.message) {
             this._message = prop.message;
-            keys.push('message');
+            keys.push("message");
         }
         if (prop.error && this._error !== prop.error) {
             this._error = prop.error;
-            keys.push('error');
+            keys.push("error");
         }
         if (prop.result && this._result !== prop.result) {
             this._result = prop.result;
-            keys.push('result');
+            keys.push("result");
         }
         if (prop.waitingFor) {
-            keys.push('waitingFor');
+            keys.push("waitingFor");
         }
         if (keys.length) {
-            if (keys.includes('status')) {
+            if (keys.includes("status")) {
                 if (!oldStarted)
-                    this.emitAsync('start', this).catch(noOp);
-                this.emitAsync('status-change', this).catch(noOp);
-                if (this._status === 'running')
-                    this.emitAsync('run', this).catch(noOp);
+                    this.emitAsync("start", this).catch(noOp);
+                this.emitAsync("status-change", this).catch(noOp);
+                if (this._status === "running")
+                    this.emitAsync("run", this).catch(noOp);
             }
-            this.emitAsync('update', this, keys).catch(noOp);
-            this.emitAsync('update-recursive', this, keys).catch(noOp);
+            this.emitAsync("update", this, keys).catch(noOp);
+            this.emitAsync("update-recursive", this, keys).catch(noOp);
             if (this.isFinished && !oldFinished) {
                 const ctx = this[taskContextKey];
                 if (this._abortTimer) {
@@ -554,8 +565,8 @@
                 }
                 delete this[taskContextKey];
                 if (this.error)
-                    this.emitAsync('error', this.error).catch(noOp);
-                this.emitAsync('finish', this).catch(noOp);
+                    this.emitAsync("error", this.error).catch(noOp);
+                this.emitAsync("finish", this).catch(noOp);
                 if (ctx)
                     ctx.triggerPulse();
             }
Index: node_modules/postgresql-client/esm/data-types/bytea-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/bytea-type.js b/node_modules/postgresql-client/esm/data-types/bytea-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/bytea-type.js	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import decodeBytea from 'postgres-bytea';
-import { DataTypeOIDs } from '../constants.js';
-export const ByteaType = {
-    name: 'bytea',
-    oid: DataTypeOIDs.bytea,
-    jsType: 'Buffer',
-    parseBinary(v) {
-        return v;
-    },
-    encodeBinary(buf, v) {
-        buf.writeBuffer(v);
-    },
-    parseText: decodeBytea,
-    isType(v) {
-        return v instanceof Buffer;
-    },
-};
-export const ArrayByteaType = {
-    ...ByteaType,
-    name: '_bytea',
-    oid: DataTypeOIDs._bytea,
-    elementsOID: DataTypeOIDs.bytea,
-};
Index: node_modules/postgresql-client/typings/data-types/date-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/date-type.d.ts b/node_modules/postgresql-client/typings/data-types/date-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/date-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const DateType: DataType;
-export declare const ArrayDateType: DataType;
Index: node_modules/postgresql-client/cjs/util/parse-array.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/parse-array.js b/node_modules/postgresql-client/cjs/util/parse-array.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/parse-array.js	
+++ /dev/null	
@@ -1,61 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.parsePostgresArray = void 0;
-function parsePostgresArray(s, opts) {
-    if (!s)
-        return;
-    const sep = (opts?.separator || ',').substring(0, 1);
-    const transform = opts?.transform;
-    const len = s.length;
-    let idx = 0;
-    const out = [];
-    const iterate = (arr) => {
-        let c;
-        let exactlyValue = false;
-        let token = '';
-        let quote = '';
-        while (idx < len) {
-            c = s.charAt(idx++);
-            if (!quote) {
-                if (!token && c === '{') {
-                    const a = [];
-                    arr.push(a);
-                    iterate(a);
-                    continue;
-                }
-                if (c === '}' || c === sep) {
-                    if (token) {
-                        if (token === 'NULL' && !exactlyValue)
-                            arr.push(null);
-                        else
-                            arr.push(transform ? transform(token) : token);
-                        exactlyValue = false;
-                    }
-                    token = '';
-                    if (c === '}')
-                        return;
-                    continue;
-                }
-            }
-            if (c === '\\') {
-                c = s.charAt(idx++);
-                token += c;
-                continue;
-            }
-            if (c === '"' || c === "'") {
-                if (quote && quote === c) {
-                    quote = '';
-                }
-                else {
-                    exactlyValue = true;
-                    quote = c;
-                }
-                continue;
-            }
-            token += c;
-        }
-    };
-    iterate(out);
-    return out.length ? out[0] : undefined;
-}
-exports.parsePostgresArray = parsePostgresArray;
Index: node_modules/ts-gems/lib/required.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/required.d.ts b/node_modules/ts-gems/lib/required.d.ts
--- a/node_modules/ts-gems/lib/required.d.ts	
+++ b/node_modules/ts-gems/lib/required.d.ts	
@@ -1,7 +1,7 @@
-import { IfNoDeepValue } from './helpers';
+import { IfNoDeepValue } from './helpers.js';
 import { Or } from './logical.js';
 import { OmitTypes } from './omit.js';
-import { IfEquals, IfNever } from './type-check';
+import { IfEquals, IfNever } from './type-check.js';
 
 /**
  * Marks given keys as required
@@ -23,23 +23,22 @@
   >]-?: IfNoDeepValue<Exclude<T[K], undefined>> extends true // Do not deep process No-Deep values
     ? Exclude<T[K], undefined>
     : // Deep process objects
-      DeepRequired<Exclude<T[K], undefined>>;
+      DeepRequired<NonNullable<T[K]>>;
 };
 
 /**
  * Make all properties in T required deeply including arrays
  */
 export type DeeperRequired<T> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]-?: Exclude< // Deep process arrays
-    T[K],
-    undefined
-  > extends (infer U)[]
+  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]-?: NonNullable<
+    T[K]
+  > extends (infer U)[] // Deep process arrays
     ? DeeperRequired<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? Exclude<T[K], undefined>
       : // Deep process objects
-        DeepRequired<Exclude<T[K], undefined>>;
+        DeepRequired<NonNullable<T[K]>>;
 };
 
 /**
@@ -87,10 +86,10 @@
     IfEquals<{ [Q in K]: T[K] }, { [Q in K]?: T[K] }>
   > extends true
     ? never
-    : K]: IfNoDeepValue<Exclude<T[K], undefined>> extends true // Do not deep process No-Deep values
+    : K]: IfNoDeepValue<NonNullable<T[K]>> extends true // Do not deep process No-Deep values
     ? T[K]
     : // Deep process objects
-      DeepPickRequired<Exclude<T[K], undefined>>;
+      DeepPickRequired<NonNullable<T[K]>>;
 };
 
 /**
@@ -104,10 +103,10 @@
     IfEquals<{ [Q in K]: T[K] }, { [Q in K]-?: T[K] }>
   > extends true
     ? never
-    : K]?: IfNoDeepValue<Exclude<T[K], undefined>> extends true // Do not deep process No-Deep values
+    : K]?: IfNoDeepValue<NonNullable<T[K]>> extends true // Do not deep process No-Deep values
     ? T[K]
     : // Deep process objects
-      DeepOmitRequired<Exclude<T[K], undefined>>;
+      DeepOmitRequired<NonNullable<T[K]>>;
 };
 
 /**
@@ -121,13 +120,13 @@
     IfEquals<{ [Q in K]: T[K] }, { [Q in K]?: T[K] }>
   > extends true
     ? never
-    : K]: Exclude<T[K], undefined> extends (infer U)[] // Deep process arrays
+    : K]: NonNullable<T[K]> extends (infer U)[] // Deep process arrays
     ? DeeperPickRequired<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K]
       : // Deep process objects
-        DeeperPickRequired<Exclude<T[K], undefined>>;
+        DeeperPickRequired<NonNullable<T[K]>>;
 };
 
 /**
@@ -141,11 +140,11 @@
     IfEquals<{ [Q in K]: T[K] }, { [Q in K]-?: T[K] }>
   > extends true
     ? never
-    : K]: Exclude<T[K], undefined> extends (infer U)[] // Deep process arrays
+    : K]: NonNullable<T[K]> extends (infer U)[] // Deep process arrays
     ? DeeperOmitRequired<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K]
       : // Deep process objects
-        DeeperOmitRequired<Exclude<T[K], undefined>>;
+        DeeperOmitRequired<NonNullable<T[K]>>;
 };
Index: node_modules/postgresql-client/typings/safe-event-emitter.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/safe-event-emitter.d.ts b/node_modules/postgresql-client/typings/safe-event-emitter.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/safe-event-emitter.d.ts	
+++ /dev/null	
@@ -1,5 +0,0 @@
-/// <reference types="node" />
-import { EventEmitter } from 'events';
-export declare class SafeEventEmitter extends EventEmitter {
-    emit(event: string | symbol, ...args: any[]): boolean;
-}
Index: node_modules/postgresql-client/typings/data-types/lseg-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/lseg-type.d.ts b/node_modules/postgresql-client/typings/data-types/lseg-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/lseg-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const LsegType: DataType;
-export declare const ArrayLsegType: DataType;
Index: node_modules/postgresql-client/typings/connection/bind-param.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/connection/bind-param.d.ts b/node_modules/postgresql-client/typings/connection/bind-param.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/connection/bind-param.d.ts	
+++ /dev/null	
@@ -1,6 +0,0 @@
-import { OID } from '../types.js';
-export declare class BindParam {
-    oid: OID;
-    value: any;
-    constructor(oid: OID, value: any);
-}
Index: node_modules/postgresql-client/esm/util/parse-array.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/parse-array.js b/node_modules/postgresql-client/esm/util/parse-array.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/parse-array.js	
+++ /dev/null	
@@ -1,57 +0,0 @@
-export function parsePostgresArray(s, opts) {
-    if (!s)
-        return;
-    const sep = (opts?.separator || ',').substring(0, 1);
-    const transform = opts?.transform;
-    const len = s.length;
-    let idx = 0;
-    const out = [];
-    const iterate = (arr) => {
-        let c;
-        let exactlyValue = false;
-        let token = '';
-        let quote = '';
-        while (idx < len) {
-            c = s.charAt(idx++);
-            if (!quote) {
-                if (!token && c === '{') {
-                    const a = [];
-                    arr.push(a);
-                    iterate(a);
-                    continue;
-                }
-                if (c === '}' || c === sep) {
-                    if (token) {
-                        if (token === 'NULL' && !exactlyValue)
-                            arr.push(null);
-                        else
-                            arr.push(transform ? transform(token) : token);
-                        exactlyValue = false;
-                    }
-                    token = '';
-                    if (c === '}')
-                        return;
-                    continue;
-                }
-            }
-            if (c === '\\') {
-                c = s.charAt(idx++);
-                token += c;
-                continue;
-            }
-            if (c === '"' || c === "'") {
-                if (quote && quote === c) {
-                    quote = '';
-                }
-                else {
-                    exactlyValue = true;
-                    quote = c;
-                }
-                continue;
-            }
-            token += c;
-        }
-    };
-    iterate(out);
-    return out.length ? out[0] : undefined;
-}
Index: node_modules/postgresql-client/typings/data-types/timestamptz-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/timestamptz-type.d.ts b/node_modules/postgresql-client/typings/data-types/timestamptz-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/timestamptz-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import { DataType } from '../interfaces/data-type.js';
-export declare const TimestamptzType: DataType;
-export declare const ArrayTimestamptzType: DataType;
Index: node_modules/postgresql-client/cjs/connection/pool.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/connection/pool.js b/node_modules/postgresql-client/cjs/connection/pool.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/connection/pool.js	
+++ /dev/null	
@@ -1,226 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Pool = void 0;
-const lightning_pool_1 = require("lightning-pool");
-const putil_varhelpers_1 = require("putil-varhelpers");
-const constants_js_1 = require("../constants.js");
-const safe_event_emitter_js_1 = require("../safe-event-emitter.js");
-const connection_config_js_1 = require("../util/connection-config.js");
-const connection_js_1 = require("./connection.js");
-const intl_connection_js_1 = require("./intl-connection.js");
-class Pool extends safe_event_emitter_js_1.SafeEventEmitter {
-    constructor(config) {
-        super();
-        this._notificationListeners = new safe_event_emitter_js_1.SafeEventEmitter();
-        const cfg = (0, connection_config_js_1.getConnectionConfig)(config);
-        this.config = Object.freeze(cfg);
-        const poolOptions = {};
-        poolOptions.acquireMaxRetries = (0, putil_varhelpers_1.coerceToInt)(cfg.acquireMaxRetries, 0);
-        poolOptions.acquireRetryWait = (0, putil_varhelpers_1.coerceToInt)(cfg.acquireRetryWait, 2000);
-        poolOptions.acquireTimeoutMillis = (0, putil_varhelpers_1.coerceToInt)(cfg.acquireTimeoutMillis, 0);
-        poolOptions.idleTimeoutMillis = (0, putil_varhelpers_1.coerceToInt)(cfg.idleTimeoutMillis, 30000);
-        poolOptions.max = (0, putil_varhelpers_1.coerceToInt)(cfg.max, 10);
-        poolOptions.maxQueue = (0, putil_varhelpers_1.coerceToInt)(cfg.maxQueue, 1000);
-        poolOptions.max = (0, putil_varhelpers_1.coerceToInt)(cfg.max, 10);
-        poolOptions.min = (0, putil_varhelpers_1.coerceToInt)(cfg.min, 0);
-        poolOptions.minIdle = (0, putil_varhelpers_1.coerceToInt)(cfg.minIdle, 0);
-        poolOptions.validation = (0, putil_varhelpers_1.coerceToBoolean)(cfg.validation, false);
-        const poolFactory = {
-            create: async () => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.create',
-                        pool: this,
-                        message: `new connection creating`,
-                    });
-                const intlCon = new intl_connection_js_1.IntlConnection(cfg);
-                await intlCon.connect();
-                intlCon.on('close', () => this._pool.destroy(intlCon));
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.create',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection created`,
-                    });
-                return intlCon;
-            },
-            destroy: intlCon => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.destroy',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection destroy`,
-                    });
-                return intlCon.close();
-            },
-            reset: async (intlCon) => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.reset',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection reset`,
-                    });
-                try {
-                    if (intlCon.state === constants_js_1.ConnectionState.READY) {
-                        await intlCon.execute('ROLLBACK;UNLISTEN *');
-                    }
-                }
-                finally {
-                    intlCon.removeAllListeners();
-                    intlCon.once('close', () => this._pool.destroy(intlCon));
-                    intlCon._refCount = 0;
-                }
-            },
-            validate: async (intlCon) => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.validate',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection validate`,
-                    });
-                if (intlCon.state !== constants_js_1.ConnectionState.READY)
-                    throw new Error('Connection is not active');
-                await intlCon.execute('select 1;');
-            },
-        };
-        this._pool = new lightning_pool_1.Pool(poolFactory, poolOptions);
-        this._pool.on('return', (...args) => this.emit('release', ...args));
-        this._pool.on('error', (...args) => this.emit('error', ...args));
-        this._pool.on('acquire', (...args) => this.emit('acquire', ...args));
-        this._pool.on('destroy', (...args) => this.emit('destroy', ...args));
-        this._pool.start();
-    }
-    /**
-     * Returns number of connections that are currently acquired
-     */
-    get acquiredConnections() {
-        return this._pool.acquired;
-    }
-    /**
-     * Returns number of unused connections in the pool
-     */
-    get idleConnections() {
-        return this._pool.available;
-    }
-    /**
-     * Returns total number of connections in the pool regardless of whether they are idle or in use
-     */
-    get totalConnections() {
-        return this._pool.size;
-    }
-    /**
-     * Obtains a connection from the connection pool
-     */
-    async acquire() {
-        const intlCon = await this._pool.acquire();
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Pool.acquire',
-                pool: this,
-                message: `[${intlCon.processID}] acquired`,
-            });
-        const connection = new connection_js_1.Connection(this, intlCon);
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            connection.on('debug', (...args) => this.emit('debug', ...args));
-        return connection;
-    }
-    /**
-     * Shuts down the pool and destroys all resources.
-     */
-    async close(terminateWait) {
-        this._notificationListeners.removeAllListeners();
-        await this._notificationConnection?.close(terminateWait);
-        const ms = terminateWait == null ? 10000 : terminateWait;
-        return this._pool.closeAsync(ms);
-    }
-    /**
-     * Executes a script
-     */
-    async execute(sql, options) {
-        const connection = await this.acquire();
-        try {
-            return await connection.execute(sql, options);
-        }
-        finally {
-            await this.release(connection);
-        }
-    }
-    /**
-     * Executes a query
-     */
-    async query(sql, options) {
-        const connection = await this.acquire();
-        try {
-            return await connection.query(sql, options);
-        }
-        finally {
-            await this.release(connection);
-        }
-    }
-    async prepare(sql, options) {
-        const connection = await this.acquire();
-        const statement = await connection.prepare(sql, options);
-        statement.once('close', () => this._pool.release((0, intl_connection_js_1.getIntlConnection)(connection)));
-        return statement;
-    }
-    release(connection) {
-        return this._pool.releaseAsync((0, intl_connection_js_1.getIntlConnection)(connection));
-    }
-    async listen(channel, callback) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        this._notificationListeners.on(channel, callback);
-        await this._initNotificationConnection();
-    }
-    async unListen(channel) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        this._notificationListeners.removeAllListeners(channel);
-        if (!this._notificationListeners.eventNames().length) {
-            await this.unListenAll();
-        }
-        else if (this._notificationConnection)
-            await this._notificationConnection.unListen(channel);
-    }
-    async unListenAll() {
-        this._notificationListeners.removeAllListeners();
-        if (this._notificationConnection) {
-            const conn = this._notificationConnection;
-            this._notificationConnection = undefined;
-            await conn.close();
-        }
-    }
-    async _initNotificationConnection() {
-        if (this._notificationConnection)
-            return;
-        const conn = (this._notificationConnection = new connection_js_1.Connection(this.config));
-        // Reconnect on connection lost
-        conn.on('close', () => reConnect());
-        const registerEvents = async () => {
-            const channels = this._notificationListeners.eventNames();
-            for (const channel of channels) {
-                const fns = this._notificationListeners.listeners(channel);
-                for (const fn of fns) {
-                    await conn.listen(channel, fn);
-                }
-            }
-        };
-        const reConnect = async () => {
-            setTimeout(() => {
-                if (!this._notificationListeners.eventNames().length)
-                    return;
-                conn.connect().catch(() => reConnect());
-            }, 500).unref();
-        };
-        await conn.connect();
-        await registerEvents();
-    }
-}
-exports.Pool = Pool;
Index: node_modules/postgresql-client/cjs/util/fast-parseint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/fast-parseint.js b/node_modules/postgresql-client/cjs/util/fast-parseint.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/fast-parseint.js	
+++ /dev/null	
@@ -1,32 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.fastParseInt = void 0;
-function fastParseInt(str) {
-    /* istanbul ignore next */
-    if (typeof str === 'number')
-        return Math.floor(str);
-    // noinspection SuspiciousTypeOfGuard
-    if (typeof str !== 'string')
-        return NaN;
-    const strLength = str.length;
-    let res = 0;
-    let i = 0;
-    let neg = false;
-    if (str.startsWith('-')) {
-        neg = true;
-        i++;
-    }
-    do {
-        const charCode = str.charCodeAt(i);
-        /* istanbul ignore next */
-        if (charCode === 46)
-            return res;
-        /* istanbul ignore next */
-        if (charCode < 48 || charCode > 57)
-            return NaN;
-        res *= 10;
-        res += charCode - 48;
-    } while (++i < strLength);
-    return neg ? -res : res;
-}
-exports.fastParseInt = fastParseInt;
Index: node_modules/semver/functions/rcompare.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/rcompare.js b/node_modules/semver/functions/rcompare.js
--- a/node_modules/semver/functions/rcompare.js	
+++ b/node_modules/semver/functions/rcompare.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const rcompare = (a, b, loose) => compare(b, a, loose)
 module.exports = rcompare
Index: node_modules/ts-gems/lib/readonly.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/readonly.d.ts b/node_modules/ts-gems/lib/readonly.d.ts
--- a/node_modules/ts-gems/lib/readonly.d.ts	
+++ b/node_modules/ts-gems/lib/readonly.d.ts	
@@ -1,6 +1,6 @@
-import { IfNoDeepValue } from './helpers';
+import { IfNoDeepValue } from './helpers.js';
 import { Or } from './logical.js';
-import { IfEquals, IfNever } from './type-check';
+import { IfEquals, IfNever } from './type-check.js';
 
 /**
  * Marks given keys as readonly
@@ -30,7 +30,7 @@
     Exclude<T[K], undefined>,
     never,
     K
-  >]: Exclude<T[K], undefined> extends (infer U)[] // Deep process arrays
+  >]: NonNullable<T[K]> extends (infer U)[] // Deep process arrays
     ? DeeperReadonly<U>[]
     : // Do not deep process No-Deep values
       IfNoDeepValue<Exclude<T[K], undefined>> extends true
@@ -83,10 +83,10 @@
     IfEquals<{ [Q in K]: T[K] }, { readonly [Q in K]: T[K] }, false, true>
   > extends true
     ? never
-    : K]: IfNoDeepValue<Exclude<T[K], undefined>> extends true // Do not deep process No-Deep values
+    : K]: IfNoDeepValue<NonNullable<T[K]>> extends true // Do not deep process No-Deep values
     ? T[K]
     : // Deep process objects
-      DeepPickReadonly<Exclude<T[K], undefined>>;
+      DeepPickReadonly<NonNullable<T[K]>>;
 };
 
 /**
@@ -95,15 +95,15 @@
 export type DeepOmitReadonly<T> = {
   [K in keyof T as Or<
     // Omit never keys
-    IfNever<Exclude<T[K], undefined>>,
+    IfNever<NonNullable<T[K]>>,
     // Omit required
     IfEquals<{ [Q in K]: T[K] }, { readonly [Q in K]: T[K] }>
   > extends true
     ? never
-    : K]: IfNoDeepValue<Exclude<T[K], undefined>> extends true // Do not deep process No-Deep values
+    : K]: IfNoDeepValue<NonNullable<T[K]>> extends true // Do not deep process No-Deep values
     ? T[K]
     : // Deep process objects
-      DeepOmitReadonly<Exclude<T[K], undefined>>;
+      DeepOmitReadonly<NonNullable<T[K]>>;
 };
 
 /**
@@ -117,13 +117,13 @@
     IfEquals<{ [Q in K]: T[K] }, { readonly [Q in K]: T[K] }, false, true>
   > extends true
     ? never
-    : K]: Exclude<T[K], undefined> extends (infer U)[] // Deep process arrays
+    : K]: NonNullable<T[K]> extends (infer U)[] // Deep process arrays
     ? DeeperPickReadonly<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K]
       : // Deep process objects
-        DeeperPickReadonly<Exclude<T[K], undefined>>;
+        DeeperPickReadonly<NonNullable<T[K]>>;
 };
 
 /**
@@ -137,11 +137,11 @@
     IfEquals<{ [Q in K]: T[K] }, { readonly [Q in K]: T[K] }>
   > extends true
     ? never
-    : K]: Exclude<T[K], undefined> extends (infer U)[] // Deep process arrays
+    : K]: NonNullable<T[K]> extends (infer U)[] // Deep process arrays
     ? DeeperOmitReadonly<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K]
       : // Deep process objects
-        DeeperOmitReadonly<Exclude<T[K], undefined>>;
+        DeeperOmitReadonly<NonNullable<T[K]>>;
 };
Index: node_modules/pg-protocol/dist/parser.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/parser.js.map b/node_modules/pg-protocol/dist/parser.js.map
--- a/node_modules/pg-protocol/dist/parser.js.map	
+++ b/node_modules/pg-protocol/dist/parser.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"parser.js","sourceRoot":"","sources":["../src/parser.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"parser.js","sourceRoot":"","sources":["../src/parser.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
Index: node_modules/postgresql-client/typings/constants.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/constants.d.ts b/node_modules/postgresql-client/typings/constants.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/constants.d.ts	
+++ /dev/null	
@@ -1,130 +0,0 @@
-import { Protocol } from './protocol/protocol.js';
-import DataFormat = Protocol.DataFormat;
-export { DataFormat };
-export declare const DEFAULT_COLUMN_FORMAT = DataFormat.binary;
-export declare enum ConnectionState {
-    CLOSED = 0,
-    CONNECTING = 1,
-    AUTHORIZING = 3,
-    READY = 2,
-    CLOSING = 10
-}
-export declare const DataTypeOIDs: {
-    bool: number;
-    bytea: number;
-    char: number;
-    name: number;
-    int8: number;
-    int2: number;
-    int2vector: number;
-    int4: number;
-    regproc: number;
-    text: number;
-    oid: number;
-    tid: number;
-    xid: number;
-    cid: number;
-    oidvector: number;
-    json: number;
-    xml: number;
-    point: number;
-    lseg: number;
-    path: number;
-    box: number;
-    polygon: number;
-    line: number;
-    cidr: number;
-    float4: number;
-    float8: number;
-    unknown: number;
-    circle: number;
-    macaddr8: number;
-    money: number;
-    macaddr: number;
-    inet: number;
-    bpchar: number;
-    varchar: number;
-    date: number;
-    time: number;
-    timestamp: number;
-    timestamptz: number;
-    interval: number;
-    timetz: number;
-    bit: number;
-    varbit: number;
-    numeric: number;
-    refcursor: number;
-    regprocedure: number;
-    regoper: number;
-    regoperator: number;
-    regclass: number;
-    regtype: number;
-    record: number;
-    cstring: number;
-    any: number;
-    anyarray: number;
-    void: number;
-    trigger: number;
-    language_handler: number;
-    internal: number;
-    anyelement: number;
-    anynonarray: number;
-    uuid: number;
-    jsonb: number;
-    anyrange: number;
-    int4range: number;
-    numrange: number;
-    tsrange: number;
-    rstzrange: number;
-    daterange: number;
-    int8range: number;
-    _xml: number;
-    _json: number;
-    _xid8: number;
-    _line: number;
-    _cidr: number;
-    _circle: number;
-    _macaddr8: number;
-    _money: number;
-    _bool: number;
-    _bytea: number;
-    _char: number;
-    _name: number;
-    _int2: number;
-    _int2vector: number;
-    _int4: number;
-    _regproc: number;
-    _text: number;
-    _tid: number;
-    _xid: number;
-    _cid: number;
-    _oidvector: number;
-    _bpchar: number;
-    _varchar: number;
-    _int8: number;
-    _point: number;
-    _lseg: number;
-    _path: number;
-    _box: number;
-    _float4: number;
-    _float8: number;
-    _polygon: number;
-    _oid: number;
-    _macaddr: number;
-    _inet: number;
-    _timestamp: number;
-    _date: number;
-    _time: number;
-    _timestamptz: number;
-    _interval: number;
-    _numeric: number;
-    _cstring: number;
-    _timetz: number;
-    _bit: number;
-    _varbit: number;
-    _uuid: number;
-    _jsonb: number;
-};
-export declare const DataTypeNames: {
-    [x: number]: string;
-};
Index: node_modules/postgresql-client/typings/connection/cursor.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/connection/cursor.d.ts b/node_modules/postgresql-client/typings/connection/cursor.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/connection/cursor.d.ts	
+++ /dev/null	
@@ -1,25 +0,0 @@
-/// <reference types="node" />
-import { FieldInfo } from '../interfaces/field-info.js';
-import { QueryOptions } from '../interfaces/query-options.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { AnyParseFunction, Maybe, Row } from '../types.js';
-import { Portal } from './portal.js';
-import { PreparedStatement } from './prepared-statement.js';
-export declare class Cursor extends SafeEventEmitter implements AsyncDisposable {
-    private readonly _statement;
-    private readonly _portal;
-    private readonly _parsers;
-    private readonly _queryOptions;
-    private _taskQueue;
-    private _rows;
-    private _closed;
-    readonly fields: FieldInfo[];
-    constructor(statement: PreparedStatement, portal: Portal, fields: FieldInfo[], parsers: AnyParseFunction[], queryOptions: QueryOptions);
-    get rowType(): 'array' | 'object';
-    get isClosed(): boolean;
-    next(): Promise<Maybe<Row>>;
-    fetch(nRows: number): Promise<Row[]>;
-    close(): Promise<void>;
-    private _fetchRows;
-    [Symbol.asyncDispose](): Promise<void>;
-}
Index: node_modules/has-proto/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/index.js b/node_modules/has-proto/index.js
deleted file mode 100644
--- a/node_modules/has-proto/index.js	
+++ /dev/null	
@@ -1,15 +0,0 @@
-'use strict';
-
-var test = {
-	__proto__: null,
-	foo: {}
-};
-
-var $Object = Object;
-
-/** @type {import('.')} */
-module.exports = function hasProto() {
-	// @ts-expect-error: TS errors on an inherited property for some reason
-	return { __proto__: test }.foo === test.foo
-		&& !(test instanceof $Object);
-};
Index: controllers/authController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/authController.js b/controllers/authController.js
--- a/controllers/authController.js	
+++ b/controllers/authController.js	
@@ -1,9 +1,11 @@
 const { response } = require('express')
-const createUserTable = require('../models/User')
+const users = require('../models/User')
 const createRoomsTable = require('../models/Rooms')
 const { StatusCodes } = require('http-status-codes')
 const { dbPool, sql } = require('../db/connectDb')
 var bcrypt = require('bcryptjs')
+const  {sqlPool} = require('../db/connectDb')
+const Auth = require ('../queries/Auth')
 
 // const register = async (req, resp) => {
 //   const { email, password, name } = req.body
@@ -17,96 +19,103 @@
   // let hashedPassword
   // await createUserTable();
   // await createRoomsTable()
-  const { email, password, name } = req.body
+  const {email, password, name} = req.body
 
-  console.log('user Data', email, password, name)
-  const emailData = await sql` SELECT * FROM  users WHERE  email =${email}`
-  console.log(emailData.length)
-  if (emailData.length > 0) {
-    console.log(emailData, 'from Data')
-    return resp.status(StatusCodes.BAD_REQUEST).json(`Email Already  Exist`)
-  }
-  if (!email || !password) {
-    return resp
-      .status(StatusCodes.BAD_REQUEST)
-      .json(`Enter Email and Password!`)
-  }
-  if (password.length <= 5) {
-    console.log(password.length)
-    return resp
-      .status(StatusCodes.BAD_REQUEST)
-      .json(`password length must be at least 6 characters`)
-  } else {
-    //hash  password and  store  in Database
-    bcrypt.genSalt(10, async function (err, salt) {
-      const hashedPassword = bcrypt.hashSync(password, salt)
-      // console.log('hashed Password', hashedPassword)
+  try {
+
+          const emailData = await Auth.isEmailExist(email)
+
+    if (emailData.data.length > 0) {
+
+      return resp.status(StatusCodes.BAD_REQUEST).json( {error: emailData.error, message: 'email already exist!' })
+    }
+    if(!emailData.length >0 ) {
+
+      if (!email || !password) {
+                return resp
+            .status(StatusCodes.BAD_REQUEST)
+            .json(`Enter Email and Password!`)
+      }
+      if (password.length <= 5) {
+        console.log(password.length)
+        return resp
+            .status(StatusCodes.BAD_REQUEST)
+            .json(`password length must be at least 6 characters`)
+      }
+      const hashedPassword = await bcrypt.hash(password, 10);
+      const newUser = await Auth.createUser(name,email, hashedPassword)
 
-      try {
-        const users = await sql`
-      INSERT INTO users (name, email, password)
-      VALUES (${name}, ${email}, ${hashedPassword})
-      RETURNING name, email, password
-      `
+      if(newUser.error) {
+        return resp.status(StatusCodes.BAD_REQUEST).json(`${newUser.data, newUser.message, newUser.error}` )
+      }
+      if(newUser.data) {
+        console.log(newUser.data)
+        return  resp.status(StatusCodes.CREATED).json({message:'success', data: newUser.data})
 
-        console.log('from users Data', users)
+      }
 
-        return resp
-          .status(StatusCodes.OK)
-          .json(`User added with ID: ${users.columns[1]}`)
-      } catch (error) {
-        console.error(error)
-        return resp
-          .status(StatusCodes.BAD_REQUEST)
-          .json({ error: error.message })
-      }
-    })
+      return resp
+            .status(StatusCodes.OK)
+            .json(`User added with ID: ${newUser.data, newUser.error, newUser.message}`)
+
+    }
+
+
+
+  }catch (e) {
+    console.log('an error occurredaa',e)
+      return resp.status(StatusCodes.BAD_REQUEST)
+        .json({error:e.message, error:'error'})
   }
+
+
 }
+
 //TODO: VERIFY Password  for  login with  email and  password
-const login = async (req, resp) => {
-  const { email, password } = req.body
-  console.log(email, password)
-  if (!email || !password) {
-    resp
-      .status(StatusCodes.BAD_REQUEST)
-      .json({ message: 'please enter email and  password' })
-  }
+  const login = async (req, resp) => {
+    const {email, password} = req.body
+    console.log(email, password)
+    if (!email || !password) {
+      resp
+          .status(StatusCodes.BAD_REQUEST)
+          .json({message: 'please enter email and  password'})
+    }
 
-  const user = await sql` SELECT * FROM  users  WHERE  email = ${email}`
+    const user = await sqlPool.query(` SELECT * FROM  users  WHERE  email = ${email}`)
 
-  if (user.length < 1) {
-    return resp
-      .status(StatusCodes.BAD_REQUEST)
-      .json({ Error: 'user not found!' })
-  } else {
-    user.forEach(async data => {
-      const passwordHashed = await data.password
+    if (user.length < 1) {
+      return resp
+          .status(StatusCodes.BAD_REQUEST)
+          .json({Error: 'user not found!'})
+    } else {
+      user.forEach(async data => {
+        const passwordHashed = await data.password
 
-      const isMatched = await comparePassword(password, passwordHashed)
+        const isMatched = await comparePassword(password, passwordHashed)
 
-      if (isMatched === false) {
-        return resp
-          .status(StatusCodes.BAD_REQUEST)
-          .json({ message: 'password not matched' })
-      } else {
-        return resp.status(StatusCodes.OK).json({ Success: 'login success!' })
-      }
-    })
-  }
-}
+        if (isMatched === false) {
+          return resp
+              .status(StatusCodes.BAD_REQUEST)
+              .json({message: 'password not matched'})
+        } else {
+          return resp.status(StatusCodes.OK).json({Success: 'login success!'})
+        }
+      })
+    }
+  }
 
-const comparePassword = async (password, hashedPassword) => {
-  let isMatched
-  await bcrypt.compare(password, hashedPassword).then(res => {
-    if (res === false) {
-      return (isMatched = false)
-    }
-    return (isMatched = true)
-  })
-  return isMatched
-}
+  const comparePassword = async (password, hashedPassword) => {
+    let isMatched
+    await bcrypt.compare(password, hashedPassword).then(res => {
+      if (res === false) {
+        return (isMatched = false)
+      }
+      return (isMatched = true)
+    })
+    return isMatched
+  }
 
+
 module.exports = {
   register,
   login,
Index: node_modules/postgresql-client/cjs/connection/portal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/connection/portal.js b/node_modules/postgresql-client/cjs/connection/portal.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/connection/portal.js	
+++ /dev/null	
@@ -1,148 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Portal = void 0;
-const constants_js_1 = require("../constants.js");
-const data_type_map_js_1 = require("../data-type-map.js");
-const protocol_js_1 = require("../protocol/protocol.js");
-const intl_connection_js_1 = require("./intl-connection.js");
-class Portal {
-    constructor(statement, name) {
-        this._columnFormat = constants_js_1.DEFAULT_COLUMN_FORMAT;
-        this._statement = statement;
-        this._name = name;
-    }
-    get connection() {
-        return this._statement.connection;
-    }
-    get name() {
-        return this._name;
-    }
-    async bind(params, queryOptions) {
-        const intoCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            this._columnFormat = queryOptions.columnFormat != null ? queryOptions.columnFormat : protocol_js_1.Protocol.DataFormat.binary;
-            socket.sendBindMessage({
-                typeMap: queryOptions.typeMap || data_type_map_js_1.GlobalTypeMap,
-                statement: this._statement.name,
-                portal: this.name,
-                paramTypes: this._statement.paramTypes,
-                params,
-                queryOptions,
-            });
-            socket.sendFlushMessage();
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case protocol_js_1.Protocol.BackendMessageCode.BindComplete:
-                        done();
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-    async retrieveFields() {
-        const intoCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendDescribeMessage({ type: 'P', name: this.name });
-            socket.sendFlushMessage();
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case protocol_js_1.Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.NoData:
-                        done();
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.RowDescription:
-                        done(undefined, msg.fields);
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-    async execute(fetchCount) {
-        const intoCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendExecuteMessage({ portal: this.name, fetchCount: fetchCount || 100 });
-            socket.sendFlushMessage();
-            const rows = [];
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case protocol_js_1.Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.NoData:
-                        done(undefined, { code });
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.DataRow:
-                        if (Array.isArray(this._columnFormat)) {
-                            rows.push(msg.columns.map((buf, i) => this._columnFormat[i] === protocol_js_1.Protocol.DataFormat.text ? buf.toString('utf8') : buf));
-                        }
-                        else if (this._columnFormat === protocol_js_1.Protocol.DataFormat.binary)
-                            rows.push(msg.columns);
-                        else
-                            rows.push(msg.columns.map((buf) => buf.toString('utf8')));
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.PortalSuspended:
-                        done(undefined, { code, rows });
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.CommandComplete:
-                        done(undefined, {
-                            code,
-                            rows,
-                            command: msg.command,
-                            rowCount: msg.rowCount,
-                        });
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-    async close() {
-        const intoCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendCloseMessage({ type: 'P', name: this.name });
-            socket.sendSyncMessage();
-            return await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case protocol_js_1.Protocol.BackendMessageCode.NoticeResponse:
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.CloseComplete:
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.ReadyForQuery:
-                        intoCon.transactionStatus = msg.status;
-                        done();
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (${String.fromCharCode(code)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-    }
-}
-exports.Portal = Portal;
Index: node_modules/pg-protocol/src/serializer.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/serializer.ts b/node_modules/pg-protocol/src/serializer.ts
--- a/node_modules/pg-protocol/src/serializer.ts	
+++ b/node_modules/pg-protocol/src/serializer.ts	
@@ -27,10 +27,10 @@
 
   writer.addCString('client_encoding').addCString('UTF8')
 
-  var bodyBuffer = writer.addCString('').flush()
+  const bodyBuffer = writer.addCString('').flush()
   // this message is sent without a code
 
-  var length = bodyBuffer.length + 4
+  const length = bodyBuffer.length + 4
 
   return new Writer().addInt32(length).add(bodyBuffer).flush()
 }
@@ -78,23 +78,21 @@
   // normalize missing query names to allow for null
   const name = query.name || ''
   if (name.length > 63) {
-    /* eslint-disable no-console */
     console.error('Warning! Postgres only supports 63 characters for query names.')
     console.error('You supplied %s (%s)', name, name.length)
     console.error('This can cause conflicts and silent errors executing queries')
-    /* eslint-enable no-console */
   }
 
   const types = query.types || emptyArray
 
-  var len = types.length
+  const len = types.length
 
-  var buffer = writer
+  const buffer = writer
     .addCString(name) // name of query
     .addCString(query.text) // actual query text
     .addInt16(len)
 
-  for (var i = 0; i < len; i++) {
+  for (let i = 0; i < len; i++) {
     buffer.addInt32(types[i])
   }
 
@@ -159,6 +157,8 @@
   writer.addInt16(len)
   writer.add(paramWriter.flush())
 
+  // all results use the same format code
+  writer.addInt16(1)
   // format code
   writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)
   return writer.flush(code.bind)
Index: node_modules/postgresql-client/typings/data-types/float8-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/float8-type.d.ts b/node_modules/postgresql-client/typings/data-types/float8-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/float8-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const Float8Type: DataType;
-export declare const ArrayFloat8Type: DataType;
Index: node_modules/lightning-pool/cjs/definitions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/cjs/definitions.js b/node_modules/lightning-pool/cjs/definitions.js
deleted file mode 100644
--- a/node_modules/lightning-pool/cjs/definitions.js	
+++ /dev/null	
@@ -1,16 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ResourceState = exports.PoolState = void 0;
-var PoolState;
-(function (PoolState) {
-    PoolState[PoolState["IDLE"] = 0] = "IDLE";
-    PoolState[PoolState["STARTED"] = 1] = "STARTED";
-    PoolState[PoolState["CLOSING"] = 2] = "CLOSING";
-    PoolState[PoolState["CLOSED"] = 3] = "CLOSED";
-})(PoolState || (exports.PoolState = PoolState = {}));
-var ResourceState;
-(function (ResourceState) {
-    ResourceState[ResourceState["IDLE"] = 0] = "IDLE";
-    ResourceState[ResourceState["ACQUIRED"] = 1] = "ACQUIRED";
-    ResourceState[ResourceState["VALIDATION"] = 2] = "VALIDATION";
-})(ResourceState || (exports.ResourceState = ResourceState = {}));
Index: node_modules/ts-gems/lib/index.mjs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/index.mjs b/node_modules/ts-gems/lib/index.mjs
--- a/node_modules/ts-gems/lib/index.mjs	
+++ b/node_modules/ts-gems/lib/index.mjs	
@@ -1,16 +1,16 @@
 const noOp = x => x;
 
 export {
-  noOp as asMutable,
-  noOp as asDeepMutable,
   noOp as asDeeperMutable,
-  noOp as asReadonly,
-  noOp as asDeepReadonly,
+  noOp as asDeeperPartial,
   noOp as asDeeperReadonly,
-  noOp as asPartial,
+  noOp as asDeeperRequired,
+  noOp as asDeepMutable,
   noOp as asDeepPartial,
-  noOp as asDeeperPartial,
-  noOp as asRequired,
+  noOp as asDeepReadonly,
   noOp as asDeepRequired,
-  noOp as asDeeperRequired,
+  noOp as asMutable,
+  noOp as asPartial,
+  noOp as asReadonly,
+  noOp as asRequired,
 };
Index: node_modules/ts-gems/lib/helpers.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/helpers.d.ts b/node_modules/ts-gems/lib/helpers.d.ts
--- a/node_modules/ts-gems/lib/helpers.d.ts	
+++ b/node_modules/ts-gems/lib/helpers.d.ts	
@@ -1,5 +1,5 @@
-import { IfAny, IfClass, IfTuple } from './type-check';
-import { Builtin } from './types';
+import { IfAny, IfClass, IfTuple } from './type-check.js';
+import { Builtin } from './types.js';
 
 /**
  * Returns true if T is excluded from deep operations
Index: node_modules/postgresql-client/typings/util/config-from-env.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/config-from-env.d.ts b/node_modules/postgresql-client/typings/util/config-from-env.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/config-from-env.d.ts	
+++ /dev/null	
@@ -1,2 +0,0 @@
-import { ConnectionConfiguration } from '../interfaces/database-connection-params.js';
-export declare function configFromEnv(): ConnectionConfiguration;
Index: node_modules/pg-pool/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/index.js b/node_modules/pg-pool/index.js
--- a/node_modules/pg-pool/index.js	
+++ b/node_modules/pg-pool/index.js	
@@ -87,6 +87,7 @@
     }
 
     this.options.max = this.options.max || this.options.poolSize || 10
+    this.options.min = this.options.min || 0
     this.options.maxUses = this.options.maxUses || Infinity
     this.options.allowExitOnIdle = this.options.allowExitOnIdle || false
     this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0
@@ -111,6 +112,10 @@
     return this._clients.length >= this.options.max
   }
 
+  _isAboveMin() {
+    return this._clients.length > this.options.min
+  }
+
   _pulseQueue() {
     this.log('pulse queue')
     if (this.ended) {
@@ -156,7 +161,7 @@
     throw new Error('unexpected condition')
   }
 
-  _remove(client) {
+  _remove(client, callback) {
     const removed = removeWhere(this._idle, (item) => item.client === client)
 
     if (removed !== undefined) {
@@ -164,8 +169,14 @@
     }
 
     this._clients = this._clients.filter((c) => c !== client)
-    client.end()
-    this.emit('remove', client)
+    const context = this
+    client.end(() => {
+      context.emit('remove', client)
+
+      if (typeof callback === 'function') {
+        callback()
+      }
+    })
   }
 
   connect(cb) {
@@ -205,6 +216,10 @@
         response.callback(new Error('timeout exceeded when trying to connect'))
       }, this.options.connectionTimeoutMillis)
 
+      if (tid.unref) {
+        tid.unref()
+      }
+
       this._pendingQueue.push(pendingItem)
       return result
     }
@@ -244,7 +259,7 @@
         // remove the dead client from our list of clients
         this._clients = this._clients.filter((c) => c !== client)
         if (timeoutHit) {
-          err.message = 'Connection terminated due to connection timeout'
+          err = new Error('Connection terminated due to connection timeout', { cause: err })
         }
 
         // this client won’t be released, so move on immediately
@@ -342,26 +357,23 @@
       if (client._poolUseCount >= this.options.maxUses) {
         this.log('remove expended client')
       }
-      this._remove(client)
-      this._pulseQueue()
-      return
+
+      return this._remove(client, this._pulseQueue.bind(this))
     }
 
     const isExpired = this._expired.has(client)
     if (isExpired) {
       this.log('remove expired client')
       this._expired.delete(client)
-      this._remove(client)
-      this._pulseQueue()
-      return
+      return this._remove(client, this._pulseQueue.bind(this))
     }
 
     // idle timeout
     let tid
-    if (this.options.idleTimeoutMillis) {
+    if (this.options.idleTimeoutMillis && this._isAboveMin()) {
       tid = setTimeout(() => {
         this.log('remove idle client')
-        this._remove(client)
+        this._remove(client, this._pulseQueue.bind(this))
       }, this.options.idleTimeoutMillis)
 
       if (this.options.allowExitOnIdle) {
Index: node_modules/postgresql-client/typings/interfaces/data-mapping-options.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/data-mapping-options.d.ts b/node_modules/postgresql-client/typings/interfaces/data-mapping-options.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/data-mapping-options.d.ts	
+++ /dev/null	
@@ -1,9 +0,0 @@
-import type { OID } from '../types.js';
-export interface DataMappingOptions {
-    /**
-     * If true UTC time will be used for date decoding, else system time offset will be used
-     * @default false
-     */
-    utcDates?: boolean;
-    fetchAsString?: OID[];
-}
Index: node_modules/postgresql-client/cjs/connection/connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/connection/connection.js b/node_modules/postgresql-client/cjs/connection/connection.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/connection/connection.js	
+++ /dev/null	
@@ -1,279 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Connection = void 0;
-const constants_js_1 = require("../constants.js");
-const data_type_map_js_1 = require("../data-type-map.js");
-const safe_event_emitter_js_1 = require("../safe-event-emitter.js");
-const bind_param_js_1 = require("./bind-param.js");
-const intl_connection_js_1 = require("./intl-connection.js");
-const prepared_statement_js_1 = require("./prepared-statement.js");
-class Connection extends safe_event_emitter_js_1.SafeEventEmitter {
-    constructor(arg0, arg1) {
-        super();
-        this._notificationListeners = new safe_event_emitter_js_1.SafeEventEmitter();
-        this._closing = false;
-        if (arg0 && typeof arg0 === 'object' && typeof arg0.acquire === 'function') {
-            if (!(arg1 instanceof intl_connection_js_1.IntlConnection))
-                throw new TypeError('Invalid argument');
-            this._pool = arg0;
-            this._intlCon = arg1;
-        }
-        else {
-            this._intlCon = new intl_connection_js_1.IntlConnection(arg0);
-        }
-        this._intlCon.on('ready', (...args) => this.emit('ready', ...args));
-        this._intlCon.on('error', (...args) => this.emit('error', ...args));
-        this._intlCon.on('close', (...args) => this.emit('close', ...args));
-        this._intlCon.on('connecting', (...args) => this.emit('connecting', ...args));
-        this._intlCon.on('ready', (...args) => this.emit('ready', ...args));
-        this._intlCon.on('terminate', (...args) => this.emit('terminate', ...args));
-        this._intlCon.on('notification', (msg) => this._handleNotification(msg));
-    }
-    /**
-     * Returns configuration object
-     */
-    get config() {
-        return this._intlCon.config;
-    }
-    /**
-     * Returns true if connection is in a transaction
-     */
-    get inTransaction() {
-        return this._intlCon.inTransaction;
-    }
-    /**
-     * Returns current state of the connection
-     */
-    get state() {
-        return this._intlCon.state;
-    }
-    /**
-     * Returns processId of current session
-     */
-    get processID() {
-        return this._intlCon.processID;
-    }
-    /**
-     * Returns information parameters for current session
-     */
-    get sessionParameters() {
-        return this._intlCon.sessionParameters;
-    }
-    /**
-     * Returns secret key of current session
-     */
-    get secretKey() {
-        return this._intlCon.secretKey;
-    }
-    /**
-     * Connects to the server
-     */
-    async connect() {
-        await this._captureErrorStack(this._intlCon.connect());
-        if (this.state === constants_js_1.ConnectionState.READY)
-            this._closing = false;
-    }
-    /**
-     * Closes connection. You can define how long time the connection will
-     * wait for active queries before terminating the connection.
-     * On the end of the given time, it forces to close the socket and than emits `terminate` event.
-     *
-     * @param terminateWait {number} - Determines how long the connection will wait for active queries before terminating.
-     */
-    async close(terminateWait) {
-        this._notificationListeners.removeAllListeners();
-        this._intlCon.statementQueue.clearQueue();
-        if (this.state === constants_js_1.ConnectionState.CLOSED || this._closing)
-            return;
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Connection.close',
-                connection: this,
-                message: `[${this.processID}] closing`,
-            });
-        this._closing = true;
-        if (this._intlCon.refCount > 0 && typeof terminateWait === 'number' && terminateWait > 0) {
-            const startTime = Date.now();
-            return this._captureErrorStack(new Promise((resolve, reject) => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Connection.close',
-                        connection: this,
-                        message: `[${this.processID}] waiting active queries`,
-                    });
-                const timer = setInterval(() => {
-                    if (this._intlCon.refCount <= 0 || Date.now() > startTime + terminateWait) {
-                        clearInterval(timer);
-                        if (this._intlCon.refCount > 0) {
-                            /* istanbul ignore next */
-                            if (this.listenerCount('debug'))
-                                this.emit('debug', {
-                                    location: 'Connection.close',
-                                    connection: this,
-                                    message: `[${this.processID}] terminate`,
-                                });
-                            this.emit('terminate');
-                        }
-                        this._close().then(resolve).catch(reject);
-                    }
-                }, 50);
-            }));
-        }
-        await this._close();
-    }
-    /**
-     * Executes single or multiple SQL scripts using Simple Query protocol.
-     *
-     * @param sql {string} - SQL script that will be executed
-     * @param options {ScriptExecuteOptions} - Execute options
-     */
-    async execute(sql, options) {
-        return this._captureErrorStack(this._intlCon.execute(sql, options)).catch((e) => {
-            throw this._handleError(e, sql);
-        });
-    }
-    async query(sql, options) {
-        this._intlCon.assertConnected();
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Connection.query',
-                connection: this,
-                message: `[${this.processID}] query | ${sql}`,
-                sql,
-            });
-        const typeMap = options?.typeMap || data_type_map_js_1.GlobalTypeMap;
-        const paramTypes = options?.params?.map(prm => prm instanceof bind_param_js_1.BindParam ? prm.oid : typeMap.determine(prm));
-        const statement = await this.prepare(sql, { paramTypes, typeMap }).catch((e) => {
-            throw this._handleError(e, sql);
-        });
-        try {
-            const params = options?.params?.map(prm => (prm instanceof bind_param_js_1.BindParam ? prm.value : prm));
-            return await this._captureErrorStack(statement.execute({ ...options, params }));
-        }
-        finally {
-            await statement.close();
-        }
-    }
-    /**
-     * Creates a PreparedStatement instance
-     * @param sql {string} - SQL script that will be executed
-     * @param options {StatementPrepareOptions} - Options
-     */
-    async prepare(sql, options) {
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Connection.prepare',
-                connection: this,
-                message: `[${this.processID}] prepare | ${sql}`,
-                sql,
-            });
-        return await this._captureErrorStack(prepared_statement_js_1.PreparedStatement.prepare(this, sql, options));
-    }
-    /**
-     * Starts a transaction
-     */
-    startTransaction() {
-        return this._captureErrorStack(this._intlCon.startTransaction());
-    }
-    /**
-     * Commits current transaction
-     */
-    commit() {
-        return this._captureErrorStack(this._intlCon.commit());
-    }
-    /**
-     * Rolls back current transaction
-     */
-    rollback() {
-        return this._captureErrorStack(this._intlCon.rollback());
-    }
-    /**
-     * Starts transaction and creates a savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    async savepoint(name) {
-        if (!this._intlCon.inTransaction)
-            await this._intlCon.startTransaction();
-        return this._captureErrorStack(this._intlCon.savepoint(name));
-    }
-    /**
-     * Rolls back current transaction to given savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    rollbackToSavepoint(name) {
-        return this._captureErrorStack(this._intlCon.rollbackToSavepoint(name));
-    }
-    /**
-     * Releases savepoint
-     * @param name {string} - Name of the savepoint
-     */
-    releaseSavepoint(name) {
-        return this._captureErrorStack(this._intlCon.releaseSavepoint(name));
-    }
-    async listen(channel, callback) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        const registered = !!this._notificationListeners.eventNames().length;
-        this._notificationListeners.on(channel, callback);
-        if (!registered)
-            await this._captureErrorStack(this.query('LISTEN ' + channel));
-    }
-    async unListen(channel) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        this._notificationListeners.removeAllListeners(channel);
-        await this._captureErrorStack(this.query('UNLISTEN ' + channel));
-    }
-    async unListenAll() {
-        this._notificationListeners.removeAllListeners();
-        await this._captureErrorStack(this.query('UNLISTEN *'));
-    }
-    _handleNotification(msg) {
-        this.emit('notification', msg);
-        this._notificationListeners.emit(msg.channel, msg);
-    }
-    async _close() {
-        if (this._pool) {
-            await this._captureErrorStack(this._pool.release(this));
-            this.emit('release');
-        }
-        else
-            await this._captureErrorStack(this._intlCon.close());
-        this._closing = false;
-    }
-    _handleError(err, script) {
-        if (err.position) {
-            const i1 = script.lastIndexOf('\n', err.position) + 1;
-            let i2 = script.indexOf('\n', err.position);
-            if (i2 < 0)
-                i2 = Number.MAX_SAFE_INTEGER;
-            err.line = script.substring(i1, i2);
-            err.lineNr = [...script.substring(0, i1).matchAll(/\n/g)].length;
-            err.colNr = err.position - i1;
-            err.message +=
-                `\nAt line ${err.lineNr} column ${err.colNr}` +
-                    `\n |  ${err.line}\n |  ${' '.repeat(Math.max(err.colNr - 2, 0))}-^-`;
-        }
-        return err;
-    }
-    async _captureErrorStack(promise) {
-        const stack = new Error().stack;
-        return promise.catch(e => {
-            if (e instanceof Error && stack) {
-                e.stack = stack
-                    .split('\n')
-                    .filter(x => !x.includes('Connection._captureErrorStack'))
-                    .join('\n');
-            }
-            throw e;
-        });
-    }
-    [Symbol.asyncDispose]() {
-        return this.close();
-    }
-}
-exports.Connection = Connection;
Index: node_modules/power-tasks/esm/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/esm/utils.js b/node_modules/power-tasks/esm/utils.js
--- a/node_modules/power-tasks/esm/utils.js	
+++ b/node_modules/power-tasks/esm/utils.js	
@@ -1,8 +1,8 @@
 export function plural(word, isPlural, pluralWord) {
-    if ((typeof isPlural === 'number' && isPlural > 1) || isPlural)
-        return pluralWord ? pluralWord : word + 's';
+    if ((typeof isPlural === "number" && isPlural > 1) || isPlural)
+        return pluralWord ? pluralWord : word + "s";
     return word;
 }
 export function delay(t) {
-    return new Promise(resolve => setTimeout(resolve, t).unref());
+    return new Promise((resolve) => setTimeout(resolve, t).unref());
 }
Index: node_modules/semver/classes/comparator.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/classes/comparator.js b/node_modules/semver/classes/comparator.js
--- a/node_modules/semver/classes/comparator.js	
+++ b/node_modules/semver/classes/comparator.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const ANY = Symbol('SemVer ANY')
 // hoisted class for cyclic dependency
 class Comparator {
Index: node_modules/semver/functions/diff.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/diff.js b/node_modules/semver/functions/diff.js
--- a/node_modules/semver/functions/diff.js	
+++ b/node_modules/semver/functions/diff.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const parse = require('./parse.js')
 
 const diff = (version1, version2) => {
@@ -27,20 +29,13 @@
       return 'major'
     }
 
-    // Otherwise it can be determined by checking the high version
-
-    if (highVersion.patch) {
-      // anything higher than a patch bump would result in the wrong version
-      return 'patch'
-    }
-
-    if (highVersion.minor) {
-      // anything higher than a minor bump would result in the wrong version
-      return 'minor'
+    // If the main part has no difference
+    if (lowVersion.compareMain(highVersion) === 0) {
+      if (lowVersion.minor && !lowVersion.patch) {
+        return 'minor'
+      }
+      return 'patch'
     }
-
-    // bumping major/minor/patch all have same result
-    return 'major'
   }
 
   // add the `pre` prefix if we are going to a prerelease version
Index: node_modules/set-function-length/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/CHANGELOG.md b/node_modules/set-function-length/CHANGELOG.md
deleted file mode 100644
--- a/node_modules/set-function-length/CHANGELOG.md	
+++ /dev/null	
@@ -1,70 +0,0 @@
-# Changelog
-
-All notable changes to this project will be documented in this file.
-
-The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
-and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
-
-## [v1.2.2](https://github.com/ljharb/set-function-length/compare/v1.2.1...v1.2.2) - 2024-03-09
-
-### Commits
-
-- [types] use shared config [`027032f`](https://github.com/ljharb/set-function-length/commit/027032fe9cc439644a07248ea6a8d813fcc767cb)
-- [actions] remove redundant finisher; use reusable workflow [`1fd4fb1`](https://github.com/ljharb/set-function-length/commit/1fd4fb1c58bd5170f0dcff7e320077c0aa2ffdeb)
-- [types] use a handwritten d.ts file instead of emit [`01b9761`](https://github.com/ljharb/set-function-length/commit/01b9761742c95e1118e8c2d153ce2ae43d9731aa)
-- [Deps] update `define-data-property`, `get-intrinsic`, `has-property-descriptors` [`bee8eaf`](https://github.com/ljharb/set-function-length/commit/bee8eaf7749f325357ade85cffeaeef679e513d4)
-- [Dev Deps] update `call-bind`, `tape` [`5dae579`](https://github.com/ljharb/set-function-length/commit/5dae579fdc3aab91b14ebb58f9c19ee3f509d434)
-- [Tests] use `@arethetypeswrong/cli` [`7e22425`](https://github.com/ljharb/set-function-length/commit/7e22425d15957fd3d6da0b6bca4afc0c8d255d2d)
-
-## [v1.2.1](https://github.com/ljharb/set-function-length/compare/v1.2.0...v1.2.1) - 2024-02-06
-
-### Commits
-
-- [Dev Deps] update `call-bind`, `tape`, `typescript` [`d9a4601`](https://github.com/ljharb/set-function-length/commit/d9a460199c4c1fa37da9ebe055e2c884128f0738)
-- [Deps] update `define-data-property`, `get-intrinsic` [`38d39ae`](https://github.com/ljharb/set-function-length/commit/38d39aed13a757ed36211d5b0437b88485090c6b)
-- [Refactor] use `es-errors`, so things that only need those do not need `get-intrinsic` [`b4bfe5a`](https://github.com/ljharb/set-function-length/commit/b4bfe5ae0953b906d55b85f867eca5e7f673ebf4)
-
-## [v1.2.0](https://github.com/ljharb/set-function-length/compare/v1.1.1...v1.2.0) - 2024-01-14
-
-### Commits
-
-- [New] add types [`f6d9088`](https://github.com/ljharb/set-function-length/commit/f6d9088b9283a3112b21c6776e8bef6d1f30558a)
-- [Fix] ensure `env` properties are always booleans [`0c42f84`](https://github.com/ljharb/set-function-length/commit/0c42f84979086389b3229e1b4272697fd352275a)
-- [Dev Deps] update `aud`, `call-bind`, `npmignore`, `tape` [`2b75f75`](https://github.com/ljharb/set-function-length/commit/2b75f75468093a4bb8ce8ca989b2edd2e80d95d1)
-- [Deps] update `get-intrinsic`, `has-property-descriptors` [`19bf0fc`](https://github.com/ljharb/set-function-length/commit/19bf0fc4ffaa5ad425acbfa150516be9f3b6263a)
-- [meta] add `sideEffects` flag [`8bb9b78`](https://github.com/ljharb/set-function-length/commit/8bb9b78c11c621123f725c9470222f43466c01d0)
-
-## [v1.1.1](https://github.com/ljharb/set-function-length/compare/v1.1.0...v1.1.1) - 2023-10-19
-
-### Fixed
-
-- [Fix] move `define-data-property` to runtime deps [`#2`](https://github.com/ljharb/set-function-length/issues/2)
-
-### Commits
-
-- [Dev Deps] update `object-inspect`; add missing `call-bind` [`5aecf79`](https://github.com/ljharb/set-function-length/commit/5aecf79e7d6400957a5d9bd9ac20d4528908ca18)
-
-## [v1.1.0](https://github.com/ljharb/set-function-length/compare/v1.0.1...v1.1.0) - 2023-10-13
-
-### Commits
-
-- [New] add `env` entry point [`475c87a`](https://github.com/ljharb/set-function-length/commit/475c87aa2f59b700aaed589d980624ec596acdcb)
-- [Tests] add coverage with `nyc` [`14f0bf8`](https://github.com/ljharb/set-function-length/commit/14f0bf8c145ae60bf14a026420a06bb7be132c36)
-- [eslint] fix linting failure [`fb516f9`](https://github.com/ljharb/set-function-length/commit/fb516f93c664057138c53559ef63c8622a093335)
-- [Deps] update `define-data-property` [`d727e7c`](https://github.com/ljharb/set-function-length/commit/d727e7c6c9a40d7bf26797694e500ea68741feea)
-
-## [v1.0.1](https://github.com/ljharb/set-function-length/compare/v1.0.0...v1.0.1) - 2023-10-12
-
-### Commits
-
-- [Refactor] use `get-intrinsic`, since it‘s in the dep graph anyways [`278a954`](https://github.com/ljharb/set-function-length/commit/278a954a06cd849051c569ff7aee56df6798933e)
-- [meta] add `exports` [`72acfe5`](https://github.com/ljharb/set-function-length/commit/72acfe5a0310071fb205a72caba5ecbab24336a0)
-
-## v1.0.0 - 2023-10-12
-
-### Commits
-
-- Initial implementation, tests, readme [`fce14e1`](https://github.com/ljharb/set-function-length/commit/fce14e17586460e4f294405173be72b6ffdf7e5f)
-- Initial commit [`ca7ba85`](https://github.com/ljharb/set-function-length/commit/ca7ba857c7c283f9d26e21f14e71cd388f2cb722)
-- npm init [`6a7e493`](https://github.com/ljharb/set-function-length/commit/6a7e493927736cebcaf5c1a84e69b8e6b7b744d8)
-- Only apps should have lockfiles [`d2bf6c4`](https://github.com/ljharb/set-function-length/commit/d2bf6c43de8a51b02a0aa53e8d62cb50c4a2b0da)
Index: node_modules/body-parser/lib/types/urlencoded.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/lib/types/urlencoded.js b/node_modules/body-parser/lib/types/urlencoded.js
--- a/node_modules/body-parser/lib/types/urlencoded.js	
+++ b/node_modules/body-parser/lib/types/urlencoded.js	
@@ -55,6 +55,9 @@
     : opts.limit
   var type = opts.type || 'application/x-www-form-urlencoded'
   var verify = opts.verify || false
+  var depth = typeof opts.depth !== 'number'
+    ? Number(opts.depth || 32)
+    : opts.depth
 
   if (verify !== false && typeof verify !== 'function') {
     throw new TypeError('option verify must be function')
@@ -118,7 +121,8 @@
       encoding: charset,
       inflate: inflate,
       limit: limit,
-      verify: verify
+      verify: verify,
+      depth: depth
     })
   }
 }
@@ -133,12 +137,20 @@
   var parameterLimit = options.parameterLimit !== undefined
     ? options.parameterLimit
     : 1000
+
+  var depth = typeof options.depth !== 'number'
+    ? Number(options.depth || 32)
+    : options.depth
   var parse = parser('qs')
 
   if (isNaN(parameterLimit) || parameterLimit < 1) {
     throw new TypeError('option parameterLimit must be a positive number')
   }
 
+  if (isNaN(depth) || depth < 0) {
+    throw new TypeError('option depth must be a zero or a positive number')
+  }
+
   if (isFinite(parameterLimit)) {
     parameterLimit = parameterLimit | 0
   }
@@ -156,12 +168,23 @@
     var arrayLimit = Math.max(100, paramCount)
 
     debug('parse extended urlencoding')
-    return parse(body, {
-      allowPrototypes: true,
-      arrayLimit: arrayLimit,
-      depth: Infinity,
-      parameterLimit: parameterLimit
-    })
+    try {
+      return parse(body, {
+        allowPrototypes: true,
+        arrayLimit: arrayLimit,
+        depth: depth,
+        strictDepth: true,
+        parameterLimit: parameterLimit
+      })
+    } catch (err) {
+      if (err instanceof RangeError) {
+        throw createError(400, 'The input exceeded the depth', {
+          type: 'querystring.parse.rangeError'
+        })
+      } else {
+        throw err
+      }
+    }
   }
 }
 
Index: node_modules/side-channel/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/test/index.js b/node_modules/side-channel/test/index.js
--- a/node_modules/side-channel/test/index.js	
+++ b/node_modules/side-channel/test/index.js	
@@ -4,80 +4,101 @@
 
 var getSideChannel = require('../');
 
-test('export', function (t) {
-	t.equal(typeof getSideChannel, 'function', 'is a function');
-	t.equal(getSideChannel.length, 0, 'takes no arguments');
+test('getSideChannel', function (t) {
+	t.test('export', function (st) {
+		st.equal(typeof getSideChannel, 'function', 'is a function');
+
+		st.equal(getSideChannel.length, 0, 'takes no arguments');
 
-	var channel = getSideChannel();
-	t.ok(channel, 'is truthy');
-	t.equal(typeof channel, 'object', 'is an object');
-
-	t.end();
-});
+		var channel = getSideChannel();
+		st.ok(channel, 'is truthy');
+		st.equal(typeof channel, 'object', 'is an object');
+		st.end();
+	});
 
-test('assert', function (t) {
-	var channel = getSideChannel();
-	t['throws'](
-		function () { channel.assert({}); },
-		TypeError,
-		'nonexistent value throws'
-	);
+	t.test('assert', function (st) {
+		var channel = getSideChannel();
+		st['throws'](
+			function () { channel.assert({}); },
+			TypeError,
+			'nonexistent value throws'
+		);
 
-	var o = {};
-	channel.set(o, 'data');
-	t.doesNotThrow(function () { channel.assert(o); }, 'existent value noops');
+		var o = {};
+		channel.set(o, 'data');
+		st.doesNotThrow(function () { channel.assert(o); }, 'existent value noops');
 
-	t.end();
-});
+		st.end();
+	});
 
-test('has', function (t) {
-	var channel = getSideChannel();
-	/** @type {unknown[]} */ var o = [];
+	t.test('has', function (st) {
+		var channel = getSideChannel();
+		/** @type {unknown[]} */ var o = [];
 
-	t.equal(channel.has(o), false, 'nonexistent value yields false');
+		st.equal(channel.has(o), false, 'nonexistent value yields false');
 
-	channel.set(o, 'foo');
-	t.equal(channel.has(o), true, 'existent value yields true');
+		channel.set(o, 'foo');
+		st.equal(channel.has(o), true, 'existent value yields true');
 
-	t.equal(channel.has('abc'), false, 'non object value non existent yields false');
+		st.equal(channel.has('abc'), false, 'non object value non existent yields false');
 
-	channel.set('abc', 'foo');
-	t.equal(channel.has('abc'), true, 'non object value that exists yields true');
+		channel.set('abc', 'foo');
+		st.equal(channel.has('abc'), true, 'non object value that exists yields true');
 
-	t.end();
-});
+		st.end();
+	});
 
-test('get', function (t) {
-	var channel = getSideChannel();
-	var o = {};
-	t.equal(channel.get(o), undefined, 'nonexistent value yields undefined');
+	t.test('get', function (st) {
+		var channel = getSideChannel();
+		var o = {};
+		st.equal(channel.get(o), undefined, 'nonexistent value yields undefined');
 
-	var data = {};
-	channel.set(o, data);
-	t.equal(channel.get(o), data, '"get" yields data set by "set"');
+		var data = {};
+		channel.set(o, data);
+		st.equal(channel.get(o), data, '"get" yields data set by "set"');
 
-	t.end();
-});
+		st.end();
+	});
 
-test('set', function (t) {
-	var channel = getSideChannel();
-	var o = function () {};
-	t.equal(channel.get(o), undefined, 'value not set');
+	t.test('set', function (st) {
+		var channel = getSideChannel();
+		var o = function () {};
+		st.equal(channel.get(o), undefined, 'value not set');
 
-	channel.set(o, 42);
-	t.equal(channel.get(o), 42, 'value was set');
+		channel.set(o, 42);
+		st.equal(channel.get(o), 42, 'value was set');
 
-	channel.set(o, Infinity);
-	t.equal(channel.get(o), Infinity, 'value was set again');
+		channel.set(o, Infinity);
+		st.equal(channel.get(o), Infinity, 'value was set again');
 
-	var o2 = {};
-	channel.set(o2, 17);
-	t.equal(channel.get(o), Infinity, 'o is not modified');
-	t.equal(channel.get(o2), 17, 'o2 is set');
+		var o2 = {};
+		channel.set(o2, 17);
+		st.equal(channel.get(o), Infinity, 'o is not modified');
+		st.equal(channel.get(o2), 17, 'o2 is set');
 
-	channel.set(o, 14);
-	t.equal(channel.get(o), 14, 'o is modified');
-	t.equal(channel.get(o2), 17, 'o2 is not modified');
+		channel.set(o, 14);
+		st.equal(channel.get(o), 14, 'o is modified');
+		st.equal(channel.get(o2), 17, 'o2 is not modified');
+
+		st.end();
+	});
+
+	t.test('delete', function (st) {
+		var channel = getSideChannel();
+		var o = {};
+		st.equal(channel['delete']({}), false, 'nonexistent value yields false');
+
+		channel.set(o, 42);
+		st.equal(channel.has(o), true, 'value is set');
+
+		st.equal(channel['delete']({}), false, 'nonexistent value still yields false');
+
+		st.equal(channel['delete'](o), true, 'deleted value yields true');
+
+		st.equal(channel.has(o), false, 'value is no longer set');
+
+		st.end();
+	});
 
 	t.end();
 });
Index: node_modules/postgresql-client/esm/data-types/oid-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/oid-type.js b/node_modules/postgresql-client/esm/data-types/oid-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/oid-type.js	
+++ /dev/null	
@@ -1,29 +0,0 @@
-import { DataTypeNames, DataTypeOIDs } from '../constants.js';
-import { fastParseInt } from '../util/fast-parseint.js';
-export const OidType = {
-    name: 'oid',
-    oid: DataTypeOIDs.oid,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readUInt32BE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeUInt32BE(fastParseInt(v));
-    },
-    parseText: fastParseInt,
-    isType(v) {
-        return typeof v === 'number' && Number.isInteger(v) && !!DataTypeNames[v];
-    },
-};
-export const ArrayOidType = {
-    ...OidType,
-    name: '_oid',
-    oid: DataTypeOIDs._oid,
-    elementsOID: DataTypeOIDs.oid,
-};
-export const VectorOidType = {
-    ...OidType,
-    name: '_oidvector',
-    oid: DataTypeOIDs.oidvector,
-    elementsOID: DataTypeOIDs.oid,
-};
Index: node_modules/serve-static/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/serve-static/package.json b/node_modules/serve-static/package.json
--- a/node_modules/serve-static/package.json	
+++ b/node_modules/serve-static/package.json	
@@ -1,15 +1,15 @@
 {
   "name": "serve-static",
   "description": "Serve static files",
-  "version": "1.15.0",
+  "version": "1.16.2",
   "author": "Douglas Christopher Wilson <doug@somethingdoug.com>",
   "license": "MIT",
   "repository": "expressjs/serve-static",
   "dependencies": {
-    "encodeurl": "~1.0.2",
+    "encodeurl": "~2.0.0",
     "escape-html": "~1.0.3",
     "parseurl": "~1.3.3",
-    "send": "0.18.0"
+    "send": "0.19.0"
   },
   "devDependencies": {
     "eslint": "7.32.0",
Index: node_modules/define-data-property/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/index.d.ts b/node_modules/define-data-property/index.d.ts
deleted file mode 100644
--- a/node_modules/define-data-property/index.d.ts	
+++ /dev/null	
@@ -1,12 +0,0 @@
-
-declare function defineDataProperty(
-    obj: Record<PropertyKey, unknown>,
-    property: keyof typeof obj,
-    value: typeof obj[typeof property],
-    nonEnumerable?: boolean | null,
-    nonWritable?: boolean | null,
-    nonConfigurable?: boolean | null,
-    loose?: boolean
-): void;
-
-export = defineDataProperty;
\ No newline at end of file
Index: node_modules/nodemon/node_modules/ms/readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/ms/readme.md b/node_modules/nodemon/node_modules/ms/readme.md
--- a/node_modules/nodemon/node_modules/ms/readme.md	
+++ b/node_modules/nodemon/node_modules/ms/readme.md	
@@ -1,7 +1,6 @@
 # ms
 
-[![Build Status](https://travis-ci.org/zeit/ms.svg?branch=master)](https://travis-ci.org/zeit/ms)
-[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/zeit)
+![CI](https://github.com/vercel/ms/workflows/CI/badge.svg)
 
 Use this package to easily convert various time formats to milliseconds.
 
Index: node_modules/semver/functions/eq.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/eq.js b/node_modules/semver/functions/eq.js
--- a/node_modules/semver/functions/eq.js	
+++ b/node_modules/semver/functions/eq.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const eq = (a, b, loose) => compare(a, b, loose) === 0
 module.exports = eq
Index: node_modules/semver/functions/minor.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/minor.js b/node_modules/semver/functions/minor.js
--- a/node_modules/semver/functions/minor.js	
+++ b/node_modules/semver/functions/minor.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const minor = (a, loose) => new SemVer(a, loose).minor
 module.exports = minor
Index: node_modules/pg/lib/native/query.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/native/query.js b/node_modules/pg/lib/native/query.js
--- a/node_modules/pg/lib/native/query.js	
+++ b/node_modules/pg/lib/native/query.js	
@@ -1,15 +1,16 @@
 'use strict'
 
-var EventEmitter = require('events').EventEmitter
-var util = require('util')
-var utils = require('../utils')
+const EventEmitter = require('events').EventEmitter
+const util = require('util')
+const utils = require('../utils')
 
-var NativeQuery = (module.exports = function (config, values, callback) {
+const NativeQuery = (module.exports = function (config, values, callback) {
   EventEmitter.call(this)
   config = utils.normalizeQueryConfig(config, values, callback)
   this.text = config.text
   this.values = config.values
   this.name = config.name
+  this.queryMode = config.queryMode
   this.callback = config.callback
   this.state = 'new'
   this._arrayMode = config.rowMode === 'array'
@@ -18,7 +19,7 @@
   // then emit them as they come in
   // without setting singleRowMode to true
   // this has almost no meaning because libpq
-  // reads all rows into memory befor returning any
+  // reads all rows into memory before returning any
   this._emitRowEvents = false
   this.on(
     'newListener',
@@ -30,8 +31,7 @@
 
 util.inherits(NativeQuery, EventEmitter)
 
-var errorFieldMap = {
-  /* eslint-disable quote-props */
+const errorFieldMap = {
   sqlState: 'code',
   statementPosition: 'position',
   messagePrimary: 'message',
@@ -48,10 +48,10 @@
 
 NativeQuery.prototype.handleError = function (err) {
   // copy pq error fields into the error object
-  var fields = this.native.pq.resultErrorFields()
+  const fields = this.native.pq.resultErrorFields()
   if (fields) {
-    for (var key in fields) {
-      var normalizedFieldName = errorFieldMap[key] || key
+    for (const key in fields) {
+      const normalizedFieldName = errorFieldMap[key] || key
       err[normalizedFieldName] = fields[key]
     }
   }
@@ -84,11 +84,11 @@
 
 NativeQuery.prototype.submit = function (client) {
   this.state = 'running'
-  var self = this
+  const self = this
   this.native = client.native
   client.native.arrayMode = this._arrayMode
 
-  var after = function (err, rows, results) {
+  let after = function (err, rows, results) {
     client.native.arrayMode = false
     setImmediate(function () {
       self.emit('_done')
@@ -129,13 +129,11 @@
   // named query
   if (this.name) {
     if (this.name.length > 63) {
-      /* eslint-disable no-console */
       console.error('Warning! Postgres only supports 63 characters for query names.')
       console.error('You supplied %s (%s)', this.name, this.name.length)
       console.error('This can cause conflicts and silent errors executing queries')
-      /* eslint-enable no-console */
     }
-    var values = (this.values || []).map(utils.prepareValue)
+    const values = (this.values || []).map(utils.prepareValue)
 
     // check if the client has already executed this named query
     // if so...just execute it again - skip the planning phase
@@ -157,8 +155,10 @@
       const err = new Error('Query values must be an array')
       return after(err)
     }
-    var vals = this.values.map(utils.prepareValue)
+    const vals = this.values.map(utils.prepareValue)
     client.native.query(this.text, vals, after)
+  } else if (this.queryMode === 'extended') {
+    client.native.query(this.text, [], after)
   } else {
     client.native.query(this.text, after)
   }
Index: node_modules/express/node_modules/cookie/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/express/node_modules/cookie/HISTORY.md b/node_modules/express/node_modules/cookie/HISTORY.md
deleted file mode 100644
--- a/node_modules/express/node_modules/cookie/HISTORY.md	
+++ /dev/null	
@@ -1,147 +0,0 @@
-0.6.0 / 2023-11-06
-==================
-
-  * Add `partitioned` option
-
-0.5.0 / 2022-04-11
-==================
-
-  * Add `priority` option
-  * Fix `expires` option to reject invalid dates
-  * perf: improve default decode speed
-  * perf: remove slow string split in parse
-
-0.4.2 / 2022-02-02
-==================
-
-  * perf: read value only when assigning in parse
-  * perf: remove unnecessary regexp in parse
-
-0.4.1 / 2020-04-21
-==================
-
-  * Fix `maxAge` option to reject invalid values
-
-0.4.0 / 2019-05-15
-==================
-
-  * Add `SameSite=None` support
-
-0.3.1 / 2016-05-26
-==================
-
-  * Fix `sameSite: true` to work with draft-7 clients
-    - `true` now sends `SameSite=Strict` instead of `SameSite`
-
-0.3.0 / 2016-05-26
-==================
-
-  * Add `sameSite` option
-    - Replaces `firstPartyOnly` option, never implemented by browsers
-  * Improve error message when `encode` is not a function
-  * Improve error message when `expires` is not a `Date`
-
-0.2.4 / 2016-05-20
-==================
-
-  * perf: enable strict mode
-  * perf: use for loop in parse
-  * perf: use string concatenation for serialization
-
-0.2.3 / 2015-10-25
-==================
-
-  * Fix cookie `Max-Age` to never be a floating point number
-
-0.2.2 / 2015-09-17
-==================
-
-  * Fix regression when setting empty cookie value
-    - Ease the new restriction, which is just basic header-level validation
-  * Fix typo in invalid value errors
-
-0.2.1 / 2015-09-17
-==================
-
-  * Throw on invalid values provided to `serialize`
-    - Ensures the resulting string is a valid HTTP header value
-
-0.2.0 / 2015-08-13
-==================
-
-  * Add `firstPartyOnly` option
-  * Throw better error for invalid argument to parse
-  * perf: hoist regular expression
-
-0.1.5 / 2015-09-17
-==================
-
-  * Fix regression when setting empty cookie value
-    - Ease the new restriction, which is just basic header-level validation
-  * Fix typo in invalid value errors
-
-0.1.4 / 2015-09-17
-==================
-
-  * Throw better error for invalid argument to parse
-  * Throw on invalid values provided to `serialize`
-    - Ensures the resulting string is a valid HTTP header value
-
-0.1.3 / 2015-05-19
-==================
-
-  * Reduce the scope of try-catch deopt
-  * Remove argument reassignments
-
-0.1.2 / 2014-04-16
-==================
-
-  * Remove unnecessary files from npm package
-
-0.1.1 / 2014-02-23
-==================
-
-  * Fix bad parse when cookie value contained a comma
-  * Fix support for `maxAge` of `0`
-
-0.1.0 / 2013-05-01
-==================
-
-  * Add `decode` option
-  * Add `encode` option
-
-0.0.6 / 2013-04-08
-==================
-
-  * Ignore cookie parts missing `=`
-
-0.0.5 / 2012-10-29
-==================
-
-  * Return raw cookie value if value unescape errors
-
-0.0.4 / 2012-06-21
-==================
-
-  * Use encode/decodeURIComponent for cookie encoding/decoding
-    - Improve server/client interoperability
-
-0.0.3 / 2012-06-06
-==================
-
-  * Only escape special characters per the cookie RFC
-
-0.0.2 / 2012-06-01
-==================
-
-  * Fix `maxAge` option to not throw error
-
-0.0.1 / 2012-05-28
-==================
-
-  * Add more tests
-
-0.0.0 / 2012-05-28
-==================
-
-  * Initial release
Index: node_modules/postgresql-client/cjs/data-types/varchar-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/varchar-type.js b/node_modules/postgresql-client/cjs/data-types/varchar-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/varchar-type.js	
+++ /dev/null	
@@ -1,27 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayVarcharType = exports.VarcharType = void 0;
-const constants_js_1 = require("../constants.js");
-exports.VarcharType = {
-    name: 'varchar',
-    oid: constants_js_1.DataTypeOIDs.varchar,
-    jsType: 'string',
-    parseBinary(v) {
-        return v.toString('utf8');
-    },
-    encodeBinary(buf, v) {
-        buf.writeString('' + v, 'utf8');
-    },
-    parseText(v) {
-        return '' + v;
-    },
-    isType(v) {
-        return typeof v === 'string';
-    },
-};
-exports.ArrayVarcharType = {
-    ...exports.VarcharType,
-    name: '_varchar',
-    oid: constants_js_1.DataTypeOIDs._varchar,
-    elementsOID: constants_js_1.DataTypeOIDs.varchar,
-};
Index: node_modules/cookie-parser/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/cookie-parser/package.json b/node_modules/cookie-parser/package.json
--- a/node_modules/cookie-parser/package.json	
+++ b/node_modules/cookie-parser/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "cookie-parser",
   "description": "Parse HTTP request cookies",
-  "version": "1.4.6",
+  "version": "1.4.7",
   "author": "TJ Holowaychuk <tj@vision-media.ca> (http://tjholowaychuk.com)",
   "contributors": [
     "Douglas Christopher Wilson <doug@somethingdoug.com>"
@@ -13,7 +13,7 @@
     "middleware"
   ],
   "dependencies": {
-    "cookie": "0.4.1",
+    "cookie": "0.7.2",
     "cookie-signature": "1.0.6"
   },
   "devDependencies": {
@@ -24,7 +24,7 @@
     "eslint-plugin-node": "11.1.0",
     "eslint-plugin-promise": "4.3.1",
     "eslint-plugin-standard": "4.1.0",
-    "mocha": "9.1.3",
+    "mocha": "9.2.1",
     "nyc": "15.1.0",
     "supertest": "6.1.6"
   },
Index: node_modules/postgresql-client/esm/util/parse-row.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/parse-row.js b/node_modules/postgresql-client/esm/util/parse-row.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/parse-row.js	
+++ /dev/null	
@@ -1,7 +0,0 @@
-export function parseRow(parsers, row, options) {
-    const l = row.length;
-    let i;
-    for (i = 0; i < l; i++) {
-        row[i] = row[i] == null ? null : parsers[i].call(undefined, row[i], options);
-    }
-}
Index: node_modules/dotenv/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/package.json b/node_modules/dotenv/package.json
--- a/node_modules/dotenv/package.json	
+++ b/node_modules/dotenv/package.json	
@@ -1,6 +1,6 @@
 {
   "name": "dotenv",
-  "version": "16.4.5",
+  "version": "16.6.1",
   "description": "Loads environment variables from .env file",
   "main": "lib/main.js",
   "types": "lib/main.d.ts",
@@ -21,10 +21,9 @@
   "scripts": {
     "dts-check": "tsc --project tests/types/tsconfig.json",
     "lint": "standard",
-    "lint-readme": "standard-markdown",
     "pretest": "npm run lint && npm run dts-check",
-    "test": "tap tests/*.js --100 -Rspec",
-    "test:coverage": "tap --coverage-report=lcov",
+    "test": "tap run --allow-empty-coverage --disable-coverage --timeout=60000",
+    "test:coverage": "tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov",
     "prerelease": "npm test",
     "release": "standard-version"
   },
@@ -32,6 +31,7 @@
     "type": "git",
     "url": "git://github.com/motdotla/dotenv.git"
   },
+  "homepage": "https://github.com/motdotla/dotenv#readme",
   "funding": "https://dotenvx.com",
   "keywords": [
     "dotenv",
@@ -45,15 +45,12 @@
   "readmeFilename": "README.md",
   "license": "BSD-2-Clause",
   "devDependencies": {
-    "@definitelytyped/dtslint": "^0.0.133",
     "@types/node": "^18.11.3",
-    "decache": "^4.6.1",
+    "decache": "^4.6.2",
     "sinon": "^14.0.1",
     "standard": "^17.0.0",
-    "standard-markdown": "^7.1.0",
     "standard-version": "^9.5.0",
-    "tap": "^16.3.0",
-    "tar": "^6.1.11",
+    "tap": "^19.2.0",
     "typescript": "^4.8.4"
   },
   "engines": {
Index: node_modules/serve-static/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/serve-static/HISTORY.md b/node_modules/serve-static/HISTORY.md
--- a/node_modules/serve-static/HISTORY.md	
+++ b/node_modules/serve-static/HISTORY.md	
@@ -1,3 +1,19 @@
+1.16.2 / 2024-09-11
+===================
+
+* deps: encodeurl@~2.0.0
+
+1.16.1 / 2024-09-11
+===================
+
+* deps: send@0.19.0
+
+1.16.0 / 2024-09-10
+===================
+
+* Remove link renderization in html while redirecting
+
+
 1.15.0 / 2022-03-24
 ===================
 
Index: node_modules/postgresql-client/cjs/util/parse-time.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/parse-time.js b/node_modules/postgresql-client/cjs/util/parse-time.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/parse-time.js	
+++ /dev/null	
@@ -1,29 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.parseTime = exports.TIME_PATTERN = exports.STRICT_TIME_PATTERN = void 0;
-const fast_parseint_js_1 = require("./fast-parseint.js");
-// eslint-disable-next-line
-// noinspection RegExpUnnecessaryNonCapturingGroup
-exports.STRICT_TIME_PATTERN = /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(?:\.(\d+))?(?:(Z)|(?:([+-])([01]?[0-9]|2[0-3]):?([0-5][0-9])?))?$/;
-// noinspection RegExpUnnecessaryNonCapturingGroup
-exports.TIME_PATTERN = /^([01][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?(?:\.(\d+))?(?:(Z)|(?:([+-])([01]?[0-9]|2[0-3]):?([0-5][0-9])?))?$/;
-function parseTime(str, parseTimeZone, utc) {
-    const m = str.match(exports.TIME_PATTERN);
-    if (!m)
-        return new Date('invalid');
-    const args = [1970, 0, 1, 0, 0, 0, 0];
-    for (let i = 1; i < 4; i++) {
-        const s = m[i];
-        args[i + 2] = (0, fast_parseint_js_1.fastParseInt)(s) || 0;
-    }
-    if (parseTimeZone && m[6]) {
-        const r = m[9] === '-' ? -1 : 1;
-        args[3] -= ((0, fast_parseint_js_1.fastParseInt)(m[7]) || 0) * r;
-        args[4] -= ((0, fast_parseint_js_1.fastParseInt)(m[8]) || 0) * r;
-        return new Date(Date.UTC(...args));
-    }
-    if (m[5] || utc)
-        return new Date(Date.UTC(...args));
-    return new Date(...args);
-}
-exports.parseTime = parseTime;
Index: node_modules/postgresql-client/cjs/util/convert-row-to-object.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/convert-row-to-object.js b/node_modules/postgresql-client/cjs/util/convert-row-to-object.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/convert-row-to-object.js	
+++ /dev/null	
@@ -1,13 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.convertRowToObject = void 0;
-function convertRowToObject(fields, row) {
-    const out = {};
-    const l = row.length;
-    let i;
-    for (i = 0; i < l; i++) {
-        out[fields[i].fieldName] = row[i];
-    }
-    return out;
-}
-exports.convertRowToObject = convertRowToObject;
Index: node_modules/has-property-descriptors/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-property-descriptors/CHANGELOG.md b/node_modules/has-property-descriptors/CHANGELOG.md
deleted file mode 100644
--- a/node_modules/has-property-descriptors/CHANGELOG.md	
+++ /dev/null	
@@ -1,35 +0,0 @@
-# Changelog
-
-All notable changes to this project will be documented in this file.
-
-The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
-and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
-
-## [v1.0.2](https://github.com/inspect-js/has-property-descriptors/compare/v1.0.1...v1.0.2) - 2024-02-12
-
-### Commits
-
-- [Refactor] use `es-define-property` [`f93a8c8`](https://github.com/inspect-js/has-property-descriptors/commit/f93a8c85eba70cbceab500f2619fb5cce73a1805)
-- [Dev Deps] update `aud`, `npmignore`, `tape` [`42b0c9d`](https://github.com/inspect-js/has-property-descriptors/commit/42b0c9d1c23e747755f0f2924923c418ea34a9ee)
-- [Deps] update `get-intrinsic` [`35e9b46`](https://github.com/inspect-js/has-property-descriptors/commit/35e9b46a7f14331bf0de98b644dd803676746037)
-
-## [v1.0.1](https://github.com/inspect-js/has-property-descriptors/compare/v1.0.0...v1.0.1) - 2023-10-20
-
-### Commits
-
-- [meta] use `npmignore` to autogenerate an npmignore file [`5bbf4da`](https://github.com/inspect-js/has-property-descriptors/commit/5bbf4dae1b58950d87bb3af508bee7513e640868)
-- [actions] update rebase action to use reusable workflow [`3a5585b`](https://github.com/inspect-js/has-property-descriptors/commit/3a5585bf74988f71a8f59e67a07d594e62c51fd8)
-- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`e5c1212`](https://github.com/inspect-js/has-property-descriptors/commit/e5c1212048a8fda549794c47863724ca60b89cae)
-- [Dev Deps] update `aud`, `tape` [`e942917`](https://github.com/inspect-js/has-property-descriptors/commit/e942917b6c2f7c090d5623048989cf20d0834ebf)
-- [Deps] update `get-intrinsic` [`f4a44ec`](https://github.com/inspect-js/has-property-descriptors/commit/f4a44ec6d94146fa6c550d3c15c31a2062c83ef4)
-- [Deps] update `get-intrinsic` [`eeb275b`](https://github.com/inspect-js/has-property-descriptors/commit/eeb275b473e5d72ca843b61ca25cfcb06a5d4300)
-
-## v1.0.0 - 2022-04-14
-
-### Commits
-
-- Initial implementation, tests [`303559f`](https://github.com/inspect-js/has-property-descriptors/commit/303559f2a72dfe7111573a1aec475ed4a184c35a)
-- Initial commit [`3a7ca2d`](https://github.com/inspect-js/has-property-descriptors/commit/3a7ca2dc49f1fff0279a28bb16265e7615e14749)
-- read me [`dd73dce`](https://github.com/inspect-js/has-property-descriptors/commit/dd73dce09d89d0f7a4a6e3b1e562a506f979a767)
-- npm init [`c1e6557`](https://github.com/inspect-js/has-property-descriptors/commit/c1e655779de632d68cb944c50da6b71bcb7b8c85)
-- Only apps should have lockfiles [`e72f7c6`](https://github.com/inspect-js/has-property-descriptors/commit/e72f7c68de534b2d273ee665f8b18d4ecc7f70b0)
Index: node_modules/pg-pool/test/max-uses.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/max-uses.js b/node_modules/pg-pool/test/max-uses.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/max-uses.js	
+++ /dev/null	
@@ -1,98 +0,0 @@
-const expect = require('expect.js')
-const co = require('co')
-const _ = require('lodash')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-
-const Pool = require('../')
-
-describe('maxUses', () => {
-  it(
-    'can create a single client and use it once',
-    co.wrap(function* () {
-      const pool = new Pool({ maxUses: 2 })
-      expect(pool.waitingCount).to.equal(0)
-      const client = yield pool.connect()
-      const res = yield client.query('SELECT $1::text as name', ['hi'])
-      expect(res.rows[0].name).to.equal('hi')
-      client.release()
-      pool.end()
-    })
-  )
-
-  it(
-    'getting a connection a second time returns the same connection and releasing it also closes it',
-    co.wrap(function* () {
-      const pool = new Pool({ maxUses: 2 })
-      expect(pool.waitingCount).to.equal(0)
-      const client = yield pool.connect()
-      client.release()
-      const client2 = yield pool.connect()
-      expect(client).to.equal(client2)
-      expect(client2._ending).to.equal(false)
-      client2.release()
-      expect(client2._ending).to.equal(true)
-      return yield pool.end()
-    })
-  )
-
-  it(
-    'getting a connection a third time returns a new connection',
-    co.wrap(function* () {
-      const pool = new Pool({ maxUses: 2 })
-      expect(pool.waitingCount).to.equal(0)
-      const client = yield pool.connect()
-      client.release()
-      const client2 = yield pool.connect()
-      expect(client).to.equal(client2)
-      client2.release()
-      const client3 = yield pool.connect()
-      expect(client3).not.to.equal(client2)
-      client3.release()
-      return yield pool.end()
-    })
-  )
-
-  it(
-    'getting a connection from a pending request gets a fresh client when the released candidate is expended',
-    co.wrap(function* () {
-      const pool = new Pool({ max: 1, maxUses: 2 })
-      expect(pool.waitingCount).to.equal(0)
-      const client1 = yield pool.connect()
-      pool.connect().then((client2) => {
-        expect(client2).to.equal(client1)
-        expect(pool.waitingCount).to.equal(1)
-        // Releasing the client this time should also expend it since maxUses is 2, causing client3 to be a fresh client
-        client2.release()
-      })
-      const client3Promise = pool.connect().then((client3) => {
-        // client3 should be a fresh client since client2's release caused the first client to be expended
-        expect(pool.waitingCount).to.equal(0)
-        expect(client3).not.to.equal(client1)
-        return client3.release()
-      })
-      // There should be two pending requests since we have 3 connect requests but a max size of 1
-      expect(pool.waitingCount).to.equal(2)
-      // Releasing the client should not yet expend it since maxUses is 2
-      client1.release()
-      yield client3Promise
-      return yield pool.end()
-    })
-  )
-
-  it(
-    'logs when removing an expended client',
-    co.wrap(function* () {
-      const messages = []
-      const log = function (msg) {
-        messages.push(msg)
-      }
-      const pool = new Pool({ maxUses: 1, log })
-      const client = yield pool.connect()
-      client.release()
-      expect(messages).to.contain('remove expended client')
-      return yield pool.end()
-    })
-  )
-})
Index: node_modules/pg/lib/crypto/utils-legacy.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/crypto/utils-legacy.js b/node_modules/pg/lib/crypto/utils-legacy.js
--- a/node_modules/pg/lib/crypto/utils-legacy.js	
+++ b/node_modules/pg/lib/crypto/utils-legacy.js	
@@ -10,8 +10,8 @@
 
 // See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html
 function postgresMd5PasswordHash(user, password, salt) {
-  var inner = md5(password + user)
-  var outer = md5(Buffer.concat([Buffer.from(inner), salt]))
+  const inner = md5(password + user)
+  const outer = md5(Buffer.concat([Buffer.from(inner), salt]))
   return 'md5' + outer
 }
 
@@ -19,6 +19,11 @@
   return nodeCrypto.createHash('sha256').update(text).digest()
 }
 
+function hashByName(hashName, text) {
+  hashName = hashName.replace(/(\D)-/, '$1') // e.g. SHA-256 -> SHA256
+  return nodeCrypto.createHash(hashName).update(text).digest()
+}
+
 function hmacSha256(key, msg) {
   return nodeCrypto.createHmac('sha256', key).update(msg).digest()
 }
@@ -32,6 +37,7 @@
   randomBytes: nodeCrypto.randomBytes,
   deriveKey,
   sha256,
+  hashByName,
   hmacSha256,
   md5,
 }
Index: node_modules/abbrev/abbrev.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/abbrev/abbrev.js b/node_modules/abbrev/abbrev.js
deleted file mode 100644
--- a/node_modules/abbrev/abbrev.js	
+++ /dev/null	
@@ -1,61 +0,0 @@
-module.exports = exports = abbrev.abbrev = abbrev
-
-abbrev.monkeyPatch = monkeyPatch
-
-function monkeyPatch () {
-  Object.defineProperty(Array.prototype, 'abbrev', {
-    value: function () { return abbrev(this) },
-    enumerable: false, configurable: true, writable: true
-  })
-
-  Object.defineProperty(Object.prototype, 'abbrev', {
-    value: function () { return abbrev(Object.keys(this)) },
-    enumerable: false, configurable: true, writable: true
-  })
-}
-
-function abbrev (list) {
-  if (arguments.length !== 1 || !Array.isArray(list)) {
-    list = Array.prototype.slice.call(arguments, 0)
-  }
-  for (var i = 0, l = list.length, args = [] ; i < l ; i ++) {
-    args[i] = typeof list[i] === "string" ? list[i] : String(list[i])
-  }
-
-  // sort them lexicographically, so that they're next to their nearest kin
-  args = args.sort(lexSort)
-
-  // walk through each, seeing how much it has in common with the next and previous
-  var abbrevs = {}
-    , prev = ""
-  for (var i = 0, l = args.length ; i < l ; i ++) {
-    var current = args[i]
-      , next = args[i + 1] || ""
-      , nextMatches = true
-      , prevMatches = true
-    if (current === next) continue
-    for (var j = 0, cl = current.length ; j < cl ; j ++) {
-      var curChar = current.charAt(j)
-      nextMatches = nextMatches && curChar === next.charAt(j)
-      prevMatches = prevMatches && curChar === prev.charAt(j)
-      if (!nextMatches && !prevMatches) {
-        j ++
-        break
-      }
-    }
-    prev = current
-    if (j === cl) {
-      abbrevs[current] = current
-      continue
-    }
-    for (var a = current.substr(0, j) ; j <= cl ; j ++) {
-      abbrevs[a] = current
-      a += current.charAt(j)
-    }
-  }
-  return abbrevs
-}
-
-function lexSort (a, b) {
-  return a === b ? 0 : a > b ? 1 : -1
-}
Index: node_modules/pg-pool/test/idle-timeout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/idle-timeout.js b/node_modules/pg-pool/test/idle-timeout.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/idle-timeout.js	
+++ /dev/null	
@@ -1,118 +0,0 @@
-'use strict'
-const co = require('co')
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-const { fork } = require('child_process')
-const path = require('path')
-
-const Pool = require('../')
-
-const wait = (time) => new Promise((resolve) => setTimeout(resolve, time))
-
-describe('idle timeout', () => {
-  it('should timeout and remove the client', (done) => {
-    const pool = new Pool({ idleTimeoutMillis: 10 })
-    pool.query('SELECT NOW()')
-    pool.on('remove', () => {
-      expect(pool.idleCount).to.equal(0)
-      expect(pool.totalCount).to.equal(0)
-      done()
-    })
-  })
-
-  it(
-    'times out and removes clients when others are also removed',
-    co.wrap(function* () {
-      const pool = new Pool({ idleTimeoutMillis: 10 })
-      const clientA = yield pool.connect()
-      const clientB = yield pool.connect()
-      clientA.release()
-      clientB.release(new Error())
-
-      const removal = new Promise((resolve) => {
-        pool.on('remove', () => {
-          expect(pool.idleCount).to.equal(0)
-          expect(pool.totalCount).to.equal(0)
-          resolve()
-        })
-      })
-
-      const timeout = wait(100).then(() => Promise.reject(new Error('Idle timeout failed to occur')))
-
-      try {
-        yield Promise.race([removal, timeout])
-      } finally {
-        pool.end()
-      }
-    })
-  )
-
-  it(
-    'can remove idle clients and recreate them',
-    co.wrap(function* () {
-      const pool = new Pool({ idleTimeoutMillis: 1 })
-      const results = []
-      for (var i = 0; i < 20; i++) {
-        let query = pool.query('SELECT NOW()')
-        expect(pool.idleCount).to.equal(0)
-        expect(pool.totalCount).to.equal(1)
-        results.push(yield query)
-        yield wait(2)
-        expect(pool.idleCount).to.equal(0)
-        expect(pool.totalCount).to.equal(0)
-      }
-      expect(results).to.have.length(20)
-    })
-  )
-
-  it(
-    'does not time out clients which are used',
-    co.wrap(function* () {
-      const pool = new Pool({ idleTimeoutMillis: 1 })
-      const results = []
-      for (var i = 0; i < 20; i++) {
-        let client = yield pool.connect()
-        expect(pool.totalCount).to.equal(1)
-        expect(pool.idleCount).to.equal(0)
-        yield wait(10)
-        results.push(yield client.query('SELECT NOW()'))
-        client.release()
-        expect(pool.idleCount).to.equal(1)
-        expect(pool.totalCount).to.equal(1)
-      }
-      expect(results).to.have.length(20)
-      return pool.end()
-    })
-  )
-
-  it('unrefs the connections and timeouts so the program can exit when idle when the allowExitOnIdle option is set', function (done) {
-    const child = fork(path.join(__dirname, 'idle-timeout-exit.js'), [], {
-      silent: true,
-      env: { ...process.env, ALLOW_EXIT_ON_IDLE: '1' },
-    })
-    let result = ''
-    child.stdout.setEncoding('utf8')
-    child.stdout.on('data', (chunk) => (result += chunk))
-    child.on('error', (err) => done(err))
-    child.on('close', () => {
-      expect(result).to.equal('completed first\ncompleted second\n')
-      done()
-    })
-  })
-
-  it('keeps old behavior when allowExitOnIdle option is not set', function (done) {
-    const child = fork(path.join(__dirname, 'idle-timeout-exit.js'), [], {
-      silent: true,
-    })
-    let result = ''
-    child.stdout.setEncoding('utf8')
-    child.stdout.on('data', (chunk) => (result += chunk))
-    child.on('error', (err) => done(err))
-    child.on('close', () => {
-      expect(result).to.equal('completed first\ncompleted second\nremoved\n')
-      done()
-    })
-  })
-})
Index: node_modules/qs/lib/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/lib/utils.js b/node_modules/qs/lib/utils.js
--- a/node_modules/qs/lib/utils.js	
+++ b/node_modules/qs/lib/utils.js	
@@ -122,6 +122,10 @@
     }
 };
 
+var limit = 1024;
+
+/* eslint operator-linebreak: [2, "before"] */
+
 var encode = function encode(str, defaultEncoder, charset, kind, format) {
     // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
     // It has been adapted here for stricter adherence to RFC 3986
@@ -143,47 +147,56 @@
     }
 
     var out = '';
-    for (var i = 0; i < string.length; ++i) {
-        var c = string.charCodeAt(i);
+    for (var j = 0; j < string.length; j += limit) {
+        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
+        var arr = [];
 
-        if (
-            c === 0x2D // -
-            || c === 0x2E // .
-            || c === 0x5F // _
-            || c === 0x7E // ~
-            || (c >= 0x30 && c <= 0x39) // 0-9
-            || (c >= 0x41 && c <= 0x5A) // a-z
-            || (c >= 0x61 && c <= 0x7A) // A-Z
-            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
-        ) {
-            out += string.charAt(i);
-            continue;
-        }
+        for (var i = 0; i < segment.length; ++i) {
+            var c = segment.charCodeAt(i);
+            if (
+                c === 0x2D // -
+                || c === 0x2E // .
+                || c === 0x5F // _
+                || c === 0x7E // ~
+                || (c >= 0x30 && c <= 0x39) // 0-9
+                || (c >= 0x41 && c <= 0x5A) // a-z
+                || (c >= 0x61 && c <= 0x7A) // A-Z
+                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
+            ) {
+                arr[arr.length] = segment.charAt(i);
+                continue;
+            }
 
-        if (c < 0x80) {
-            out = out + hexTable[c];
-            continue;
-        }
+            if (c < 0x80) {
+                arr[arr.length] = hexTable[c];
+                continue;
+            }
 
-        if (c < 0x800) {
-            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
-            continue;
-        }
+            if (c < 0x800) {
+                arr[arr.length] = hexTable[0xC0 | (c >> 6)]
+                    + hexTable[0x80 | (c & 0x3F)];
+                continue;
+            }
 
-        if (c < 0xD800 || c >= 0xE000) {
-            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
-            continue;
-        }
+            if (c < 0xD800 || c >= 0xE000) {
+                arr[arr.length] = hexTable[0xE0 | (c >> 12)]
+                    + hexTable[0x80 | ((c >> 6) & 0x3F)]
+                    + hexTable[0x80 | (c & 0x3F)];
+                continue;
+            }
 
-        i += 1;
-        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
-        /* eslint operator-linebreak: [2, "before"] */
-        out += hexTable[0xF0 | (c >> 18)]
-            + hexTable[0x80 | ((c >> 12) & 0x3F)]
-            + hexTable[0x80 | ((c >> 6) & 0x3F)]
-            + hexTable[0x80 | (c & 0x3F)];
-    }
+            i += 1;
+            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));
+
+            arr[arr.length] = hexTable[0xF0 | (c >> 18)]
+                + hexTable[0x80 | ((c >> 12) & 0x3F)]
+                + hexTable[0x80 | ((c >> 6) & 0x3F)]
+                + hexTable[0x80 | (c & 0x3F)];
+        }
 
+        out += arr.join('');
+    }
+
     return out;
 };
 
Index: node_modules/nodemon/node_modules/debug/src/browser.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/node_modules/debug/src/browser.js b/node_modules/nodemon/node_modules/debug/src/browser.js
--- a/node_modules/nodemon/node_modules/debug/src/browser.js	
+++ b/node_modules/nodemon/node_modules/debug/src/browser.js	
@@ -125,14 +125,17 @@
 		return false;
 	}
 
+	let m;
+
 	// Is webkit? http://stackoverflow.com/a/16459606/376773
 	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
+	// eslint-disable-next-line no-return-assign
 	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
 		// Is firebug? http://stackoverflow.com/a/398120/376773
 		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
 		// Is firefox >= v31?
 		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
-		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
+		(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31) ||
 		// Double check webkit in userAgent just in case we are in a worker
 		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
 }
@@ -216,7 +219,7 @@
 function load() {
 	let r;
 	try {
-		r = exports.storage.getItem('debug');
+		r = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;
 	} catch (error) {
 		// Swallow
 		// XXX (@Qix-) should we be logging these?
Index: node_modules/postgresql-client/typings/interfaces/query-options.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/query-options.d.ts b/node_modules/postgresql-client/typings/interfaces/query-options.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/query-options.d.ts	
+++ /dev/null	
@@ -1,46 +0,0 @@
-import type { BindParam } from '../connection/bind-param';
-import type { DataFormat } from '../constants.js';
-import type { DataTypeMap } from '../data-type-map';
-import type { DataMappingOptions } from './data-mapping-options.js';
-export interface QueryOptions extends DataMappingOptions {
-    /**
-     * Specifies weather execute query in auto-commit mode
-     * @default true
-     */
-    autoCommit?: boolean;
-    /**
-     * Specifies if rows will be fetched as <FieldName, Value> pair objects or array of values
-     * @default false
-     */
-    objectRows?: boolean;
-    /**
-     * Data type map instance
-     * @default GlobalTypeMap
-     */
-    typeMap?: DataTypeMap;
-    /**
-     * If true, returns Cursor instance instead of rows
-     */
-    cursor?: boolean;
-    /**
-     * Query execution parameters
-     */
-    params?: (BindParam | any)[];
-    /**
-     * Specifies transfer format (binary or text) for each column
-     * @default DataFormat.binary
-     */
-    columnFormat?: DataFormat | DataFormat[];
-    /**
-     * Specifies how many rows will be fetched. For Cursor, this value specifies how many rows will be fetched in a batch
-     * @default 100
-     */
-    fetchCount?: number;
-    /**
-     * When on, if a statement in a transaction block generates an error,
-     * the error is ignored and the transaction continues.
-     * When off (the default), a statement in a transaction block that generates an error aborts the entire transaction
-     * @default true
-     */
-    rollbackOnError?: boolean;
-}
Index: node_modules/semver/ranges/min-version.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/min-version.js b/node_modules/semver/ranges/min-version.js
--- a/node_modules/semver/ranges/min-version.js	
+++ b/node_modules/semver/ranges/min-version.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const Range = require('../classes/range')
 const gt = require('../functions/gt')
Index: node_modules/semver/ranges/max-satisfying.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/max-satisfying.js b/node_modules/semver/ranges/max-satisfying.js
--- a/node_modules/semver/ranges/max-satisfying.js	
+++ b/node_modules/semver/ranges/max-satisfying.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const Range = require('../classes/range')
 
Index: node_modules/postgresql-client/cjs/interfaces/command-result.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/command-result.js b/node_modules/postgresql-client/cjs/interfaces/command-result.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/command-result.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/pg/lib/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/index.js b/node_modules/pg/lib/index.js
--- a/node_modules/pg/lib/index.js	
+++ b/node_modules/pg/lib/index.js	
@@ -1,9 +1,12 @@
 'use strict'
 
-var Client = require('./client')
-var defaults = require('./defaults')
-var Connection = require('./connection')
-var Pool = require('pg-pool')
+const Client = require('./client')
+const defaults = require('./defaults')
+const Connection = require('./connection')
+const Result = require('./result')
+const utils = require('./utils')
+const Pool = require('pg-pool')
+const TypeOverrides = require('./type-overrides')
 const { DatabaseError } = require('pg-protocol')
 const { escapeIdentifier, escapeLiteral } = require('./utils')
 
@@ -15,7 +18,7 @@
   }
 }
 
-var PG = function (clientConstructor) {
+const PG = function (clientConstructor) {
   this.defaults = defaults
   this.Client = clientConstructor
   this.Query = this.Client.Query
@@ -24,8 +27,11 @@
   this.Connection = Connection
   this.types = require('pg-types')
   this.DatabaseError = DatabaseError
+  this.TypeOverrides = TypeOverrides
   this.escapeIdentifier = escapeIdentifier
   this.escapeLiteral = escapeLiteral
+  this.Result = Result
+  this.utils = utils
 }
 
 if (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {
@@ -38,7 +44,7 @@
     configurable: true,
     enumerable: false,
     get() {
-      var native = null
+      let native = null
       try {
         native = new PG(require('./native'))
       } catch (err) {
Index: node_modules/es-define-property/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/es-define-property/index.js b/node_modules/es-define-property/index.js
--- a/node_modules/es-define-property/index.js	
+++ b/node_modules/es-define-property/index.js	
@@ -1,9 +1,7 @@
 'use strict';
 
-var GetIntrinsic = require('get-intrinsic');
-
 /** @type {import('.')} */
-var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
+var $defineProperty = Object.defineProperty || false;
 if ($defineProperty) {
 	try {
 		$defineProperty({}, 'a', { value: 1 });
Index: routes/roomsRoute.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/roomsRoute.js b/routes/roomsRoute.js
--- a/routes/roomsRoute.js	
+++ b/routes/roomsRoute.js	
@@ -7,13 +7,14 @@
   getAllRooms,
   getSingleRoom,
   deleteRoom,
-  updateRoom
+  updateRoom,
+  uploadImage
 } = require('../controllers/roomsController')
 
 router.post('/createRoom', createRooms)
+router.post('/uploadImage', uploadImage)
 router.get('/getRooms', getAllRooms)
 router.put('/:id', updateRoom)
 router.get('/:id', getSingleRoom)
 router.delete('/:id', deleteRoom)
-
 module.exports = router
Index: node_modules/pg-protocol/src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/index.ts b/node_modules/pg-protocol/src/index.ts
--- a/node_modules/pg-protocol/src/index.ts	
+++ b/node_modules/pg-protocol/src/index.ts	
@@ -1,4 +1,4 @@
-import { BackendMessage, DatabaseError } from './messages'
+import { DatabaseError } from './messages'
 import { serialize } from './serializer'
 import { Parser, MessageCallback } from './parser'
 
Index: node_modules/lightning-pool/esm/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/index.js b/node_modules/lightning-pool/esm/index.js
--- a/node_modules/lightning-pool/esm/index.js	
+++ b/node_modules/lightning-pool/esm/index.js	
@@ -1,7 +1,8 @@
 import { Pool } from './pool.js';
-export * from './definitions.js';
-export * from './pool.js';
 export * from './abort-error.js';
+export * from './constants.js';
+export * from './pool.js';
+export * from './types.js';
 export function createPool(factory, config) {
     return new Pool(factory, config);
 }
Index: node_modules/define-data-property/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/package.json b/node_modules/define-data-property/package.json
deleted file mode 100644
--- a/node_modules/define-data-property/package.json	
+++ /dev/null	
@@ -1,106 +0,0 @@
-{
-	"name": "define-data-property",
-	"version": "1.1.4",
-	"description": "Define a data property on an object. Will fall back to assignment in an engine without descriptors.",
-	"main": "index.js",
-	"types": "./index.d.ts",
-	"exports": {
-		".": "./index.js",
-		"./package.json": "./package.json"
-	},
-	"sideEffects": false,
-	"scripts": {
-		"prepack": "npmignore --auto --commentLines=autogenerated",
-		"prepublish": "not-in-publish || npm run prepublishOnly",
-		"prepublishOnly": "safe-publish-latest",
-		"tsc": "tsc -p .",
-		"prelint": "evalmd README.md",
-		"lint": "eslint --ext=js,mjs .",
-		"postlint": "npm run tsc",
-		"pretest": "npm run lint",
-		"tests-only": "nyc tape 'test/**/*.js'",
-		"test": "npm run tests-only",
-		"posttest": "aud --production",
-		"version": "auto-changelog && git add CHANGELOG.md",
-		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
-	},
-	"repository": {
-		"type": "git",
-		"url": "git+https://github.com/ljharb/define-data-property.git"
-	},
-	"keywords": [
-		"define",
-		"data",
-		"property",
-		"object",
-		"accessor",
-		"javascript",
-		"ecmascript",
-		"enumerable",
-		"configurable",
-		"writable"
-	],
-	"author": "Jordan Harband <ljharb@gmail.com>",
-	"funding": {
-		"url": "https://github.com/sponsors/ljharb"
-	},
-	"license": "MIT",
-	"bugs": {
-		"url": "https://github.com/ljharb/define-data-property/issues"
-	},
-	"homepage": "https://github.com/ljharb/define-data-property#readme",
-	"dependencies": {
-		"es-define-property": "^1.0.0",
-		"es-errors": "^1.3.0",
-		"gopd": "^1.0.1"
-	},
-	"devDependencies": {
-		"@ljharb/eslint-config": "^21.1.0",
-		"@types/call-bind": "^1.0.5",
-		"@types/define-properties": "^1.1.5",
-		"@types/es-value-fixtures": "^1.4.4",
-		"@types/for-each": "^0.3.3",
-		"@types/get-intrinsic": "^1.2.2",
-		"@types/gopd": "^1.0.3",
-		"@types/has-property-descriptors": "^1.0.3",
-		"@types/object-inspect": "^1.8.4",
-		"@types/object.getownpropertydescriptors": "^2.1.4",
-		"@types/tape": "^5.6.4",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
-		"es-value-fixtures": "^1.4.2",
-		"eslint": "=8.8.0",
-		"evalmd": "^0.0.19",
-		"for-each": "^0.3.3",
-		"hasown": "^2.0.1",
-		"in-publish": "^2.0.1",
-		"npmignore": "^0.3.1",
-		"nyc": "^10.3.2",
-		"object-inspect": "^1.13.1",
-		"object.getownpropertydescriptors": "^2.1.7",
-		"reflect.ownkeys": "^1.1.4",
-		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.4",
-		"typescript": "next"
-	},
-	"engines": {
-		"node": ">= 0.4"
-	},
-	"testling": {
-		"files": "test/index.js"
-	},
-	"auto-changelog": {
-		"output": "CHANGELOG.md",
-		"template": "keepachangelog",
-		"unreleased": false,
-		"commitLimit": false,
-		"backfillLimit": false,
-		"hideCredit": true
-	},
-	"publishConfig": {
-		"ignore": [
-			".github/workflows",
-			"types/reflect.ownkeys"
-		]
-	}
-}
Index: node_modules/putil-merge/lib/merge.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/putil-merge/lib/merge.d.ts b/node_modules/putil-merge/lib/merge.d.ts
deleted file mode 100644
--- a/node_modules/putil-merge/lib/merge.d.ts	
+++ /dev/null	
@@ -1,30 +0,0 @@
-export as namespace mergeLib;
-
-export = merge;
-
-declare function merge(target: object, source: object, options?: merge.IMergeOptions): object;
-
-declare namespace merge {
-
-  interface ArrayMergeCallback {
-    (trgVal: any, srcVal: any): any[];
-  }
-
-  interface FilterCallback {
-    (source: object, key: string): any;
-  }
-
-  export interface IMergeOptions {
-    deep?: boolean | ((v: any) => boolean);
-    clone?: boolean;
-    combine?: boolean;
-    descriptor?: boolean;
-    filter?: FilterCallback;
-    arrayMerge?: boolean | ArrayMergeCallback;
-  }
-
-  export function all(object: Array<object>, options?: IMergeOptions): object;
-
-  export function arrayCombine(target: any, source: Array<any>): Array<any>;
-
-}
Index: node_modules/define-data-property/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/CHANGELOG.md b/node_modules/define-data-property/CHANGELOG.md
deleted file mode 100644
--- a/node_modules/define-data-property/CHANGELOG.md	
+++ /dev/null	
@@ -1,70 +0,0 @@
-# Changelog
-
-All notable changes to this project will be documented in this file.
-
-The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
-and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
-
-## [v1.1.4](https://github.com/ljharb/define-data-property/compare/v1.1.3...v1.1.4) - 2024-02-13
-
-### Commits
-
-- [Refactor] use `es-define-property` [`90f2f4c`](https://github.com/ljharb/define-data-property/commit/90f2f4cc20298401e71c28e1e08888db12021453)
-- [Dev Deps] update `@types/object.getownpropertydescriptors` [`cd929d9`](https://github.com/ljharb/define-data-property/commit/cd929d9a04f5f2fdcfa9d5be140940b91a083153)
-
-## [v1.1.3](https://github.com/ljharb/define-data-property/compare/v1.1.2...v1.1.3) - 2024-02-12
-
-### Commits
-
-- [types] hand-write d.ts instead of emitting it [`0cbc988`](https://github.com/ljharb/define-data-property/commit/0cbc988203c105f2d97948327c7167ebd33bd318)
-- [meta] simplify `exports` [`690781e`](https://github.com/ljharb/define-data-property/commit/690781eed28bbf2d6766237efda0ba6dd591609e)
-- [Dev Deps] update `hasown`; clean up DT packages [`6cdfd1c`](https://github.com/ljharb/define-data-property/commit/6cdfd1cb2d91d791bfd18cda5d5cab232fd5d8fc)
-- [actions] cleanup [`3142bc6`](https://github.com/ljharb/define-data-property/commit/3142bc6a4bc406a51f5b04f31e98562a27f35ffd)
-- [meta] add `funding` [`8474423`](https://github.com/ljharb/define-data-property/commit/847442391a79779af3e0f1bf0b5bb923552b7804)
-- [Deps] update `get-intrinsic` [`3e9be00`](https://github.com/ljharb/define-data-property/commit/3e9be00e07784ba34e7c77d8bc0fdbc832ad61de)
-
-## [v1.1.2](https://github.com/ljharb/define-data-property/compare/v1.1.1...v1.1.2) - 2024-02-05
-
-### Commits
-
-- [Dev Deps] update @types packages, `object-inspect`, `tape`, `typescript` [`df41bf8`](https://github.com/ljharb/define-data-property/commit/df41bf84ca3456be6226055caab44e38e3a7fd2f)
-- [Dev Deps] update DT packages, `aud`, `npmignore`, `tape`, typescript` [`fab0e4e`](https://github.com/ljharb/define-data-property/commit/fab0e4ec709ee02b79f42d6db3ee5f26e0a34b8a)
-- [Dev Deps] use `hasown` instead of `has` [`aa51ef9`](https://github.com/ljharb/define-data-property/commit/aa51ef93f6403d49d9bb72a807bcdb6e418978c0)
-- [Refactor] use `es-errors`, so things that only need those do not need `get-intrinsic` [`d89be50`](https://github.com/ljharb/define-data-property/commit/d89be50571175888d391238605122679f7e65ffc)
-- [Deps] update `has-property-descriptors` [`7af887c`](https://github.com/ljharb/define-data-property/commit/7af887c9083b59b195b0079e04815cfed9fcee2b)
-- [Deps] update `get-intrinsic` [`bb8728e`](https://github.com/ljharb/define-data-property/commit/bb8728ec42cd998505a7157ae24853a560c20646)
-
-## [v1.1.1](https://github.com/ljharb/define-data-property/compare/v1.1.0...v1.1.1) - 2023-10-12
-
-### Commits
-
-- [Tests] fix tests in ES3 engines [`5c6920e`](https://github.com/ljharb/define-data-property/commit/5c6920edd1f52f675b02f417e539c28135b43f94)
-- [Dev Deps] update `@types/es-value-fixtures`, `@types/for-each`, `@types/gopd`, `@types/has-property-descriptors`, `tape`, `typescript` [`7d82dfc`](https://github.com/ljharb/define-data-property/commit/7d82dfc20f778b4465bba06335dd53f6f431aea3)
-- [Fix] IE 8 has a broken `Object.defineProperty` [`0672e1a`](https://github.com/ljharb/define-data-property/commit/0672e1af2a9fcc787e7c23b96dea60d290df5548)
-- [meta] emit types on prepack [`73acb1f`](https://github.com/ljharb/define-data-property/commit/73acb1f903c21b314ec7156bf10f73c7910530c0)
-- [Dev Deps] update `tape`, `typescript` [`9489a77`](https://github.com/ljharb/define-data-property/commit/9489a7738bf2ecf0ac71d5b78ec4ca6ad7ba0142)
-
-## [v1.1.0](https://github.com/ljharb/define-data-property/compare/v1.0.1...v1.1.0) - 2023-09-13
-
-### Commits
-
-- [New] add `loose` arg [`155235a`](https://github.com/ljharb/define-data-property/commit/155235a4c4d7741f6de01cd87c99599a56654b72)
-- [New] allow `null` to be passed for the non* args [`7d2fa5f`](https://github.com/ljharb/define-data-property/commit/7d2fa5f06be0392736c13b126f7cd38979f34792)
-
-## [v1.0.1](https://github.com/ljharb/define-data-property/compare/v1.0.0...v1.0.1) - 2023-09-12
-
-### Commits
-
-- [meta] add TS types [`43d763c`](https://github.com/ljharb/define-data-property/commit/43d763c6c883f652de1c9c02ef6216ee507ffa69)
-- [Dev Deps] update `@types/tape`, `typescript` [`f444985`](https://github.com/ljharb/define-data-property/commit/f444985811c36f3e6448a03ad2f9b7898917f4c7)
-- [meta] add `safe-publish-latest`, [`172bb10`](https://github.com/ljharb/define-data-property/commit/172bb10890896ebb160e64398f6ee55760107bee)
-
-## v1.0.0 - 2023-09-12
-
-### Commits
-
-- Initial implementation, tests, readme [`5b43d6b`](https://github.com/ljharb/define-data-property/commit/5b43d6b44e675a904810467a7d4e0adb7efc3196)
-- Initial commit [`35e577a`](https://github.com/ljharb/define-data-property/commit/35e577a6ba59a98befa97776d70d90f3bea9009d)
-- npm init [`82a0a04`](https://github.com/ljharb/define-data-property/commit/82a0a04a321ca7de220af02d41e2745e8a9962ed)
-- Only apps should have lockfiles [`96df244`](https://github.com/ljharb/define-data-property/commit/96df244a3c6f426f9a2437be825d1c6f5dd7158e)
-- [meta] use `npmignore` to autogenerate an npmignore file [`a87ff18`](https://github.com/ljharb/define-data-property/commit/a87ff18cb79e14c2eb5720486c4759fd9a189375)
Index: node_modules/pg-protocol/dist/outbound-serializer.test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/outbound-serializer.test.js b/node_modules/pg-protocol/dist/outbound-serializer.test.js
--- a/node_modules/pg-protocol/dist/outbound-serializer.test.js	
+++ b/node_modules/pg-protocol/dist/outbound-serializer.test.js	
@@ -42,14 +42,14 @@
         assert_1.default.deepEqual(actual, new buffer_list_1.default().addString('data').join(true, 'p'));
     });
     it('builds query message', function () {
-        var txt = 'select * from boom';
+        const txt = 'select * from boom';
         const actual = serializer_1.serialize.query(txt);
         assert_1.default.deepEqual(actual, new buffer_list_1.default().addCString(txt).join(true, 'Q'));
     });
     describe('parse message', () => {
         it('builds parse message', function () {
             const actual = serializer_1.serialize.parse({ text: '!' });
-            var expected = new buffer_list_1.default().addCString('').addCString('!').addInt16(0).join(true, 'P');
+            const expected = new buffer_list_1.default().addCString('').addCString('!').addInt16(0).join(true, 'P');
             assert_1.default.deepEqual(actual, expected);
         });
         it('builds parse message with named query', function () {
@@ -58,7 +58,7 @@
                 text: 'select * from boom',
                 types: [],
             });
-            var expected = new buffer_list_1.default().addCString('boom').addCString('select * from boom').addInt16(0).join(true, 'P');
+            const expected = new buffer_list_1.default().addCString('boom').addCString('select * from boom').addInt16(0).join(true, 'P');
             assert_1.default.deepEqual(actual, expected);
         });
         it('with multiple parameters', function () {
@@ -67,7 +67,7 @@
                 text: 'select * from bang where name = $1',
                 types: [1, 2, 3, 4],
             });
-            var expected = new buffer_list_1.default()
+            const expected = new buffer_list_1.default()
                 .addCString('force')
                 .addCString('select * from bang where name = $1')
                 .addInt16(4)
@@ -82,11 +82,12 @@
     describe('bind messages', function () {
         it('with no values', function () {
             const actual = serializer_1.serialize.bind();
-            var expectedBuffer = new buffer_list_1.default()
+            const expectedBuffer = new buffer_list_1.default()
                 .addCString('')
                 .addCString('')
                 .addInt16(0)
                 .addInt16(0)
+                .addInt16(1)
                 .addInt16(0)
                 .join(true, 'B');
             assert_1.default.deepEqual(actual, expectedBuffer);
@@ -97,7 +98,7 @@
                 statement: 'woo',
                 values: ['1', 'hi', null, 'zing'],
             });
-            var expectedBuffer = new buffer_list_1.default()
+            const expectedBuffer = new buffer_list_1.default()
                 .addCString('bang') // portal name
                 .addCString('woo') // statement name
                 .addInt16(4)
@@ -113,6 +114,7 @@
                 .addInt32(-1)
                 .addInt32(4)
                 .add(Buffer.from('zing'))
+                .addInt16(1)
                 .addInt16(0)
                 .join(true, 'B');
             assert_1.default.deepEqual(actual, expectedBuffer);
@@ -125,7 +127,7 @@
             values: ['1', 'hi', null, 'zing'],
             valueMapper: () => null,
         });
-        var expectedBuffer = new buffer_list_1.default()
+        const expectedBuffer = new buffer_list_1.default()
             .addCString('bang') // portal name
             .addCString('woo') // statement name
             .addInt16(4)
@@ -138,6 +140,7 @@
             .addInt32(-1)
             .addInt32(-1)
             .addInt32(-1)
+            .addInt16(1)
             .addInt16(0)
             .join(true, 'B');
         assert_1.default.deepEqual(actual, expectedBuffer);
@@ -148,7 +151,7 @@
             statement: 'woo',
             values: ['1', 'hi', null, Buffer.from('zing', 'utf8')],
         });
-        var expectedBuffer = new buffer_list_1.default()
+        const expectedBuffer = new buffer_list_1.default()
             .addCString('bang') // portal name
             .addCString('woo') // statement name
             .addInt16(4) // value count
@@ -164,6 +167,7 @@
             .addInt32(-1)
             .addInt32(4)
             .add(Buffer.from('zing', 'utf-8'))
+            .addInt16(1)
             .addInt16(0)
             .join(true, 'B');
         assert_1.default.deepEqual(actual, expectedBuffer);
@@ -171,7 +175,7 @@
     describe('builds execute message', function () {
         it('for unamed portal with no row limit', function () {
             const actual = serializer_1.serialize.execute();
-            var expectedBuffer = new buffer_list_1.default().addCString('').addInt32(0).join(true, 'E');
+            const expectedBuffer = new buffer_list_1.default().addCString('').addInt32(0).join(true, 'E');
             assert_1.default.deepEqual(actual, expectedBuffer);
         });
         it('for named portal with row limit', function () {
@@ -179,46 +183,46 @@
                 portal: 'my favorite portal',
                 rows: 100,
             });
-            var expectedBuffer = new buffer_list_1.default().addCString('my favorite portal').addInt32(100).join(true, 'E');
+            const expectedBuffer = new buffer_list_1.default().addCString('my favorite portal').addInt32(100).join(true, 'E');
             assert_1.default.deepEqual(actual, expectedBuffer);
         });
     });
     it('builds flush command', function () {
         const actual = serializer_1.serialize.flush();
-        var expected = new buffer_list_1.default().join(true, 'H');
+        const expected = new buffer_list_1.default().join(true, 'H');
         assert_1.default.deepEqual(actual, expected);
     });
     it('builds sync command', function () {
         const actual = serializer_1.serialize.sync();
-        var expected = new buffer_list_1.default().join(true, 'S');
+        const expected = new buffer_list_1.default().join(true, 'S');
         assert_1.default.deepEqual(actual, expected);
     });
     it('builds end command', function () {
         const actual = serializer_1.serialize.end();
-        var expected = Buffer.from([0x58, 0, 0, 0, 4]);
+        const expected = Buffer.from([0x58, 0, 0, 0, 4]);
         assert_1.default.deepEqual(actual, expected);
     });
     describe('builds describe command', function () {
         it('describe statement', function () {
             const actual = serializer_1.serialize.describe({ type: 'S', name: 'bang' });
-            var expected = new buffer_list_1.default().addChar('S').addCString('bang').join(true, 'D');
+            const expected = new buffer_list_1.default().addChar('S').addCString('bang').join(true, 'D');
             assert_1.default.deepEqual(actual, expected);
         });
         it('describe unnamed portal', function () {
             const actual = serializer_1.serialize.describe({ type: 'P' });
-            var expected = new buffer_list_1.default().addChar('P').addCString('').join(true, 'D');
+            const expected = new buffer_list_1.default().addChar('P').addCString('').join(true, 'D');
             assert_1.default.deepEqual(actual, expected);
         });
     });
     describe('builds close command', function () {
         it('describe statement', function () {
             const actual = serializer_1.serialize.close({ type: 'S', name: 'bang' });
-            var expected = new buffer_list_1.default().addChar('S').addCString('bang').join(true, 'C');
+            const expected = new buffer_list_1.default().addChar('S').addCString('bang').join(true, 'C');
             assert_1.default.deepEqual(actual, expected);
         });
         it('describe unnamed portal', function () {
             const actual = serializer_1.serialize.close({ type: 'P' });
-            var expected = new buffer_list_1.default().addChar('P').addCString('').join(true, 'C');
+            const expected = new buffer_list_1.default().addChar('P').addCString('').join(true, 'C');
             assert_1.default.deepEqual(actual, expected);
         });
     });
Index: node_modules/set-function-length/tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/tsconfig.json b/node_modules/set-function-length/tsconfig.json
deleted file mode 100644
--- a/node_modules/set-function-length/tsconfig.json	
+++ /dev/null	
@@ -1,9 +0,0 @@
-{
-	"extends": "@ljharb/tsconfig",
-	"compilerOptions": {
-		"target": "es2021",
-	},
-	"exclude": [
-		"coverage",
-	],
-}
Index: node_modules/doublylinked/lib/doubly-linked.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/doublylinked/lib/doubly-linked.js b/node_modules/doublylinked/lib/doubly-linked.js
--- a/node_modules/doublylinked/lib/doubly-linked.js	
+++ b/node_modules/doublylinked/lib/doubly-linked.js	
@@ -12,7 +12,6 @@
  * @class
  */
 class DoublyLinked {
-
   /**
    * @param {*} element... - The elements to add to the end of the list
    * @constructor
@@ -23,8 +22,9 @@
     this._tail = undefined;
     this._length = 0;
     this._eof = undefined;
-    if (arguments.length)
-      this.push.apply(this, arguments);
+    if (element.length) {
+      this.push.apply(this, element);
+    }
   }
 
   /**
@@ -74,9 +74,9 @@
     };
     this.reduce(mergeFn, result);
     for (const arg of element) {
-      if (arg instanceof DoublyLinked)
+      if (arg instanceof DoublyLinked) {
         arg.reduce(mergeFn, result);
-      else result.push(arg);
+      } else result.push(arg);
     }
 
     return result.reset();
@@ -97,11 +97,11 @@
             _cursor = _cursor ? _cursor.next : this.head;
             return {
               value: _cursor && [i++, _cursor.value],
-              done: !_cursor
+              done: !_cursor,
             };
-          }
+          },
         };
-      }
+      },
     };
   }
 
@@ -120,11 +120,11 @@
             _cursor = _cursor ? _cursor.next : this.head;
             return {
               value: _cursor && i++,
-              done: !_cursor
+              done: !_cursor,
             };
-          }
+          },
         };
-      }
+      },
     };
   }
 
@@ -142,11 +142,11 @@
             _cursor = _cursor ? _cursor.next : this.head;
             return {
               value: _cursor && _cursor.value,
-              done: !_cursor
+              done: !_cursor,
             };
-          }
+          },
         };
-      }
+      },
     };
   }
 
@@ -160,18 +160,21 @@
    * @public
    */
   every(callback, thisArg) {
-    if (typeof callback !== 'function')
+    if (typeof callback !== 'function') {
       throw new TypeError('You must provide a function as first argument');
-    if (!(this._length && callback))
+    }
+    if (!(this._length && callback)) {
       return true;
+    }
     thisArg = thisArg !== undefined ? thisArg : this;
     let tmp = this._head;
     let nxt;
     let i = 0;
     while (tmp) {
       nxt = tmp.next;
-      if (!callback.call(thisArg, tmp.value, i++, thisArg))
+      if (!callback.call(thisArg, tmp.value, i++, thisArg)) {
         return false;
+      }
       tmp = nxt;
     }
     return true;
@@ -187,15 +190,18 @@
    * @public
    */
   everyRight(callback, thisArg) {
-    if (typeof callback !== 'function')
+    if (typeof callback !== 'function') {
       throw new TypeError('You must provide a function as first argument');
-    if (!(this._length && callback))
+    }
+    if (!(this._length && callback)) {
       return true;
+    }
     thisArg = thisArg !== undefined ? thisArg : this;
     let tmp = this.tail;
     for (let i = 0; i < this._length; i++) {
-      if (!callback.call(thisArg, tmp.value, this._length - i - 1, thisArg))
+      if (!callback.call(thisArg, tmp.value, this._length - i - 1, thisArg)) {
         return false;
+      }
       tmp = tmp.prev;
     }
     return true;
@@ -211,13 +217,15 @@
    * @public
    */
   filter(callback, thisArg) {
-    if (typeof callback !== 'function')
+    if (typeof callback !== 'function') {
       throw new TypeError('You must provide a function as first argument');
+    }
     thisArg = thisArg !== undefined ? thisArg : this;
     let index = 0;
     return this.reduce((acc, value) => {
-      if (callback.call(thisArg, value, index++, thisArg))
+      if (callback.call(thisArg, value, index++, thisArg)) {
         acc.push(value);
+      }
       return acc;
     }, new DoublyLinked());
   }
@@ -232,10 +240,12 @@
    * @public
    */
   find(callback, thisArg) {
-    if (typeof callback !== 'function')
+    if (typeof callback !== 'function') {
       throw new TypeError('You must provide a function as first argument');
-    if (!this._length)
+    }
+    if (!this._length) {
       return;
+    }
     thisArg = thisArg !== undefined ? thisArg : this;
     let tmp = this.head;
     for (let i = 0; i < this.length; i++) {
@@ -287,18 +297,18 @@
    * @public
    */
   includes(searchElement, fromIndex) {
-
-    const sameValueZero = (x, y) => {
-      return x === y ||
-          (typeof x === 'number' && typeof y === 'number' &&
-              isNaN(x) && isNaN(y));
-    };
+    const sameValueZero = (x, y) =>
+      x === y ||
+      (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
 
     fromIndex = fromIndex || 0;
-    if (fromIndex < 0)
+    if (fromIndex < 0) {
       fromIndex = this.length + fromIndex;
-    this.find((element, index) =>
-        (index >= fromIndex && sameValueZero(element, searchElement)));
+    }
+    this.find(
+      (element, index) =>
+        index >= fromIndex && sameValueZero(element, searchElement),
+    );
     return !!this.cursor;
   }
 
@@ -338,7 +348,7 @@
   join(separator) {
     separator = separator || ',';
     let out = '';
-    this.forEach((value) => {
+    this.forEach(value => {
       out += (out ? separator : '') + value;
     });
     return out;
@@ -353,10 +363,13 @@
    * @public
    */
   map(callback) {
-    if (typeof callback !== 'function')
+    if (typeof callback !== 'function') {
       throw new TypeError('You must provide a function as first argument');
+    }
     const out = new DoublyLinked();
-    this.forEach((value, index, instance) => out.push(callback(value, index, instance)));
+    this.forEach((value, index, instance) =>
+      out.push(callback(value, index, instance)),
+    );
     return out.reset();
   }
 
@@ -417,8 +430,9 @@
    * @public
    */
   push(...element) {
-    if (element.length)
+    if (element.length) {
       this._eof = false;
+    }
     for (const arg of element) {
       const node = new Node(this, arg);
       if (this._length) {
@@ -444,8 +458,9 @@
    * @public
    */
   reduce(callback, initialValue) {
-    if (typeof callback !== 'function')
+    if (typeof callback !== 'function') {
       throw new TypeError('You must provide a function as first argument');
+    }
     let accumulator = initialValue;
     this.forEach((value, index) => {
       accumulator = callback(accumulator, value, index, this);
@@ -463,8 +478,9 @@
    * @public
    */
   reduceRight(callback, initialValue) {
-    if (typeof callback !== 'function')
+    if (typeof callback !== 'function') {
       throw new TypeError('You must provide a function as first argument');
+    }
     let accumulator = initialValue;
     this.forEachRight((value, index) => {
       accumulator = callback(accumulator, value, index, this);
@@ -508,7 +524,8 @@
    */
   reverse() {
     let cur = this._head;
-    let p, n;
+    let p;
+    let n;
     for (let i = 0; i < this._length; i++) {
       p = cur.prev;
       n = cur.next;
@@ -552,8 +569,9 @@
     start = start || 0;
     const acc = [];
     this.every((value, index) => {
-      if (index >= start)
+      if (index >= start) {
         acc.push(value);
+      }
       return !end || index < end;
     });
     return acc;
@@ -568,8 +586,11 @@
    * @public
    */
   some(callback, thisArg) {
-    return !this.every((element, index, instance) =>
-        !callback.call(this, element, index, instance), thisArg);
+    return !this.every(
+      (element, index, instance) =>
+        !callback.call(this, element, index, instance),
+      thisArg,
+    );
   }
 
   /**
@@ -581,8 +602,11 @@
    * @public
    */
   someRight(callback, thisArg) {
-    return !this.everyRight((element, index, instance) =>
-        !callback.call(this, element, index, instance), thisArg);
+    return !this.everyRight(
+      (element, index, instance) =>
+        !callback.call(this, element, index, instance),
+      thisArg,
+    );
   }
 
   /**
@@ -639,12 +663,11 @@
         _cursor = _cursor ? _cursor.next : this.head;
         return {
           value: _cursor && _cursor.value,
-          done: !_cursor
+          done: !_cursor,
         };
-      }
+      },
     };
   }
-
 }
 
 /**
@@ -660,20 +683,26 @@
   }
 
   remove() {
-    if (!this.list)
+    if (!this.list) {
       return;
-    if (this.prev)
-        // noinspection JSUnresolvedVariable
+    }
+    if (this.prev) {
+      // noinspection JSUnresolvedVariable
       this.prev.next = this.next;
-    if (this.next)
-        // noinspection JSUnresolvedVariable
+    }
+    if (this.next) {
+      // noinspection JSUnresolvedVariable
       this.next.prev = this.prev;
-    if (this === this.list._cursor)
+    }
+    if (this === this.list._cursor) {
       this.list._cursor = this.next || this.prev;
-    if (this === this.list._head)
+    }
+    if (this === this.list._head) {
       this.list._head = this.next;
-    if (this === this.list._tail)
+    }
+    if (this === this.list._tail) {
       this.list._tail = this.prev;
+    }
     this.list._length--;
     this.prev = undefined;
     this.next = undefined;
Index: node_modules/postgresql-client/cjs/protocol/pg-socket.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/pg-socket.js b/node_modules/postgresql-client/cjs/protocol/pg-socket.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/pg-socket.js	
+++ /dev/null	
@@ -1,345 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.PgSocket = void 0;
-const crypto_1 = __importDefault(require("crypto"));
-const net_1 = __importDefault(require("net"));
-const putil_promisify_1 = __importDefault(require("putil-promisify"));
-const tls_1 = __importDefault(require("tls"));
-const constants_js_1 = require("../constants.js");
-const safe_event_emitter_js_1 = require("../safe-event-emitter.js");
-const backend_js_1 = require("./backend.js");
-const database_error_js_1 = require("./database-error.js");
-const frontend_js_1 = require("./frontend.js");
-const protocol_js_1 = require("./protocol.js");
-const sasl_js_1 = require("./sasl.js");
-const DEFAULT_PORT_NUMBER = 5432;
-const COMMAND_RESULT_PATTERN = /^([^\d]+)(?: (\d+)(?: (\d+))?)?$/;
-class PgSocket extends safe_event_emitter_js_1.SafeEventEmitter {
-    constructor(options) {
-        super();
-        this.options = options;
-        this._state = constants_js_1.ConnectionState.CLOSED;
-        this._backend = new backend_js_1.Backend();
-        this._sessionParameters = {};
-        this._frontend = new frontend_js_1.Frontend({ buffer: options.buffer });
-        this.setMaxListeners(99);
-    }
-    get state() {
-        if (!this._socket || this._socket.destroyed)
-            this._state = constants_js_1.ConnectionState.CLOSED;
-        return this._state;
-    }
-    get processID() {
-        return this._processID;
-    }
-    get secretKey() {
-        return this._secretKey;
-    }
-    get sessionParameters() {
-        return this._sessionParameters;
-    }
-    connect() {
-        if (this._socket)
-            return;
-        this._state = constants_js_1.ConnectionState.CONNECTING;
-        const options = this.options;
-        const socket = (this._socket = new net_1.default.Socket());
-        const errorHandler = err => {
-            this._state = constants_js_1.ConnectionState.CLOSED;
-            this._removeListeners();
-            this._reset();
-            socket.destroy();
-            this._socket = undefined;
-            this.emit('error', err);
-        };
-        const connectHandler = () => {
-            socket.setTimeout(0);
-            if (this.options.keepAlive || this.options.keepAlive == null)
-                socket.setKeepAlive(true);
-            if (options.ssl) {
-                socket.write(this._frontend.getSSLRequestMessage());
-                socket.once('data', x => {
-                    this._removeListeners();
-                    if (x.toString() === 'S') {
-                        const tslOptions = { ...options.ssl, socket };
-                        if (options.host && net_1.default.isIP(options.host) === 0)
-                            tslOptions.servername = options.host;
-                        const tlsSocket = (this._socket = tls_1.default.connect(tslOptions));
-                        tlsSocket.once('error', errorHandler);
-                        tlsSocket.once('secureConnect', () => {
-                            this._removeListeners();
-                            this._handleConnect();
-                        });
-                        return;
-                    }
-                    if (x.toString() === 'N')
-                        return errorHandler(new Error('Server does not support SSL connections'));
-                    return errorHandler(new Error('There was an error establishing an SSL connection'));
-                });
-            }
-            else {
-                this._handleConnect();
-            }
-        };
-        socket.setNoDelay(true);
-        socket.setTimeout(options.connectTimeoutMs || 30000, () => errorHandler(new Error('Connection timed out')));
-        socket.once('error', errorHandler);
-        socket.once('connect', connectHandler);
-        this.emit('connecting');
-        if (options.host && options.host.startsWith('/'))
-            socket.connect(options.host);
-        else
-            socket.connect(options.port || DEFAULT_PORT_NUMBER, options.host || 'localhost');
-    }
-    close() {
-        if (!this._socket || this._socket.destroyed) {
-            this._state = constants_js_1.ConnectionState.CLOSED;
-            this._socket = undefined;
-            this._reset();
-            return;
-        }
-        if (this._state === constants_js_1.ConnectionState.CLOSING)
-            return;
-        const socket = this._socket;
-        this._state = constants_js_1.ConnectionState.CLOSING;
-        this._removeListeners();
-        socket.once('close', () => this._handleClose());
-        socket.destroy();
-    }
-    sendParseMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendParseMessage', args });
-        this._send(this._frontend.getParseMessage(args), cb);
-    }
-    sendBindMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendBindMessage', args });
-        this._send(this._frontend.getBindMessage(args), cb);
-    }
-    sendDescribeMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendDescribeMessage', args });
-        this._send(this._frontend.getDescribeMessage(args), cb);
-    }
-    sendExecuteMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendDescribeMessage', args });
-        this._send(this._frontend.getExecuteMessage(args), cb);
-    }
-    sendCloseMessage(args, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendCloseMessage', args });
-        this._send(this._frontend.getCloseMessage(args), cb);
-    }
-    sendQueryMessage(sql, cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendQueryMessage', sql });
-        this._send(this._frontend.getQueryMessage(sql), cb);
-    }
-    sendFlushMessage(cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendFlushMessage' });
-        this._send(this._frontend.getFlushMessage(), cb);
-    }
-    sendTerminateMessage(cb) {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendTerminateMessage' });
-        this._send(this._frontend.getTerminateMessage(), cb);
-    }
-    sendSyncMessage() {
-        if (this.listenerCount('debug'))
-            this.emit('debug', { location: 'PgSocket.sendSyncMessage' });
-        this._send(this._frontend.getSyncMessage());
-    }
-    capture(callback) {
-        return new Promise((resolve, reject) => {
-            const done = (err, result) => {
-                this.removeListener('error', errorHandler);
-                this.removeListener('message', msgHandler);
-                if (err)
-                    reject(err);
-                else
-                    resolve(result);
-            };
-            const errorHandler = (err) => {
-                this.removeListener('message', msgHandler);
-                reject(err);
-            };
-            const msgHandler = (code, msg) => {
-                const x = callback(code, msg, done);
-                if (putil_promisify_1.default.isPromise(x))
-                    x.catch(err => done(err));
-            };
-            this.once('error', errorHandler);
-            this.on('message', msgHandler);
-        });
-    }
-    _removeListeners() {
-        if (!this._socket)
-            return;
-        this._socket.removeAllListeners('error');
-        this._socket.removeAllListeners('connect');
-        this._socket.removeAllListeners('data');
-        this._socket.removeAllListeners('close');
-    }
-    _reset() {
-        this._backend.reset();
-        this._sessionParameters = {};
-        this._processID = undefined;
-        this._secretKey = undefined;
-        this._saslSession = undefined;
-    }
-    _handleConnect() {
-        const socket = this._socket;
-        if (!socket)
-            return;
-        this._state = constants_js_1.ConnectionState.AUTHORIZING;
-        this._reset();
-        socket.on('data', (data) => this._handleData(data));
-        socket.on('error', (err) => this._handleError(err));
-        socket.on('close', () => this._handleClose());
-        this._send(this._frontend.getStartupMessage({
-            user: this.options.user || 'postgres',
-            database: this.options.database || '',
-        }));
-    }
-    _handleClose() {
-        this._reset();
-        this._socket = undefined;
-        this._state = constants_js_1.ConnectionState.CLOSED;
-        this.emit('close');
-    }
-    _handleError(err) {
-        if (this._state !== constants_js_1.ConnectionState.READY) {
-            this._socket?.end();
-        }
-        this.emit('error', err);
-    }
-    _handleData(data) {
-        this._backend.parse(data, (code, payload) => {
-            try {
-                switch (code) {
-                    case protocol_js_1.Protocol.BackendMessageCode.Authentication:
-                        this._handleAuthenticationMessage(payload);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.ErrorResponse:
-                        this.emit('error', new database_error_js_1.DatabaseError(payload));
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.NoticeResponse:
-                        this.emit('notice', payload);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.NotificationResponse:
-                        this.emit('notification', payload);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.ParameterStatus:
-                        this._handleParameterStatus(payload);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.BackendKeyData:
-                        this._handleBackendKeyData(payload);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.ReadyForQuery:
-                        if (this._state !== constants_js_1.ConnectionState.READY) {
-                            this._state = constants_js_1.ConnectionState.READY;
-                            this.emit('ready');
-                        }
-                        else
-                            this.emit('message', code, payload);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.CommandComplete: {
-                        const msg = this._handleCommandComplete(payload);
-                        this.emit('message', code, msg);
-                        break;
-                    }
-                    default:
-                        this.emit('message', code, payload);
-                }
-            }
-            catch (e) {
-                this._handleError(e);
-            }
-        });
-    }
-    _resolvePassword(cb) {
-        (async () => {
-            const pass = typeof this.options.password === 'function' ? await this.options.password() : this.options.password;
-            cb(pass || '');
-        })().catch(err => this._handleError(err));
-    }
-    _handleAuthenticationMessage(msg) {
-        if (!msg) {
-            this.emit('authenticate');
-            return;
-        }
-        switch (msg.kind) {
-            case protocol_js_1.Protocol.AuthenticationMessageKind.CleartextPassword:
-                this._resolvePassword(password => {
-                    this._send(this._frontend.getPasswordMessage(password));
-                });
-                break;
-            case protocol_js_1.Protocol.AuthenticationMessageKind.MD5Password:
-                this._resolvePassword(password => {
-                    const md5 = (x) => crypto_1.default.createHash('md5').update(x, 'utf8').digest('hex');
-                    const l = md5(password + this.options.user);
-                    const r = md5(Buffer.concat([Buffer.from(l), msg.salt]));
-                    const pass = 'md5' + r;
-                    this._send(this._frontend.getPasswordMessage(pass));
-                });
-                break;
-            case protocol_js_1.Protocol.AuthenticationMessageKind.SASL: {
-                if (!msg.mechanisms.includes('SCRAM-SHA-256'))
-                    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported');
-                const saslSession = (this._saslSession = sasl_js_1.SASL.createSession(this.options.user || '', 'SCRAM-SHA-256'));
-                this._send(this._frontend.getSASLMessage(saslSession));
-                break;
-            }
-            case protocol_js_1.Protocol.AuthenticationMessageKind.SASLContinue: {
-                const saslSession = this._saslSession;
-                if (!saslSession)
-                    throw new Error('SASL: Session not started yet');
-                this._resolvePassword(password => {
-                    sasl_js_1.SASL.continueSession(saslSession, password, msg.data);
-                    const buf = this._frontend.getSASLFinalMessage(saslSession);
-                    this._send(buf);
-                });
-                break;
-            }
-            case protocol_js_1.Protocol.AuthenticationMessageKind.SASLFinal: {
-                const session = this._saslSession;
-                if (!session)
-                    throw new Error('SASL: Session not started yet');
-                sasl_js_1.SASL.finalizeSession(session, msg.data);
-                this._saslSession = undefined;
-                break;
-            }
-        }
-    }
-    _handleParameterStatus(msg) {
-        this._sessionParameters[msg.name] = msg.value;
-    }
-    _handleBackendKeyData(msg) {
-        this._processID = msg.processID;
-        this._secretKey = msg.secretKey;
-    }
-    _handleCommandComplete(msg) {
-        const m = msg.command && msg.command.match(COMMAND_RESULT_PATTERN);
-        const result = {
-            command: m[1],
-        };
-        if (m[3] != null) {
-            result.oid = parseInt(m[2], 10);
-            result.rowCount = parseInt(m[3], 10);
-        }
-        else if (m[2])
-            result.rowCount = parseInt(m[2], 10);
-        return result;
-    }
-    _send(data, cb) {
-        if (this._socket && this._socket.writable) {
-            this._socket.write(data, cb);
-        }
-    }
-}
-exports.PgSocket = PgSocket;
Index: node_modules/express/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/express/package.json b/node_modules/express/package.json
--- a/node_modules/express/package.json	
+++ b/node_modules/express/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "express",
   "description": "Fast, unopinionated, minimalist web framework",
-  "version": "4.19.2",
+  "version": "4.21.2",
   "author": "TJ Holowaychuk <tj@vision-media.ca>",
   "contributors": [
     "Aaron Heckmann <aaron.heckmann+github@gmail.com>",
@@ -15,6 +15,10 @@
   "license": "MIT",
   "repository": "expressjs/express",
   "homepage": "http://expressjs.com/",
+  "funding": {
+    "type": "opencollective",
+    "url": "https://opencollective.com/express"
+  },
   "keywords": [
     "express",
     "framework",
@@ -30,30 +34,30 @@
   "dependencies": {
     "accepts": "~1.3.8",
     "array-flatten": "1.1.1",
-    "body-parser": "1.20.2",
+    "body-parser": "1.20.3",
     "content-disposition": "0.5.4",
     "content-type": "~1.0.4",
-    "cookie": "0.6.0",
+    "cookie": "0.7.1",
     "cookie-signature": "1.0.6",
     "debug": "2.6.9",
     "depd": "2.0.0",
-    "encodeurl": "~1.0.2",
+    "encodeurl": "~2.0.0",
     "escape-html": "~1.0.3",
     "etag": "~1.8.1",
-    "finalhandler": "1.2.0",
+    "finalhandler": "1.3.1",
     "fresh": "0.5.2",
     "http-errors": "2.0.0",
-    "merge-descriptors": "1.0.1",
+    "merge-descriptors": "1.0.3",
     "methods": "~1.1.2",
     "on-finished": "2.4.1",
     "parseurl": "~1.3.3",
-    "path-to-regexp": "0.1.7",
+    "path-to-regexp": "0.1.12",
     "proxy-addr": "~2.0.7",
-    "qs": "6.11.0",
+    "qs": "6.13.0",
     "range-parser": "~1.2.1",
     "safe-buffer": "5.2.1",
-    "send": "0.18.0",
-    "serve-static": "1.15.0",
+    "send": "0.19.0",
+    "serve-static": "1.16.2",
     "setprototypeof": "1.2.0",
     "statuses": "2.0.1",
     "type-is": "~1.6.18",
@@ -91,8 +95,8 @@
   "scripts": {
     "lint": "eslint .",
     "test": "mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/",
-    "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
-    "test-cov": "nyc --reporter=html --reporter=text npm test",
+    "test-ci": "nyc --exclude examples --exclude test --exclude benchmarks --reporter=lcovonly --reporter=text npm test",
+    "test-cov": "nyc --exclude examples --exclude test --exclude benchmarks --reporter=html --reporter=text npm test",
     "test-tap": "mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"
   }
 }
Index: node_modules/lightning-pool/esm/abort-error.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/abort-error.d.ts b/node_modules/lightning-pool/esm/abort-error.d.ts
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/abort-error.d.ts	
+++ /dev/null	
@@ -1,2 +0,0 @@
-export declare class AbortError extends Error {
-}
Index: node_modules/object-inspect/test/values.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/object-inspect/test/values.js b/node_modules/object-inspect/test/values.js
--- a/node_modules/object-inspect/test/values.js	
+++ b/node_modules/object-inspect/test/values.js	
@@ -5,6 +5,8 @@
 var mockProperty = require('mock-property');
 var hasSymbols = require('has-symbols/shams')();
 var hasToStringTag = require('has-tostringtag/shams')();
+var forEach = require('for-each');
+var semver = require('semver');
 
 test('values', function (t) {
     t.plan(1);
@@ -209,3 +211,51 @@
 
     t.end();
 });
+
+test('Proxies', { skip: typeof Proxy !== 'function' || !hasToStringTag }, function (t) {
+    var target = { proxy: true };
+    var fake = new Proxy(target, { has: function () { return false; } });
+
+    // needed to work around a weird difference in node v6.0 - v6.4 where non-present properties are not logged
+    var isNode60 = semver.satisfies(process.version, '6.0 - 6.4');
+
+    forEach([
+        'Boolean',
+        'Number',
+        'String',
+        'Symbol',
+        'Date'
+    ], function (tag) {
+        target[Symbol.toStringTag] = tag;
+
+        t.equal(
+            inspect(fake),
+            '{ ' + (isNode60 ? '' : 'proxy: true, ') + '[Symbol(Symbol.toStringTag)]: \'' + tag + '\' }',
+            'Proxy for + ' + tag + ' shows as the target, which has no slots'
+        );
+    });
+
+    t.end();
+});
+
+test('fakers', { skip: !hasToStringTag }, function (t) {
+    var target = { proxy: false };
+
+    forEach([
+        'Boolean',
+        'Number',
+        'String',
+        'Symbol',
+        'Date'
+    ], function (tag) {
+        target[Symbol.toStringTag] = tag;
+
+        t.equal(
+            inspect(target),
+            '{ proxy: false, [Symbol(Symbol.toStringTag)]: \'' + tag + '\' }',
+            'Object pretending to be ' + tag + ' does not trick us'
+        );
+    });
+
+    t.end();
+});
Index: node_modules/pg-protocol/dist/b.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/b.js b/node_modules/pg-protocol/dist/b.js
--- a/node_modules/pg-protocol/dist/b.js	
+++ b/node_modules/pg-protocol/dist/b.js	
@@ -1,17 +1,15 @@
 "use strict";
 // file for microbenchmarking
 Object.defineProperty(exports, "__esModule", { value: true });
-const buffer_writer_1 = require("./buffer-writer");
 const buffer_reader_1 = require("./buffer-reader");
 const LOOPS = 1000;
 let count = 0;
-let start = Date.now();
-const writer = new buffer_writer_1.Writer();
+const start = performance.now();
 const reader = new buffer_reader_1.BufferReader();
 const buffer = Buffer.from([33, 33, 33, 33, 33, 33, 33, 0]);
 const run = () => {
     if (count > LOOPS) {
-        console.log(Date.now() - start);
+        console.log(performance.now() - start);
         return;
     }
     count++;
Index: node_modules/postgresql-client/esm/protocol/buffer-reader.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/buffer-reader.js b/node_modules/postgresql-client/esm/protocol/buffer-reader.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/buffer-reader.js	
+++ /dev/null	
@@ -1,74 +0,0 @@
-export class BufferReader {
-    constructor(buffer) {
-        this.offset = 0;
-        this.buffer = buffer;
-    }
-    get length() {
-        return this.buffer.length;
-    }
-    readUInt8() {
-        this._checkReadable(1);
-        const v = this.buffer.readUInt8(this.offset);
-        this.offset++;
-        return v;
-    }
-    readUInt16BE() {
-        this._checkReadable(2);
-        const v = this.buffer.readUInt16BE(this.offset);
-        this.offset += 2;
-        return v;
-    }
-    readInt16BE() {
-        this._checkReadable(2);
-        const v = this.buffer.readInt16BE(this.offset);
-        this.offset += 2;
-        return v;
-    }
-    readUInt32BE() {
-        this._checkReadable(4);
-        const v = this.buffer.readUInt32BE(this.offset);
-        this.offset += 4;
-        return v;
-    }
-    readInt32BE() {
-        this._checkReadable(4);
-        const v = this.buffer.readInt32BE(this.offset);
-        this.offset += 4;
-        return v;
-    }
-    readCString(encoding) {
-        const idx = this.buffer.indexOf(0, this.offset);
-        const v = this.buffer.toString(encoding, this.offset, idx);
-        this.offset = idx + 1;
-        return v;
-    }
-    readLString(len, encoding) {
-        if (len < 0)
-            return null;
-        this._checkReadable(len);
-        const v = this.buffer.toString(encoding, this.offset, this.offset + len);
-        this.offset += len;
-        return v;
-    }
-    readBuffer(len) {
-        if (len)
-            this._checkReadable(len);
-        const end = len !== undefined ? this.offset + len : this.length;
-        const buf = this.buffer.slice(this.offset, end);
-        this.offset = end;
-        return buf;
-    }
-    moveBy(n) {
-        return this.moveTo(this.offset + n);
-    }
-    moveTo(pos) {
-        if (pos >= this.length)
-            throw new Error('Eof in buffer detected');
-        this.offset = pos;
-        return this;
-    }
-    _checkReadable(size) {
-        if (this.offset + size - 1 >= this.length)
-            throw new Error('Eof in buffer detected');
-    }
-}
Index: node_modules/postgresql-client/cjs/data-types/json-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/json-type.js b/node_modules/postgresql-client/cjs/data-types/json-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/json-type.js	
+++ /dev/null	
@@ -1,38 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayJsonType = exports.JsonType = void 0;
-const constants_js_1 = require("../constants.js");
-exports.JsonType = {
-    name: 'json',
-    oid: constants_js_1.DataTypeOIDs.json,
-    jsType: 'string',
-    parseBinary(v, options) {
-        const content = v.toString('utf8');
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.jsonb);
-        if (fetchAsString)
-            return content;
-        return content ? JSON.parse(content) : undefined;
-    },
-    encodeText(v) {
-        if (typeof v === 'object' || typeof v === 'bigint')
-            return JSON.stringify(v);
-        if (typeof v === 'boolean')
-            return v ? 'true' : 'false';
-        return '' + v;
-    },
-    parseText(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.jsonb);
-        if (fetchAsString)
-            return v;
-        return v ? JSON.parse(v) : null;
-    },
-    isType(v) {
-        return v && typeof v === 'object';
-    },
-};
-exports.ArrayJsonType = {
-    ...exports.JsonType,
-    name: '_json',
-    oid: constants_js_1.DataTypeOIDs._json,
-    elementsOID: constants_js_1.DataTypeOIDs.json,
-};
Index: node_modules/postgresql-client/cjs/util/encode-binaryarray.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/encode-binaryarray.js b/node_modules/postgresql-client/cjs/util/encode-binaryarray.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/encode-binaryarray.js	
+++ /dev/null	
@@ -1,45 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.encodeBinaryArray = void 0;
-const constants_js_1 = require("../constants.js");
-const array_calculatedim_js_1 = require("./array-calculatedim.js");
-function encodeBinaryArray(io, value, itemOid, options, encode, encodeCalculateDimFn) {
-    encodeCalculateDimFn = encodeCalculateDimFn || array_calculatedim_js_1.arrayCalculateDim;
-    itemOid = itemOid || constants_js_1.DataTypeOIDs.varchar;
-    const dim = encodeCalculateDimFn(value);
-    const ndims = dim.length;
-    const zeroOffset = io.offset;
-    io.writeInt32BE(ndims) // Number of dimensions
-        .writeInt32BE(0) // reserved for has-null flag
-        .writeInt32BE(itemOid);
-    for (let d = 0; d < ndims; d++) {
-        io.writeInt32BE(dim[d]); // Number of items in dimension
-        io.writeInt32BE(0); // LBound always 0.
-    }
-    let hasNull = false;
-    let pos;
-    const writeDim = (arr, level) => {
-        const elemCount = dim[level];
-        for (let i = 0; i < elemCount; i++) {
-            if (level < dim.length - 1) {
-                writeDim(arr && arr[i], level + 1);
-                continue;
-            }
-            // if value is null
-            if (!arr || arr[i] == null) {
-                hasNull = true;
-                io.writeInt32BE(-1);
-                continue;
-            }
-            io.writeInt32BE(0); // reserved for data len
-            pos = io.offset;
-            encode(io, arr[i], options);
-            // Update item data size
-            io.buffer.writeInt32BE(io.length - pos, pos - 4);
-        }
-    };
-    writeDim(value, 0);
-    if (hasNull)
-        io.buffer.writeInt32BE(1, zeroOffset + 4);
-}
-exports.encodeBinaryArray = encodeBinaryArray;
Index: node_modules/pg-pool/test/lifetime-timeout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/lifetime-timeout.js b/node_modules/pg-pool/test/lifetime-timeout.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/lifetime-timeout.js	
+++ /dev/null	
@@ -1,48 +0,0 @@
-'use strict'
-const co = require('co')
-const expect = require('expect.js')
-
-const describe = require('mocha').describe
-const it = require('mocha').it
-const path = require('path')
-
-const Pool = require('../')
-
-describe('lifetime timeout', () => {
-  it('connection lifetime should expire and remove the client', (done) => {
-    const pool = new Pool({ maxLifetimeSeconds: 1 })
-    pool.query('SELECT NOW()')
-    pool.on('remove', () => {
-      console.log('expired while idle - on-remove event')
-      expect(pool.expiredCount).to.equal(0)
-      expect(pool.totalCount).to.equal(0)
-      done()
-    })
-  })
-  it('connection lifetime should expire and remove the client after the client is done working', (done) => {
-    const pool = new Pool({ maxLifetimeSeconds: 1 })
-    pool.query('SELECT pg_sleep(1.4)')
-    pool.on('remove', () => {
-      console.log('expired while busy - on-remove event')
-      expect(pool.expiredCount).to.equal(0)
-      expect(pool.totalCount).to.equal(0)
-      done()
-    })
-  })
-  it(
-    'can remove expired clients and recreate them',
-    co.wrap(function* () {
-      const pool = new Pool({ maxLifetimeSeconds: 1 })
-      let query = pool.query('SELECT pg_sleep(1.4)')
-      expect(pool.expiredCount).to.equal(0)
-      expect(pool.totalCount).to.equal(1)
-      yield query
-      yield new Promise((resolve) => setTimeout(resolve, 100))
-      expect(pool.expiredCount).to.equal(0)
-      expect(pool.totalCount).to.equal(0)
-      yield pool.query('SELECT NOW()')
-      expect(pool.expiredCount).to.equal(0)
-      expect(pool.totalCount).to.equal(1)
-    })
-  )
-})
Index: node_modules/pg/lib/native/client.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/native/client.js b/node_modules/pg/lib/native/client.js
--- a/node_modules/pg/lib/native/client.js	
+++ b/node_modules/pg/lib/native/client.js	
@@ -2,20 +2,21 @@
 
 // eslint-disable-next-line
 var Native
+// eslint-disable-next-line no-useless-catch
 try {
   // Wrap this `require()` in a try-catch to avoid upstream bundlers from complaining that this might not be available since it is an optional import
   Native = require('pg-native')
 } catch (e) {
   throw e
 }
-var TypeOverrides = require('../type-overrides')
-var EventEmitter = require('events').EventEmitter
-var util = require('util')
-var ConnectionParameters = require('../connection-parameters')
+const TypeOverrides = require('../type-overrides')
+const EventEmitter = require('events').EventEmitter
+const util = require('util')
+const ConnectionParameters = require('../connection-parameters')
 
-var NativeQuery = require('./query')
+const NativeQuery = require('./query')
 
-var Client = (module.exports = function (config) {
+const Client = (module.exports = function (config) {
   EventEmitter.call(this)
   config = config || {}
 
@@ -34,7 +35,7 @@
 
   // keep these on the object for legacy reasons
   // for the time being. TODO: deprecate all this jazz
-  var cp = (this.connectionParameters = new ConnectionParameters(config))
+  const cp = (this.connectionParameters = new ConnectionParameters(config))
   if (config.nativeConnectionString) cp.nativeConnectionString = config.nativeConnectionString
   this.user = cp.user
 
@@ -79,7 +80,7 @@
 // pass an optional callback to be called once connected
 // or with an error if there was a connection error
 Client.prototype._connect = function (cb) {
-  var self = this
+  const self = this
 
   if (this._connecting) {
     process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))
@@ -151,11 +152,11 @@
 //    optional string rowMode = 'array' for an array of results
 //  }
 Client.prototype.query = function (config, values, callback) {
-  var query
-  var result
-  var readTimeout
-  var readTimeoutTimer
-  var queryCallback
+  let query
+  let result
+  let readTimeout
+  let readTimeoutTimer
+  let queryCallback
 
   if (config === null || config === undefined) {
     throw new TypeError('Client was passed a null or undefined query')
@@ -167,7 +168,7 @@
       config.callback = values
     }
   } else {
-    readTimeout = this.connectionParameters.query_timeout
+    readTimeout = config.query_timeout || this.connectionParameters.query_timeout
     query = new NativeQuery(config, values, callback)
     if (!query.callback) {
       let resolveOut, rejectOut
@@ -186,7 +187,7 @@
     queryCallback = query.callback
 
     readTimeoutTimer = setTimeout(() => {
-      var error = new Error('Query read timeout')
+      const error = new Error('Query read timeout')
 
       process.nextTick(() => {
         query.handleError(error, this.connection)
@@ -199,7 +200,7 @@
       query.callback = () => {}
 
       // Remove from queue
-      var index = this._queryQueue.indexOf(query)
+      const index = this._queryQueue.indexOf(query)
       if (index > -1) {
         this._queryQueue.splice(index, 1)
       }
@@ -236,14 +237,14 @@
 
 // disconnect from the backend server
 Client.prototype.end = function (cb) {
-  var self = this
+  const self = this
 
   this._ending = true
 
   if (!this._connected) {
     this.once('connect', this.end.bind(this, cb))
   }
-  var result
+  let result
   if (!cb) {
     result = new this._Promise(function (resolve, reject) {
       cb = (err) => (err ? reject(err) : resolve())
@@ -271,7 +272,7 @@
   if (this._hasActiveQuery()) {
     return
   }
-  var query = this._queryQueue.shift()
+  const query = this._queryQueue.shift()
   if (!query) {
     if (!initialConnection) {
       this.emit('drain')
@@ -280,7 +281,7 @@
   }
   this._activeQuery = query
   query.submit(this)
-  var self = this
+  const self = this
   query.once('_done', function () {
     self._pulseQueryQueue()
   })
Index: node_modules/has-proto/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/package.json b/node_modules/has-proto/package.json
deleted file mode 100644
--- a/node_modules/has-proto/package.json	
+++ /dev/null	
@@ -1,78 +0,0 @@
-{
-	"name": "has-proto",
-	"version": "1.0.3",
-	"description": "Does this environment have the ability to get the [[Prototype]] of an object on creation with `__proto__`?",
-	"main": "index.js",
-	"exports": {
-		".": "./index.js",
-		"./package.json": "./package.json"
-	},
-	"sideEffects": false,
-	"scripts": {
-		"prepack": "npmignore --auto --commentLines=autogenerated",
-		"prepublishOnly": "safe-publish-latest",
-		"prepublish": "not-in-publish || npm run prepublishOnly",
-		"lint": "eslint --ext=js,mjs .",
-		"postlint": "tsc -p .",
-		"pretest": "npm run lint",
-		"tests-only": "tape 'test/**/*.js'",
-		"test": "npm run tests-only",
-		"posttest": "aud --production",
-		"version": "auto-changelog && git add CHANGELOG.md",
-		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
-	},
-	"repository": {
-		"type": "git",
-		"url": "git+https://github.com/inspect-js/has-proto.git"
-	},
-	"keywords": [
-		"prototype",
-		"proto",
-		"set",
-		"get",
-		"__proto__",
-		"getPrototypeOf",
-		"setPrototypeOf",
-		"has"
-	],
-	"author": "Jordan Harband <ljharb@gmail.com>",
-	"funding": {
-		"url": "https://github.com/sponsors/ljharb"
-	},
-	"license": "MIT",
-	"bugs": {
-		"url": "https://github.com/inspect-js/has-proto/issues"
-	},
-	"homepage": "https://github.com/inspect-js/has-proto#readme",
-	"testling": {
-		"files": "test/index.js"
-	},
-	"devDependencies": {
-		"@ljharb/eslint-config": "^21.1.0",
-		"@types/tape": "^5.6.4",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
-		"eslint": "=8.8.0",
-		"in-publish": "^2.0.1",
-		"npmignore": "^0.3.1",
-		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.5",
-		"typescript": "next"
-	},
-	"engines": {
-		"node": ">= 0.4"
-	},
-	"auto-changelog": {
-		"output": "CHANGELOG.md",
-		"template": "keepachangelog",
-		"unreleased": false,
-		"commitLimit": false,
-		"backfillLimit": false,
-		"hideCredit": true
-	},
-	"publishConfig": {
-		"ignore": [
-			".github/workflows"
-		]
-	}
-}
Index: node_modules/postgresql-client/esm/connection/prepared-statement.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/connection/prepared-statement.js b/node_modules/postgresql-client/esm/connection/prepared-statement.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/connection/prepared-statement.js	
+++ /dev/null	
@@ -1,213 +0,0 @@
-import { coerceToBoolean } from 'putil-varhelpers';
-import { DEFAULT_COLUMN_FORMAT } from '../constants.js';
-import { GlobalTypeMap } from '../data-type-map.js';
-import { Protocol } from '../protocol/protocol.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { convertRowToObject } from '../util/convert-row-to-object.js';
-import { getParsers } from '../util/get-parsers.js';
-import { parseRow } from '../util/parse-row.js';
-import { wrapRowDescription } from '../util/wrap-row-description.js';
-import { Cursor } from './cursor.js';
-import { getIntlConnection } from './intl-connection.js';
-import { Portal } from './portal.js';
-let statementCounter = 0;
-let portalCounter = 0;
-export class PreparedStatement extends SafeEventEmitter {
-    constructor(connection, sql, paramTypes) {
-        super();
-        this._sql = '';
-        this._name = '';
-        this._refCount = 0;
-        this._connection = connection;
-        this._name = 'S_' + ++statementCounter;
-        this._sql = sql;
-        this._paramTypes = paramTypes;
-        this._onErrorSavePoint = 'SP_' + Math.round(Math.random() * 100000000);
-    }
-    static async prepare(connection, sql, options) {
-        const intoCon = getIntlConnection(connection);
-        intoCon.assertConnected();
-        const socket = intoCon.socket;
-        const statement = new PreparedStatement(connection, sql, options?.paramTypes);
-        await intoCon.statementQueue
-            .enqueue(async () => {
-            intoCon.ref();
-            try {
-                socket.sendParseMessage({
-                    statement: statement.name,
-                    sql: statement.sql,
-                    paramTypes: statement.paramTypes,
-                });
-                socket.sendFlushMessage();
-                try {
-                    await socket.capture(async (code, msg, done) => {
-                        if (code === Protocol.BackendMessageCode.ParseComplete)
-                            done();
-                        // May be Protocol.BackendMessageCode.NoticeResponse
-                    });
-                }
-                finally {
-                    socket.sendSyncMessage();
-                    await socket.capture(async (code, msg, done) => {
-                        if (code === Protocol.BackendMessageCode.ReadyForQuery)
-                            done();
-                        // May be Protocol.BackendMessageCode.NoticeResponse
-                    });
-                }
-            }
-            finally {
-                intoCon.unref();
-            }
-        })
-            .toPromise();
-        statement._refCount = 1;
-        return statement;
-    }
-    get connection() {
-        return this._connection;
-    }
-    get name() {
-        return this._name;
-    }
-    get sql() {
-        return this._sql;
-    }
-    get paramTypes() {
-        return this._paramTypes;
-    }
-    async execute(options = {}) {
-        const intlCon = getIntlConnection(this.connection);
-        const transactionCommand = this.sql.match(/^(\bBEGIN\b|\bCOMMIT\b|\bSTART\b|\bROLLBACK|SAVEPOINT|RELEASE\b)/i);
-        let beginFirst = false;
-        let commitLast = false;
-        if (!transactionCommand) {
-            if (!intlCon.inTransaction &&
-                (options?.autoCommit != null ? options?.autoCommit : intlCon.config.autoCommit) === false) {
-                beginFirst = true;
-            }
-            if (intlCon.inTransaction && options?.autoCommit)
-                commitLast = true;
-        }
-        if (beginFirst)
-            await intlCon.execute('BEGIN');
-        const rollbackOnError = !transactionCommand &&
-            (options?.rollbackOnError != null
-                ? options.rollbackOnError
-                : coerceToBoolean(intlCon.config.rollbackOnError, true));
-        if (intlCon.inTransaction && rollbackOnError)
-            await intlCon.execute('SAVEPOINT ' + this._onErrorSavePoint);
-        try {
-            const result = await intlCon.statementQueue.enqueue(() => this._execute(options)).toPromise();
-            if (commitLast)
-                await intlCon.execute('COMMIT');
-            else if (intlCon.inTransaction && rollbackOnError)
-                await intlCon.execute('RELEASE ' + this._onErrorSavePoint + ';');
-            return result;
-        }
-        catch (e) {
-            if (intlCon.inTransaction && rollbackOnError)
-                await intlCon.execute('ROLLBACK TO ' + this._onErrorSavePoint + ';');
-            throw e;
-        }
-    }
-    async close() {
-        --this._refCount;
-        if (this._refCount > 0)
-            return;
-        const intoCon = getIntlConnection(this.connection);
-        await intoCon.statementQueue.enqueue(() => this._close()).toPromise();
-    }
-    async cancel() {
-        throw new Error('Not implemented yet');
-    }
-    async _execute(options = {}) {
-        let portal;
-        const intlCon = getIntlConnection(this.connection);
-        intlCon.ref();
-        try {
-            const result = { command: undefined };
-            const startTime = Date.now();
-            const t = Date.now();
-            // Create portal
-            const portalName = 'P_' + ++portalCounter;
-            portal = new Portal(this, portalName);
-            await portal.bind(options.params, options);
-            const fields = await portal.retrieveFields();
-            const typeMap = options.typeMap || GlobalTypeMap;
-            let parsers;
-            let resultFields;
-            if (fields) {
-                parsers = getParsers(typeMap, fields);
-                resultFields = wrapRowDescription(typeMap, fields, options.columnFormat || DEFAULT_COLUMN_FORMAT);
-                result.fields = resultFields;
-                result.rowType = options.objectRows ? 'object' : 'array';
-                if (options.cursor) {
-                    result.cursor = new Cursor(this, portal, resultFields, parsers, options);
-                    this._refCount++;
-                    portal = undefined;
-                    return result;
-                }
-            }
-            const executeResult = await portal.execute(options.fetchCount);
-            result.executeTime = Date.now() - t;
-            if (executeResult.command)
-                result.command = executeResult.command;
-            if (resultFields && parsers && executeResult.rows) {
-                if (!result.command)
-                    result.command = 'SELECT';
-                const rows = (result.rows = executeResult.rows);
-                const l = rows.length;
-                let row;
-                for (let i = 0; i < l; i++) {
-                    row = rows[i];
-                    parseRow(parsers, row, options);
-                    if (options.objectRows) {
-                        rows[i] = convertRowToObject(resultFields, row);
-                    }
-                }
-            }
-            if (result.command === 'DELETE' || result.command === 'INSERT' || result.command === 'UPDATE')
-                result.rowsAffected = executeResult.rowCount;
-            result.executeTime = Date.now() - startTime;
-            return result;
-        }
-        finally {
-            intlCon.unref();
-            if (portal)
-                await portal.close();
-        }
-    }
-    async _close() {
-        if (--this._refCount > 0)
-            return;
-        const intoCon = getIntlConnection(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendCloseMessage({ type: 'S', name: this.name });
-            socket.sendSyncMessage();
-            await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case Protocol.BackendMessageCode.NoticeResponse:
-                        this.emit('notice', msg);
-                        break;
-                    case Protocol.BackendMessageCode.CloseComplete:
-                        break;
-                    case Protocol.BackendMessageCode.ReadyForQuery:
-                        intoCon.transactionStatus = msg.status;
-                        done();
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (0x${code.toString(16)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-        this.emit('close');
-    }
-    [Symbol.asyncDispose]() {
-        return this.close();
-    }
-}
Index: node_modules/lightning-pool/esm/resource-item.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/resource-item.js b/node_modules/lightning-pool/esm/resource-item.js
--- a/node_modules/lightning-pool/esm/resource-item.js	
+++ b/node_modules/lightning-pool/esm/resource-item.js	
@@ -1,4 +1,4 @@
-import { ResourceState } from './definitions.js';
+import { ResourceState } from './constants.js';
 export class ResourceItem {
     constructor(resource) {
         this.state = ResourceState.IDLE;
Index: node_modules/path-to-regexp/History.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/path-to-regexp/History.md b/node_modules/path-to-regexp/History.md
deleted file mode 100644
--- a/node_modules/path-to-regexp/History.md	
+++ /dev/null	
@@ -1,36 +0,0 @@
-0.1.7 / 2015-07-28
-==================
-
-  * Fixed regression with escaped round brackets and matching groups.
-
-0.1.6 / 2015-06-19
-==================
-
-  * Replace `index` feature by outputting all parameters, unnamed and named.
-
-0.1.5 / 2015-05-08
-==================
-
-  * Add an index property for position in match result.
-
-0.1.4 / 2015-03-05
-==================
-
-  * Add license information
-
-0.1.3 / 2014-07-06
-==================
-
-  * Better array support
-  * Improved support for trailing slash in non-ending mode
-
-0.1.0 / 2014-03-06
-==================
-
-  * add options.end
-
-0.0.2 / 2013-02-10
-==================
-
-  * Update to match current express
-  * add .license property to component.json
Index: node_modules/object-inspect/readme.markdown
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/object-inspect/readme.markdown b/node_modules/object-inspect/readme.markdown
--- a/node_modules/object-inspect/readme.markdown	
+++ b/node_modules/object-inspect/readme.markdown	
@@ -1,15 +1,13 @@
-# object-inspect <sup>[![Version Badge][2]][1]</sup>
+# object-inspect <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
 
 string representations of objects in node and the browser
 
 [![github actions][actions-image]][actions-url]
 [![coverage][codecov-image]][codecov-url]
-[![dependency status][5]][6]
-[![dev dependency status][7]][8]
 [![License][license-image]][license-url]
 [![Downloads][downloads-image]][downloads-url]
 
-[![npm badge][11]][1]
+[![npm badge][npm-badge-png]][package-url]
 
 # example
 
@@ -69,13 +67,13 @@
 
 MIT
 
-[1]: https://npmjs.org/package/object-inspect
-[2]: https://versionbadg.es/inspect-js/object-inspect.svg
-[5]: https://david-dm.org/inspect-js/object-inspect.svg
-[6]: https://david-dm.org/inspect-js/object-inspect
-[7]: https://david-dm.org/inspect-js/object-inspect/dev-status.svg
-[8]: https://david-dm.org/inspect-js/object-inspect#info=devDependencies
-[11]: https://nodei.co/npm/object-inspect.png?downloads=true&stars=true
+[package-url]: https://npmjs.org/package/object-inspect
+[npm-version-svg]: https://versionbadg.es/inspect-js/object-inspect.svg
+[deps-svg]: https://david-dm.org/inspect-js/object-inspect.svg
+[deps-url]: https://david-dm.org/inspect-js/object-inspect
+[dev-deps-svg]: https://david-dm.org/inspect-js/object-inspect/dev-status.svg
+[dev-deps-url]: https://david-dm.org/inspect-js/object-inspect#info=devDependencies
+[npm-badge-png]: https://nodei.co/npm/object-inspect.png?downloads=true&stars=true
 [license-image]: https://img.shields.io/npm/l/object-inspect.svg
 [license-url]: LICENSE
 [downloads-image]: https://img.shields.io/npm/dm/object-inspect.svg
Index: node_modules/pg/lib/connection-parameters.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/connection-parameters.js b/node_modules/pg/lib/connection-parameters.js
--- a/node_modules/pg/lib/connection-parameters.js	
+++ b/node_modules/pg/lib/connection-parameters.js	
@@ -1,12 +1,12 @@
 'use strict'
 
-var dns = require('dns')
+const dns = require('dns')
 
-var defaults = require('./defaults')
+const defaults = require('./defaults')
 
-var parse = require('pg-connection-string').parse // parses a connection string
+const parse = require('pg-connection-string').parse // parses a connection string
 
-var val = function (key, config, envVar) {
+const val = function (key, config, envVar) {
   if (envVar === undefined) {
     envVar = process.env['PG' + key.toUpperCase()]
   } else if (envVar === false) {
@@ -18,7 +18,7 @@
   return config[key] || envVar || defaults[key]
 }
 
-var readSSLConfigFromEnvironment = function () {
+const readSSLConfigFromEnvironment = function () {
   switch (process.env.PGSSLMODE) {
     case 'disable':
       return false
@@ -34,12 +34,12 @@
 }
 
 // Convert arg to a string, surround in single quotes, and escape single quotes and backslashes
-var quoteParamValue = function (value) {
+const quoteParamValue = function (value) {
   return "'" + ('' + value).replace(/\\/g, '\\\\').replace(/'/g, "\\'") + "'"
 }
 
-var add = function (params, config, paramName) {
-  var value = config[paramName]
+const add = function (params, config, paramName) {
+  const value = config[paramName]
   if (value !== undefined && value !== null) {
     params.push(paramName + '=' + quoteParamValue(value))
   }
@@ -125,7 +125,7 @@
   }
 
   getLibpqConnectionString(cb) {
-    var params = []
+    const params = []
     add(params, this, 'user')
     add(params, this, 'password')
     add(params, this, 'port')
@@ -134,7 +134,7 @@
     add(params, this, 'connect_timeout')
     add(params, this, 'options')
 
-    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}
+    const ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}
     add(params, ssl, 'sslmode')
     add(params, ssl, 'sslca')
     add(params, ssl, 'sslkey')
Index: node_modules/express/node_modules/cookie/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/express/node_modules/cookie/package.json b/node_modules/express/node_modules/cookie/package.json
--- a/node_modules/express/node_modules/cookie/package.json	
+++ b/node_modules/express/node_modules/cookie/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "cookie",
   "description": "HTTP server cookie parsing and serialization",
-  "version": "0.6.0",
+  "version": "0.7.1",
   "author": "Roman Shtylman <shtylman@gmail.com>",
   "contributors": [
     "Douglas Christopher Wilson <doug@somethingdoug.com>"
@@ -29,6 +29,7 @@
     "SECURITY.md",
     "index.js"
   ],
+  "main": "index.js",
   "engines": {
     "node": ">= 0.6"
   },
@@ -38,7 +39,6 @@
     "test": "mocha --reporter spec --bail --check-leaks test/",
     "test-ci": "nyc --reporter=lcov --reporter=text npm test",
     "test-cov": "nyc --reporter=html --reporter=text npm test",
-    "update-bench": "node scripts/update-benchmark.js",
-    "version": "node scripts/version-history.js && git add HISTORY.md"
+    "update-bench": "node scripts/update-benchmark.js"
   }
 }
Index: node_modules/pg-protocol/dist/inbound-parser.test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/inbound-parser.test.js b/node_modules/pg-protocol/dist/inbound-parser.test.js
--- a/node_modules/pg-protocol/dist/inbound-parser.test.js	
+++ b/node_modules/pg-protocol/dist/inbound-parser.test.js	
@@ -17,25 +17,15 @@
 const _1 = require(".");
 const assert_1 = __importDefault(require("assert"));
 const stream_1 = require("stream");
-var authOkBuffer = test_buffers_1.default.authenticationOk();
-var paramStatusBuffer = test_buffers_1.default.parameterStatus('client_encoding', 'UTF8');
-var readyForQueryBuffer = test_buffers_1.default.readyForQuery();
-var backendKeyDataBuffer = test_buffers_1.default.backendKeyData(1, 2);
-var commandCompleteBuffer = test_buffers_1.default.commandComplete('SELECT 3');
-var parseCompleteBuffer = test_buffers_1.default.parseComplete();
-var bindCompleteBuffer = test_buffers_1.default.bindComplete();
-var portalSuspendedBuffer = test_buffers_1.default.portalSuspended();
-var addRow = function (bufferList, name, offset) {
-    return bufferList
-        .addCString(name) // field name
-        .addInt32(offset++) // table id
-        .addInt16(offset++) // attribute of column number
-        .addInt32(offset++) // objectId of field's data type
-        .addInt16(offset++) // datatype size
-        .addInt32(offset++) // type modifier
-        .addInt16(0); // format code, 0 => text
-};
-var row1 = {
+const authOkBuffer = test_buffers_1.default.authenticationOk();
+const paramStatusBuffer = test_buffers_1.default.parameterStatus('client_encoding', 'UTF8');
+const readyForQueryBuffer = test_buffers_1.default.readyForQuery();
+const backendKeyDataBuffer = test_buffers_1.default.backendKeyData(1, 2);
+const commandCompleteBuffer = test_buffers_1.default.commandComplete('SELECT 3');
+const parseCompleteBuffer = test_buffers_1.default.parseComplete();
+const bindCompleteBuffer = test_buffers_1.default.bindComplete();
+const portalSuspendedBuffer = test_buffers_1.default.portalSuspended();
+const row1 = {
     name: 'id',
     tableID: 1,
     attributeNumber: 2,
@@ -44,9 +34,9 @@
     typeModifier: 5,
     formatCode: 0,
 };
-var oneRowDescBuff = test_buffers_1.default.rowDescription([row1]);
+const oneRowDescBuff = test_buffers_1.default.rowDescription([row1]);
 row1.name = 'bang';
-var twoRowBuf = test_buffers_1.default.rowDescription([
+const twoRowBuf = test_buffers_1.default.rowDescription([
     row1,
     {
         name: 'whoah',
@@ -58,49 +48,53 @@
         formatCode: 0,
     },
 ]);
-var emptyRowFieldBuf = new buffer_list_1.default().addInt16(0).join(true, 'D');
-var emptyRowFieldBuf = test_buffers_1.default.dataRow([]);
-var oneFieldBuf = new buffer_list_1.default()
-    .addInt16(1) // number of fields
-    .addInt32(5) // length of bytes of fields
-    .addCString('test')
-    .join(true, 'D');
-var oneFieldBuf = test_buffers_1.default.dataRow(['test']);
-var expectedAuthenticationOkayMessage = {
+const rowWithBigOids = {
+    name: 'bigoid',
+    tableID: 3000000001,
+    attributeNumber: 2,
+    dataTypeID: 3000000003,
+    dataTypeSize: 4,
+    typeModifier: 5,
+    formatCode: 0,
+};
+const bigOidDescBuff = test_buffers_1.default.rowDescription([rowWithBigOids]);
+const emptyRowFieldBuf = test_buffers_1.default.dataRow([]);
+const oneFieldBuf = test_buffers_1.default.dataRow(['test']);
+const expectedAuthenticationOkayMessage = {
     name: 'authenticationOk',
     length: 8,
 };
-var expectedParameterStatusMessage = {
+const expectedParameterStatusMessage = {
     name: 'parameterStatus',
     parameterName: 'client_encoding',
     parameterValue: 'UTF8',
     length: 25,
 };
-var expectedBackendKeyDataMessage = {
+const expectedBackendKeyDataMessage = {
     name: 'backendKeyData',
     processID: 1,
     secretKey: 2,
 };
-var expectedReadyForQueryMessage = {
+const expectedReadyForQueryMessage = {
     name: 'readyForQuery',
     length: 5,
     status: 'I',
 };
-var expectedCommandCompleteMessage = {
+const expectedCommandCompleteMessage = {
     name: 'commandComplete',
     length: 13,
     text: 'SELECT 3',
 };
-var emptyRowDescriptionBuffer = new buffer_list_1.default()
+const emptyRowDescriptionBuffer = new buffer_list_1.default()
     .addInt16(0) // number of fields
     .join(true, 'T');
-var expectedEmptyRowDescriptionMessage = {
+const expectedEmptyRowDescriptionMessage = {
     name: 'rowDescription',
     length: 6,
     fieldCount: 0,
     fields: [],
 };
-var expectedOneRowMessage = {
+const expectedOneRowMessage = {
     name: 'rowDescription',
     length: 27,
     fieldCount: 1,
@@ -116,7 +110,7 @@
         },
     ],
 };
-var expectedTwoRowMessage = {
+const expectedTwoRowMessage = {
     name: 'rowDescription',
     length: 53,
     fieldCount: 2,
@@ -141,31 +135,47 @@
         },
     ],
 };
-var emptyParameterDescriptionBuffer = new buffer_list_1.default()
+const expectedBigOidMessage = {
+    name: 'rowDescription',
+    length: 31,
+    fieldCount: 1,
+    fields: [
+        {
+            name: 'bigoid',
+            tableID: 3000000001,
+            columnID: 2,
+            dataTypeID: 3000000003,
+            dataTypeSize: 4,
+            dataTypeModifier: 5,
+            format: 'text',
+        },
+    ],
+};
+const emptyParameterDescriptionBuffer = new buffer_list_1.default()
     .addInt16(0) // number of parameters
     .join(true, 't');
-var oneParameterDescBuf = test_buffers_1.default.parameterDescription([1111]);
-var twoParameterDescBuf = test_buffers_1.default.parameterDescription([2222, 3333]);
-var expectedEmptyParameterDescriptionMessage = {
+const oneParameterDescBuf = test_buffers_1.default.parameterDescription([1111]);
+const twoParameterDescBuf = test_buffers_1.default.parameterDescription([2222, 3333]);
+const expectedEmptyParameterDescriptionMessage = {
     name: 'parameterDescription',
     length: 6,
     parameterCount: 0,
     dataTypeIDs: [],
 };
-var expectedOneParameterMessage = {
+const expectedOneParameterMessage = {
     name: 'parameterDescription',
     length: 10,
     parameterCount: 1,
     dataTypeIDs: [1111],
 };
-var expectedTwoParameterMessage = {
+const expectedTwoParameterMessage = {
     name: 'parameterDescription',
     length: 14,
     parameterCount: 2,
     dataTypeIDs: [2222, 3333],
 };
-var testForMessage = function (buffer, expectedMessage) {
-    it('recieves and parses ' + expectedMessage.name, () => __awaiter(this, void 0, void 0, function* () {
+const testForMessage = function (buffer, expectedMessage) {
+    it('receives and parses ' + expectedMessage.name, () => __awaiter(this, void 0, void 0, function* () {
         const messages = yield parseBuffers([buffer]);
         const [lastMessage] = messages;
         for (const key in expectedMessage) {
@@ -173,32 +183,32 @@
         }
     }));
 };
-var plainPasswordBuffer = test_buffers_1.default.authenticationCleartextPassword();
-var md5PasswordBuffer = test_buffers_1.default.authenticationMD5Password();
-var SASLBuffer = test_buffers_1.default.authenticationSASL();
-var SASLContinueBuffer = test_buffers_1.default.authenticationSASLContinue();
-var SASLFinalBuffer = test_buffers_1.default.authenticationSASLFinal();
-var expectedPlainPasswordMessage = {
+const plainPasswordBuffer = test_buffers_1.default.authenticationCleartextPassword();
+const md5PasswordBuffer = test_buffers_1.default.authenticationMD5Password();
+const SASLBuffer = test_buffers_1.default.authenticationSASL();
+const SASLContinueBuffer = test_buffers_1.default.authenticationSASLContinue();
+const SASLFinalBuffer = test_buffers_1.default.authenticationSASLFinal();
+const expectedPlainPasswordMessage = {
     name: 'authenticationCleartextPassword',
 };
-var expectedMD5PasswordMessage = {
+const expectedMD5PasswordMessage = {
     name: 'authenticationMD5Password',
     salt: Buffer.from([1, 2, 3, 4]),
 };
-var expectedSASLMessage = {
+const expectedSASLMessage = {
     name: 'authenticationSASL',
     mechanisms: ['SCRAM-SHA-256'],
 };
-var expectedSASLContinueMessage = {
+const expectedSASLContinueMessage = {
     name: 'authenticationSASLContinue',
     data: 'data',
 };
-var expectedSASLFinalMessage = {
+const expectedSASLFinalMessage = {
     name: 'authenticationSASLFinal',
     data: 'data',
 };
-var notificationResponseBuffer = test_buffers_1.default.notification(4, 'hi', 'boom');
-var expectedNotificationResponseMessage = {
+const notificationResponseBuffer = test_buffers_1.default.notification(4, 'hi', 'boom');
+const expectedNotificationResponseMessage = {
     name: 'notification',
     processId: 4,
     channel: 'hi',
@@ -247,6 +257,7 @@
         testForMessage(emptyRowDescriptionBuffer, expectedEmptyRowDescriptionMessage);
         testForMessage(oneRowDescBuff, expectedOneRowMessage);
         testForMessage(twoRowBuf, expectedTwoRowMessage);
+        testForMessage(bigOidDescBuff, expectedBigOidMessage);
     });
     describe('parameterDescription messages', function () {
         testForMessage(emptyParameterDescriptionBuffer, expectedEmptyParameterDescriptionMessage);
@@ -270,7 +281,7 @@
     });
     describe('notice message', function () {
         // this uses the same logic as error message
-        var buff = test_buffers_1.default.notice([{ type: 'C', value: 'code' }]);
+        const buff = test_buffers_1.default.notice([{ type: 'C', value: 'code' }]);
         testForMessage(buff, {
             name: 'notice',
             code: 'code',
@@ -280,7 +291,7 @@
         name: 'error',
     });
     describe('with all the fields', function () {
-        var buffer = test_buffers_1.default.error([
+        const buffer = test_buffers_1.default.error([
             {
                 type: 'S',
                 value: 'ERROR',
@@ -412,7 +423,7 @@
     // tcp packets anywhere, we need to make sure we can parse every single
     // split on a tcp message
     describe('split buffer, single message parsing', function () {
-        var fullBuffer = test_buffers_1.default.dataRow([null, 'bang', 'zug zug', null, '!']);
+        const fullBuffer = test_buffers_1.default.dataRow([null, 'bang', 'zug zug', null, '!']);
         it('parses when full buffer comes in', function () {
             return __awaiter(this, void 0, void 0, function* () {
                 const messages = yield parseBuffers([fullBuffer]);
@@ -425,13 +436,13 @@
                 assert_1.default.equal(message.fields[4], '!');
             });
         });
-        var testMessageRecievedAfterSpiltAt = function (split) {
+        const testMessageReceivedAfterSplitAt = function (split) {
             return __awaiter(this, void 0, void 0, function* () {
-                var firstBuffer = Buffer.alloc(fullBuffer.length - split);
-                var secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length);
+                const firstBuffer = Buffer.alloc(fullBuffer.length - split);
+                const secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length);
                 fullBuffer.copy(firstBuffer, 0, 0);
                 fullBuffer.copy(secondBuffer, 0, firstBuffer.length);
-                const messages = yield parseBuffers([fullBuffer]);
+                const messages = yield parseBuffers([firstBuffer, secondBuffer]);
                 const message = messages[0];
                 assert_1.default.equal(message.fields.length, 5);
                 assert_1.default.equal(message.fields[0], null);
@@ -442,24 +453,26 @@
             });
         };
         it('parses when split in the middle', function () {
-            testMessageRecievedAfterSpiltAt(6);
+            return testMessageReceivedAfterSplitAt(6);
         });
         it('parses when split at end', function () {
-            testMessageRecievedAfterSpiltAt(2);
+            return testMessageReceivedAfterSplitAt(2);
         });
         it('parses when split at beginning', function () {
-            testMessageRecievedAfterSpiltAt(fullBuffer.length - 2);
-            testMessageRecievedAfterSpiltAt(fullBuffer.length - 1);
-            testMessageRecievedAfterSpiltAt(fullBuffer.length - 5);
+            return Promise.all([
+                testMessageReceivedAfterSplitAt(fullBuffer.length - 2),
+                testMessageReceivedAfterSplitAt(fullBuffer.length - 1),
+                testMessageReceivedAfterSplitAt(fullBuffer.length - 5),
+            ]);
         });
     });
     describe('split buffer, multiple message parsing', function () {
-        var dataRowBuffer = test_buffers_1.default.dataRow(['!']);
-        var readyForQueryBuffer = test_buffers_1.default.readyForQuery();
-        var fullBuffer = Buffer.alloc(dataRowBuffer.length + readyForQueryBuffer.length);
+        const dataRowBuffer = test_buffers_1.default.dataRow(['!']);
+        const readyForQueryBuffer = test_buffers_1.default.readyForQuery();
+        const fullBuffer = Buffer.alloc(dataRowBuffer.length + readyForQueryBuffer.length);
         dataRowBuffer.copy(fullBuffer, 0, 0);
         readyForQueryBuffer.copy(fullBuffer, dataRowBuffer.length, 0);
-        var verifyMessages = function (messages) {
+        const verifyMessages = function (messages) {
             assert_1.default.strictEqual(messages.length, 2);
             assert_1.default.deepEqual(messages[0], {
                 name: 'dataRow',
@@ -475,23 +488,23 @@
             });
         };
         // sanity check
-        it('recieves both messages when packet is not split', function () {
+        it('receives both messages when packet is not split', function () {
             return __awaiter(this, void 0, void 0, function* () {
                 const messages = yield parseBuffers([fullBuffer]);
                 verifyMessages(messages);
             });
         });
-        var splitAndVerifyTwoMessages = function (split) {
+        const splitAndVerifyTwoMessages = function (split) {
             return __awaiter(this, void 0, void 0, function* () {
-                var firstBuffer = Buffer.alloc(fullBuffer.length - split);
-                var secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length);
+                const firstBuffer = Buffer.alloc(fullBuffer.length - split);
+                const secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length);
                 fullBuffer.copy(firstBuffer, 0, 0);
                 fullBuffer.copy(secondBuffer, 0, firstBuffer.length);
                 const messages = yield parseBuffers([firstBuffer, secondBuffer]);
                 verifyMessages(messages);
             });
         };
-        describe('recieves both messages when packet is split', function () {
+        describe('receives both messages when packet is split', function () {
             it('in the middle', function () {
                 return splitAndVerifyTwoMessages(11);
             });
Index: node_modules/postgresql-client/esm/protocol/protocol.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/protocol.js b/node_modules/postgresql-client/esm/protocol/protocol.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/protocol.js	
+++ /dev/null	
@@ -1,68 +0,0 @@
-export var Protocol;
-(function (Protocol) {
-    Protocol.VERSION_MAJOR = 3;
-    Protocol.VERSION_MINOR = 0;
-    // https://www.postgresql.org/docs/9.3/protocol-message-formats.html
-    let BackendMessageCode;
-    (function (BackendMessageCode) {
-        BackendMessageCode[BackendMessageCode["Authentication"] = 82] = "Authentication";
-        BackendMessageCode[BackendMessageCode["BackendKeyData"] = 75] = "BackendKeyData";
-        BackendMessageCode[BackendMessageCode["BindComplete"] = 50] = "BindComplete";
-        BackendMessageCode[BackendMessageCode["CloseComplete"] = 51] = "CloseComplete";
-        BackendMessageCode[BackendMessageCode["CommandComplete"] = 67] = "CommandComplete";
-        BackendMessageCode[BackendMessageCode["CopyData"] = 100] = "CopyData";
-        BackendMessageCode[BackendMessageCode["CopyDone"] = 99] = "CopyDone";
-        BackendMessageCode[BackendMessageCode["CopyInResponse"] = 103] = "CopyInResponse";
-        BackendMessageCode[BackendMessageCode["CopyOutResponse"] = 72] = "CopyOutResponse";
-        BackendMessageCode[BackendMessageCode["CopyBothResponse"] = 87] = "CopyBothResponse";
-        BackendMessageCode[BackendMessageCode["DataRow"] = 68] = "DataRow";
-        BackendMessageCode[BackendMessageCode["EmptyQueryResponse"] = 73] = "EmptyQueryResponse";
-        BackendMessageCode[BackendMessageCode["ErrorResponse"] = 69] = "ErrorResponse";
-        BackendMessageCode[BackendMessageCode["FunctionCallResponse"] = 86] = "FunctionCallResponse";
-        BackendMessageCode[BackendMessageCode["NegotiateProtocolVersion"] = 118] = "NegotiateProtocolVersion";
-        BackendMessageCode[BackendMessageCode["NoData"] = 110] = "NoData";
-        BackendMessageCode[BackendMessageCode["NoticeResponse"] = 78] = "NoticeResponse";
-        BackendMessageCode[BackendMessageCode["NotificationResponse"] = 65] = "NotificationResponse";
-        BackendMessageCode[BackendMessageCode["ParameterDescription"] = 116] = "ParameterDescription";
-        BackendMessageCode[BackendMessageCode["ParameterStatus"] = 83] = "ParameterStatus";
-        BackendMessageCode[BackendMessageCode["ParseComplete"] = 49] = "ParseComplete";
-        BackendMessageCode[BackendMessageCode["PortalSuspended"] = 115] = "PortalSuspended";
-        BackendMessageCode[BackendMessageCode["ReadyForQuery"] = 90] = "ReadyForQuery";
-        BackendMessageCode[BackendMessageCode["RowDescription"] = 84] = "RowDescription";
-    })(BackendMessageCode = Protocol.BackendMessageCode || (Protocol.BackendMessageCode = {}));
-    let FrontendMessageCode;
-    (function (FrontendMessageCode) {
-        FrontendMessageCode[FrontendMessageCode["Bind"] = 66] = "Bind";
-        FrontendMessageCode[FrontendMessageCode["Close"] = 67] = "Close";
-        FrontendMessageCode[FrontendMessageCode["CopyData"] = 100] = "CopyData";
-        FrontendMessageCode[FrontendMessageCode["CopyDone"] = 99] = "CopyDone";
-        FrontendMessageCode[FrontendMessageCode["CopyFail"] = 102] = "CopyFail";
-        FrontendMessageCode[FrontendMessageCode["Describe"] = 68] = "Describe";
-        FrontendMessageCode[FrontendMessageCode["Execute"] = 69] = "Execute";
-        FrontendMessageCode[FrontendMessageCode["Flush"] = 72] = "Flush";
-        FrontendMessageCode[FrontendMessageCode["FunctionCall"] = 70] = "FunctionCall";
-        FrontendMessageCode[FrontendMessageCode["Parse"] = 80] = "Parse";
-        FrontendMessageCode[FrontendMessageCode["PasswordMessage"] = 112] = "PasswordMessage";
-        FrontendMessageCode[FrontendMessageCode["Query"] = 81] = "Query";
-        FrontendMessageCode[FrontendMessageCode["Sync"] = 83] = "Sync";
-        FrontendMessageCode[FrontendMessageCode["Terminate"] = 88] = "Terminate";
-    })(FrontendMessageCode = Protocol.FrontendMessageCode || (Protocol.FrontendMessageCode = {}));
-    let AuthenticationMessageKind;
-    (function (AuthenticationMessageKind) {
-        AuthenticationMessageKind["KerberosV5"] = "KerberosV5";
-        AuthenticationMessageKind["CleartextPassword"] = "CleartextPassword";
-        AuthenticationMessageKind["MD5Password"] = "MD5Password";
-        AuthenticationMessageKind["SCMCredential"] = "SCMCredential";
-        AuthenticationMessageKind["GSS"] = "GSS";
-        AuthenticationMessageKind["SSPI"] = "SSPI";
-        AuthenticationMessageKind["GSSContinue"] = "GSSContinue";
-        AuthenticationMessageKind["SASL"] = "SASL";
-        AuthenticationMessageKind["SASLContinue"] = "SASLContinue";
-        AuthenticationMessageKind["SASLFinal"] = "SASLFinal";
-    })(AuthenticationMessageKind = Protocol.AuthenticationMessageKind || (Protocol.AuthenticationMessageKind = {}));
-    let DataFormat;
-    (function (DataFormat) {
-        DataFormat[DataFormat["text"] = 0] = "text";
-        DataFormat[DataFormat["binary"] = 1] = "binary";
-    })(DataFormat = Protocol.DataFormat || (Protocol.DataFormat = {}));
-})(Protocol || (Protocol = {}));
Index: node_modules/ts-gems/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/package.json b/node_modules/ts-gems/package.json
--- a/node_modules/ts-gems/package.json	
+++ b/node_modules/ts-gems/package.json	
@@ -1,50 +1,55 @@
 {
   "name": "ts-gems",
   "description": "Valuable typing extensions for TypeScript",
-  "keywords": [
-    "typescript",
-    "types",
-    "gems",
-    "essentials",
-    "utils",
-    "toolbox",
-    "toolbelt",
-    "lodash",
-    "underscore"
-  ],
-  "version": "3.4.0",
-  "type": "module",
-  "module": "lib/index.mjs",
-  "main": "lib/index.cjs",
-  "types": "lib/index.d.ts",
+  "version": "3.11.3",
+  "license": "MIT",
+  "module": "./lib/index.mjs",
+  "main": "./lib/index.cjs",
+  "types": "./lib/index.d.ts",
+  "exports": {
+    ".": {
+      "import": "./lib/index.mjs",
+      "require": "./lib/index.cjs",
+      "types": "./lib/index.d.ts"
+    }
+  },
   "repository": "git@github.com:panates/ts-gems.git",
   "author": "Eray Hanoglu <e.hanoglu@panates.com>",
-  "license": "MIT",
   "scripts": {
     "compile": "tsc -b tsconfig.json",
-    "lint": "eslint --no-error-on-unmatched-pattern",
+    "lint": "eslint . --max-warnings=0",
+    "lint:fix": "eslint . --max-warnings=0 --fix",
     "format": "prettier . --write --log-level=warn",
     "test:common": "jest --clearCache && jest --config=./jest.config.mjs",
     "test:nostrict": "jest --clearCache && jest --config=./jest.nostrict.config.mjs",
     "test": "npm run test:common && npm run test:nostrict"
   },
+  "devDependencies": {
+    "@panates/eslint-config": "^2.0.2",
+    "@panates/eslint-config-ts": "^2.0.2",
+    "@panates/tsconfig": "^2.0.2",
+    "@types/jest": "^29.5.14",
+    "globals": "^15.14.0",
+    "husky": "^9.1.7",
+    "jest": "^29.7.0",
+    "prettier": "^3.4.2",
+    "ts-jest": "^29.2.5",
+    "typescript": "^5.7.3"
+  },
   "files": [
     "LICENSE",
     "README",
     "lib/"
   ],
-  "devDependencies": {
-    "@types/jest": "^29.5.12",
-    "eslint": "^8.57.0",
-    "eslint-config-prettier": "^9.1.0",
-    "eslint-plugin-import": "^2.29.1",
-    "eslint-plugin-prettier": "^5.1.3",
-    "eslint-plugin-security": "^3.0.0",
-    "eslint-plugin-simple-import-sort": "^12.1.0",
-    "eslint-plugin-unused-imports": "^3.1.0",
-    "jest": "^29.7.0",
-    "prettier": "^3.2.5",
-    "ts-jest": "^29.1.2",
-    "typescript": "^5.4.5"
-  }
+  "keywords": [
+    "typescript",
+    "types",
+    "gems",
+    "essentials",
+    "utils",
+    "toolbox",
+    "toolbelt",
+    "lodash",
+    "underscore"
+  ]
 }
Index: node_modules/path-to-regexp/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/path-to-regexp/package.json b/node_modules/path-to-regexp/package.json
--- a/node_modules/path-to-regexp/package.json	
+++ b/node_modules/path-to-regexp/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "path-to-regexp",
   "description": "Express style path to RegExp utility",
-  "version": "0.1.7",
+  "version": "0.1.12",
   "files": [
     "index.js",
     "LICENSE"
@@ -21,7 +21,7 @@
   "license": "MIT",
   "repository": {
     "type": "git",
-    "url": "https://github.com/component/path-to-regexp.git"
+    "url": "https://github.com/pillarjs/path-to-regexp.git"
   },
   "devDependencies": {
     "mocha": "^1.17.1",
Index: node_modules/postgresql-client/esm/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/types.js b/node_modules/postgresql-client/esm/types.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/types.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/postgresql-client/cjs/connection/prepared-statement.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/connection/prepared-statement.js b/node_modules/postgresql-client/cjs/connection/prepared-statement.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/connection/prepared-statement.js	
+++ /dev/null	
@@ -1,217 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.PreparedStatement = void 0;
-const putil_varhelpers_1 = require("putil-varhelpers");
-const constants_js_1 = require("../constants.js");
-const data_type_map_js_1 = require("../data-type-map.js");
-const protocol_js_1 = require("../protocol/protocol.js");
-const safe_event_emitter_js_1 = require("../safe-event-emitter.js");
-const convert_row_to_object_js_1 = require("../util/convert-row-to-object.js");
-const get_parsers_js_1 = require("../util/get-parsers.js");
-const parse_row_js_1 = require("../util/parse-row.js");
-const wrap_row_description_js_1 = require("../util/wrap-row-description.js");
-const cursor_js_1 = require("./cursor.js");
-const intl_connection_js_1 = require("./intl-connection.js");
-const portal_js_1 = require("./portal.js");
-let statementCounter = 0;
-let portalCounter = 0;
-class PreparedStatement extends safe_event_emitter_js_1.SafeEventEmitter {
-    constructor(connection, sql, paramTypes) {
-        super();
-        this._sql = '';
-        this._name = '';
-        this._refCount = 0;
-        this._connection = connection;
-        this._name = 'S_' + ++statementCounter;
-        this._sql = sql;
-        this._paramTypes = paramTypes;
-        this._onErrorSavePoint = 'SP_' + Math.round(Math.random() * 100000000);
-    }
-    static async prepare(connection, sql, options) {
-        const intoCon = (0, intl_connection_js_1.getIntlConnection)(connection);
-        intoCon.assertConnected();
-        const socket = intoCon.socket;
-        const statement = new PreparedStatement(connection, sql, options?.paramTypes);
-        await intoCon.statementQueue
-            .enqueue(async () => {
-            intoCon.ref();
-            try {
-                socket.sendParseMessage({
-                    statement: statement.name,
-                    sql: statement.sql,
-                    paramTypes: statement.paramTypes,
-                });
-                socket.sendFlushMessage();
-                try {
-                    await socket.capture(async (code, msg, done) => {
-                        if (code === protocol_js_1.Protocol.BackendMessageCode.ParseComplete)
-                            done();
-                        // May be Protocol.BackendMessageCode.NoticeResponse
-                    });
-                }
-                finally {
-                    socket.sendSyncMessage();
-                    await socket.capture(async (code, msg, done) => {
-                        if (code === protocol_js_1.Protocol.BackendMessageCode.ReadyForQuery)
-                            done();
-                        // May be Protocol.BackendMessageCode.NoticeResponse
-                    });
-                }
-            }
-            finally {
-                intoCon.unref();
-            }
-        })
-            .toPromise();
-        statement._refCount = 1;
-        return statement;
-    }
-    get connection() {
-        return this._connection;
-    }
-    get name() {
-        return this._name;
-    }
-    get sql() {
-        return this._sql;
-    }
-    get paramTypes() {
-        return this._paramTypes;
-    }
-    async execute(options = {}) {
-        const intlCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        const transactionCommand = this.sql.match(/^(\bBEGIN\b|\bCOMMIT\b|\bSTART\b|\bROLLBACK|SAVEPOINT|RELEASE\b)/i);
-        let beginFirst = false;
-        let commitLast = false;
-        if (!transactionCommand) {
-            if (!intlCon.inTransaction &&
-                (options?.autoCommit != null ? options?.autoCommit : intlCon.config.autoCommit) === false) {
-                beginFirst = true;
-            }
-            if (intlCon.inTransaction && options?.autoCommit)
-                commitLast = true;
-        }
-        if (beginFirst)
-            await intlCon.execute('BEGIN');
-        const rollbackOnError = !transactionCommand &&
-            (options?.rollbackOnError != null
-                ? options.rollbackOnError
-                : (0, putil_varhelpers_1.coerceToBoolean)(intlCon.config.rollbackOnError, true));
-        if (intlCon.inTransaction && rollbackOnError)
-            await intlCon.execute('SAVEPOINT ' + this._onErrorSavePoint);
-        try {
-            const result = await intlCon.statementQueue.enqueue(() => this._execute(options)).toPromise();
-            if (commitLast)
-                await intlCon.execute('COMMIT');
-            else if (intlCon.inTransaction && rollbackOnError)
-                await intlCon.execute('RELEASE ' + this._onErrorSavePoint + ';');
-            return result;
-        }
-        catch (e) {
-            if (intlCon.inTransaction && rollbackOnError)
-                await intlCon.execute('ROLLBACK TO ' + this._onErrorSavePoint + ';');
-            throw e;
-        }
-    }
-    async close() {
-        --this._refCount;
-        if (this._refCount > 0)
-            return;
-        const intoCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        await intoCon.statementQueue.enqueue(() => this._close()).toPromise();
-    }
-    async cancel() {
-        throw new Error('Not implemented yet');
-    }
-    async _execute(options = {}) {
-        let portal;
-        const intlCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        intlCon.ref();
-        try {
-            const result = { command: undefined };
-            const startTime = Date.now();
-            const t = Date.now();
-            // Create portal
-            const portalName = 'P_' + ++portalCounter;
-            portal = new portal_js_1.Portal(this, portalName);
-            await portal.bind(options.params, options);
-            const fields = await portal.retrieveFields();
-            const typeMap = options.typeMap || data_type_map_js_1.GlobalTypeMap;
-            let parsers;
-            let resultFields;
-            if (fields) {
-                parsers = (0, get_parsers_js_1.getParsers)(typeMap, fields);
-                resultFields = (0, wrap_row_description_js_1.wrapRowDescription)(typeMap, fields, options.columnFormat || constants_js_1.DEFAULT_COLUMN_FORMAT);
-                result.fields = resultFields;
-                result.rowType = options.objectRows ? 'object' : 'array';
-                if (options.cursor) {
-                    result.cursor = new cursor_js_1.Cursor(this, portal, resultFields, parsers, options);
-                    this._refCount++;
-                    portal = undefined;
-                    return result;
-                }
-            }
-            const executeResult = await portal.execute(options.fetchCount);
-            result.executeTime = Date.now() - t;
-            if (executeResult.command)
-                result.command = executeResult.command;
-            if (resultFields && parsers && executeResult.rows) {
-                if (!result.command)
-                    result.command = 'SELECT';
-                const rows = (result.rows = executeResult.rows);
-                const l = rows.length;
-                let row;
-                for (let i = 0; i < l; i++) {
-                    row = rows[i];
-                    (0, parse_row_js_1.parseRow)(parsers, row, options);
-                    if (options.objectRows) {
-                        rows[i] = (0, convert_row_to_object_js_1.convertRowToObject)(resultFields, row);
-                    }
-                }
-            }
-            if (result.command === 'DELETE' || result.command === 'INSERT' || result.command === 'UPDATE')
-                result.rowsAffected = executeResult.rowCount;
-            result.executeTime = Date.now() - startTime;
-            return result;
-        }
-        finally {
-            intlCon.unref();
-            if (portal)
-                await portal.close();
-        }
-    }
-    async _close() {
-        if (--this._refCount > 0)
-            return;
-        const intoCon = (0, intl_connection_js_1.getIntlConnection)(this.connection);
-        intoCon.ref();
-        try {
-            const socket = intoCon.socket;
-            socket.sendCloseMessage({ type: 'S', name: this.name });
-            socket.sendSyncMessage();
-            await socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case protocol_js_1.Protocol.BackendMessageCode.NoticeResponse:
-                        this.emit('notice', msg);
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.CloseComplete:
-                        break;
-                    case protocol_js_1.Protocol.BackendMessageCode.ReadyForQuery:
-                        intoCon.transactionStatus = msg.status;
-                        done();
-                        break;
-                    default:
-                        done(new Error(`Server returned unexpected response message (0x${code.toString(16)})`));
-                }
-            });
-        }
-        finally {
-            intoCon.unref();
-        }
-        this.emit('close');
-    }
-    [Symbol.asyncDispose]() {
-        return this.close();
-    }
-}
-exports.PreparedStatement = PreparedStatement;
Index: node_modules/lightning-pool/esm/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/index.d.ts b/node_modules/lightning-pool/esm/index.d.ts
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/index.d.ts	
+++ /dev/null	
@@ -1,6 +0,0 @@
-import { PoolConfiguration, PoolFactory } from './definitions.js';
-import { Pool } from './pool.js';
-export * from './definitions.js';
-export * from './pool.js';
-export * from './abort-error.js';
-export declare function createPool<T = any>(factory: PoolFactory<T>, config?: PoolConfiguration): Pool<T>;
Index: node_modules/postgresql-client/typings/data-types/int4-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/int4-type.d.ts b/node_modules/postgresql-client/typings/data-types/int4-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/int4-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const Int4Type: DataType;
-export declare const ArrayInt4Type: DataType;
Index: node_modules/pg-cloudflare/dist/empty.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-cloudflare/dist/empty.js b/node_modules/pg-cloudflare/dist/empty.js
--- a/node_modules/pg-cloudflare/dist/empty.js	
+++ b/node_modules/pg-cloudflare/dist/empty.js	
@@ -1,4 +1,6 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 // This is an empty module that is served up when outside of a workerd environment
 // See the `exports` field in package.json
-export default {};
+exports.default = {};
 //# sourceMappingURL=empty.js.map
\ No newline at end of file
Index: node_modules/semver/internal/constants.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/internal/constants.js b/node_modules/semver/internal/constants.js
--- a/node_modules/semver/internal/constants.js	
+++ b/node_modules/semver/internal/constants.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 // Note: this is the semver.org version of the spec that it implements
 // Not necessarily the package version of this code.
 const SEMVER_SPEC_VERSION = '2.0.0'
Index: node_modules/pg-cloudflare/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-cloudflare/README.md b/node_modules/pg-cloudflare/README.md
--- a/node_modules/pg-cloudflare/README.md	
+++ b/node_modules/pg-cloudflare/README.md	
@@ -1,13 +1,92 @@
 # pg-cloudflare
 
-A socket implementation that can run on Cloudflare Workers using native TCP connections.
+`pg-cloudflare` makes it easier to take an existing package that relies on `tls` and `net`, and make it work in environments where only `connect()` is supported, such as Cloudflare Workers.
 
-## install
+`pg-cloudflare` wraps `connect()`, the [TCP Socket API](https://github.com/wintercg/proposal-sockets-api) proposed within WinterCG, and implemented in [Cloudflare Workers](https://developers.cloudflare.com/workers/runtime-apis/tcp-sockets/), and exposes an interface with methods similar to what the `net` and `tls` modules in Node.js expose. (ex: `net.connect(path[, options][, callback])`). This minimizes the number of changes needed in order to make an existing package work across JavaScript runtimes.
+
+## Installation
 
 ```
 npm i --save-dev pg-cloudflare
 ```
 
+The package uses conditional exports to support bundlers that don't know about
+`cloudflare:sockets`, so the consumer code by default imports an empty file. To
+enable the package, resolve to the `cloudflare` condition in your bundler's
+config. For example:
+
+- `webpack.config.js`
+  ```js
+  export default {
+    ...,
+    resolve: { conditionNames: [..., "workerd"] },
+    plugins: [
+      // ignore cloudflare:sockets imports
+      new webpack.IgnorePlugin({
+        resourceRegExp: /^cloudflare:sockets$/,
+      }),
+    ],
+  }
+  ```
+- `vite.config.js`
+
+  > [!NOTE]
+  > If you are using the [Cloudflare Vite plugin](https://www.npmjs.com/package/@cloudflare/vite-plugin) then the following configuration is not necessary.
+
+  ```js
+  export default defineConfig({
+    ...,
+    resolve: {
+      conditions: [..., "workerd"],
+    },
+    build: {
+      ...,
+      // don't try to bundle cloudflare:sockets
+      rollupOptions: {
+        external: [..., 'cloudflare:sockets'],
+      },
+    },
+  })
+  ```
+
+- `rollup.config.js`
+  ```js
+  export default defineConfig({
+    ...,
+    plugins: [..., nodeResolve({ exportConditions: [..., 'workerd'] })],
+    // don't try to bundle cloudflare:sockets
+    external: [..., 'cloudflare:sockets'],
+  })
+  ```
+- `esbuild.config.js`
+  ```js
+  await esbuild.build({
+    ...,
+    conditions: [..., 'workerd'],
+  })
+  ```
+
+The concrete examples can be found in `packages/pg-bundler-test`.
+
+## How to use conditionally, in non-Node.js environments
+
+As implemented in `pg` [here](https://github.com/brianc/node-postgres/commit/07553428e9c0eacf761a5d4541a3300ff7859578#diff-34588ad868ebcb232660aba7ee6a99d1e02f4bc93f73497d2688c3f074e60533R5-R13), a typical use case might look as follows, where in a Node.js environment the `net` module is used, while in a non-Node.js environment, where `net` is unavailable, `pg-cloudflare` is used instead, providing an equivalent interface:
+
+```js
+module.exports.getStream = function getStream(ssl = false) {
+  const net = require('net')
+  if (typeof net.Socket === 'function') {
+    return net.Socket()
+  }
+  const { CloudflareSocket } = require('pg-cloudflare')
+  return new CloudflareSocket(ssl)
+}
+```
+
+## Node.js implementation of the Socket API proposal
+
+If you're looking for a way to rely on `connect()` as the interface you use to interact with raw sockets, but need this interface to be available in a Node.js environment, [`@arrowood.dev/socket`](https://github.com/Ethan-Arrowood/socket) provides a Node.js implementation of the Socket API.
+
 ### license
 
 The MIT License (MIT)
Index: node_modules/.bin/nodemon
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/.bin/nodemon b/node_modules/.bin/nodemon
--- a/node_modules/.bin/nodemon	
+++ b/node_modules/.bin/nodemon	
@@ -1,1 +1,16 @@
-../nodemon/bin/nodemon.js
\ No newline at end of file
+#!/bin/sh
+basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
+
+case `uname` in
+    *CYGWIN*|*MINGW*|*MSYS*)
+        if command -v cygpath > /dev/null 2>&1; then
+            basedir=`cygpath -w "$basedir"`
+        fi
+    ;;
+esac
+
+if [ -x "$basedir/node" ]; then
+  exec "$basedir/node"  "$basedir/../nodemon/bin/nodemon.js" "$@"
+else 
+  exec node  "$basedir/../nodemon/bin/nodemon.js" "$@"
+fi
Index: node_modules/has-proto/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/CHANGELOG.md b/node_modules/has-proto/CHANGELOG.md
deleted file mode 100644
--- a/node_modules/has-proto/CHANGELOG.md	
+++ /dev/null	
@@ -1,38 +0,0 @@
-# Changelog
-
-All notable changes to this project will be documented in this file.
-
-The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
-and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
-
-## [v1.0.3](https://github.com/inspect-js/has-proto/compare/v1.0.2...v1.0.3) - 2024-02-19
-
-### Commits
-
-- [types] add missing declaration file [`26ecade`](https://github.com/inspect-js/has-proto/commit/26ecade05d253bb5dc376945ee3186d1fbe334f8)
-
-## [v1.0.2](https://github.com/inspect-js/has-proto/compare/v1.0.1...v1.0.2) - 2024-02-19
-
-### Commits
-
-- add types [`6435262`](https://github.com/inspect-js/has-proto/commit/64352626cf511c0276d5f4bb6be770a0bf0f8524)
-- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `npmignore`, `tape` [`f16a5e4`](https://github.com/inspect-js/has-proto/commit/f16a5e4121651e551271419f9d60fdd3561fd82c)
-- [Refactor] tiny cleanup [`d1f1a4b`](https://github.com/inspect-js/has-proto/commit/d1f1a4bdc135f115a10f148ce302676224534702)
-- [meta] add `sideEffects` flag [`e7ab1a6`](https://github.com/inspect-js/has-proto/commit/e7ab1a6f153b3e80dee68d1748b71e46767a0531)
-
-## [v1.0.1](https://github.com/inspect-js/has-proto/compare/v1.0.0...v1.0.1) - 2022-12-21
-
-### Commits
-
-- [meta] correct URLs and description [`ef34483`](https://github.com/inspect-js/has-proto/commit/ef34483ca0d35680f271b6b96e35526151b25dfc)
-- [patch] add an additional criteria [`e81959e`](https://github.com/inspect-js/has-proto/commit/e81959ed7c7a77fbf459f00cb4ef824f1099497f)
-- [Dev Deps] update `aud` [`2bec2c4`](https://github.com/inspect-js/has-proto/commit/2bec2c47b072b122ff5443fba0263f6dc649531f)
-
-## v1.0.0 - 2022-12-12
-
-### Commits
-
-- Initial implementation, tests, readme [`6886fea`](https://github.com/inspect-js/has-proto/commit/6886fea578f67daf69a7920b2eb7637ea6ebb0bc)
-- Initial commit [`99129c8`](https://github.com/inspect-js/has-proto/commit/99129c8f42471ac89cb681ba9cb9d52a583eb94f)
-- npm init [`2844ad8`](https://github.com/inspect-js/has-proto/commit/2844ad8e75b84d66a46765b3bab9d2e8ea692e10)
-- Only apps should have lockfiles [`c65bc5e`](https://github.com/inspect-js/has-proto/commit/c65bc5e40b9004463f7336d47c67245fb139a36a)
Index: node_modules/send/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/send/index.js b/node_modules/send/index.js
--- a/node_modules/send/index.js	
+++ b/node_modules/send/index.js	
@@ -482,8 +482,7 @@
   }
 
   var loc = encodeUrl(collapseLeadingSlashes(this.path + '/'))
-  var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href="' + escapeHtml(loc) + '">' +
-    escapeHtml(loc) + '</a>')
+  var doc = createHtmlDocument('Redirecting', 'Redirecting to ' + escapeHtml(loc))
 
   // redirect
   res.statusCode = 301
Index: node_modules/define-data-property/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/README.md b/node_modules/define-data-property/README.md
deleted file mode 100644
--- a/node_modules/define-data-property/README.md	
+++ /dev/null	
@@ -1,67 +0,0 @@
-# define-data-property <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
-
-[![github actions][actions-image]][actions-url]
-[![coverage][codecov-image]][codecov-url]
-[![License][license-image]][license-url]
-[![Downloads][downloads-image]][downloads-url]
-
-[![npm badge][npm-badge-png]][package-url]
-
-Define a data property on an object. Will fall back to assignment in an engine without descriptors.
-
-The three `non*` argument can also be passed `null`, which will use the existing state if available.
-
-The `loose` argument will mean that if you attempt to set a non-normal data property, in an environment without descriptor support, it will fall back to normal assignment.
-
-## Usage
-
-```javascript
-var defineDataProperty = require('define-data-property');
-var assert = require('assert');
-
-var obj = {};
-defineDataProperty(obj, 'key', 'value');
-defineDataProperty(
-	obj,
-	'key2',
-	'value',
-	true, // nonEnumerable, optional
-	false, // nonWritable, optional
-	true, // nonConfigurable, optional
-	false // loose, optional
-);
-
-assert.deepEqual(
-	Object.getOwnPropertyDescriptors(obj),
-	{
-		key: {
-			configurable: true,
-			enumerable: true,
-			value: 'value',
-			writable: true,
-		},
-		key2: {
-			configurable: false,
-			enumerable: false,
-			value: 'value',
-			writable: true,
-		},
-	}
-);
-```
-
-[package-url]: https://npmjs.org/package/define-data-property
-[npm-version-svg]: https://versionbadg.es/ljharb/define-data-property.svg
-[deps-svg]: https://david-dm.org/ljharb/define-data-property.svg
-[deps-url]: https://david-dm.org/ljharb/define-data-property
-[dev-deps-svg]: https://david-dm.org/ljharb/define-data-property/dev-status.svg
-[dev-deps-url]: https://david-dm.org/ljharb/define-data-property#info=devDependencies
-[npm-badge-png]: https://nodei.co/npm/define-data-property.png?downloads=true&stars=true
-[license-image]: https://img.shields.io/npm/l/define-data-property.svg
-[license-url]: LICENSE
-[downloads-image]: https://img.shields.io/npm/dm/define-data-property.svg
-[downloads-url]: https://npm-stat.com/charts.html?package=define-data-property
-[codecov-image]: https://codecov.io/gh/ljharb/define-data-property/branch/main/graphs/badge.svg
-[codecov-url]: https://app.codecov.io/gh/ljharb/define-data-property/
-[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/define-data-property
-[actions-url]: https://github.com/ljharb/define-data-property/actions
Index: node_modules/postgresql-client/typings/data-types/bool-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/bool-type.d.ts b/node_modules/postgresql-client/typings/data-types/bool-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/bool-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import { DataType } from '../interfaces/data-type.js';
-export declare const BoolType: DataType;
-export declare const ArrayBoolType: DataType;
Index: node_modules/ts-gems/lib/omit-never.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/omit-never.d.ts b/node_modules/ts-gems/lib/omit-never.d.ts
--- a/node_modules/ts-gems/lib/omit-never.d.ts	
+++ b/node_modules/ts-gems/lib/omit-never.d.ts	
@@ -1,5 +1,5 @@
-import { IfNoDeepValue } from './helpers';
-import { IfNever } from './type-check';
+import { IfNoDeepValue } from './helpers.js';
+import { IfNever } from './type-check.js';
 
 /**
  * OmitNever<T> is a type that omits all properties with a value of type "never".
@@ -28,26 +28,27 @@
  * Omit all "never" and "undefined" properties in T deeply
  */
 export type DeepOmitNever<T> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]: IfNoDeepValue< // Do not deep process No-Deep values
-    Exclude<T[K], undefined>
+  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]: IfNoDeepValue<
+    // Do not deep process No-Deep values
+    NonNullable<T[K]>
   > extends true
     ? T[K]
     : // Deep process objects
-      DeepOmitNever<Exclude<T[K], undefined>>;
+      DeepOmitNever<NonNullable<T[K]>>;
 };
 
 /**
  * Omit all "never" and "undefined" properties in T deeply including arrays
  */
 export type DeeperOmitNever<T> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]: Exclude< // Deep process arrays
-    T[K],
-    undefined
+  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]: NonNullable<
+    // Deep process arrays
+    T[K]
   > extends (infer U)[]
     ? DeeperOmitNever<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K]
       : // Deep process objects
-        DeepOmitNever<Exclude<T[K], undefined>>;
+        DeeperOmitNever<NonNullable<T[K]>>;
 };
Index: node_modules/postgresql-client/cjs/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/types.js b/node_modules/postgresql-client/cjs/types.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/types.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/express/lib/response.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/express/lib/response.js b/node_modules/express/lib/response.js
--- a/node_modules/express/lib/response.js	
+++ b/node_modules/express/lib/response.js	
@@ -55,7 +55,6 @@
  */
 
 var charsetRegExp = /;\s*charset\s*=/;
-var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
 
 /**
  * Set status `code`.
@@ -823,6 +822,14 @@
  */
 
 res.clearCookie = function clearCookie(name, options) {
+  if (options) {
+    if (options.maxAge) {
+      deprecate('res.clearCookie: Passing "options.maxAge" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+    if (options.expires) {
+      deprecate('res.clearCookie: Passing "options.expires" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+  }
   var opts = merge({ expires: new Date(1), path: '/' }, options);
 
   return this.cookie(name, '', opts);
@@ -909,19 +916,13 @@
 
   // "back" is an alias for the referrer
   if (url === 'back') {
+    deprecate('res.location("back"): use res.location(req.get("Referrer") || "/") and refer to https://dub.sh/security-redirect for best practices');
     loc = this.req.get('Referrer') || '/';
   } else {
     loc = String(url);
   }
 
-  var m = schemaAndHostRegExp.exec(loc);
-  var pos = m ? m[0].length + 1 : 0;
-
-  // Only encode after host to avoid invalid encoding which can introduce
-  // vulnerabilities (e.g. `\\` to `%5C`).
-  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
-
-  return this.set('Location', loc);
+  return this.set('Location', encodeUrl(loc));
 };
 
 /**
@@ -969,7 +970,7 @@
 
     html: function(){
       var u = escapeHtml(address);
-      body = '<p>' + statuses.message[status] + '. Redirecting to <a href="' + u + '">' + u + '</a></p>'
+      body = '<p>' + statuses.message[status] + '. Redirecting to ' + u + '</p>'
     },
 
     default: function(){
Index: node_modules/pg/lib/query.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/query.js b/node_modules/pg/lib/query.js
--- a/node_modules/pg/lib/query.js	
+++ b/node_modules/pg/lib/query.js	
@@ -16,6 +16,7 @@
     this.rows = config.rows
     this.types = config.types
     this.name = config.name
+    this.queryMode = config.queryMode
     this.binary = config.binary
     // use unique portal name each time
     this.portal = config.portal || ''
@@ -32,6 +33,10 @@
   }
 
   requiresPreparation() {
+    if (this.queryMode === 'extended') {
+      return true
+    }
+
     // named queries must always be prepared
     if (this.name) {
       return true
@@ -60,7 +65,7 @@
       if (!Array.isArray(this._results)) {
         this._results = [this._result]
       }
-      this._result = new Result(this._rowMode, this.types)
+      this._result = new Result(this._rowMode, this._result._types)
       this._results.push(this._result)
     }
   }
@@ -107,7 +112,7 @@
   // if a named prepared statement is created with empty query text
   // the backend will send an emptyQuery message but *not* a command complete message
   // since we pipeline sync immediately after execute we don't need to do anything here
-  // unless we have rows specified, in which case we did not pipeline the intial sync call
+  // unless we have rows specified, in which case we did not pipeline the initial sync call
   handleEmptyQuery(connection) {
     if (this.rows) {
       connection.sync()
@@ -156,7 +161,21 @@
       return new Error('Query values must be an array')
     }
     if (this.requiresPreparation()) {
-      this.prepare(connection)
+      // If we're using the extended query protocol we fire off several separate commands
+      // to the backend. On some versions of node & some operating system versions
+      // the network stack writes each message separately instead of buffering them together
+      // causing the client & network to send more slowly. Corking & uncorking the stream
+      // allows node to buffer up the messages internally before sending them all off at once.
+      // note: we're checking for existence of cork/uncork because some versions of streams
+      // might not have this (cloudflare?)
+      connection.stream.cork && connection.stream.cork()
+      try {
+        this.prepare(connection)
+      } finally {
+        // while unlikely for this.prepare to throw, if it does & we don't uncork this stream
+        // this client becomes unresponsive, so put in finally block "just in case"
+        connection.stream.uncork && connection.stream.uncork()
+      }
     } else {
       connection.query(this.text)
     }
@@ -225,7 +244,6 @@
     connection.sendCopyFail('No source stream defined')
   }
 
-  // eslint-disable-next-line no-unused-vars
   handleCopyData(msg, connection) {
     // noop
   }
Index: node_modules/postgresql-client/esm/util/fast-parseint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/fast-parseint.js b/node_modules/postgresql-client/esm/util/fast-parseint.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/fast-parseint.js	
+++ /dev/null	
@@ -1,28 +0,0 @@
-export function fastParseInt(str) {
-    /* istanbul ignore next */
-    if (typeof str === 'number')
-        return Math.floor(str);
-    // noinspection SuspiciousTypeOfGuard
-    if (typeof str !== 'string')
-        return NaN;
-    const strLength = str.length;
-    let res = 0;
-    let i = 0;
-    let neg = false;
-    if (str.startsWith('-')) {
-        neg = true;
-        i++;
-    }
-    do {
-        const charCode = str.charCodeAt(i);
-        /* istanbul ignore next */
-        if (charCode === 46)
-            return res;
-        /* istanbul ignore next */
-        if (charCode < 48 || charCode > 57)
-            return NaN;
-        res *= 10;
-        res += charCode - 48;
-    } while (++i < strLength);
-    return neg ? -res : res;
-}
Index: node_modules/strict-typed-events/typings/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/strict-typed-events/typings/index.d.ts b/node_modules/strict-typed-events/typings/index.d.ts
deleted file mode 100644
--- a/node_modules/strict-typed-events/typings/index.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-export { Class, Type } from 'ts-gems';
-export * from './async-event-emitter.js';
-export * from './typed-events.js';
Index: node_modules/es-define-property/test/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/es-define-property/test/index.js b/node_modules/es-define-property/test/index.js
--- a/node_modules/es-define-property/test/index.js	
+++ b/node_modules/es-define-property/test/index.js	
@@ -10,6 +10,7 @@
 
 	t.equal(typeof $defineProperty, 'function', 'defineProperty is supported');
 	if ($defineProperty && gOPD) { // this `if` check is just to shut TS up
+		/** @type {{ a: number, b?: number, c?: number }} */
 		var o = { a: 1 };
 
 		$defineProperty(o, 'b', { enumerable: true, value: 2 });
Index: node_modules/postgresql-client/esm/interfaces/command-result.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/command-result.js b/node_modules/postgresql-client/esm/interfaces/command-result.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/command-result.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/postgresql-client/esm/safe-event-emitter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/safe-event-emitter.js b/node_modules/postgresql-client/esm/safe-event-emitter.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/safe-event-emitter.js	
+++ /dev/null	
@@ -1,13 +0,0 @@
-import { EventEmitter } from 'events';
-export class SafeEventEmitter extends EventEmitter {
-    emit(event, ...args) {
-        try {
-            if (event === 'error' && !this.listenerCount('error'))
-                return false;
-            return super.emit(event, ...args);
-        }
-        catch (ignored) {
-            return false;
-        }
-    }
-}
Index: node_modules/side-channel/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/package.json b/node_modules/side-channel/package.json
--- a/node_modules/side-channel/package.json	
+++ b/node_modules/side-channel/package.json	
@@ -1,11 +1,11 @@
 {
 	"name": "side-channel",
-	"version": "1.0.6",
+	"version": "1.1.0",
 	"description": "Store information about any JS value in a side channel. Uses WeakMap if available.",
 	"main": "index.js",
 	"exports": {
-		"./package.json": "./package.json",
-		".": "./index.js"
+		".": "./index.js",
+		"./package.json": "./package.json"
 	},
 	"types": "./index.d.ts",
 	"scripts": {
@@ -14,11 +14,11 @@
 		"prepublish": "not-in-publish || npm run prepublishOnly",
 		"prelint": "eclint check $(git ls-files | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git')",
 		"lint": "eslint --ext=js,mjs .",
-		"postlint": "tsc -p .",
+		"postlint": "tsc -p . && attw -P",
 		"pretest": "npm run lint",
 		"tests-only": "nyc tape 'test/**/*.js'",
 		"test": "npm run tests-only",
-		"posttest": "aud --production",
+		"posttest": "npx npm@'>=10.2' audit --production",
 		"version": "auto-changelog && git add CHANGELOG.md",
 		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
 	},
@@ -42,29 +42,30 @@
 		"url": "https://github.com/ljharb/side-channel/issues"
 	},
 	"homepage": "https://github.com/ljharb/side-channel#readme",
+	"dependencies": {
+		"es-errors": "^1.3.0",
+		"object-inspect": "^1.13.3",
+		"side-channel-list": "^1.0.0",
+		"side-channel-map": "^1.0.1",
+		"side-channel-weakmap": "^1.0.2"
+	},
 	"devDependencies": {
-		"@ljharb/eslint-config": "^21.1.0",
-		"@types/call-bind": "^1.0.5",
-		"@types/get-intrinsic": "^1.2.2",
-		"@types/object-inspect": "^1.8.4",
-		"@types/tape": "^5.6.4",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
+		"@arethetypeswrong/cli": "^0.17.1",
+		"@ljharb/eslint-config": "^21.1.1",
+		"@ljharb/tsconfig": "^0.2.2",
+		"@types/object-inspect": "^1.13.0",
+		"@types/tape": "^5.6.5",
+		"auto-changelog": "^2.5.0",
 		"eclint": "^2.8.1",
+		"encoding": "^0.1.13",
 		"eslint": "=8.8.0",
 		"in-publish": "^2.0.1",
 		"npmignore": "^0.3.1",
 		"nyc": "^10.3.2",
 		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.5",
+		"tape": "^5.9.0",
 		"typescript": "next"
 	},
-	"dependencies": {
-		"call-bind": "^1.0.7",
-		"es-errors": "^1.3.0",
-		"get-intrinsic": "^1.2.4",
-		"object-inspect": "^1.13.1"
-	},
 	"auto-changelog": {
 		"output": "CHANGELOG.md",
 		"template": "keepachangelog",
Index: node_modules/postgresql-client/cjs/util/parse-datetime.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/parse-datetime.js b/node_modules/postgresql-client/cjs/util/parse-datetime.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/parse-datetime.js	
+++ /dev/null	
@@ -1,38 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.parseDateTime = void 0;
-// noinspection RegExpUnnecessaryNonCapturingGroup
-const fast_parseint_js_1 = require("./fast-parseint.js");
-// noinspection RegExpUnnecessaryNonCapturingGroup
-const TIMESTAMP_PATTERN = 
-// eslint-disable-next-line
-/^(\d{4})-?(0[1-9]|1[012])?-?([123]0|[012][1-9]|31)?(?:[T ]?([01][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?(?:\.(\d+))?(?:(Z)|(?:([+-])([01]?[0-9]|2[0-3]):?([0-5][0-9])?))?)?$/;
-const INFINITY_PATTERN = /^-?infinity$/;
-function parseDateTime(str, parseTime, parseTimeZone, utc) {
-    let m = str.match(TIMESTAMP_PATTERN);
-    if (!m) {
-        m = str.match(INFINITY_PATTERN);
-        if (m)
-            return Number(str.replace('i', 'I'));
-        return new Date('invalid');
-    }
-    const args = [1970, 0, 1, 0, 0, 0, 0];
-    const l = parseTime ? 7 : 3;
-    for (let i = 0; i < l; i++) {
-        const s = m[i + 1];
-        args[i] = (0, fast_parseint_js_1.fastParseInt)(s) || 0;
-    }
-    // Months starts from 0
-    if (args[1] > 0)
-        args[1]--;
-    if (parseTimeZone && parseTime && m[9]) {
-        const r = m[9] === '-' ? -1 : 1;
-        args[3] -= ((0, fast_parseint_js_1.fastParseInt)(m[10]) || 0) * r;
-        args[4] -= ((0, fast_parseint_js_1.fastParseInt)(m[11]) || 0) * r;
-        return new Date(Date.UTC(...args));
-    }
-    if (m[8] || utc)
-        return new Date(Date.UTC(...args));
-    return new Date(...args);
-}
-exports.parseDateTime = parseDateTime;
Index: node_modules/brace-expansion/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/brace-expansion/index.js b/node_modules/brace-expansion/index.js
--- a/node_modules/brace-expansion/index.js	
+++ b/node_modules/brace-expansion/index.js	
@@ -109,7 +109,7 @@
   var isOptions = m.body.indexOf(',') >= 0;
   if (!isSequence && !isOptions) {
     // {a},b}
-    if (m.post.match(/,.*\}/)) {
+    if (m.post.match(/,(?!,).*\}/)) {
       str = m.pre + '{' + m.body + escClose + m.post;
       return expand(str);
     }
Index: node_modules/postgresql-client/cjs/data-types/time-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/time-type.js b/node_modules/postgresql-client/cjs/data-types/time-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/time-type.js	
+++ /dev/null	
@@ -1,54 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayTimeType = exports.TimeType = void 0;
-const constants_js_1 = require("../constants.js");
-const parse_time_js_1 = require("../util/parse-time.js");
-const timeMul = 4294967296;
-exports.TimeType = {
-    name: 'time',
-    oid: constants_js_1.DataTypeOIDs.time,
-    jsType: 'string',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.time);
-        const hi = v.readInt32BE();
-        const lo = v.readUInt32BE(4);
-        let d = new Date((lo + hi * timeMul) / 1000);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
-        return fetchAsString ? dateToTimeString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = (0, parse_time_js_1.parseTime)(v, false, options.utcDates);
-        if (!(v instanceof Date))
-            v = new Date(v);
-        // Postgresql ignores timezone data so we are
-        let n = options.utcDates ? v.getTime() : v.getTime() - v.getTimezoneOffset() * 60 * 1000;
-        n = n * 1000;
-        const hi = Math.floor(n / timeMul);
-        const lo = n - hi * timeMul;
-        buf.writeInt32BE(hi);
-        buf.writeUInt32BE(lo);
-    },
-    parseText(v, options) {
-        if (options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.time))
-            return v;
-        return (0, parse_time_js_1.parseTime)(v, false, options.utcDates);
-    },
-    isType(v) {
-        return ((v instanceof Date && v.getFullYear() === 1970 && v.getMonth() === 0 && v.getDate() === 1) ||
-            (typeof v === 'string' && parse_time_js_1.STRICT_TIME_PATTERN.test(v)));
-    },
-};
-function padZero(v) {
-    return v < 9 ? '0' + v : '' + v;
-}
-function dateToTimeString(d) {
-    return padZero(d.getHours()) + ':' + padZero(d.getMinutes()) + ':' + padZero(d.getSeconds());
-}
-exports.ArrayTimeType = {
-    ...exports.TimeType,
-    name: '_time',
-    oid: constants_js_1.DataTypeOIDs._time,
-    elementsOID: constants_js_1.DataTypeOIDs.time,
-};
Index: node_modules/set-function-length/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/set-function-length/index.js b/node_modules/set-function-length/index.js
deleted file mode 100644
--- a/node_modules/set-function-length/index.js	
+++ /dev/null	
@@ -1,42 +0,0 @@
-'use strict';
-
-var GetIntrinsic = require('get-intrinsic');
-var define = require('define-data-property');
-var hasDescriptors = require('has-property-descriptors')();
-var gOPD = require('gopd');
-
-var $TypeError = require('es-errors/type');
-var $floor = GetIntrinsic('%Math.floor%');
-
-/** @type {import('.')} */
-module.exports = function setFunctionLength(fn, length) {
-	if (typeof fn !== 'function') {
-		throw new $TypeError('`fn` is not a function');
-	}
-	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
-		throw new $TypeError('`length` must be a positive 32-bit integer');
-	}
-
-	var loose = arguments.length > 2 && !!arguments[2];
-
-	var functionLengthIsConfigurable = true;
-	var functionLengthIsWritable = true;
-	if ('length' in fn && gOPD) {
-		var desc = gOPD(fn, 'length');
-		if (desc && !desc.configurable) {
-			functionLengthIsConfigurable = false;
-		}
-		if (desc && !desc.writable) {
-			functionLengthIsWritable = false;
-		}
-	}
-
-	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
-		if (hasDescriptors) {
-			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
-		} else {
-			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
-		}
-	}
-	return fn;
-};
Index: node_modules/postgresql-client/esm/connection/pool.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/connection/pool.js b/node_modules/postgresql-client/esm/connection/pool.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/connection/pool.js	
+++ /dev/null	
@@ -1,222 +0,0 @@
-import { Pool as LightningPool } from 'lightning-pool';
-import { coerceToBoolean, coerceToInt } from 'putil-varhelpers';
-import { ConnectionState } from '../constants.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { getConnectionConfig } from '../util/connection-config.js';
-import { Connection } from './connection.js';
-import { getIntlConnection, IntlConnection } from './intl-connection.js';
-export class Pool extends SafeEventEmitter {
-    constructor(config) {
-        super();
-        this._notificationListeners = new SafeEventEmitter();
-        const cfg = getConnectionConfig(config);
-        this.config = Object.freeze(cfg);
-        const poolOptions = {};
-        poolOptions.acquireMaxRetries = coerceToInt(cfg.acquireMaxRetries, 0);
-        poolOptions.acquireRetryWait = coerceToInt(cfg.acquireRetryWait, 2000);
-        poolOptions.acquireTimeoutMillis = coerceToInt(cfg.acquireTimeoutMillis, 0);
-        poolOptions.idleTimeoutMillis = coerceToInt(cfg.idleTimeoutMillis, 30000);
-        poolOptions.max = coerceToInt(cfg.max, 10);
-        poolOptions.maxQueue = coerceToInt(cfg.maxQueue, 1000);
-        poolOptions.max = coerceToInt(cfg.max, 10);
-        poolOptions.min = coerceToInt(cfg.min, 0);
-        poolOptions.minIdle = coerceToInt(cfg.minIdle, 0);
-        poolOptions.validation = coerceToBoolean(cfg.validation, false);
-        const poolFactory = {
-            create: async () => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.create',
-                        pool: this,
-                        message: `new connection creating`,
-                    });
-                const intlCon = new IntlConnection(cfg);
-                await intlCon.connect();
-                intlCon.on('close', () => this._pool.destroy(intlCon));
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.create',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection created`,
-                    });
-                return intlCon;
-            },
-            destroy: intlCon => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.destroy',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection destroy`,
-                    });
-                return intlCon.close();
-            },
-            reset: async (intlCon) => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.reset',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection reset`,
-                    });
-                try {
-                    if (intlCon.state === ConnectionState.READY) {
-                        await intlCon.execute('ROLLBACK;UNLISTEN *');
-                    }
-                }
-                finally {
-                    intlCon.removeAllListeners();
-                    intlCon.once('close', () => this._pool.destroy(intlCon));
-                    intlCon._refCount = 0;
-                }
-            },
-            validate: async (intlCon) => {
-                /* istanbul ignore next */
-                if (this.listenerCount('debug'))
-                    this.emit('debug', {
-                        location: 'Pool.factory.validate',
-                        pool: this,
-                        message: `[${intlCon.processID}] connection validate`,
-                    });
-                if (intlCon.state !== ConnectionState.READY)
-                    throw new Error('Connection is not active');
-                await intlCon.execute('select 1;');
-            },
-        };
-        this._pool = new LightningPool(poolFactory, poolOptions);
-        this._pool.on('return', (...args) => this.emit('release', ...args));
-        this._pool.on('error', (...args) => this.emit('error', ...args));
-        this._pool.on('acquire', (...args) => this.emit('acquire', ...args));
-        this._pool.on('destroy', (...args) => this.emit('destroy', ...args));
-        this._pool.start();
-    }
-    /**
-     * Returns number of connections that are currently acquired
-     */
-    get acquiredConnections() {
-        return this._pool.acquired;
-    }
-    /**
-     * Returns number of unused connections in the pool
-     */
-    get idleConnections() {
-        return this._pool.available;
-    }
-    /**
-     * Returns total number of connections in the pool regardless of whether they are idle or in use
-     */
-    get totalConnections() {
-        return this._pool.size;
-    }
-    /**
-     * Obtains a connection from the connection pool
-     */
-    async acquire() {
-        const intlCon = await this._pool.acquire();
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            this.emit('debug', {
-                location: 'Pool.acquire',
-                pool: this,
-                message: `[${intlCon.processID}] acquired`,
-            });
-        const connection = new Connection(this, intlCon);
-        /* istanbul ignore next */
-        if (this.listenerCount('debug'))
-            connection.on('debug', (...args) => this.emit('debug', ...args));
-        return connection;
-    }
-    /**
-     * Shuts down the pool and destroys all resources.
-     */
-    async close(terminateWait) {
-        this._notificationListeners.removeAllListeners();
-        await this._notificationConnection?.close(terminateWait);
-        const ms = terminateWait == null ? 10000 : terminateWait;
-        return this._pool.closeAsync(ms);
-    }
-    /**
-     * Executes a script
-     */
-    async execute(sql, options) {
-        const connection = await this.acquire();
-        try {
-            return await connection.execute(sql, options);
-        }
-        finally {
-            await this.release(connection);
-        }
-    }
-    /**
-     * Executes a query
-     */
-    async query(sql, options) {
-        const connection = await this.acquire();
-        try {
-            return await connection.query(sql, options);
-        }
-        finally {
-            await this.release(connection);
-        }
-    }
-    async prepare(sql, options) {
-        const connection = await this.acquire();
-        const statement = await connection.prepare(sql, options);
-        statement.once('close', () => this._pool.release(getIntlConnection(connection)));
-        return statement;
-    }
-    release(connection) {
-        return this._pool.releaseAsync(getIntlConnection(connection));
-    }
-    async listen(channel, callback) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        this._notificationListeners.on(channel, callback);
-        await this._initNotificationConnection();
-    }
-    async unListen(channel) {
-        if (!/^[A-Z]\w+$/i.test(channel))
-            throw new TypeError(`Invalid channel name`);
-        this._notificationListeners.removeAllListeners(channel);
-        if (!this._notificationListeners.eventNames().length) {
-            await this.unListenAll();
-        }
-        else if (this._notificationConnection)
-            await this._notificationConnection.unListen(channel);
-    }
-    async unListenAll() {
-        this._notificationListeners.removeAllListeners();
-        if (this._notificationConnection) {
-            const conn = this._notificationConnection;
-            this._notificationConnection = undefined;
-            await conn.close();
-        }
-    }
-    async _initNotificationConnection() {
-        if (this._notificationConnection)
-            return;
-        const conn = (this._notificationConnection = new Connection(this.config));
-        // Reconnect on connection lost
-        conn.on('close', () => reConnect());
-        const registerEvents = async () => {
-            const channels = this._notificationListeners.eventNames();
-            for (const channel of channels) {
-                const fns = this._notificationListeners.listeners(channel);
-                for (const fn of fns) {
-                    await conn.listen(channel, fn);
-                }
-            }
-        };
-        const reConnect = async () => {
-            setTimeout(() => {
-                if (!this._notificationListeners.eventNames().length)
-                    return;
-                conn.connect().catch(() => reConnect());
-            }, 500).unref();
-        };
-        await conn.connect();
-        await registerEvents();
-    }
-}
Index: node_modules/send/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/send/HISTORY.md b/node_modules/send/HISTORY.md
--- a/node_modules/send/HISTORY.md	
+++ b/node_modules/send/HISTORY.md	
@@ -1,3 +1,8 @@
+0.19.0 / 2024-09-10
+===================
+
+* Remove link renderization in html while redirecting
+
 0.18.0 / 2022-03-23
 ===================
 
Index: node_modules/postgresql-client/esm/protocol/sasl.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/sasl.js b/node_modules/postgresql-client/esm/protocol/sasl.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/sasl.js	
+++ /dev/null	
@@ -1,102 +0,0 @@
-/* eslint-disable no-bitwise */
-import crypto from 'crypto';
-export var SASL;
-(function (SASL) {
-    const CLIENT_KEY = 'Client Key';
-    const SERVER_KEY = 'Server Key';
-    const GS2_HEADER = 'n,,';
-    function createSession(username, mechanism) {
-        const nonce = crypto.randomBytes(18).toString('base64');
-        const clientFirstMessage = `${GS2_HEADER}${firstMessageBare(username, nonce)}`;
-        return {
-            username,
-            mechanism,
-            nonce,
-            clientFirstMessage,
-        };
-    }
-    SASL.createSession = createSession;
-    function continueSession(session, password, data) {
-        const s = data.toString();
-        const items = s.split(',');
-        let nonce = '';
-        let salt = '';
-        let iteration = 0;
-        for (const i of items) {
-            switch (i[0]) {
-                case 'r':
-                    nonce = i.substring(2);
-                    break;
-                case 's':
-                    salt = i.substring(2);
-                    break;
-                case 'i':
-                    iteration = parseInt(i.substring(2), 10);
-                    break;
-            }
-        }
-        if (!nonce)
-            throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing');
-        if (!salt)
-            throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing');
-        if (!iteration)
-            throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing');
-        if (!nonce.startsWith(session.nonce))
-            throw new Error('SASL: Server nonce does not start with client nonce');
-        const serverFirstMessage = `r=${nonce},s=${salt},i=${iteration}`;
-        const clientFinalMessageWithoutProof = `c=${encode64(GS2_HEADER)},r=${nonce}`;
-        const authMessage = `${firstMessageBare(session.username, session.nonce)},${serverFirstMessage},${clientFinalMessageWithoutProof}`;
-        const saltPass = hi(password, salt, iteration);
-        const clientKey = hmac(saltPass, CLIENT_KEY);
-        const storedKey = hash(clientKey);
-        const clientSignature = hmac(storedKey, authMessage);
-        const clientProofBytes = xor(clientKey, clientSignature);
-        const clientProof = clientProofBytes.toString('base64');
-        const serverKey = hmac(saltPass, SERVER_KEY);
-        const serverSignatureBytes = hmac(serverKey, authMessage);
-        session.serverSignature = serverSignatureBytes.toString('base64');
-        session.clientFinalMessage = clientFinalMessageWithoutProof + ',p=' + clientProof;
-    }
-    SASL.continueSession = continueSession;
-    function finalizeSession(session, data) {
-        let serverSignature = '';
-        const arr = data.split(',');
-        for (const s of arr) {
-            if (s[0] === 'v')
-                serverSignature = s.substr(2);
-        }
-        if (serverSignature !== session.serverSignature)
-            throw new Error('SASL: Server signature does not match');
-    }
-    SASL.finalizeSession = finalizeSession;
-    function firstMessageBare(username, nonce) {
-        return `n=${username},r=${nonce}`;
-    }
-    /**
-     * Hi() is, essentially, PBKDF2 [RFC2898] with HMAC() as the
-     * pseudorandom function (PRF) and with dkLen == output length of
-     * HMAC() == output length of H()
-     */
-    function hi(text, salt, iterations) {
-        return crypto.pbkdf2Sync(text, Buffer.from(salt, 'base64'), iterations, 32, 'sha256');
-    }
-    const encode64 = str => Buffer.from(str).toString('base64');
-    function hmac(key, msg) {
-        return crypto.createHmac('sha256', key).update(msg).digest();
-    }
-    function hash(data) {
-        return crypto.createHash('sha256').update(data).digest();
-    }
-    function xor(a, b) {
-        a = Buffer.isBuffer(a) ? a : Buffer.from(a);
-        b = Buffer.isBuffer(b) ? b : Buffer.from(b);
-        if (a.length !== b.length)
-            throw new Error('Buffers must be of the same length');
-        const l = a.length;
-        const out = Buffer.allocUnsafe(l);
-        for (let i = 0; i < l; i++) {
-            out[i] = a[i] ^ b[i];
-        }
-        return out;
-    }
-})(SASL || (SASL = {}));
Index: node_modules/postgresql-client/esm/data-types/point-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/point-type.js b/node_modules/postgresql-client/esm/data-types/point-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/point-type.js	
+++ /dev/null	
@@ -1,36 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-const POINT_PATTERN1 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\)$/;
-const POINT_PATTERN2 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-export const PointType = {
-    name: 'point',
-    oid: DataTypeOIDs.point,
-    jsType: 'object',
-    parseBinary(v) {
-        return {
-            x: v.readDoubleBE(0),
-            y: v.readDoubleBE(8),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x);
-        buf.writeDoubleBE(v.y);
-    },
-    parseText(v) {
-        const m = v.match(POINT_PATTERN1) || v.match(POINT_PATTERN2);
-        if (!m)
-            return undefined;
-        return {
-            x: parseFloat(m[1]),
-            y: parseFloat(m[2]),
-        };
-    },
-    isType(v) {
-        return typeof v === 'object' && Object.keys(v).length === 2 && typeof v.x === 'number' && typeof v.y === 'number';
-    },
-};
-export const ArrayPointType = {
-    ...PointType,
-    name: '_point',
-    oid: DataTypeOIDs._point,
-    elementsOID: DataTypeOIDs.point,
-};
Index: node_modules/doublylinked/lib/doubly-linked.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/doublylinked/lib/doubly-linked.d.ts b/node_modules/doublylinked/lib/doubly-linked.d.ts
--- a/node_modules/doublylinked/lib/doubly-linked.d.ts	
+++ b/node_modules/doublylinked/lib/doubly-linked.d.ts	
@@ -1,14 +1,13 @@
 /// <reference lib="es2015.symbol" />
 
 declare module 'doublylinked' {
-
   type Maybe<T> = T | void;
 
   export namespace DoublyLinked {
-    export interface Node {
-      value: any;
-      readonly prev?: Node;
-      readonly next?: Node;
+    export interface Node<T> {
+      value: T;
+      readonly prev?: Node<T>;
+      readonly next?: Node<T>;
 
       remove(): void;
     }
@@ -17,13 +16,13 @@
   export default class DoublyLinked<T = any> {
     constructor(...element: T[]);
 
-    readonly cursor: DoublyLinked.Node;
+    readonly cursor: DoublyLinked.Node<T>;
 
-    readonly head: DoublyLinked.Node;
+    readonly head: DoublyLinked.Node<T>;
 
     readonly length: number;
 
-    readonly tail: DoublyLinked.Node;
+    readonly tail: DoublyLinked.Node<T>;
 
     concat(...element: T[]): DoublyLinked<T>;
 
@@ -33,17 +32,35 @@
 
     values(): IterableIterator<T>;
 
-    every(callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>, thisArg?: any): boolean;
+    every(
+      callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>,
+      thisArg?: any,
+    ): boolean;
 
-    everyRight(callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>, thisArg?: any): boolean;
+    everyRight(
+      callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>,
+      thisArg?: any,
+    ): boolean;
 
-    filter(callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>, thisArg?: any): DoublyLinked<T>;
+    filter(
+      callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>,
+      thisArg?: any,
+    ): DoublyLinked<T>;
 
-    find(callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>, thisArg?: any): T;
+    find(
+      callback: (element: T, index?: number, thisArg?: any) => Maybe<boolean>,
+      thisArg?: any,
+    ): T;
 
-    forEach(callback: (element: T, index?: number, thisArg?: any) => void, thisArg?: any): void;
+    forEach(
+      callback: (element: T, index?: number, thisArg?: any) => void,
+      thisArg?: any,
+    ): void;
 
-    forEachRight(callback: (element: T, index?: number, thisArg?: any) => void, thisArg?: any): void;
+    forEachRight(
+      callback: (element: T, index?: number, thisArg?: any) => void,
+      thisArg?: any,
+    ): void;
 
     includes(element: T, fromIndex?: number): boolean;
 
@@ -51,7 +68,9 @@
 
     join(separator: string): string;
 
-    map(callback: (element: T, index?: number, thisArg?: any) => void): DoublyLinked<T>;
+    map(
+      callback: (element: T, index?: number, thisArg?: any) => void,
+    ): DoublyLinked<T>;
 
     next(): T;
 
@@ -61,9 +80,25 @@
 
     push(...element: T[]): number;
 
-    reduce(callback: (accumulator: any, element: T, index?: number, thisArg?: any) => any, initialValue?: any): any;
+    reduce(
+      callback: (
+        accumulator: any,
+        element: T,
+        index?: number,
+        thisArg?: any,
+      ) => any,
+      initialValue?: any,
+    ): any;
 
-    reduceRight(callback: (accumulator: any, element: T, index?: number, thisArg?: any) => any, initialValue?: any): any;
+    reduceRight(
+      callback: (
+        accumulator: any,
+        element: T,
+        index?: number,
+        thisArg?: any,
+      ) => any,
+      initialValue?: any,
+    ): any;
 
     remove(element: T, fromIndex?: number): any;
 
@@ -75,16 +110,20 @@
 
     slice(start?: number, end?: number): T[];
 
-    some(callback: (element: T, index?: number, thisArg?: any) => boolean, thisArg?: any): boolean;
+    some(
+      callback: (element: T, index?: number, thisArg?: any) => boolean,
+      thisArg?: any,
+    ): boolean;
 
-    someRight(callback: (element: T, index?: number, thisArg?: any) => boolean, thisArg?: any): boolean;
+    someRight(
+      callback: (element: T, index?: number, thisArg?: any) => boolean,
+      thisArg?: any,
+    ): boolean;
 
     toArray(): T[];
 
     toString(): string;
 
     unshift(...element: T[]): number;
-
   }
-
 }
Index: node_modules/postgres/cf/src/connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/cf/src/connection.js b/node_modules/postgres/cf/src/connection.js
--- a/node_modules/postgres/cf/src/connection.js	
+++ b/node_modules/postgres/cf/src/connection.js	
@@ -111,7 +111,7 @@
     queue: queues.closed,
     idleTimer,
     connect(query) {
-      initial = query || true
+      initial = query
       reconnect()
     },
     terminate,
@@ -295,7 +295,7 @@
     if (incomings) {
       incomings.push(x)
       remaining -= x.length
-      if (remaining >= 0)
+      if (remaining > 0)
         return
     }
 
@@ -387,7 +387,13 @@
   }
 
   function queryError(query, err) {
-    Object.defineProperties(err, {
+    if (query.reserve)
+      return query.reject(err)
+
+    if (!err || typeof err !== 'object')
+      err = new Error(err)
+
+    'query' in err || 'parameters' in err || Object.defineProperties(err, {
       stack: { value: err.stack + query.origin.replace(/.*\n/, '\n'), enumerable: options.debug },
       query: { value: query.string, enumerable: options.debug },
       parameters: { value: query.parameters, enumerable: options.debug },
@@ -534,11 +540,11 @@
       }
 
       if (needsTypes) {
-        initial === true && (initial = null)
+        initial.reserve && (initial = null)
         return fetchArrayTypes()
       }
 
-      initial !== true && execute(initial)
+      initial && !initial.reserve && execute(initial)
       options.shared.retries = retries = 0
       initial = null
       return
Index: node_modules/has-symbols/shams.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-symbols/shams.js b/node_modules/has-symbols/shams.js
--- a/node_modules/has-symbols/shams.js	
+++ b/node_modules/has-symbols/shams.js	
@@ -1,10 +1,12 @@
 'use strict';
 
+/** @type {import('./shams')} */
 /* eslint complexity: [2, 18], max-statements: [2, 33] */
 module.exports = function hasSymbols() {
 	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
 	if (typeof Symbol.iterator === 'symbol') { return true; }
 
+	/** @type {{ [k in symbol]?: unknown }} */
 	var obj = {};
 	var sym = Symbol('test');
 	var symObj = Object(sym);
@@ -23,7 +25,7 @@
 
 	var symVal = 42;
 	obj[sym] = symVal;
-	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
+	for (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
 	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }
 
 	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }
@@ -34,7 +36,8 @@
 	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }
 
 	if (typeof Object.getOwnPropertyDescriptor === 'function') {
-		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
+		// eslint-disable-next-line no-extra-parens
+		var descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));
 		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
 	}
 
Index: node_modules/postgresql-client/esm/protocol/database-error.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/protocol/database-error.js b/node_modules/postgresql-client/esm/protocol/database-error.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/protocol/database-error.js	
+++ /dev/null	
@@ -1,13 +0,0 @@
-export class DatabaseError extends Error {
-    constructor(msg) {
-        super(msg.message);
-        Object.assign(this, {
-            ...msg,
-            line: undefined,
-            file: undefined,
-            routine: undefined,
-        });
-        if (msg.position)
-            this.position = parseInt(msg.position, 10) || undefined;
-    }
-}
Index: node_modules/lightning-pool/cjs/resource-item.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/cjs/resource-item.js b/node_modules/lightning-pool/cjs/resource-item.js
--- a/node_modules/lightning-pool/cjs/resource-item.js	
+++ b/node_modules/lightning-pool/cjs/resource-item.js	
@@ -1,10 +1,10 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.ResourceItem = void 0;
-const definitions_js_1 = require("./definitions.js");
+const constants_js_1 = require("./constants.js");
 class ResourceItem {
     constructor(resource) {
-        this.state = definitions_js_1.ResourceState.IDLE;
+        this.state = constants_js_1.ResourceState.IDLE;
         this.idleTime = 0;
         this.destroyed = false;
         this.resource = resource;
Index: node_modules/braces/lib/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/lib/utils.js b/node_modules/braces/lib/utils.js
--- a/node_modules/braces/lib/utils.js	
+++ b/node_modules/braces/lib/utils.js	
@@ -31,7 +31,7 @@
  */
 
 exports.escapeNode = (block, n = 0, type) => {
-  let node = block.nodes[n];
+  const node = block.nodes[n];
   if (!node) return;
 
   if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {
@@ -100,13 +100,23 @@
 
 exports.flatten = (...args) => {
   const result = [];
+
   const flat = arr => {
     for (let i = 0; i < arr.length; i++) {
-      let ele = arr[i];
-      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
+      const ele = arr[i];
+
+      if (Array.isArray(ele)) {
+        flat(ele);
+        continue;
+      }
+
+      if (ele !== undefined) {
+        result.push(ele);
+      }
     }
     return result;
   };
+
   flat(args);
   return result;
 };
Index: node_modules/semver/functions/compare-build.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/compare-build.js b/node_modules/semver/functions/compare-build.js
--- a/node_modules/semver/functions/compare-build.js	
+++ b/node_modules/semver/functions/compare-build.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const SemVer = require('../classes/semver')
 const compareBuild = (a, b, loose) => {
   const versionA = new SemVer(a, loose)
Index: node_modules/nodemon/lib/rules/add.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/lib/rules/add.js b/node_modules/nodemon/lib/rules/add.js
--- a/node_modules/nodemon/lib/rules/add.js	
+++ b/node_modules/nodemon/lib/rules/add.js	
@@ -28,7 +28,7 @@
  * @param {Object} rules containing `watch` and `ignore`. Also updated during
  *                       execution
  * @param {String} which must be either "watch" or "ignore"
- * @param {String|RegExp} the actual rule.
+ * @param {String|RegExp} rule the actual rule.
  */
 function add(rules, which, rule) {
   if (!{ ignore: 1, watch: 1}[which]) {
Index: node_modules/postgresql-client/typings/connection/prepared-statement.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/connection/prepared-statement.d.ts b/node_modules/postgresql-client/typings/connection/prepared-statement.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/connection/prepared-statement.d.ts	
+++ /dev/null	
@@ -1,27 +0,0 @@
-/// <reference types="node" />
-import { QueryOptions } from '../interfaces/query-options.js';
-import { QueryResult } from '../interfaces/query-result.js';
-import { StatementPrepareOptions } from '../interfaces/statement-prepare-options.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { Maybe, OID } from '../types.js';
-import { Connection } from './connection.js';
-export declare class PreparedStatement extends SafeEventEmitter implements AsyncDisposable {
-    private readonly _connection;
-    private readonly _sql;
-    private readonly _name;
-    private readonly _paramTypes;
-    protected _onErrorSavePoint: string;
-    private _refCount;
-    constructor(connection: Connection, sql: string, paramTypes?: OID[]);
-    static prepare(connection: Connection, sql: string, options?: StatementPrepareOptions): Promise<PreparedStatement>;
-    get connection(): Connection;
-    get name(): Maybe<string>;
-    get sql(): string;
-    get paramTypes(): Maybe<Maybe<OID>[]>;
-    execute(options?: QueryOptions): Promise<QueryResult>;
-    close(): Promise<void>;
-    cancel(): Promise<void>;
-    protected _execute(options?: QueryOptions): Promise<QueryResult>;
-    protected _close(): Promise<void>;
-    [Symbol.asyncDispose](): Promise<void>;
-}
Index: node_modules/pg-protocol/src/buffer-writer.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/buffer-writer.ts b/node_modules/pg-protocol/src/buffer-writer.ts
--- a/node_modules/pg-protocol/src/buffer-writer.ts	
+++ b/node_modules/pg-protocol/src/buffer-writer.ts	
@@ -9,12 +9,12 @@
   }
 
   private ensure(size: number): void {
-    var remaining = this.buffer.length - this.offset
+    const remaining = this.buffer.length - this.offset
     if (remaining < size) {
-      var oldBuffer = this.buffer
+      const oldBuffer = this.buffer
       // exponential growth factor of around ~ 1.5
       // https://stackoverflow.com/questions/2269063/buffer-growth-strategy
-      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size
+      const newSize = oldBuffer.length + (oldBuffer.length >> 1) + size
       this.buffer = Buffer.allocUnsafe(newSize)
       oldBuffer.copy(this.buffer)
     }
@@ -40,7 +40,7 @@
     if (!string) {
       this.ensure(1)
     } else {
-      var len = Buffer.byteLength(string)
+      const len = Buffer.byteLength(string)
       this.ensure(len + 1) // +1 for null terminator
       this.buffer.write(string, this.offset, 'utf-8')
       this.offset += len
@@ -51,7 +51,7 @@
   }
 
   public addString(string: string = ''): Writer {
-    var len = Buffer.byteLength(string)
+    const len = Buffer.byteLength(string)
     this.ensure(len)
     this.buffer.write(string, this.offset)
     this.offset += len
@@ -76,7 +76,7 @@
   }
 
   public flush(code?: number): Buffer {
-    var result = this.join(code)
+    const result = this.join(code)
     this.offset = 5
     this.headerPosition = 0
     this.buffer = Buffer.allocUnsafe(this.size)
Index: node_modules/braces/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/package.json b/node_modules/braces/package.json
--- a/node_modules/braces/package.json	
+++ b/node_modules/braces/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "braces",
   "description": "Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.",
-  "version": "3.0.2",
+  "version": "3.0.3",
   "homepage": "https://github.com/micromatch/braces",
   "author": "Jon Schlinkert (https://github.com/jonschlinkert)",
   "contributors": [
@@ -29,7 +29,7 @@
     "benchmark": "node benchmark"
   },
   "dependencies": {
-    "fill-range": "^7.0.1"
+    "fill-range": "^7.1.1"
   },
   "devDependencies": {
     "ansi-colors": "^3.2.4",
Index: node_modules/pg-protocol/dist/buffer-reader.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/dist/buffer-reader.js.map b/node_modules/pg-protocol/dist/buffer-reader.js.map
--- a/node_modules/pg-protocol/dist/buffer-reader.js.map	
+++ b/node_modules/pg-protocol/dist/buffer-reader.js.map	
@@ -1,1 +1,1 @@
-{"version":3,"file":"buffer-reader.js","sourceRoot":"","sources":["../src/buffer-reader.ts"],"names":[],"mappings":";;;AAAA,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;AAEzC,MAAa,YAAY;IAMvB,YAAoB,SAAiB,CAAC;QAAlB,WAAM,GAAN,MAAM,CAAY;QAL9B,WAAM,GAAW,WAAW,CAAA;QAEpC,wCAAwC;QAChC,aAAQ,GAAW,OAAO,CAAA;IAEO,CAAC;IAEnC,SAAS,CAAC,MAAc,EAAE,MAAc;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAEM,KAAK;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,IAAI;QACT,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACvC,IAAI,CAAC,MAAM,EAAE,CAAA;QACb,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,KAAK;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,MAAM,CAAC,MAAc;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACrF,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,OAAO;QACZ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,IAAI,GAAG,GAAG,KAAK,CAAA;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,GAAE;QACnC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;IAC5D,CAAC;IAEM,KAAK,CAAC,MAAc;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACnE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAlDD,oCAkDC"}
\ No newline at end of file
+{"version":3,"file":"buffer-reader.js","sourceRoot":"","sources":["../src/buffer-reader.ts"],"names":[],"mappings":";;;AAAA,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;AAEzC,MAAa,YAAY;IAMvB,YAAoB,SAAiB,CAAC;QAAlB,WAAM,GAAN,MAAM,CAAY;QAL9B,WAAM,GAAW,WAAW,CAAA;QAEpC,wCAAwC;QAChC,aAAQ,GAAW,OAAO,CAAA;IAEO,CAAC;IAEnC,SAAS,CAAC,MAAc,EAAE,MAAc;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAEM,KAAK;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,IAAI;QACT,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACvC,IAAI,CAAC,MAAM,EAAE,CAAA;QACb,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,KAAK;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,MAAM;QACX,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACpD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,MAAM,CAAC,MAAc;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACrF,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,OAAO;QACZ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,IAAI,GAAG,GAAG,KAAK,CAAA;QACf,oCAAoC;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,GAAE;QACnC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;IAC5D,CAAC;IAEM,KAAK,CAAC,MAAc;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACnE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAzDD,oCAyDC"}
\ No newline at end of file
Index: node_modules/lightning-pool/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/package.json b/node_modules/lightning-pool/package.json
--- a/node_modules/lightning-pool/package.json	
+++ b/node_modules/lightning-pool/package.json	
@@ -1,75 +1,49 @@
 {
   "name": "lightning-pool",
   "description": "Fastest generic Pool written with TypeScript",
-  "version": "4.2.2",
-  "author": "Panates Ltd.",
+  "version": "4.11.1",
+  "author": "Panates",
+  "license": "MIT",
+  "dependencies": {
+    "doublylinked": "^2.5.6",
+    "putil-promisify": "^1.10.1",
+    "tslib": "^2.8.1"
+  },
+  "type": "module",
+  "exports": {
+    ".": {
+      "import": {
+        "types": "./types/index.d.ts",
+        "default": "./esm/index.js"
+      },
+      "require": {
+        "types": "./types/index.d.cts",
+        "default": "./cjs/index.js"
+      },
+      "default": "./esm/index.js"
+    },
+    "./package.json": "./package.json"
+  },
+  "main": "./cjs/index.js",
+  "module": "./esm/index.js",
+  "types": "./types/index.d.ts",
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/panates/lightning-pool.git"
+  },
   "contributors": [
     "Eray Hanoglu <e.hanoglu@panates.com>"
   ],
-  "license": "MIT",
-  "repository": "panates/lightning-pool",
   "keywords": [
     "pool",
     "generic",
     "generic-pool"
   ],
-  "dependencies": {
-    "doublylinked": "^2.5.3",
-    "putil-promisify": "^1.10.1"
-  },
-  "devDependencies": {
-    "@babel/eslint-parser": "^7.22.15",
-    "@types/jest": "^29.5.4",
-    "@types/node": "^20.6.0",
-    "@typescript-eslint/eslint-plugin": "^6.6.0",
-    "@typescript-eslint/parser": "^6.6.0",
-    "dotenv": "^16.3.1",
-    "eslint": "^8.49.0",
-    "eslint-config-google": "^0.14.0",
-    "eslint-plugin-import": "^2.28.1",
-    "eslint-plugin-security": "^1.7.1",
-    "eslint-plugin-simple-import-sort": "^10.0.0",
-    "eslint-plugin-unused-imports": "^3.0.0",
-    "jest": "^29.6.4",
-    "npm-run-path": "^5.1.0",
-    "ts-cleanup": "^0.2.6",
-    "ts-jest": "^29.1.1",
-    "ts-loader": "^9.4.4",
-    "ts-node": "^10.9.1",
-    "tsconfig-paths": "^4.2.0",
-    "typescript": "^5.2.2"
-  },
-  "type": "module",
-  "types": "esm/index.d.ts",
-  "exports": {
-    ".": {
-      "require": "./cjs/index.js",
-      "default": "./esm/index.js"
-    },
-    "./cjs": "./cjs/index.js",
-    "./esm": "./esm/index.js"
-  },
   "files": [
-    "bin/",
     "cjs/",
     "esm/",
+    "types/",
     "LICENSE",
     "README.md"
-  ],
-  "scripts": {
-    "lint": "eslint .",
-    "clean": "npm run clean:src && npm run clean:dist",
-    "clean:dist": "rimraf cjs esm coverage",
-    "clean:src": "ts-cleanup -s src --all | ts-cleanup -s test",
-    "prebuild": "npm run clean:dist && npm run lint",
-    "build": "npm run build:cjs && npm run build:esm",
-    "build:cjs": "tsc -b tsconfig-build-cjs.json",
-    "build:esm": "tsc -b tsconfig-build-esm.json",
-    "postbuild": "cp package.cjs.json ./cjs/package.json",
-    "test": "jest --runInBand --detectOpenHandles",
-    "precover": "rimraf coverage",
-    "cover": "jest --maxWorkers=1 --coverage",
-    "precitest": "rimraf coverage",
-    "citest": "jest --coverage --coverageReporters=lcov"
-  }
-}
+  ]
+}
\ No newline at end of file
Index: node_modules/postgresql-client/typings/data-types/float4-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/float4-type.d.ts b/node_modules/postgresql-client/typings/data-types/float4-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/float4-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const Float4Type: DataType;
-export declare const ArrayFloat4Type: DataType;
Index: node_modules/call-bind/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/package.json b/node_modules/call-bind/package.json
deleted file mode 100644
--- a/node_modules/call-bind/package.json	
+++ /dev/null	
@@ -1,95 +0,0 @@
-{
-	"name": "call-bind",
-	"version": "1.0.7",
-	"description": "Robustly `.call.bind()` a function",
-	"main": "index.js",
-	"exports": {
-		".": "./index.js",
-		"./callBound": "./callBound.js",
-		"./package.json": "./package.json"
-	},
-	"scripts": {
-		"prepack": "npmignore --auto --commentLines=auto",
-		"prepublish": "not-in-publish || npm run prepublishOnly",
-		"prepublishOnly": "safe-publish-latest",
-		"lint": "eslint --ext=.js,.mjs .",
-		"postlint": "evalmd README.md",
-		"pretest": "npm run lint",
-		"tests-only": "nyc tape 'test/**/*.js'",
-		"test": "npm run tests-only",
-		"posttest": "aud --production",
-		"version": "auto-changelog && git add CHANGELOG.md",
-		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
-	},
-	"repository": {
-		"type": "git",
-		"url": "git+https://github.com/ljharb/call-bind.git"
-	},
-	"keywords": [
-		"javascript",
-		"ecmascript",
-		"es",
-		"js",
-		"callbind",
-		"callbound",
-		"call",
-		"bind",
-		"bound",
-		"call-bind",
-		"call-bound",
-		"function",
-		"es-abstract"
-	],
-	"author": "Jordan Harband <ljharb@gmail.com>",
-	"funding": {
-		"url": "https://github.com/sponsors/ljharb"
-	},
-	"license": "MIT",
-	"bugs": {
-		"url": "https://github.com/ljharb/call-bind/issues"
-	},
-	"homepage": "https://github.com/ljharb/call-bind#readme",
-	"devDependencies": {
-		"@ljharb/eslint-config": "^21.1.0",
-		"aud": "^2.0.4",
-		"auto-changelog": "^2.4.0",
-		"es-value-fixtures": "^1.4.2",
-		"eslint": "=8.8.0",
-		"evalmd": "^0.0.19",
-		"for-each": "^0.3.3",
-		"gopd": "^1.0.1",
-		"has-strict-mode": "^1.0.1",
-		"in-publish": "^2.0.1",
-		"npmignore": "^0.3.1",
-		"nyc": "^10.3.2",
-		"object-inspect": "^1.13.1",
-		"safe-publish-latest": "^2.0.0",
-		"tape": "^5.7.4"
-	},
-	"dependencies": {
-		"es-define-property": "^1.0.0",
-		"es-errors": "^1.3.0",
-		"function-bind": "^1.1.2",
-		"get-intrinsic": "^1.2.4",
-		"set-function-length": "^1.2.1"
-	},
-	"testling": {
-		"files": "test/index.js"
-	},
-	"auto-changelog": {
-		"output": "CHANGELOG.md",
-		"template": "keepachangelog",
-		"unreleased": false,
-		"commitLimit": false,
-		"backfillLimit": false,
-		"hideCredit": true
-	},
-	"publishConfig": {
-		"ignore": [
-			".github/workflows"
-		]
-	},
-	"engines": {
-		"node": ">= 0.4"
-	}
-}
Index: node_modules/pg-pool/test/releasing-clients.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/releasing-clients.js b/node_modules/pg-pool/test/releasing-clients.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/releasing-clients.js	
+++ /dev/null	
@@ -1,54 +0,0 @@
-const Pool = require('../')
-
-const expect = require('expect.js')
-const net = require('net')
-
-describe('releasing clients', () => {
-  it('removes a client which cannot be queried', async () => {
-    // make a pool w/ only 1 client
-    const pool = new Pool({ max: 1 })
-    expect(pool.totalCount).to.eql(0)
-    const client = await pool.connect()
-    expect(pool.totalCount).to.eql(1)
-    expect(pool.idleCount).to.eql(0)
-    // reach into the client and sever its connection
-    client.connection.end()
-
-    // wait for the client to error out
-    const err = await new Promise((resolve) => client.once('error', resolve))
-    expect(err).to.be.ok()
-    expect(pool.totalCount).to.eql(1)
-    expect(pool.idleCount).to.eql(0)
-
-    // try to return it to the pool - this removes it because its broken
-    client.release()
-    expect(pool.totalCount).to.eql(0)
-    expect(pool.idleCount).to.eql(0)
-
-    // make sure pool still works
-    const { rows } = await pool.query('SELECT NOW()')
-    expect(rows).to.have.length(1)
-    await pool.end()
-  })
-
-  it('removes a client which is ending', async () => {
-    // make a pool w/ only 1 client
-    const pool = new Pool({ max: 1 })
-    expect(pool.totalCount).to.eql(0)
-    const client = await pool.connect()
-    expect(pool.totalCount).to.eql(1)
-    expect(pool.idleCount).to.eql(0)
-    // end the client gracefully (but you shouldn't do this with pooled clients)
-    client.end()
-
-    // try to return it to the pool
-    client.release()
-    expect(pool.totalCount).to.eql(0)
-    expect(pool.idleCount).to.eql(0)
-
-    // make sure pool still works
-    const { rows } = await pool.query('SELECT NOW()')
-    expect(rows).to.have.length(1)
-    await pool.end()
-  })
-})
Index: node_modules/ts-gems/lib/mutable.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/mutable.d.ts b/node_modules/ts-gems/lib/mutable.d.ts
--- a/node_modules/ts-gems/lib/mutable.d.ts	
+++ b/node_modules/ts-gems/lib/mutable.d.ts	
@@ -1,4 +1,4 @@
-import { IfNoDeepValue } from './helpers';
+import { IfNoDeepValue } from './helpers.js';
 import {
   DeeperOmitReadonly,
   DeeperPickReadonly,
@@ -6,8 +6,8 @@
   DeepPickReadonly,
   OmitReadonly,
   PickReadonly,
-} from './readonly';
-import { IfNever } from './type-check';
+} from './readonly.js';
+import { IfNever } from './type-check.js';
 
 /**
  * Make all properties in T mutable
@@ -33,7 +33,7 @@
   >]: IfNoDeepValue<Exclude<T[K], undefined>> extends true // Do not deep process No-Deep values
     ? T[K]
     : // Deep process objects
-      DeepMutable<Exclude<T[K], undefined>>;
+      DeepMutable<NonNullable<T[K]>>;
 };
 
 /**
@@ -44,13 +44,13 @@
     Exclude<T[K], undefined>,
     never,
     K
-  >]: Exclude<T[K], undefined> extends (infer U)[] // Deep process arrays
+  >]: NonNullable<T[K]> extends (infer U)[] // Deep process arrays
     ? DeeperMutable<U>[]
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K]
       : // Deep process objects
-        DeeperMutable<Exclude<T[K], undefined>>;
+        DeeperMutable<NonNullable<T[K]>>;
 };
 
 /**
Index: node_modules/postgresql-client/cjs/data-types/timestamp-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/timestamp-type.js b/node_modules/postgresql-client/cjs/data-types/timestamp-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/timestamp-type.js	
+++ /dev/null	
@@ -1,81 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayTimestampType = exports.TimestampType = void 0;
-const constants_js_1 = require("../constants.js");
-const parse_datetime_js_1 = require("../util/parse-datetime.js");
-const timeShift = 946684800000;
-const timeMul = 4294967296;
-exports.TimestampType = {
-    name: 'timestamp',
-    oid: constants_js_1.DataTypeOIDs.timestamp,
-    jsType: 'Date',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.timestamp);
-        const hi = v.readInt32BE();
-        const lo = v.readUInt32BE(4);
-        if (lo === 0xffffffff && hi === 0x7fffffff)
-            return fetchAsString ? 'infinity' : Infinity;
-        if (lo === 0x00000000 && hi === -0x80000000)
-            return fetchAsString ? '-infinity' : -Infinity;
-        // Shift from 2000 to 1970
-        let d = new Date((lo + hi * timeMul) / 1000 + timeShift);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
-        return fetchAsString ? dateToTimestampString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = (0, parse_datetime_js_1.parseDateTime)(v, true, false, options.utcDates);
-        if (v === Infinity) {
-            buf.writeInt32BE(0x7fffffff); // hi
-            buf.writeUInt32BE(0xffffffff); // lo
-            return;
-        }
-        if (v === -Infinity) {
-            buf.writeInt32BE(-0x80000000); // hi
-            buf.writeUInt32BE(0x00000000); // lo
-            return;
-        }
-        if (!(v instanceof Date))
-            v = new Date(v);
-        // Postgresql ignores timezone data so we are
-        let n = options.utcDates ? v.getTime() : v.getTime() - v.getTimezoneOffset() * 60 * 1000;
-        n = (n - timeShift) * 1000;
-        const hi = Math.floor(n / timeMul);
-        const lo = n - hi * timeMul;
-        buf.writeInt32BE(hi);
-        buf.writeUInt32BE(lo);
-    },
-    parseText(v, options) {
-        if (options.fetchAsString && options.fetchAsString.includes(constants_js_1.DataTypeOIDs.timestamp))
-            return v;
-        return (0, parse_datetime_js_1.parseDateTime)(v, true, false, options.utcDates);
-    },
-    isType(v) {
-        return (v instanceof Date &&
-            !(v.getFullYear() === 1970 && v.getMonth() === 0 && v.getDate() === 1) &&
-            !(v.getHours() === 0 && v.getMinutes() === 0 && v.getSeconds() === 0 && v.getMilliseconds() === 0));
-    },
-};
-function padZero(v) {
-    return v < 9 ? '0' + v : '' + v;
-}
-function dateToTimestampString(d) {
-    return (d.getFullYear() +
-        '-' +
-        padZero(d.getMonth() + 1) +
-        '-' +
-        padZero(d.getDate()) +
-        ' ' +
-        padZero(d.getHours()) +
-        ':' +
-        padZero(d.getMinutes()) +
-        ':' +
-        padZero(d.getSeconds()));
-}
-exports.ArrayTimestampType = {
-    ...exports.TimestampType,
-    name: '_timestamp',
-    oid: constants_js_1.DataTypeOIDs._timestamp,
-    elementsOID: constants_js_1.DataTypeOIDs.timestamp,
-};
Index: node_modules/semver/functions/cmp.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/cmp.js b/node_modules/semver/functions/cmp.js
--- a/node_modules/semver/functions/cmp.js	
+++ b/node_modules/semver/functions/cmp.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const eq = require('./eq')
 const neq = require('./neq')
 const gt = require('./gt')
Index: node_modules/postgresql-client/esm/interfaces/database-connection-params.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/database-connection-params.js b/node_modules/postgresql-client/esm/interfaces/database-connection-params.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/database-connection-params.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/pg/lib/crypto/utils-webcrypto.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/crypto/utils-webcrypto.js b/node_modules/pg/lib/crypto/utils-webcrypto.js
--- a/node_modules/pg/lib/crypto/utils-webcrypto.js	
+++ b/node_modules/pg/lib/crypto/utils-webcrypto.js	
@@ -5,6 +5,7 @@
   randomBytes,
   deriveKey,
   sha256,
+  hashByName,
   hmacSha256,
   md5,
 }
@@ -13,6 +14,7 @@
  * The Web Crypto API - grabbed from the Node.js library or the global
  * @type Crypto
  */
+// eslint-disable-next-line no-undef
 const webCrypto = nodeCrypto.webcrypto || globalThis.crypto
 /**
  * The SubtleCrypto API for low level crypto operations.
@@ -47,8 +49,8 @@
 
 // See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html
 async function postgresMd5PasswordHash(user, password, salt) {
-  var inner = await md5(password + user)
-  var outer = await md5(Buffer.concat([Buffer.from(inner), salt]))
+  const inner = await md5(password + user)
+  const outer = await md5(Buffer.concat([Buffer.from(inner), salt]))
   return 'md5' + outer
 }
 
@@ -60,6 +62,10 @@
   return await subtleCrypto.digest('SHA-256', text)
 }
 
+async function hashByName(hashName, text) {
+  return await subtleCrypto.digest(hashName, text)
+}
+
 /**
  * Sign the message with the given key
  * @param {ArrayBuffer} keyBuffer
Index: node_modules/postgres/cjs/src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/cjs/src/index.js b/node_modules/postgres/cjs/src/index.js
--- a/node_modules/postgres/cjs/src/index.js	
+++ b/node_modules/postgres/cjs/src/index.js	
@@ -204,9 +204,10 @@
     const queue = Queue()
     const c = open.length
       ? open.shift()
-      : await new Promise(r => {
-        queries.push({ reserve: r })
-        closed.length && connect(closed.shift())
+      : await new Promise((resolve, reject) => {
+        const query = { reserve: resolve, reject }
+        queries.push(query)
+        closed.length && connect(closed.shift(), query)
       })
 
     move(c, reserved)
@@ -480,7 +481,7 @@
       {}
     ),
     connection      : {
-      application_name: 'postgres.js',
+      application_name: env.PGAPPNAME || 'postgres.js',
       ...o.connection,
       ...Object.entries(query).reduce((acc, [k, v]) => (k in defaults || (acc[k] = v), acc), {})
     },
Index: node_modules/postgresql-client/esm/data-types/char-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/char-type.js b/node_modules/postgresql-client/esm/data-types/char-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/char-type.js	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-export const CharType = {
-    name: 'char',
-    oid: DataTypeOIDs.char,
-    jsType: 'string',
-    parseBinary(v) {
-        return v.toString('utf8');
-    },
-    encodeBinary(buf, v) {
-        buf.writeString((v ? '' + v : ' ')[0], 'utf8');
-    },
-    parseText(v) {
-        return '' + v;
-    },
-    isType(v) {
-        return typeof v === 'string' && v.length === 1;
-    },
-};
-export const ArrayCharType = {
-    ...CharType,
-    name: '_char',
-    oid: DataTypeOIDs._char,
-    elementsOID: DataTypeOIDs.char,
-};
Index: .idea/prettier.xml
===================================================================
diff --git a/.idea/prettier.xml b/.idea/prettier.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/prettier.xml	
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="PrettierConfiguration">
+    <option name="myConfigurationMode" value="AUTOMATIC" />
+    <option name="myRunOnSave" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: node_modules/postgresql-client/cjs/data-types/float8-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/data-types/float8-type.js b/node_modules/postgresql-client/cjs/data-types/float8-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/data-types/float8-type.js	
+++ /dev/null	
@@ -1,25 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ArrayFloat8Type = exports.Float8Type = void 0;
-const constants_js_1 = require("../constants.js");
-exports.Float8Type = {
-    name: 'float8',
-    oid: constants_js_1.DataTypeOIDs.float8,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readDoubleBE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(typeof v === 'number' ? v : parseFloat(v));
-    },
-    parseText: parseFloat,
-    isType(v) {
-        return typeof v === 'number';
-    },
-};
-exports.ArrayFloat8Type = {
-    ...exports.Float8Type,
-    name: '_float8',
-    oid: constants_js_1.DataTypeOIDs._float8,
-    elementsOID: constants_js_1.DataTypeOIDs.float8,
-};
Index: node_modules/define-data-property/tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/define-data-property/tsconfig.json b/node_modules/define-data-property/tsconfig.json
deleted file mode 100644
--- a/node_modules/define-data-property/tsconfig.json	
+++ /dev/null	
@@ -1,59 +0,0 @@
-{
-  "compilerOptions": {
-    /* Visit https://aka.ms/tsconfig to read more about this file */
-
-    /* Projects */
-
-    /* Language and Environment */
-    "target": "es2022",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
-    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
-    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
-    "useDefineForClassFields": true,                     /* Emit ECMAScript-standard-compliant class fields. */
-    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
-
-    /* Modules */
-    "module": "commonjs",                                /* Specify what module code is generated. */
-    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
-    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
-    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
-    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
-    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
-    "typeRoots": ["types"],                              /* Specify multiple folders that act like './node_modules/@types'. */
-    "resolveJsonModule": true,                           /* Enable importing .json files. */
-
-    /* JavaScript Support */
-    "allowJs": true,                                    /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
-    "checkJs": true,                                    /* Enable error reporting in type-checked JavaScript files. */
-    "maxNodeModuleJsDepth": 1,                          /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
-
-    /* Emit */
-    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
-    "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
-    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
-    "noEmit": true,                                      /* Disable emitting files from a compilation. */
-
-    /* Interop Constraints */
-    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
-    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
-    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
-
-    /* Type Checking */
-    "strict": true,                                      /* Enable all strict type-checking options. */
-    "noImplicitAny": true,                               /* Enable error reporting for expressions and declarations with an implied 'any' type. */
-    "noImplicitThis": true,                              /* Enable error reporting when 'this' is given the type 'any'. */
-    "useUnknownInCatchVariables": true,                  /* Default catch clause variables as 'unknown' instead of 'any'. */
-    "noUnusedLocals": true,                              /* Enable error reporting when local variables aren't read. */
-    "noUnusedParameters": true,                          /* Raise an error when a function parameter isn't read. */
-    "noImplicitReturns": true,                           /* Enable error reporting for codepaths that do not explicitly return in a function. */
-    "noFallthroughCasesInSwitch": true,                  /* Enable error reporting for fallthrough cases in switch statements. */
-    "noUncheckedIndexedAccess": true,                    /* Add 'undefined' to a type when accessed using an index. */
-    "noImplicitOverride": true,                          /* Ensure overriding members in derived classes are marked with an override modifier. */
-    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
-
-    /* Completeness */
-    // "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
-  },
-  "exclude": [
-    "coverage"
-  ]
-}
Index: node_modules/braces/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/LICENSE b/node_modules/braces/LICENSE
--- a/node_modules/braces/LICENSE	
+++ b/node_modules/braces/LICENSE	
@@ -1,6 +1,6 @@
 The MIT License (MIT)
 
-Copyright (c) 2014-2018, Jon Schlinkert.
+Copyright (c) 2014-present, Jon Schlinkert.
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
Index: node_modules/postgresql-client/cjs/interfaces/script-result.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/script-result.js b/node_modules/postgresql-client/cjs/interfaces/script-result.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/script-result.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/postgresql-client/esm/interfaces/statement-prepare-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/statement-prepare-options.js b/node_modules/postgresql-client/esm/interfaces/statement-prepare-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/statement-prepare-options.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/lightning-pool/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/README.md b/node_modules/lightning-pool/README.md
--- a/node_modules/lightning-pool/README.md	
+++ b/node_modules/lightning-pool/README.md	
@@ -2,7 +2,7 @@
 
 [![NPM Version][npm-image]][npm-url]
 [![NPM Downloads][downloads-image]][downloads-url]
-[![CircleCI][circleci-image]][circleci-url]
+[![CI Tests][ci-test-image]][ci-test-url]
 [![Test Coverage][coveralls-image]][coveralls-url]
 
 ## About
@@ -54,6 +54,8 @@
     minIdle: 2  // minimum idle resources
 });
 
+pool.start();
+
 /**
  * Step 3 - Use pool in your code to acquire/release resources
  */
@@ -121,7 +123,13 @@
 
 ##### Usage
 
-`pool.acquire()`
+`pool.acquire(): Promise<any>`
+
+`pool.acquire(factoryCreateOptions: any): Promise<any>`
+
+`pool.acquire(callback:Callback): Promise<any>`
+
+`pool.acquire(factoryCreateOptions?: any, callback:Callback): Promise<any>`
 
 - *Returns*: A Promise
 
@@ -369,8 +377,8 @@
 
 [npm-image]: https://img.shields.io/npm/v/lightning-pool.svg
 [npm-url]: https://npmjs.org/package/lightning-pool
-[circleci-image]: https://circleci.com/gh/panates/lightning-pool/tree/master.svg?style=shield
-[circleci-url]: https://circleci.com/gh/panates/lightning-pool/tree/master
+[ci-test-image]: https://github.com/panates/lightning-pool/actions/workflows/test.yml/badge.svg
+[ci-test-url]: https://github.com/panates/lightning-pool/actions/workflows/test.yml
 [coveralls-image]: https://img.shields.io/coveralls/panates/lightning-pool/master.svg
 [coveralls-url]: https://coveralls.io/r/panates/lightning-pool
 [downloads-image]: https://img.shields.io/npm/dm/lightning-pool.svg
Index: node_modules/pg-pool/test/events.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/test/events.js b/node_modules/pg-pool/test/events.js
deleted file mode 100644
--- a/node_modules/pg-pool/test/events.js	
+++ /dev/null	
@@ -1,124 +0,0 @@
-'use strict'
-
-const expect = require('expect.js')
-const EventEmitter = require('events').EventEmitter
-const describe = require('mocha').describe
-const it = require('mocha').it
-const Pool = require('../')
-
-describe('events', function () {
-  it('emits connect before callback', function (done) {
-    const pool = new Pool()
-    let emittedClient = false
-    pool.on('connect', function (client) {
-      emittedClient = client
-    })
-
-    pool.connect(function (err, client, release) {
-      if (err) return done(err)
-      release()
-      pool.end()
-      expect(client).to.be(emittedClient)
-      done()
-    })
-  })
-
-  it('emits "connect" only with a successful connection', function () {
-    const pool = new Pool({
-      // This client will always fail to connect
-      Client: mockClient({
-        connect: function (cb) {
-          process.nextTick(() => {
-            cb(new Error('bad news'))
-          })
-        },
-      }),
-    })
-    pool.on('connect', function () {
-      throw new Error('should never get here')
-    })
-    return pool.connect().catch((e) => expect(e.message).to.equal('bad news'))
-  })
-
-  it('emits acquire every time a client is acquired', function (done) {
-    const pool = new Pool()
-    let acquireCount = 0
-    pool.on('acquire', function (client) {
-      expect(client).to.be.ok()
-      acquireCount++
-    })
-    for (let i = 0; i < 10; i++) {
-      pool.connect(function (err, client, release) {
-        if (err) return done(err)
-        release()
-      })
-      pool.query('SELECT now()')
-    }
-    setTimeout(function () {
-      expect(acquireCount).to.be(20)
-      pool.end(done)
-    }, 100)
-  })
-
-  it('emits release every time a client is released', function (done) {
-    const pool = new Pool()
-    let releaseCount = 0
-    pool.on('release', function (err, client) {
-      expect(err instanceof Error).not.to.be(true)
-      expect(client).to.be.ok()
-      releaseCount++
-    })
-    const promises = []
-    for (let i = 0; i < 10; i++) {
-      pool.connect(function (err, client, release) {
-        if (err) return done(err)
-        release()
-      })
-      promises.push(pool.query('SELECT now()'))
-    }
-    Promise.all(promises).then(() => {
-      pool.end(() => {
-        expect(releaseCount).to.be(20)
-        done()
-      })
-    })
-  })
-
-  it('emits release with an error if client is released due to an error', function (done) {
-    const pool = new Pool()
-    pool.connect(function (err, client, release) {
-      expect(err).to.equal(undefined)
-      const releaseError = new Error('problem')
-      pool.once('release', function (err, errClient) {
-        expect(err).to.equal(releaseError)
-        expect(errClient).to.equal(client)
-        pool.end(done)
-      })
-      release(releaseError)
-    })
-  })
-
-  it('emits error and client if an idle client in the pool hits an error', function (done) {
-    const pool = new Pool()
-    pool.connect(function (err, client) {
-      expect(err).to.equal(undefined)
-      client.release()
-      setImmediate(function () {
-        client.emit('error', new Error('problem'))
-      })
-      pool.once('error', function (err, errClient) {
-        expect(err.message).to.equal('problem')
-        expect(errClient).to.equal(client)
-        done()
-      })
-    })
-  })
-})
-
-function mockClient(methods) {
-  return function () {
-    const client = new EventEmitter()
-    Object.assign(client, methods)
-    return client
-  }
-}
Index: node_modules/jwa/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/jwa/package.json b/node_modules/jwa/package.json
--- a/node_modules/jwa/package.json	
+++ b/node_modules/jwa/package.json	
@@ -1,13 +1,13 @@
 {
   "name": "jwa",
-  "version": "1.4.1",
+  "version": "1.4.2",
   "description": "JWA implementation (supports all JWS algorithms)",
   "main": "index.js",
   "directories": {
     "test": "test"
   },
   "dependencies": {
-    "buffer-equal-constant-time": "1.0.1",
+    "buffer-equal-constant-time": "^1.0.1",
     "ecdsa-sig-formatter": "1.0.11",
     "safe-buffer": "^5.0.1"
   },
Index: node_modules/braces/lib/stringify.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/braces/lib/stringify.js b/node_modules/braces/lib/stringify.js
--- a/node_modules/braces/lib/stringify.js	
+++ b/node_modules/braces/lib/stringify.js	
@@ -3,9 +3,9 @@
 const utils = require('./utils');
 
 module.exports = (ast, options = {}) => {
-  let stringify = (node, parent = {}) => {
-    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
-    let invalidNode = node.invalid === true && options.escapeInvalid === true;
+  const stringify = (node, parent = {}) => {
+    const invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
+    const invalidNode = node.invalid === true && options.escapeInvalid === true;
     let output = '';
 
     if (node.value) {
@@ -20,7 +20,7 @@
     }
 
     if (node.nodes) {
-      for (let child of node.nodes) {
+      for (const child of node.nodes) {
         output += stringify(child);
       }
     }
Index: node_modules/postgresql-client/node_modules/postgres-bytea/readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/readme.md b/node_modules/postgresql-client/node_modules/postgres-bytea/readme.md
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/readme.md	
+++ /dev/null	
@@ -1,86 +0,0 @@
-# postgres-bytea [![Build Status](https://travis-ci.org/bendrucker/postgres-bytea.svg?branch=master)](https://travis-ci.org/bendrucker/postgres-bytea) [![Greenkeeper badge](https://badges.greenkeeper.io/bendrucker/postgres-bytea.svg)](https://greenkeeper.io/)
-
-> Decode/encode Postgres bytea strings to Buffers
-
-
-## Install
-
-```sh
-npm install postgres-bytea
-```
-
-## Usage
-
-### Decoding
-
-To decode a bytea string into a buffer:
-
-```js
-const bytea = require('postgres-bytea')
-
-// bytea hex format
-bytea.decode('\\x1234') // <Buffer 12 34>
-
-// bytea escape format
-bytea.decode('\\000\\100\\200') // <Buffer 00 40 80>
-```
-
-The `decode` function supports both the hex format used in Postgres 9+ and the escape format used in Postgres 8 and earlier. It automatically detects the format from the incoming data.
-
-For backward compatibility, `decode` is also the default export from the package.
-
-### Decoding (Stream)
-
-To decode a bytea hex stream into binary:
-
-```js
-const bytea = require('postgres-bytea')
-
-readable.pipe(new bytea.Decoder())
-```
-
-`Decoder` expects a double-escaped `\\x` prefix to allow reading from a `COPY TO` statement.
-
-### Encoding (Stream)
-
-
-```js
-const bytea = require('postgres-bytea')
-
-readable.pipe(new bytea.Encoder())
-```
-
-`Encoder` adds a double-escaped `\\x` prefix to allow writing to a `COPY FROM` statement.
-
-## API
-
-#### `bytea.decode(input)` -> `buffer`
-
-##### input
-
-*Required*  
-Type: `string`
-
-A Postgres bytea binary string.
-
-#### `new bytea.Decoder()` -> `stream.Transform`
-
-Creates a bytea decoder stream that emits buffer chunks.
-
-#### `new bytea.Encoder()` -> `stream.Transform`
-
-Creates a bytea encoder stream that receives buffer chunks and emits them as bytea strings.
-
-## Prefix Escaping
-
-> The “hex” format encodes binary data as 2 hexadecimal digits per byte, most significant nibble first. The entire string is preceded by the sequence \x (to distinguish it from the escape format). In some contexts, the initial backslash may need to be escaped by doubling it (see Section 4.1.2.1).
->
-> https://www.postgresql.org/docs/12/datatype-binary.html#id-1.5.7.12.9
-
-A `SELECT` statement returns bytea values using the single-escaped `\x` prefix. The `COPY TO` and `COPY FROM` commands expect and return bytea values with the double-escaped `\\x` prefix. 
-
-`bytea.decode` expects the single-escaped prefix. The `Decoder` and `Encoder` streams expect the double-escaped prefix, since they are most useful in `COPY FROM` and `COPY TO` statements.
-
-## License
-
-MIT © [Ben Drucker](http://bendrucker.me)
Index: node_modules/postgresql-client/esm/util/stringify-arrayliteral.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/stringify-arrayliteral.js b/node_modules/postgresql-client/esm/util/stringify-arrayliteral.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/stringify-arrayliteral.js	
+++ /dev/null	
@@ -1,34 +0,0 @@
-import { arrayCalculateDim } from './array-calculatedim.js';
-export function stringifyArrayLiteral(value, options, encode) {
-    const dim = arrayCalculateDim(value);
-    const writeDim = (arr, level) => {
-        const elemCount = dim[level];
-        const out = [];
-        for (let i = 0; i < elemCount; i++) {
-            let x = arr && arr[i];
-            if (level < dim.length - 1) {
-                if (x != null && !Array.isArray(x))
-                    x = [x];
-                out.push(writeDim(x, level + 1));
-                continue;
-            }
-            // if value is null
-            if (x == null) {
-                out.push('NULL');
-                continue;
-            }
-            if (Array.isArray(x)) {
-                out.push(stringifyArrayLiteral(x, options, encode));
-                continue;
-            }
-            if (encode)
-                x = encode(x, options || {});
-            out.push(escapeArrayItem('' + x));
-        }
-        return '{' + out.join(',') + '}';
-    };
-    return writeDim(value, 0);
-}
-function escapeArrayItem(str) {
-    return '"' + str.replace(/\\/g, '\\\\').replace(/"/g, '\\"') + '"';
-}
Index: node_modules/strict-typed-events/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/strict-typed-events/package.json b/node_modules/strict-typed-events/package.json
--- a/node_modules/strict-typed-events/package.json	
+++ b/node_modules/strict-typed-events/package.json	
@@ -1,40 +1,55 @@
 {
   "name": "strict-typed-events",
   "description": "Type safe and promise supported replacement for node's EventEmitter",
-  "version": "2.3.3",
+  "version": "2.8.0",
   "author": "Panates",
+  "license": "MIT",
+  "dependencies": {
+    "putil-promisify": "^1.10.1",
+    "ts-gems": "^3.5.0",
+    "tslib": "^2.6.3"
+  },
+  "type": "module",
+  "exports": {
+    ".": {
+      "import": {
+        "types": "./types/index.d.ts",
+        "default": "./esm/index.js"
+      },
+      "require": {
+        "types": "./types/index.d.cts",
+        "default": "./cjs/index.js"
+      },
+      "default": "./esm/index.js"
+    },
+    "./package.json": "./package.json"
+  },
+  "main": "./cjs/index.js",
+  "module": "./esm/index.js",
+  "types": "./types/index.d.ts",
   "contributors": [
     "Eray Hanoglu <e.hanoglu@panates.com>"
   ],
-  "license": "MIT",
   "repository": {
     "type": "git",
     "url": "https://github.com/panates/strict-typed-events.git"
   },
-  "type": "module",
-  "main": "./cjs/index.js",
-  "module": "./esm/index.js",
-  "types": "./typings/index.d.ts",
-  "keywords": [
-    "type-safe",
-    "typescript",
-    "EventEmitter",
-    "events",
-    "emitter"
-  ],
-  "dependencies": {
-    "putil-promisify": "^1.10.1",
-    "ts-gems": "^3.1.0"
-  },
   "engines": {
     "node": ">=16.0"
   },
   "files": [
     "cjs/",
     "esm/",
-    "typings/",
+    "types/",
     "LICENSE",
     "README.md",
     "CHANGELOG.md"
+  ],
+  "keywords": [
+    "type-safe",
+    "typescript",
+    "EventEmitter",
+    "events",
+    "emitter"
   ]
 }
\ No newline at end of file
Index: node_modules/has-symbols/CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-symbols/CHANGELOG.md b/node_modules/has-symbols/CHANGELOG.md
--- a/node_modules/has-symbols/CHANGELOG.md	
+++ b/node_modules/has-symbols/CHANGELOG.md	
@@ -5,6 +5,22 @@
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+## [v1.1.0](https://github.com/inspect-js/has-symbols/compare/v1.0.3...v1.1.0) - 2024-12-02
+
+### Commits
+
+- [actions] update workflows [`548c0bf`](https://github.com/inspect-js/has-symbols/commit/548c0bf8c9b1235458df7a1c0490b0064647a282)
+- [actions] further shard; update action deps [`bec56bb`](https://github.com/inspect-js/has-symbols/commit/bec56bb0fb44b43a786686b944875a3175cf3ff3)
+- [meta] use `npmignore` to autogenerate an npmignore file [`ac81032`](https://github.com/inspect-js/has-symbols/commit/ac81032809157e0a079e5264e9ce9b6f1275777e)
+- [New] add types [`6469cbf`](https://github.com/inspect-js/has-symbols/commit/6469cbff1866cfe367b2b3d181d9296ec14b2a3d)
+- [actions] update rebase action to use reusable workflow [`9c9d4d0`](https://github.com/inspect-js/has-symbols/commit/9c9d4d0d8938e4b267acdf8e421f4e92d1716d72)
+- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `tape` [`adb5887`](https://github.com/inspect-js/has-symbols/commit/adb5887ca9444849b08beb5caaa9e1d42320cdfb)
+- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`13ec198`](https://github.com/inspect-js/has-symbols/commit/13ec198ec80f1993a87710af1606a1970b22c7cb)
+- [Dev Deps] update `auto-changelog`, `core-js`, `tape` [`941be52`](https://github.com/inspect-js/has-symbols/commit/941be5248387cab1da72509b22acf3fdb223f057)
+- [Tests] replace `aud` with `npm audit` [`74f49e9`](https://github.com/inspect-js/has-symbols/commit/74f49e9a9d17a443020784234a1c53ce765b3559)
+- [Dev Deps] update `npmignore` [`9c0ac04`](https://github.com/inspect-js/has-symbols/commit/9c0ac0452a834f4c2a4b54044f2d6a89f17e9a70)
+- [Dev Deps] add missing peer dep [`52337a5`](https://github.com/inspect-js/has-symbols/commit/52337a5621cced61f846f2afdab7707a8132cc12)
+
 ## [v1.0.3](https://github.com/inspect-js/has-symbols/compare/v1.0.2...v1.0.3) - 2022-03-01
 
 ### Commits
Index: README.MD
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.MD b/README.MD
--- a/README.MD	
+++ b/README.MD	
@@ -1,0 +1,1 @@
+ [X] 
\ No newline at end of file
Index: node_modules/semver/ranges/simplify.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/simplify.js b/node_modules/semver/ranges/simplify.js
--- a/node_modules/semver/ranges/simplify.js	
+++ b/node_modules/semver/ranges/simplify.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 // given a set of versions and a range, create a "simplified" range
 // that includes the same versions that the original range does
 // If the original range is shorter than the simplified one, return that.
Index: node_modules/merge-descriptors/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/merge-descriptors/index.js b/node_modules/merge-descriptors/index.js
--- a/node_modules/merge-descriptors/index.js	
+++ b/node_modules/merge-descriptors/index.js	
@@ -31,7 +31,7 @@
  * @public
  */
 
-function merge(dest, src, redefine) {
+function merge (dest, src, redefine) {
   if (!dest) {
     throw new TypeError('argument dest is required')
   }
@@ -45,9 +45,9 @@
     redefine = true
   }
 
-  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
+  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName (name) {
     if (!redefine && hasOwnProperty.call(dest, name)) {
-      // Skip desriptor
+      // Skip descriptor
       return
     }
 
Index: node_modules/postgresql-client/typings/interfaces/field-info.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/field-info.d.ts b/node_modules/postgresql-client/typings/interfaces/field-info.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/field-info.d.ts	
+++ /dev/null	
@@ -1,46 +0,0 @@
-export interface FieldInfo {
-    /**
-     * Name of the field
-     */
-    fieldName: string;
-    /**
-     * OID of the table
-     */
-    tableId?: number;
-    /**
-     * OID of the column
-     */
-    columnId?: number;
-    /**
-     * OID of the data type
-     */
-    dataTypeId: number;
-    /**
-     * Name of the data type
-     */
-    dataTypeName: string;
-    /**
-     * OID of the elements data type if field is an array
-     */
-    elementDataTypeId?: number;
-    /**
-     * Name of the elements data type if field is an array
-     */
-    elementDataTypeName?: string;
-    /**
-     * JS type name that data type mapped
-     */
-    jsType: string;
-    /**
-     * Data length if data type has a fixed size
-     */
-    fixedSize?: number;
-    /**
-     * Modifier of the data type
-     */
-    modifier?: number;
-    /**
-     * Whether the data type is an array
-     */
-    isArray?: boolean;
-}
Index: node_modules/has-property-descriptors/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-property-descriptors/index.js b/node_modules/has-property-descriptors/index.js
deleted file mode 100644
--- a/node_modules/has-property-descriptors/index.js	
+++ /dev/null	
@@ -1,22 +0,0 @@
-'use strict';
-
-var $defineProperty = require('es-define-property');
-
-var hasPropertyDescriptors = function hasPropertyDescriptors() {
-	return !!$defineProperty;
-};
-
-hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
-	// node v0.6 has a bug where array lengths can be Set but not Defined
-	if (!$defineProperty) {
-		return null;
-	}
-	try {
-		return $defineProperty([], 'length', { value: 1 }).length !== 1;
-	} catch (e) {
-		// In Firefox 4-22, defining length on an array throws an exception.
-		return true;
-	}
-};
-
-module.exports = hasPropertyDescriptors;
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	
+++ b/package.json	
@@ -1,5 +1,6 @@
 {
   "dependencies": {
+    "bcrypt": "^6.0.0",
     "bcryptjs": "^2.4.3",
     "body-parser": "^1.20.2",
     "cookie-parser": "^1.4.6",
@@ -8,12 +9,13 @@
     "express": "^4.19.2",
     "http-status-codes": "^2.3.0",
     "jsonwebtoken": "^9.0.2",
-    "pg": "^8.11.5",
+    "multer": "^1.4.5-lts.1",
+    "pg": "^8.16.3",
     "postgres": "^3.4.4",
     "postgresql-client": "^2.11.0",
     "router": "^1.3.8"
   },
   "devDependencies": {
-    "nodemon": "^3.1.0"
+    "nodemon": "^3.1.10"
   }
 }
Index: node_modules/postgresql-client/typings/protocol/frontend.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/protocol/frontend.d.ts b/node_modules/postgresql-client/typings/protocol/frontend.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/protocol/frontend.d.ts	
+++ /dev/null	
@@ -1,59 +0,0 @@
-/// <reference types="node" />
-import { DataTypeMap } from '../data-type-map.js';
-import { QueryOptions } from '../interfaces/query-options.js';
-import { Maybe, OID } from '../types.js';
-import { SASL } from './sasl.js';
-import { SmartBufferConfig } from './smart-buffer.js';
-export interface FrontendOptions {
-    buffer?: SmartBufferConfig;
-}
-export declare namespace Frontend {
-    interface StartupMessageArgs {
-        user: string;
-        database: string;
-        [index: string]: string;
-    }
-    interface BindMessageArgs {
-        typeMap: DataTypeMap;
-        statement?: string;
-        portal?: string;
-        paramTypes?: Maybe<OID>[];
-        params?: any[];
-        queryOptions: QueryOptions;
-    }
-    interface ParseMessageArgs {
-        statement?: string;
-        sql: string;
-        paramTypes?: Maybe<OID>[];
-    }
-    interface DescribeMessageArgs {
-        type: 'P' | 'S';
-        name?: string;
-    }
-    interface ExecuteMessageArgs {
-        portal?: string;
-        fetchCount?: number;
-    }
-    interface CloseMessageArgs {
-        type: 'P' | 'S';
-        name?: string;
-    }
-}
-export declare class Frontend {
-    private _io;
-    constructor(options?: FrontendOptions);
-    getSSLRequestMessage(): Buffer;
-    getStartupMessage(args: Frontend.StartupMessageArgs): Buffer;
-    getPasswordMessage(password: string): Buffer;
-    getSASLMessage(sasl: SASL.Session): Buffer;
-    getSASLFinalMessage(session: SASL.Session): Buffer;
-    getParseMessage(args: Frontend.ParseMessageArgs): Buffer;
-    getBindMessage(args: Frontend.BindMessageArgs): Buffer;
-    getDescribeMessage(args: Frontend.DescribeMessageArgs): Buffer;
-    getExecuteMessage(args: Frontend.ExecuteMessageArgs): Buffer;
-    getCloseMessage(args: Frontend.CloseMessageArgs): Buffer;
-    getQueryMessage(sql: string): Buffer;
-    getFlushMessage(): Buffer;
-    getTerminateMessage(): Buffer;
-    getSyncMessage(): Buffer;
-}
Index: node_modules/side-channel/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/README.md b/node_modules/side-channel/README.md
--- a/node_modules/side-channel/README.md	
+++ b/node_modules/side-channel/README.md	
@@ -1,2 +1,61 @@
-# side-channel
+# side-channel <sup>[![Version Badge][npm-version-svg]][package-url]</sup>
+
+[![github actions][actions-image]][actions-url]
+[![coverage][codecov-image]][codecov-url]
+[![License][license-image]][license-url]
+[![Downloads][downloads-image]][downloads-url]
+
+[![npm badge][npm-badge-png]][package-url]
+
 Store information about any JS value in a side channel. Uses WeakMap if available.
+
+Warning: in an environment that lacks `WeakMap`, this implementation will leak memory until you `delete` the `key`.
+
+## Getting started
+
+```sh
+npm install --save side-channel
+```
+
+## Usage/Examples
+
+```js
+const assert = require('assert');
+const getSideChannel = require('side-channel');
+
+const channel = getSideChannel();
+
+const key = {};
+assert.equal(channel.has(key), false);
+assert.throws(() => channel.assert(key), TypeError);
+
+channel.set(key, 42);
+
+channel.assert(key); // does not throw
+assert.equal(channel.has(key), true);
+assert.equal(channel.get(key), 42);
+
+channel.delete(key);
+assert.equal(channel.has(key), false);
+assert.throws(() => channel.assert(key), TypeError);
+```
+
+## Tests
+
+Clone the repo, `npm install`, and run `npm test`
+
+[package-url]: https://npmjs.org/package/side-channel
+[npm-version-svg]: https://versionbadg.es/ljharb/side-channel.svg
+[deps-svg]: https://david-dm.org/ljharb/side-channel.svg
+[deps-url]: https://david-dm.org/ljharb/side-channel
+[dev-deps-svg]: https://david-dm.org/ljharb/side-channel/dev-status.svg
+[dev-deps-url]: https://david-dm.org/ljharb/side-channel#info=devDependencies
+[npm-badge-png]: https://nodei.co/npm/side-channel.png?downloads=true&stars=true
+[license-image]: https://img.shields.io/npm/l/side-channel.svg
+[license-url]: LICENSE
+[downloads-image]: https://img.shields.io/npm/dm/side-channel.svg
+[downloads-url]: https://npm-stat.com/charts.html?package=side-channel
+[codecov-image]: https://codecov.io/gh/ljharb/side-channel/branch/main/graphs/badge.svg
+[codecov-url]: https://app.codecov.io/gh/ljharb/side-channel/
+[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/side-channel
+[actions-url]: https://github.com/ljharb/side-channel/actions
Index: node_modules/postgresql-client/esm/interfaces/script-result.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/script-result.js b/node_modules/postgresql-client/esm/interfaces/script-result.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/script-result.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/power-tasks/esm/abort-error.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/esm/abort-error.js b/node_modules/power-tasks/esm/abort-error.js
--- a/node_modules/power-tasks/esm/abort-error.js	
+++ b/node_modules/power-tasks/esm/abort-error.js	
@@ -1,6 +1,6 @@
 export class AbortError extends Error {
     constructor() {
         super(...arguments);
-        this.code = 'ABORT_ERR';
+        this.code = "ABORT_ERR";
     }
 }
Index: node_modules/call-bind/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/.eslintrc b/node_modules/call-bind/.eslintrc
deleted file mode 100644
--- a/node_modules/call-bind/.eslintrc	
+++ /dev/null	
@@ -1,16 +0,0 @@
-{
-	"root": true,
-
-	"extends": "@ljharb",
-
-	"rules": {
-		"func-name-matching": 0,
-		"id-length": 0,
-		"new-cap": [2, {
-			"capIsNewExceptions": [
-				"GetIntrinsic",
-			],
-		}],
-		"no-magic-numbers": 0,
-	},
-}
Index: node_modules/call-bind/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/index.js b/node_modules/call-bind/index.js
deleted file mode 100644
--- a/node_modules/call-bind/index.js	
+++ /dev/null	
@@ -1,35 +0,0 @@
-'use strict';
-
-var bind = require('function-bind');
-var GetIntrinsic = require('get-intrinsic');
-var setFunctionLength = require('set-function-length');
-
-var $TypeError = require('es-errors/type');
-var $apply = GetIntrinsic('%Function.prototype.apply%');
-var $call = GetIntrinsic('%Function.prototype.call%');
-var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
-
-var $defineProperty = require('es-define-property');
-var $max = GetIntrinsic('%Math.max%');
-
-module.exports = function callBind(originalFunction) {
-	if (typeof originalFunction !== 'function') {
-		throw new $TypeError('a function is required');
-	}
-	var func = $reflectApply(bind, $call, arguments);
-	return setFunctionLength(
-		func,
-		1 + $max(0, originalFunction.length - (arguments.length - 1)),
-		true
-	);
-};
-
-var applyBind = function applyBind() {
-	return $reflectApply(bind, $apply, arguments);
-};
-
-if ($defineProperty) {
-	$defineProperty(module.exports, 'apply', { value: applyBind });
-} else {
-	module.exports.apply = applyBind;
-}
Index: node_modules/pg-connection-string/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-connection-string/README.md b/node_modules/pg-connection-string/README.md
--- a/node_modules/pg-connection-string/README.md	
+++ b/node_modules/pg-connection-string/README.md	
@@ -3,9 +3,6 @@
 
 [![NPM](https://nodei.co/npm/pg-connection-string.png?compact=true)](https://nodei.co/npm/pg-connection-string/)
 
-[![Build Status](https://travis-ci.org/iceddev/pg-connection-string.svg?branch=master)](https://travis-ci.org/iceddev/pg-connection-string)
-[![Coverage Status](https://coveralls.io/repos/github/iceddev/pg-connection-string/badge.svg?branch=master)](https://coveralls.io/github/iceddev/pg-connection-string?branch=master)
-
 Functions for dealing with a PostgresSQL connection string
 
 `parse` method taken from [node-postgres](https://github.com/brianc/node-postgres.git)
@@ -15,17 +12,17 @@
 ## Usage
 
 ```js
-var parse = require('pg-connection-string').parse;
+const parse = require('pg-connection-string').parse;
 
-var config = parse('postgres://someuser:somepassword@somehost:381/somedatabase')
+const config = parse('postgres://someuser:somepassword@somehost:381/somedatabase')
 ```
 
 The resulting config contains a subset of the following properties:
 
+* `user` - User with which to authenticate to the server
+* `password` - Corresponding password
 * `host` - Postgres server hostname or, for UNIX domain sockets, the socket filename
 * `port` - port on which to connect
-* `user` - User with which to authenticate to the server
-* `password` - Corresponding password
 * `database` - Database name within the server
 * `client_encoding` - string encoding the client will use
 * `ssl`, either a boolean or an object with properties
@@ -35,6 +32,27 @@
   * `ca`
 * any other query parameters (for example, `application_name`) are preserved intact.
 
+### ClientConfig Compatibility for TypeScript
+
+The pg-connection-string `ConnectionOptions` interface is not compatible with the `ClientConfig` interface that [pg.Client](https://node-postgres.com/apis/client) expects. To remedy this, use the `parseIntoClientConfig` function instead of `parse`:
+
+```ts
+import { ClientConfig } from 'pg';
+import { parseIntoClientConfig } from 'pg-connection-string';
+
+const config: ClientConfig = parseIntoClientConfig('postgres://someuser:somepassword@somehost:381/somedatabase')
+```
+
+You can also use `toClientConfig` to convert an existing `ConnectionOptions` interface into a `ClientConfig` interface:
+
+```ts
+import { ClientConfig } from 'pg';
+import { parse, toClientConfig } from 'pg-connection-string';
+
+const config = parse('postgres://someuser:somepassword@somehost:381/somedatabase')
+const clientConfig: ClientConfig = toClientConfig(config)
+```
+
 ## Connection Strings
 
 The short summary of acceptable URLs is:
@@ -66,12 +84,22 @@
  * `host=<host>` - sets `host` property, overriding the URL's host
  * `encoding=<encoding>` - sets the `client_encoding` property
  * `ssl=1`, `ssl=true`, `ssl=0`, `ssl=false` - sets `ssl` to true or false, accordingly
- * `sslmode=<sslmode>`
+ * `uselibpqcompat=true` - use libpq semantics
+ * `sslmode=<sslmode>` when `uselibpqcompat=true` is not set
    * `sslmode=disable` - sets `ssl` to false
    * `sslmode=no-verify` - sets `ssl` to `{ rejectUnauthorized: false }`
    * `sslmode=prefer`, `sslmode=require`, `sslmode=verify-ca`, `sslmode=verify-full` - sets `ssl` to true
+ * `sslmode=<sslmode>` when `uselibpqcompat=true`
+   * `sslmode=disable` - sets `ssl` to false
+   * `sslmode=prefer` - sets `ssl` to `{ rejectUnauthorized: false }`
+   * `sslmode=require` - sets `ssl` to `{ rejectUnauthorized: false }` unless `sslrootcert` is specified, in which case it behaves like `verify-ca`
+   * `sslmode=verify-ca` - sets `ssl` to `{ checkServerIdentity: no-op }` (verify CA, but not server identity). This verifies the presented certificate against the effective CA specified in sslrootcert.
+   * `sslmode=verify-full` - sets `ssl` to `{}` (verify CA and server identity)
  * `sslcert=<filename>` - reads data from the given file and includes the result as `ssl.cert`
  * `sslkey=<filename>` - reads data from the given file and includes the result as `ssl.key`
  * `sslrootcert=<filename>` - reads data from the given file and includes the result as `ssl.ca`
 
 A bare relative URL, such as `salesdata`, will indicate a database name while leaving other properties empty.
+
+> [!CAUTION]
+> Choosing an sslmode other than verify-full has serious security implications. Please read https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-SSLMODE-STATEMENTS to understand the trade-offs.
Index: node_modules/pg-protocol/src/parser.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/parser.ts b/node_modules/pg-protocol/src/parser.ts
--- a/node_modules/pg-protocol/src/parser.ts	
+++ b/node_modules/pg-protocol/src/parser.ts	
@@ -27,7 +27,6 @@
   NoticeMessage,
 } from './messages'
 import { BufferReader } from './buffer-reader'
-import assert from 'assert'
 
 // every message is prefixed with a single bye
 const CODE_LENGTH = 1
@@ -259,9 +258,9 @@
 
   private parseField(): Field {
     const name = this.reader.cstring()
-    const tableID = this.reader.int32()
+    const tableID = this.reader.uint32()
     const columnID = this.reader.int16()
-    const dataTypeID = this.reader.int32()
+    const dataTypeID = this.reader.uint32()
     const dataTypeSize = this.reader.int16()
     const dataTypeModifier = this.reader.int32()
     const mode = this.reader.int16() === 0 ? 'text' : 'binary'
@@ -329,16 +328,17 @@
         }
         break
       case 10: // AuthenticationSASL
-        message.name = 'authenticationSASL'
-        message.mechanisms = []
-        let mechanism: string
-        do {
-          mechanism = this.reader.cstring()
-
-          if (mechanism) {
-            message.mechanisms.push(mechanism)
-          }
-        } while (mechanism)
+        {
+          message.name = 'authenticationSASL'
+          message.mechanisms = []
+          let mechanism: string
+          do {
+            mechanism = this.reader.cstring()
+            if (mechanism) {
+              message.mechanisms.push(mechanism)
+            }
+          } while (mechanism)
+        }
         break
       case 11: // AuthenticationSASLContinue
         message.name = 'authenticationSASLContinue'
Index: node_modules/semver/ranges/ltr.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/ranges/ltr.js b/node_modules/semver/ranges/ltr.js
--- a/node_modules/semver/ranges/ltr.js	
+++ b/node_modules/semver/ranges/ltr.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const outside = require('./outside')
 // Determine if version is less than all the versions possible in the range
 const ltr = (version, range, options) => outside(version, range, '<', options)
Index: node_modules/postgresql-client/esm/data-types/int2-vector-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/int2-vector-type.js b/node_modules/postgresql-client/esm/data-types/int2-vector-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/int2-vector-type.js	
+++ /dev/null	
@@ -1,35 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { decodeBinaryArray } from '../util/decode-binaryarray.js';
-import { encodeBinaryArray } from '../util/encode-binaryarray.js';
-import { fastParseInt } from '../util/fast-parseint.js';
-export const Int2VectorType = {
-    name: 'int2vector',
-    oid: DataTypeOIDs.int2vector,
-    jsType: 'array',
-    parseBinary(v) {
-        return decodeBinaryArray(v, b => b.readInt16BE()) || undefined;
-    },
-    encodeBinary(buf, v) {
-        encodeBinaryArray(buf, v, DataTypeOIDs.int2, {}, (io, x) => {
-            io.writeInt16BE(x);
-        });
-    },
-    encodeCalculateDim(v) {
-        return [v.length];
-    },
-    parseText(str) {
-        return str.split(' ').map(fastParseInt);
-    },
-    encodeText(v) {
-        return v.join(' ');
-    },
-    isType(v) {
-        return (Array.isArray(v) && !v.find(x => !(typeof x === 'number' && Number.isInteger(x) && x >= -32768 && x <= 32767)));
-    },
-};
-export const ArrayInt2VectorType = {
-    ...Int2VectorType,
-    name: '_int2vector',
-    oid: DataTypeOIDs._int2vector,
-    elementsOID: DataTypeOIDs.int2vector,
-};
Index: node_modules/cookie/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/cookie/index.js b/node_modules/cookie/index.js
--- a/node_modules/cookie/index.js	
+++ b/node_modules/cookie/index.js	
@@ -20,19 +20,70 @@
  * @private
  */
 
-var decode = decodeURIComponent;
-var encode = encodeURIComponent;
-var pairSplitRegExp = /; */;
+var __toString = Object.prototype.toString
+var __hasOwnProperty = Object.prototype.hasOwnProperty
 
 /**
- * RegExp to match field-content in RFC 7230 sec 3.2
+ * RegExp to match cookie-name in RFC 6265 sec 4.1.1
+ * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2
+ * which has been replaced by the token definition in RFC 7230 appendix B.
  *
- * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
- * field-vchar   = VCHAR / obs-text
- * obs-text      = %x80-FF
+ * cookie-name       = token
+ * token             = 1*tchar
+ * tchar             = "!" / "#" / "$" / "%" / "&" / "'" /
+ *                     "*" / "+" / "-" / "." / "^" / "_" /
+ *                     "`" / "|" / "~" / DIGIT / ALPHA
  */
 
-var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
+var cookieNameRegExp = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * RegExp to match cookie-value in RFC 6265 sec 4.1.1
+ *
+ * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
+ * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
+ *                     ; US-ASCII characters excluding CTLs,
+ *                     ; whitespace DQUOTE, comma, semicolon,
+ *                     ; and backslash
+ */
+
+var cookieValueRegExp = /^("?)[\u0021\u0023-\u002B\u002D-\u003A\u003C-\u005B\u005D-\u007E]*\1$/;
+
+/**
+ * RegExp to match domain-value in RFC 6265 sec 4.1.1
+ *
+ * domain-value      = <subdomain>
+ *                     ; defined in [RFC1034], Section 3.5, as
+ *                     ; enhanced by [RFC1123], Section 2.1
+ * <subdomain>       = <label> | <subdomain> "." <label>
+ * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]
+ *                     Labels must be 63 characters or less.
+ *                     'let-dig' not 'letter' in the first char, per RFC1123
+ * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>
+ * <let-dig-hyp>     = <let-dig> | "-"
+ * <let-dig>         = <letter> | <digit>
+ * <letter>          = any one of the 52 alphabetic characters A through Z in
+ *                     upper case and a through z in lower case
+ * <digit>           = any one of the ten digits 0 through 9
+ *
+ * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173
+ *
+ * > (Note that a leading %x2E ("."), if present, is ignored even though that
+ * character is not permitted, but a trailing %x2E ("."), if present, will
+ * cause the user agent to ignore the attribute.)
+ */
+
+var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
+
+/**
+ * RegExp to match path-value in RFC 6265 sec 4.1.1
+ *
+ * path-value        = <any CHAR except CTLs or ";">
+ * CHAR              = %x01-7F
+ *                     ; defined in RFC 5234 appendix B.1
+ */
+
+var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
 
 /**
  * Parse a cookie header.
@@ -41,95 +92,128 @@
  * The object has the various cookies as keys(names) => values
  *
  * @param {string} str
- * @param {object} [options]
+ * @param {object} [opt]
  * @return {object}
  * @public
  */
 
-function parse(str, options) {
+function parse(str, opt) {
   if (typeof str !== 'string') {
     throw new TypeError('argument str must be a string');
   }
 
-  var obj = {}
-  var opt = options || {};
-  var pairs = str.split(pairSplitRegExp);
-  var dec = opt.decode || decode;
+  var obj = {};
+  var len = str.length;
+  // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.
+  if (len < 2) return obj;
+
+  var dec = (opt && opt.decode) || decode;
+  var index = 0;
+  var eqIdx = 0;
+  var endIdx = 0;
 
-  for (var i = 0; i < pairs.length; i++) {
-    var pair = pairs[i];
-    var eq_idx = pair.indexOf('=');
+  do {
+    eqIdx = str.indexOf('=', index);
+    if (eqIdx === -1) break; // No more cookie pairs.
 
-    // skip things that don't look like key=value
-    if (eq_idx < 0) {
+    endIdx = str.indexOf(';', index);
+
+    if (endIdx === -1) {
+      endIdx = len;
+    } else if (eqIdx > endIdx) {
+      // backtrack on prior semicolon
+      index = str.lastIndexOf(';', eqIdx - 1) + 1;
       continue;
     }
 
-    var key = pair.substr(0, eq_idx).trim()
-    var val = pair.substr(++eq_idx, pair.length).trim();
-
-    // quoted values
-    if ('"' == val[0]) {
-      val = val.slice(1, -1);
-    }
+    var keyStartIdx = startIndex(str, index, eqIdx);
+    var keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
+    var key = str.slice(keyStartIdx, keyEndIdx);
 
     // only assign once
-    if (undefined == obj[key]) {
+    if (!__hasOwnProperty.call(obj, key)) {
+      var valStartIdx = startIndex(str, eqIdx + 1, endIdx);
+      var valEndIdx = endIndex(str, endIdx, valStartIdx);
+
+      if (str.charCodeAt(valStartIdx) === 0x22 /* " */ && str.charCodeAt(valEndIdx - 1) === 0x22 /* " */) {
+        valStartIdx++;
+        valEndIdx--;
+      }
+
+      var val = str.slice(valStartIdx, valEndIdx);
       obj[key] = tryDecode(val, dec);
     }
-  }
+
+    index = endIdx + 1
+  } while (index < len);
 
   return obj;
 }
 
+function startIndex(str, index, max) {
+  do {
+    var code = str.charCodeAt(index);
+    if (code !== 0x20 /*   */ && code !== 0x09 /* \t */) return index;
+  } while (++index < max);
+  return max;
+}
+
+function endIndex(str, index, min) {
+  while (index > min) {
+    var code = str.charCodeAt(--index);
+    if (code !== 0x20 /*   */ && code !== 0x09 /* \t */) return index + 1;
+  }
+  return min;
+}
+
 /**
  * Serialize data into a cookie header.
  *
- * Serialize the a name value pair into a cookie string suitable for
- * http headers. An optional options object specified cookie parameters.
+ * Serialize a name value pair into a cookie string suitable for
+ * http headers. An optional options object specifies cookie parameters.
  *
  * serialize('foo', 'bar', { httpOnly: true })
  *   => "foo=bar; httpOnly"
  *
  * @param {string} name
  * @param {string} val
- * @param {object} [options]
+ * @param {object} [opt]
  * @return {string}
  * @public
  */
 
-function serialize(name, val, options) {
-  var opt = options || {};
-  var enc = opt.encode || encode;
+function serialize(name, val, opt) {
+  var enc = (opt && opt.encode) || encodeURIComponent;
 
   if (typeof enc !== 'function') {
     throw new TypeError('option encode is invalid');
   }
 
-  if (!fieldContentRegExp.test(name)) {
+  if (!cookieNameRegExp.test(name)) {
     throw new TypeError('argument name is invalid');
   }
 
   var value = enc(val);
 
-  if (value && !fieldContentRegExp.test(value)) {
+  if (!cookieValueRegExp.test(value)) {
     throw new TypeError('argument val is invalid');
   }
 
   var str = name + '=' + value;
+  if (!opt) return str;
 
   if (null != opt.maxAge) {
-    var maxAge = opt.maxAge - 0;
+    var maxAge = Math.floor(opt.maxAge);
 
-    if (isNaN(maxAge) || !isFinite(maxAge)) {
+    if (!isFinite(maxAge)) {
       throw new TypeError('option maxAge is invalid')
     }
 
-    str += '; Max-Age=' + Math.floor(maxAge);
+    str += '; Max-Age=' + maxAge;
   }
 
   if (opt.domain) {
-    if (!fieldContentRegExp.test(opt.domain)) {
+    if (!domainValueRegExp.test(opt.domain)) {
       throw new TypeError('option domain is invalid');
     }
 
@@ -137,7 +221,7 @@
   }
 
   if (opt.path) {
-    if (!fieldContentRegExp.test(opt.path)) {
+    if (!pathValueRegExp.test(opt.path)) {
       throw new TypeError('option path is invalid');
     }
 
@@ -145,11 +229,13 @@
   }
 
   if (opt.expires) {
-    if (typeof opt.expires.toUTCString !== 'function') {
+    var expires = opt.expires
+
+    if (!isDate(expires) || isNaN(expires.valueOf())) {
       throw new TypeError('option expires is invalid');
     }
 
-    str += '; Expires=' + opt.expires.toUTCString();
+    str += '; Expires=' + expires.toUTCString()
   }
 
   if (opt.httpOnly) {
@@ -160,6 +246,29 @@
     str += '; Secure';
   }
 
+  if (opt.partitioned) {
+    str += '; Partitioned'
+  }
+
+  if (opt.priority) {
+    var priority = typeof opt.priority === 'string'
+      ? opt.priority.toLowerCase() : opt.priority;
+
+    switch (priority) {
+      case 'low':
+        str += '; Priority=Low'
+        break
+      case 'medium':
+        str += '; Priority=Medium'
+        break
+      case 'high':
+        str += '; Priority=High'
+        break
+      default:
+        throw new TypeError('option priority is invalid')
+    }
+  }
+
   if (opt.sameSite) {
     var sameSite = typeof opt.sameSite === 'string'
       ? opt.sameSite.toLowerCase() : opt.sameSite;
@@ -185,6 +294,30 @@
   return str;
 }
 
+/**
+ * URL-decode string value. Optimized to skip native call when no %.
+ *
+ * @param {string} str
+ * @returns {string}
+ */
+
+function decode (str) {
+  return str.indexOf('%') !== -1
+    ? decodeURIComponent(str)
+    : str
+}
+
+/**
+ * Determine if value is a Date.
+ *
+ * @param {*} val
+ * @private
+ */
+
+function isDate (val) {
+  return __toString.call(val) === '[object Date]';
+}
+
 /**
  * Try decoding a string using a decoding function.
  *
Index: node_modules/power-tasks/typings/abort-error.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/typings/abort-error.d.ts b/node_modules/power-tasks/typings/abort-error.d.ts
deleted file mode 100644
--- a/node_modules/power-tasks/typings/abort-error.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-export declare class AbortError extends Error {
-    code: string;
-}
Index: node_modules/postgres/cjs/src/connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/cjs/src/connection.js b/node_modules/postgres/cjs/src/connection.js
--- a/node_modules/postgres/cjs/src/connection.js	
+++ b/node_modules/postgres/cjs/src/connection.js	
@@ -109,7 +109,7 @@
     queue: queues.closed,
     idleTimer,
     connect(query) {
-      initial = query || true
+      initial = query
       reconnect()
     },
     terminate,
@@ -293,7 +293,7 @@
     if (incomings) {
       incomings.push(x)
       remaining -= x.length
-      if (remaining >= 0)
+      if (remaining > 0)
         return
     }
 
@@ -385,7 +385,13 @@
   }
 
   function queryError(query, err) {
-    Object.defineProperties(err, {
+    if (query.reserve)
+      return query.reject(err)
+
+    if (!err || typeof err !== 'object')
+      err = new Error(err)
+
+    'query' in err || 'parameters' in err || Object.defineProperties(err, {
       stack: { value: err.stack + query.origin.replace(/.*\n/, '\n'), enumerable: options.debug },
       query: { value: query.string, enumerable: options.debug },
       parameters: { value: query.parameters, enumerable: options.debug },
@@ -532,11 +538,11 @@
       }
 
       if (needsTypes) {
-        initial === true && (initial = null)
+        initial.reserve && (initial = null)
         return fetchArrayTypes()
       }
 
-      initial !== true && execute(initial)
+      initial && !initial.reserve && execute(initial)
       options.shared.retries = retries = 0
       initial = null
       return
Index: node_modules/power-tasks/cjs/abort-error.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/cjs/abort-error.js b/node_modules/power-tasks/cjs/abort-error.js
--- a/node_modules/power-tasks/cjs/abort-error.js	
+++ b/node_modules/power-tasks/cjs/abort-error.js	
@@ -4,7 +4,7 @@
 class AbortError extends Error {
     constructor() {
         super(...arguments);
-        this.code = 'ABORT_ERR';
+        this.code = "ABORT_ERR";
     }
 }
 exports.AbortError = AbortError;
Index: node_modules/touch/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/touch/package.json b/node_modules/touch/package.json
--- a/node_modules/touch/package.json	
+++ b/node_modules/touch/package.json	
@@ -2,14 +2,11 @@
   "author": "Isaac Z. Schlueter <i@izs.me> (http://blog.izs.me/)",
   "name": "touch",
   "description": "like touch(1) in node",
-  "version": "3.1.0",
+  "version": "3.1.1",
   "repository": "git://github.com/isaacs/node-touch.git",
   "bin": {
     "nodetouch": "./bin/nodetouch.js"
   },
-  "dependencies": {
-    "nopt": "~1.0.10"
-  },
   "license": "ISC",
   "scripts": {
     "test": "tap test/*.js --100 -J",
Index: node_modules/semver/functions/valid.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/valid.js b/node_modules/semver/functions/valid.js
--- a/node_modules/semver/functions/valid.js	
+++ b/node_modules/semver/functions/valid.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const parse = require('./parse')
 const valid = (version, options) => {
   const v = parse(version, options)
Index: node_modules/postgresql-client/esm/data-types/time-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/time-type.js b/node_modules/postgresql-client/esm/data-types/time-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/time-type.js	
+++ /dev/null	
@@ -1,51 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { parseTime, STRICT_TIME_PATTERN } from '../util/parse-time.js';
-const timeMul = 4294967296;
-export const TimeType = {
-    name: 'time',
-    oid: DataTypeOIDs.time,
-    jsType: 'string',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.time);
-        const hi = v.readInt32BE();
-        const lo = v.readUInt32BE(4);
-        let d = new Date((lo + hi * timeMul) / 1000);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
-        return fetchAsString ? dateToTimeString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = parseTime(v, false, options.utcDates);
-        if (!(v instanceof Date))
-            v = new Date(v);
-        // Postgresql ignores timezone data so we are
-        let n = options.utcDates ? v.getTime() : v.getTime() - v.getTimezoneOffset() * 60 * 1000;
-        n = n * 1000;
-        const hi = Math.floor(n / timeMul);
-        const lo = n - hi * timeMul;
-        buf.writeInt32BE(hi);
-        buf.writeUInt32BE(lo);
-    },
-    parseText(v, options) {
-        if (options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.time))
-            return v;
-        return parseTime(v, false, options.utcDates);
-    },
-    isType(v) {
-        return ((v instanceof Date && v.getFullYear() === 1970 && v.getMonth() === 0 && v.getDate() === 1) ||
-            (typeof v === 'string' && STRICT_TIME_PATTERN.test(v)));
-    },
-};
-function padZero(v) {
-    return v < 9 ? '0' + v : '' + v;
-}
-function dateToTimeString(d) {
-    return padZero(d.getHours()) + ':' + padZero(d.getMinutes()) + ':' + padZero(d.getSeconds());
-}
-export const ArrayTimeType = {
-    ...TimeType,
-    name: '_time',
-    oid: DataTypeOIDs._time,
-    elementsOID: DataTypeOIDs.time,
-};
Index: node_modules/postgresql-client/esm/interfaces/query-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/query-options.js b/node_modules/postgresql-client/esm/interfaces/query-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/query-options.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/postgres/src/connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgres/src/connection.js b/node_modules/postgres/src/connection.js
--- a/node_modules/postgres/src/connection.js	
+++ b/node_modules/postgres/src/connection.js	
@@ -109,7 +109,7 @@
     queue: queues.closed,
     idleTimer,
     connect(query) {
-      initial = query || true
+      initial = query
       reconnect()
     },
     terminate,
@@ -293,7 +293,7 @@
     if (incomings) {
       incomings.push(x)
       remaining -= x.length
-      if (remaining >= 0)
+      if (remaining > 0)
         return
     }
 
@@ -385,7 +385,13 @@
   }
 
   function queryError(query, err) {
-    Object.defineProperties(err, {
+    if (query.reserve)
+      return query.reject(err)
+
+    if (!err || typeof err !== 'object')
+      err = new Error(err)
+
+    'query' in err || 'parameters' in err || Object.defineProperties(err, {
       stack: { value: err.stack + query.origin.replace(/.*\n/, '\n'), enumerable: options.debug },
       query: { value: query.string, enumerable: options.debug },
       parameters: { value: query.parameters, enumerable: options.debug },
@@ -532,11 +538,11 @@
       }
 
       if (needsTypes) {
-        initial === true && (initial = null)
+        initial.reserve && (initial = null)
         return fetchArrayTypes()
       }
 
-      initial !== true && execute(initial)
+      initial && !initial.reserve && execute(initial)
       options.shared.retries = retries = 0
       initial = null
       return
Index: node_modules/postgresql-client/typings/data-types/bytea-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/bytea-type.d.ts b/node_modules/postgresql-client/typings/data-types/bytea-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/bytea-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const ByteaType: DataType;
-export declare const ArrayByteaType: DataType;
Index: node_modules/lightning-pool/esm/definitions.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/esm/definitions.d.ts b/node_modules/lightning-pool/esm/definitions.d.ts
deleted file mode 100644
--- a/node_modules/lightning-pool/esm/definitions.d.ts	
+++ /dev/null	
@@ -1,34 +0,0 @@
-export type Callback = (e?: Error, ...args: any[]) => void;
-export declare enum PoolState {
-    IDLE = 0,
-    STARTED = 1,
-    CLOSING = 2,
-    CLOSED = 3
-}
-export declare enum ResourceState {
-    IDLE = 0,
-    ACQUIRED = 1,
-    VALIDATION = 2
-}
-export interface PoolFactory<T = any> {
-    create(info?: {
-        tries: number;
-        maxRetries: number;
-    }): Promise<T> | T;
-    destroy(resource: T): Promise<void> | void;
-    reset?(resource: T): Promise<void> | void;
-    validate?(resource: T): Promise<void> | void;
-}
-export interface PoolConfiguration {
-    acquireMaxRetries?: number;
-    acquireRetryWait?: number;
-    acquireTimeoutMillis?: number;
-    fifo?: boolean;
-    idleTimeoutMillis?: number;
-    houseKeepInterval?: number;
-    min?: number;
-    minIdle?: number;
-    max?: number;
-    maxQueue?: number;
-    validation?: boolean;
-}
Index: node_modules/pg/lib/result.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/result.js b/node_modules/pg/lib/result.js
--- a/node_modules/pg/lib/result.js	
+++ b/node_modules/pg/lib/result.js	
@@ -1,8 +1,8 @@
 'use strict'
 
-var types = require('pg-types')
+const types = require('pg-types')
 
-var matchRegexp = /^([A-Za-z]+)(?: (\d+))?(?: (\d+))?/
+const matchRegexp = /^([A-Za-z]+)(?: (\d+))?(?: (\d+))?/
 
 // result object returned from query
 // in the 'end' event and also
@@ -26,7 +26,7 @@
 
   // adds a command complete message
   addCommandComplete(msg) {
-    var match
+    let match
     if (msg.text) {
       // pure javascript
       match = matchRegexp.exec(msg.text)
@@ -37,7 +37,7 @@
     if (match) {
       this.command = match[1]
       if (match[3]) {
-        // COMMMAND OID ROWS
+        // COMMAND OID ROWS
         this.oid = parseInt(match[2], 10)
         this.rowCount = parseInt(match[3], 10)
       } else if (match[2]) {
@@ -48,9 +48,9 @@
   }
 
   _parseRowAsArray(rowData) {
-    var row = new Array(rowData.length)
-    for (var i = 0, len = rowData.length; i < len; i++) {
-      var rawValue = rowData[i]
+    const row = new Array(rowData.length)
+    for (let i = 0, len = rowData.length; i < len; i++) {
+      const rawValue = rowData[i]
       if (rawValue !== null) {
         row[i] = this._parsers[i](rawValue)
       } else {
@@ -61,12 +61,13 @@
   }
 
   parseRow(rowData) {
-    var row = { ...this._prebuiltEmptyResultObject }
-    for (var i = 0, len = rowData.length; i < len; i++) {
-      var rawValue = rowData[i]
-      var field = this.fields[i].name
+    const row = { ...this._prebuiltEmptyResultObject }
+    for (let i = 0, len = rowData.length; i < len; i++) {
+      const rawValue = rowData[i]
+      const field = this.fields[i].name
       if (rawValue !== null) {
-        row[field] = this._parsers[i](rawValue)
+        const v = this.fields[i].format === 'binary' ? Buffer.from(rawValue) : rawValue
+        row[field] = this._parsers[i](v)
       } else {
         row[field] = null
       }
@@ -88,10 +89,10 @@
       this._parsers = new Array(fieldDescriptions.length)
     }
 
-    var row = {}
+    const row = {}
 
-    for (var i = 0; i < fieldDescriptions.length; i++) {
-      var desc = fieldDescriptions[i]
+    for (let i = 0; i < fieldDescriptions.length; i++) {
+      const desc = fieldDescriptions[i]
       row[desc.name] = null
 
       if (this._types) {
@@ -100,6 +101,7 @@
         this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')
       }
     }
+
     this._prebuiltEmptyResultObject = { ...row }
   }
 }
Index: node_modules/postgresql-client/typings/interfaces/database-connection-params.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/database-connection-params.d.ts b/node_modules/postgresql-client/typings/interfaces/database-connection-params.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/database-connection-params.d.ts	
+++ /dev/null	
@@ -1,38 +0,0 @@
-/// <reference types="node" />
-import type { PoolConfiguration as LPoolConfiguration } from 'lightning-pool';
-import type { ConnectionOptions as TlsConnectionOptions } from 'tls';
-import type { SmartBufferConfig } from '../protocol/smart-buffer.js';
-import type { DebugLogger } from '../types.js';
-export interface DatabaseConnectionParams {
-    host?: string;
-    port?: number;
-    user?: string;
-    password?: string | (() => string | Promise<string>);
-    database?: string;
-    applicationName?: string;
-    ssl?: TlsConnectionOptions;
-    timezone?: string;
-    schema?: string;
-    connectTimeoutMs?: number;
-    /**
-     * Specifies weather execute query in auto-commit mode
-     * @default false
-     */
-    autoCommit?: boolean;
-    /**
-     * When on, if a statement in a transaction block generates an error,
-     * the error is ignored and the transaction continues.
-     * When off (the default), a statement in a transaction block that generates an error aborts the entire transaction
-     * @default true
-     */
-    rollbackOnError?: boolean;
-    debugLogger?: DebugLogger;
-}
-export interface SocketOptions {
-    keepAlive?: boolean;
-}
-export interface ConnectionConfiguration extends DatabaseConnectionParams, SocketOptions {
-    buffer?: SmartBufferConfig;
-}
-export interface PoolConfiguration extends ConnectionConfiguration, LPoolConfiguration {
-}
Index: node_modules/doublylinked/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/doublylinked/package.json b/node_modules/doublylinked/package.json
--- a/node_modules/doublylinked/package.json	
+++ b/node_modules/doublylinked/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "doublylinked",
   "description": "Doubly linked list implementation for JavaScript with iterator and array-like interface",
-  "version": "2.5.4",
+  "version": "2.5.6",
   "author": "Panates Ltd.",
   "contributors": [
     "Eray Hanoglu <e.hanoglu@panates.com>"
@@ -18,13 +18,16 @@
     "doubly linked list"
   ],
   "devDependencies": {
-    "eslint": "^8.56.0",
-    "eslint-config-google": "^0.14.0",
-    "mocha": "^10.2.0",
-    "nyc": "^15.1.0"
+    "@panates/eslint-config": "^2.0.3",
+    "@panates/eslint-config-ts": "^2.0.3",
+    "@panates/tsconfig": "^2.0.3",
+    "@types/jest": "^29.5.14",
+    "globals": "^15.14.0",
+    "husky": "^9.1.7",
+    "jest": "^29.7.0"
   },
   "engines": {
-    "node": ">= 10.0"
+    "node": ">= 16.0"
   },
   "directories": {
     "lib": "./lib"
@@ -34,12 +37,15 @@
     "README.md",
     "lib/"
   ],
-  "nyc": {
-    "temp-directory": "./coverage/.nyc_output"
-  },
   "scripts": {
-    "test": "mocha --require ./test/support/env --reporter spec --bail --check-leaks test/",
-    "cover": "nyc --reporter html --reporter text npm run test",
-    "travis-cover": "nyc --reporter lcovonly npm run test"
+    "lint": "eslint . --max-warnings=0",
+    "lint:fix": "eslint . --max-warnings=0 --fix",
+    "format": "prettier . --write --log-level=warn",
+    "test": "jest",
+    "precover": "rimraf coverage",
+    "cover": "jest --runInBand --detectOpenHandles --coverage",
+    "precitest": "rimraf coverage",
+    "citest": "jest --coverage --coverageReporters=lcov",
+    "prepare": "husky"
   }
 }
Index: node_modules/pg/lib/type-overrides.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg/lib/type-overrides.js b/node_modules/pg/lib/type-overrides.js
--- a/node_modules/pg/lib/type-overrides.js	
+++ b/node_modules/pg/lib/type-overrides.js	
@@ -1,6 +1,6 @@
 'use strict'
 
-var types = require('pg-types')
+const types = require('pg-types')
 
 function TypeOverrides(userTypes) {
   this._types = userTypes || types
Index: node_modules/nodemon/lib/monitor/match.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/nodemon/lib/monitor/match.js b/node_modules/nodemon/lib/monitor/match.js
--- a/node_modules/nodemon/lib/monitor/match.js	
+++ b/node_modules/nodemon/lib/monitor/match.js	
@@ -31,9 +31,12 @@
   }
 
   if (ignore) {
-    [].push.apply(monitor, (ignore || []).map(function (rule) {
-      return '!' + rule;
-    }));
+    [].push.apply(
+      monitor,
+      (ignore || []).map(function (rule) {
+        return '!' + rule;
+      })
+    );
   }
 
   var cwd = process.cwd();
@@ -87,16 +90,16 @@
 
     // if the url ends with * but not **/* and not *.*
     // then convert to **/* - somehow it was missed :-\
-    if (rule.slice(-4) !== '**/*' &&
+    if (
+      rule.slice(-4) !== '**/*' &&
       rule.slice(-1) === '*' &&
-      rule.indexOf('*.') === -1) {
-
+      rule.indexOf('*.') === -1
+    ) {
       if (rule.slice(-2) !== '**') {
         rule += '*/*';
       }
     }
 
-
     return (not ? '!' : '') + rule;
   });
 
@@ -105,7 +108,8 @@
 
 function tryBaseDir(dir) {
   var stat;
-  if (/[?*\{\[]+/.test(dir)) { // if this is pattern, then try to find the base
+  if (/[?*\{\[]+/.test(dir)) {
+    // if this is pattern, then try to find the base
     try {
       var base = path.dirname(dir.replace(/([?*\{\[]+.*$)/, 'foo'));
       stat = fs.statSync(base);
@@ -123,7 +127,7 @@
       if (stat.isFile() || stat.isDirectory()) {
         return dir;
       }
-    } catch (e) { }
+    } catch (e) {}
   }
 
   return false;
@@ -133,50 +137,52 @@
   // sort the rules by highest specificity (based on number of slashes)
   // ignore rules (!) get sorted highest as they take precedent
   const cwd = process.cwd();
-  var rules = monitor.sort(function (a, b) {
-    var r = b.split(path.sep).length - a.split(path.sep).length;
-    var aIsIgnore = a.slice(0, 1) === '!';
-    var bIsIgnore = b.slice(0, 1) === '!';
+  var rules = monitor
+    .sort(function (a, b) {
+      var r = b.split(path.sep).length - a.split(path.sep).length;
+      var aIsIgnore = a.slice(0, 1) === '!';
+      var bIsIgnore = b.slice(0, 1) === '!';
 
-    if (aIsIgnore || bIsIgnore) {
-      if (aIsIgnore) {
-        return -1;
-      }
+      if (aIsIgnore || bIsIgnore) {
+        if (aIsIgnore) {
+          return -1;
+        }
 
-      return 1;
-    }
+        return 1;
+      }
 
-    if (r === 0) {
-      return b.length - a.length;
-    }
-    return r;
-  }).map(function (s) {
-    var prefix = s.slice(0, 1);
+      if (r === 0) {
+        return b.length - a.length;
+      }
+      return r;
+    })
+    .map(function (s) {
+      var prefix = s.slice(0, 1);
 
-    if (prefix === '!') {
-      if (s.indexOf('!' + cwd) === 0) {
-        return s;
-      }
+      if (prefix === '!') {
+        if (s.indexOf('!' + cwd) === 0) {
+          return s;
+        }
 
-      // if it starts with a period, then let's get the relative path
-      if (s.indexOf('!.') === 0) {
-        return '!' + path.resolve(cwd, s.substring(1));
-      }
+        // if it starts with a period, then let's get the relative path
+        if (s.indexOf('!.') === 0) {
+          return '!' + path.resolve(cwd, s.substring(1));
+        }
 
-      return '!**' + (prefix !== path.sep ? path.sep : '') + s.slice(1);
-    }
+        return '!**' + (prefix !== path.sep ? path.sep : '') + s.slice(1);
+      }
 
-    // if it starts with a period, then let's get the relative path
-    if (s.indexOf('.') === 0) {
-      return path.resolve(cwd, s);
-    }
+      // if it starts with a period, then let's get the relative path
+      if (s.indexOf('.') === 0) {
+        return path.resolve(cwd, s);
+      }
 
-    if (s.indexOf(cwd) === 0) {
-      return s;
-    }
+      if (s.indexOf(cwd) === 0) {
+        return s;
+      }
 
-    return '**' + (prefix !== path.sep ? path.sep : '') + s;
-  });
+      return '**' + (prefix !== path.sep ? path.sep : '') + s;
+    });
 
   debug('rules', rules);
 
@@ -221,8 +227,10 @@
           // but *does* match a rule that ends with *.*, then
           // white list it - in that we don't run it through
           // the extension check too.
-          if (rules[i] !== '**' + path.sep + '*.*' &&
-            rules[i].slice(-3) === '*.*') {
+          if (
+            rules[i] !== '**' + path.sep + '*.*' &&
+            rules[i].slice(-3) === '*.*'
+          ) {
             whitelist.push(file);
           } else if (path.basename(file) === path.basename(rules[i])) {
             // if the file matches the actual rule, then it's put on whitelist
@@ -231,7 +239,6 @@
             good.push(file);
           }
           matched = true;
-          break;
         } else {
           // utils.log.detail('no match: ' + rules[i], file);
         }
@@ -242,8 +249,6 @@
     }
   });
 
-  debug('good', good)
-
   // finally check the good files against the extensions that we're monitoring
   if (ext) {
     if (ext.indexOf(',') === -1) {
@@ -256,7 +261,13 @@
       // only compare the filename to the extension test
       return minimatch(path.basename(file), ext, minimatchOpts);
     });
-  } // else assume *.*
+    debug('good (filtered by ext)', good);
+  } else {
+    // else assume *.*
+    debug('good', good);
+  }
+
+  if (whitelist.length) debug('whitelist', whitelist);
 
   var result = good.concat(whitelist);
 
Index: node_modules/postgresql-client/esm/data-types/box-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/box-type.js b/node_modules/postgresql-client/esm/data-types/box-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/box-type.js	
+++ /dev/null	
@@ -1,49 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-const BOX_PATTERN1 = /^\( *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *\)$/;
-const BOX_PATTERN2 = /^\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\) *, *\( *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *\)$/;
-const BOX_PATTERN3 = /^(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*) *, *(-?\d+\.?\d*)$/;
-export const BoxType = {
-    name: 'box',
-    oid: DataTypeOIDs.box,
-    jsType: 'object',
-    arraySeparator: ';',
-    parseBinary(v) {
-        return {
-            x1: v.readDoubleBE(0),
-            y1: v.readDoubleBE(8),
-            x2: v.readDoubleBE(16),
-            y2: v.readDoubleBE(24),
-        };
-    },
-    encodeBinary(buf, v) {
-        buf.writeDoubleBE(v.x1);
-        buf.writeDoubleBE(v.y1);
-        buf.writeDoubleBE(v.x2);
-        buf.writeDoubleBE(v.y2);
-    },
-    parseText(v) {
-        const m = v.match(BOX_PATTERN1) || v.match(BOX_PATTERN2) || v.match(BOX_PATTERN3);
-        if (!m)
-            return undefined;
-        return {
-            x1: parseFloat(m[1]),
-            y1: parseFloat(m[2]),
-            x2: parseFloat(m[3]),
-            y2: parseFloat(m[4]),
-        };
-    },
-    isType(v) {
-        return (typeof v === 'object' &&
-            Object.keys(v).length === 4 &&
-            typeof v.x1 === 'number' &&
-            typeof v.y1 === 'number' &&
-            typeof v.x2 === 'number' &&
-            typeof v.y2 === 'number');
-    },
-};
-export const ArrayBoxType = {
-    ...BoxType,
-    name: '_box',
-    oid: DataTypeOIDs._box,
-    elementsOID: DataTypeOIDs.box,
-};
Index: node_modules/semver/bin/semver.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/bin/semver.js b/node_modules/semver/bin/semver.js
--- a/node_modules/semver/bin/semver.js	
+++ b/node_modules/semver/bin/semver.js	
@@ -3,6 +3,8 @@
 // Exits successfully and prints matching version(s) if
 // any supplied version is valid and passes all tests.
 
+'use strict'
+
 const argv = process.argv.slice(2)
 
 let versions = []
@@ -61,6 +63,7 @@
         switch (argv[0]) {
           case 'major': case 'minor': case 'patch': case 'prerelease':
           case 'premajor': case 'preminor': case 'prepatch':
+          case 'release':
             inc = argv.shift()
             break
           default:
@@ -149,7 +152,7 @@
 -i --increment [<level>]
         Increment a version by the specified level.  Level can
         be one of: major, minor, patch, premajor, preminor,
-        prepatch, or prerelease.  Default level is 'patch'.
+        prepatch, prerelease, or release.  Default level is 'patch'.
         Only one version may be specified.
 
 --preid <identifier>
Index: node_modules/postgresql-client/esm/util/bigint-methods.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/bigint-methods.js b/node_modules/postgresql-client/esm/util/bigint-methods.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/bigint-methods.js	
+++ /dev/null	
@@ -1,37 +0,0 @@
-/* eslint-disable no-bitwise */
-const big0 = BigInt(0);
-const beAnd = BigInt('0xffffffff');
-const big32 = BigInt(32);
-// https://github.com/nodejs/node/blob/v13.9.0/lib/internal/buffer.js
-export function readBigInt64BE(buf, offset = 0) {
-    const first = buf[offset];
-    const last = buf[offset + 7];
-    if (first === undefined || last === undefined)
-        return big0;
-    const val = (first << 24) + // Overflow
-        buf[++offset] * 2 ** 16 +
-        buf[++offset] * 2 ** 8 +
-        buf[++offset];
-    return ((BigInt(val) << big32) + BigInt(buf[++offset] * 2 ** 24 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 8 + last));
-}
-export function writeBigUInt64BE(buf, value, offset = 0) {
-    // @ts-ignore
-    let lo = Number(value & beAnd);
-    buf[offset + 7] = lo;
-    lo = lo >> 8;
-    buf[offset + 6] = lo;
-    lo = lo >> 8;
-    buf[offset + 5] = lo;
-    lo = lo >> 8;
-    buf[offset + 4] = lo;
-    // @ts-ignore
-    let hi = Number((value >> big32) & beAnd);
-    buf[offset + 3] = hi;
-    hi = hi >> 8;
-    buf[offset + 2] = hi;
-    hi = hi >> 8;
-    buf[offset + 1] = hi;
-    hi = hi >> 8;
-    buf[offset] = hi;
-    return offset + 8;
-}
Index: node_modules/postgresql-client/esm/util/parse-datetime.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/util/parse-datetime.js b/node_modules/postgresql-client/esm/util/parse-datetime.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/util/parse-datetime.js	
+++ /dev/null	
@@ -1,34 +0,0 @@
-// noinspection RegExpUnnecessaryNonCapturingGroup
-import { fastParseInt } from './fast-parseint.js';
-// noinspection RegExpUnnecessaryNonCapturingGroup
-const TIMESTAMP_PATTERN = 
-// eslint-disable-next-line
-/^(\d{4})-?(0[1-9]|1[012])?-?([123]0|[012][1-9]|31)?(?:[T ]?([01][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?(?:\.(\d+))?(?:(Z)|(?:([+-])([01]?[0-9]|2[0-3]):?([0-5][0-9])?))?)?$/;
-const INFINITY_PATTERN = /^-?infinity$/;
-export function parseDateTime(str, parseTime, parseTimeZone, utc) {
-    let m = str.match(TIMESTAMP_PATTERN);
-    if (!m) {
-        m = str.match(INFINITY_PATTERN);
-        if (m)
-            return Number(str.replace('i', 'I'));
-        return new Date('invalid');
-    }
-    const args = [1970, 0, 1, 0, 0, 0, 0];
-    const l = parseTime ? 7 : 3;
-    for (let i = 0; i < l; i++) {
-        const s = m[i + 1];
-        args[i] = fastParseInt(s) || 0;
-    }
-    // Months starts from 0
-    if (args[1] > 0)
-        args[1]--;
-    if (parseTimeZone && parseTime && m[9]) {
-        const r = m[9] === '-' ? -1 : 1;
-        args[3] -= (fastParseInt(m[10]) || 0) * r;
-        args[4] -= (fastParseInt(m[11]) || 0) * r;
-        return new Date(Date.UTC(...args));
-    }
-    if (m[8] || utc)
-        return new Date(Date.UTC(...args));
-    return new Date(...args);
-}
Index: node_modules/postgresql-client/esm/connection/intl-connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/connection/intl-connection.js b/node_modules/postgresql-client/esm/connection/intl-connection.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/connection/intl-connection.js	
+++ /dev/null	
@@ -1,238 +0,0 @@
-import { TaskQueue } from 'power-tasks';
-import { coerceToBoolean } from 'putil-varhelpers';
-import { ConnectionState } from '../constants.js';
-import { GlobalTypeMap } from '../data-type-map.js';
-import { PgSocket } from '../protocol/pg-socket.js';
-import { Protocol } from '../protocol/protocol.js';
-import { SafeEventEmitter } from '../safe-event-emitter.js';
-import { getConnectionConfig } from '../util/connection-config.js';
-import { convertRowToObject } from '../util/convert-row-to-object.js';
-import { escapeLiteral } from '../util/escape-literal.js';
-import { getParsers } from '../util/get-parsers.js';
-import { parseRow } from '../util/parse-row.js';
-import { wrapRowDescription } from '../util/wrap-row-description.js';
-const DataFormat = Protocol.DataFormat;
-export class IntlConnection extends SafeEventEmitter {
-    constructor(config) {
-        super();
-        this._refCount = 0;
-        this.transactionStatus = 'I';
-        this.statementQueue = new TaskQueue({ concurrency: 1 });
-        this._config = Object.freeze(getConnectionConfig(config));
-        this.socket = new PgSocket(this._config);
-        this.socket.on('error', err => this._onError(err));
-        this.socket.on('close', () => this.emit('close'));
-        this.socket.on('notification', payload => this.emit('notification', payload));
-        this.socket.on('connecting', () => this.emit('connecting'));
-        this._onErrorSavePoint = 'SP_' + Math.round(Math.random() * 100000000);
-    }
-    get config() {
-        return this._config;
-    }
-    get inTransaction() {
-        return this.transactionStatus === 'T' || this.transactionStatus === 'E';
-    }
-    get state() {
-        return this.socket.state;
-    }
-    get refCount() {
-        return this._refCount;
-    }
-    get processID() {
-        return this.socket.processID;
-    }
-    get secretKey() {
-        return this.socket.secretKey;
-    }
-    get sessionParameters() {
-        return this.socket.sessionParameters;
-    }
-    async connect() {
-        if (this.socket.state === ConnectionState.READY)
-            return;
-        await new Promise((resolve, reject) => {
-            const handleConnectError = err => reject(err);
-            this.socket.once('ready', () => {
-                this.socket.removeListener('error', handleConnectError);
-                resolve();
-            });
-            this.socket.once('error', handleConnectError);
-            this.socket.connect();
-        });
-        let startupCommand = '';
-        if (this.config.schema)
-            startupCommand += 'SET search_path = ' + escapeLiteral(this.config.schema) + ';';
-        if (this.config.timezone)
-            startupCommand += 'SET timezone TO ' + escapeLiteral(this.config.timezone) + ';';
-        if (startupCommand)
-            await this.execute(startupCommand, { autoCommit: true });
-        this.emit('ready');
-    }
-    async close() {
-        if (this.state === ConnectionState.CLOSED)
-            return;
-        this.statementQueue.clearQueue();
-        return new Promise(resolve => {
-            if (this.socket.state === ConnectionState.CLOSED)
-                return;
-            this.socket.once('close', resolve);
-            this.socket.sendTerminateMessage(() => {
-                this.socket.close();
-                this.emit('close');
-            });
-        });
-    }
-    async execute(sql, options, cb) {
-        this.assertConnected();
-        return this.statementQueue
-            .enqueue(async () => {
-            const transactionCommand = sql.match(/^(\bBEGIN\b|\bCOMMIT\b|\bSTART\b|\bROLLBACK|SAVEPOINT|RELEASE\b)/i);
-            let beginFirst = false;
-            let commitLast = false;
-            if (!transactionCommand) {
-                if (!this.inTransaction &&
-                    (options?.autoCommit != null ? options?.autoCommit : this.config.autoCommit) === false) {
-                    beginFirst = true;
-                }
-                if (this.inTransaction && options?.autoCommit)
-                    commitLast = true;
-            }
-            if (beginFirst)
-                await this._execute('BEGIN');
-            const rollbackOnError = !transactionCommand &&
-                (options?.rollbackOnError != null
-                    ? options.rollbackOnError
-                    : coerceToBoolean(this.config.rollbackOnError, true));
-            if (this.inTransaction && rollbackOnError)
-                await this._execute('SAVEPOINT ' + this._onErrorSavePoint);
-            try {
-                const result = await this._execute(sql, options, cb);
-                if (commitLast)
-                    await this._execute('COMMIT');
-                else if (this.inTransaction && rollbackOnError)
-                    await this._execute('RELEASE ' + this._onErrorSavePoint + ';');
-                return result;
-            }
-            catch (e) {
-                if (this.inTransaction && rollbackOnError)
-                    await this._execute('ROLLBACK TO ' + this._onErrorSavePoint + ';');
-                throw e;
-            }
-        })
-            .toPromise();
-    }
-    async startTransaction() {
-        if (!this.inTransaction)
-            await this.execute('BEGIN');
-    }
-    async savepoint(name) {
-        if (!(name && name.match(/^[a-zA-Z]\w+$/)))
-            throw new Error(`Invalid savepoint "${name}`);
-        await this.execute('BEGIN; SAVEPOINT ' + name);
-    }
-    async commit() {
-        if (this.inTransaction)
-            await this.execute('COMMIT');
-    }
-    async rollback() {
-        if (this.inTransaction)
-            await this.execute('ROLLBACK');
-    }
-    async rollbackToSavepoint(name) {
-        if (!(name && name.match(/^[a-zA-Z]\w+$/)))
-            throw new Error(`Invalid savepoint "${name}`);
-        await this.execute('ROLLBACK TO SAVEPOINT ' + name, { autoCommit: false });
-    }
-    async releaseSavepoint(name) {
-        if (!(name && name.match(/^[a-zA-Z]\w+$/)))
-            throw new Error(`Invalid savepoint "${name}`);
-        await this.execute('RELEASE SAVEPOINT ' + name, { autoCommit: false });
-    }
-    ref() {
-        this._refCount++;
-    }
-    unref() {
-        this._refCount--;
-        return !this._refCount;
-    }
-    assertConnected() {
-        if (this.state === ConnectionState.CLOSING)
-            throw new Error('Connection is closing');
-        if (this.state === ConnectionState.CLOSED)
-            throw new Error('Connection closed');
-    }
-    async _execute(sql, options, cb) {
-        this.ref();
-        try {
-            const startTime = Date.now();
-            const result = {
-                totalCommands: 0,
-                totalTime: 0,
-                results: [],
-            };
-            const opts = options || {};
-            this.socket.sendQueryMessage(sql);
-            let currentStart = Date.now();
-            let parsers;
-            let current = { command: undefined };
-            let fields;
-            const typeMap = opts.typeMap || GlobalTypeMap;
-            return await this.socket.capture(async (code, msg, done) => {
-                switch (code) {
-                    case Protocol.BackendMessageCode.NoticeResponse:
-                    case Protocol.BackendMessageCode.CopyInResponse:
-                    case Protocol.BackendMessageCode.CopyOutResponse:
-                    case Protocol.BackendMessageCode.EmptyQueryResponse:
-                        break;
-                    case Protocol.BackendMessageCode.RowDescription:
-                        fields = msg.fields;
-                        parsers = getParsers(typeMap, fields);
-                        current.fields = wrapRowDescription(typeMap, fields, DataFormat.text);
-                        current.rows = [];
-                        break;
-                    case Protocol.BackendMessageCode.DataRow:
-                        let row = msg.columns.map((x) => x.toString('utf8'));
-                        parseRow(parsers, row, opts);
-                        if (opts.objectRows && current.fields)
-                            row = convertRowToObject(current.fields, row);
-                        if (cb)
-                            cb('row', row);
-                        current.rows = current.rows || [];
-                        current.rows.push(row);
-                        break;
-                    case Protocol.BackendMessageCode.CommandComplete:
-                        // Ignore BEGIN command that we added to sql
-                        current.command = msg.command;
-                        if (current.command === 'DELETE' || current.command === 'INSERT' || current.command === 'UPDATE')
-                            current.rowsAffected = msg.rowCount;
-                        current.executeTime = Date.now() - currentStart;
-                        if (current.rows)
-                            current.rowType = opts.objectRows && current.fields ? 'object' : 'array';
-                        result.results.push(current);
-                        if (cb)
-                            cb('command-complete', current);
-                        current = { command: undefined };
-                        currentStart = Date.now();
-                        break;
-                    case Protocol.BackendMessageCode.ReadyForQuery:
-                        this.transactionStatus = msg.status;
-                        result.totalTime = Date.now() - startTime;
-                        // Ignore COMMIT command that we added to sql
-                        result.totalCommands = result.results.length;
-                        done(undefined, result);
-                }
-            });
-        }
-        finally {
-            this.unref();
-        }
-    }
-    _onError(err) {
-        if (this.socket.state !== ConnectionState.READY)
-            return;
-        this.emit('error', err);
-    }
-}
-export function getIntlConnection(connection) {
-    return connection._intlCon;
-}
Index: node_modules/dotenv/README-es.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/dotenv/README-es.md b/node_modules/dotenv/README-es.md
--- a/node_modules/dotenv/README-es.md	
+++ b/node_modules/dotenv/README-es.md	
@@ -14,41 +14,13 @@
 <sup>Gracias espaciales a:</sup>
 <br>
 <br>
-<a href="https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=dotenv_p_20220831">
-  <div>
-    <img src="https://res.cloudinary.com/dotenv-org/image/upload/v1661980709/warp_hi8oqj.png" width="230" alt="Warp">
-  </div>
-  <b>Warp es una rápida e impresionante terminal basada en Rust, reinventado para funcionar como una aplicación moderna.</b>
-  <div>
-    <sup>Haga más en la CLI con edición de texto real, resultado básado en bloques, y busqueda de comandos de IA.</sup>
-  </div>
-</a>
-<br>
-<a href="https://retool.com/?utm_source=sponsor&utm_campaign=dotenv">
-  <div>
-    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_scale,w_300/v1664466968/logo-full-black_vidfqf.png" width="270" alt="Retool">
-  </div>
-  <b>Retool ayuda a los desarrolladores a crear software interno personalizado, como aplicaciones CRUD y paneles de administración, realmente rápido.</b>
-  <div>
-    <sup>Construya Interfaces de Usuario de forma visual con componentes flexibles, conéctese a cualquier fuente de datos, y escriba lógica de negocio en JavaScript.</sup>
-  </div>
-</a>
-<br>
-<a href="https://workos.com/?utm_campaign=github_repo&utm_medium=referral&utm_content=dotenv&utm_source=github">
-  <div>
-    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_scale,w_400/v1665605496/68747470733a2f2f73696e647265736f726875732e636f6d2f6173736574732f7468616e6b732f776f726b6f732d6c6f676f2d77686974652d62672e737667_zdmsbu.svg" width="270" alt="WorkOS">
-  </div>
-  <b>Su Apliación, Lista para la Empresa.</b>
-  <div>
-    <sup>Agrega Inicio de Sesión Único, Autenticación Multi-Factor, y mucho más, en minutos en lugar de meses.</sup>
-  </div>
+
+<a href="https://graphite.dev/?utm_source=github&utm_medium=repo&utm_campaign=dotenv"><img src="https://res.cloudinary.com/dotenv-org/image/upload/v1744035073/graphite_lgsrl8.gif" width="240" alt="Graphite" /></a>
+
+<a href="https://graphite.dev/?utm_source=github&utm_medium=repo&utm_campaign=dotenv">
+  <b>Graphite is the AI developer productivity platform helping teams on GitHub ship higher quality software, faster.</b>
 </a>
 <hr>
-<br>
-<br>
-<br>
-<br>
-
 </div>
 
 # dotenv [![NPM version](https://img.shields.io/npm/v/dotenv.svg?style=flat-square)](https://www.npmjs.com/package/dotenv)
@@ -173,11 +145,6 @@
 
 Necesitaras agregar el valor de otro variable en una de sus variables? Usa [dotenv-expand](https://github.com/motdotla/dotenv-expand).
 
-### Sincronizando
-
-Necesitas mentener sincronizados los archivos `.env` entre maquinas, entornos, o miembros del equipo? Usa 
-[dotenv-vault](https://github.com/dotenv-org/dotenv-vault).
-
 ## Ejemplos
 
 Vea [ejemplos](https://github.com/dotenv-org/examples) sobre el uso de dotenv con varios frameworks, lenguajes y configuraciones.
@@ -429,10 +396,6 @@
 
 Prueba [dotenv-expand](https://github.com/motdotla/dotenv-expand)
 
-### ¿Qué pasa con la sincronización y la seguridad de los archivos .env?
-
-Vea [dotenv-vault](https://github.com/dotenv-org/dotenv-vault)
-
 ## Guía de contribución
 
 Vea [CONTRIBUTING.md](CONTRIBUTING.md)
Index: node_modules/postgresql-client/typings/interfaces/statement-prepare-options.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/interfaces/statement-prepare-options.d.ts b/node_modules/postgresql-client/typings/interfaces/statement-prepare-options.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/interfaces/statement-prepare-options.d.ts	
+++ /dev/null	
@@ -1,13 +0,0 @@
-import type { DataTypeMap } from '../data-type-map';
-import type { OID } from '../types.js';
-export interface StatementPrepareOptions {
-    /**
-     * Specifies data type for each parameter
-     */
-    paramTypes?: OID[];
-    /**
-     * Data type map instance
-     * @default GlobalTypeMap
-     */
-    typeMap?: DataTypeMap;
-}
Index: node_modules/body-parser/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/package.json b/node_modules/body-parser/package.json
--- a/node_modules/body-parser/package.json	
+++ b/node_modules/body-parser/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "body-parser",
   "description": "Node.js body parsing middleware",
-  "version": "1.20.2",
+  "version": "1.20.3",
   "contributors": [
     "Douglas Christopher Wilson <doug@somethingdoug.com>",
     "Jonathan Ong <me@jongleberry.com> (http://jongleberry.com)"
@@ -17,7 +17,7 @@
     "http-errors": "2.0.0",
     "iconv-lite": "0.4.24",
     "on-finished": "2.4.1",
-    "qs": "6.11.0",
+    "qs": "6.13.0",
     "raw-body": "2.5.2",
     "type-is": "~1.6.18",
     "unpipe": "1.0.0"
Index: node_modules/postgresql-client/esm/interfaces/data-mapping-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/interfaces/data-mapping-options.js b/node_modules/postgresql-client/esm/interfaces/data-mapping-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/interfaces/data-mapping-options.js	
+++ /dev/null	
@@ -1,1 +0,0 @@
-export {};
Index: node_modules/postgresql-client/typings/types.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/types.d.ts b/node_modules/postgresql-client/typings/types.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/types.d.ts	
+++ /dev/null	
@@ -1,15 +0,0 @@
-/// <reference types="node" />
-import type { DataMappingOptions } from './interfaces/data-mapping-options.js';
-import type { SmartBuffer } from './protocol/smart-buffer';
-export type OID = number;
-export type Maybe<T> = T | undefined;
-export type Nullable<T> = T | null;
-export type Row = any;
-export type Callback = (err?: Error, value?: any) => void;
-export type DecodeBinaryFunction = (buf: Buffer, options: DataMappingOptions & Record<string, any>) => any;
-export type EncodeBinaryFunction = (buf: SmartBuffer, v: any, options: DataMappingOptions) => void;
-export type EncodeCalculateDimFunction = (v: any[]) => number[];
-export type ParseTextFunction = (v: any, options: DataMappingOptions) => any;
-export type EncodeTextFunction = (v: any, options: DataMappingOptions) => string;
-export type AnyParseFunction = ParseTextFunction | DecodeBinaryFunction;
-export type DebugLogger = (namespace: string, format: any, ...args: any[]) => void;
Index: node_modules/strict-typed-events/cjs/typed-events.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/strict-typed-events/cjs/typed-events.js b/node_modules/strict-typed-events/cjs/typed-events.js
--- a/node_modules/strict-typed-events/cjs/typed-events.js	
+++ b/node_modules/strict-typed-events/cjs/typed-events.js	
@@ -1,7 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.TypedEventEmitterClass = void 0;
+exports.TypedEventEmitterClass = TypedEventEmitterClass;
 function TypedEventEmitterClass(emitter) {
     return emitter;
 }
-exports.TypedEventEmitterClass = TypedEventEmitterClass;
Index: node_modules/postgresql-client/node_modules/postgres-bytea/decode-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/node_modules/postgres-bytea/decode-test.js b/node_modules/postgresql-client/node_modules/postgres-bytea/decode-test.js
deleted file mode 100644
--- a/node_modules/postgresql-client/node_modules/postgres-bytea/decode-test.js	
+++ /dev/null	
@@ -1,19 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const decode = require('./')
-
-test('decode', (t) => {
-  t.test('pg <9 escape format', (t) => {
-    const buffer = Buffer.from([102, 111, 111, 0, 128, 92, 255])
-    t.ok(buffer.equals(decode('foo\\000\\200\\\\\\377')))
-    t.end()
-  })
-
-  t.test('pg >=9 hex format', (t) => {
-    t.ok(decode('\\x1234').equals(Buffer.from([0x12, 0x34])))
-    t.end()
-  })
-
-  t.end()
-})
Index: node_modules/postgresql-client/cjs/connection/bind-param.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/connection/bind-param.js b/node_modules/postgresql-client/cjs/connection/bind-param.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/connection/bind-param.js	
+++ /dev/null	
@@ -1,10 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.BindParam = void 0;
-class BindParam {
-    constructor(oid, value) {
-        this.oid = oid;
-        this.value = value;
-    }
-}
-exports.BindParam = BindParam;
Index: node_modules/postgresql-client/esm/data-types/date-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/date-type.js b/node_modules/postgresql-client/esm/data-types/date-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/date-type.js	
+++ /dev/null	
@@ -1,64 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { parseDateTime } from '../util/parse-datetime.js';
-const timeShift = 946684800000;
-export const DateType = {
-    name: 'date',
-    oid: DataTypeOIDs.date,
-    jsType: 'Date',
-    parseBinary(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.date);
-        const t = v.readInt32BE();
-        if (t === 0x7fffffff)
-            return fetchAsString ? 'infinity' : Infinity;
-        if (t === -0x80000000)
-            return fetchAsString ? '-infinity' : -Infinity;
-        // Shift from 2000 to 1970
-        let d = new Date(t * 1000 * 86400 + timeShift);
-        if (fetchAsString || !options.utcDates)
-            d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
-        return fetchAsString ? dateToDateString(d) : d;
-    },
-    encodeBinary(buf, v, options) {
-        if (typeof v === 'string')
-            v = parseDateTime(v, false, false, options.utcDates);
-        if (v === Infinity) {
-            buf.writeInt32BE(0x7fffffff);
-            return;
-        }
-        if (v === -Infinity) {
-            buf.writeInt32BE(-0x80000000);
-            return;
-        }
-        if (!(v instanceof Date))
-            v = new Date(v);
-        let n = options.utcDates ? v.getTime() : v.getTime() - v.getTimezoneOffset() * 60 * 1000;
-        n = (n - timeShift) / 1000 / 86400;
-        const t = Math.trunc(n + Number.EPSILON);
-        buf.writeInt32BE(t);
-    },
-    parseText(v, options) {
-        const fetchAsString = options.fetchAsString && options.fetchAsString.includes(DataTypeOIDs.date);
-        if (fetchAsString)
-            return v;
-        return parseDateTime(v, false, false, options.utcDates);
-    },
-    isType(v) {
-        return (v instanceof Date &&
-            v.getHours() === 0 &&
-            v.getMinutes() === 0 &&
-            v.getSeconds() === 0 &&
-            v.getMilliseconds() === 0);
-    },
-};
-function padZero(v) {
-    return v < 9 ? '0' + v : '' + v;
-}
-function dateToDateString(d) {
-    return d.getFullYear() + '-' + padZero(d.getMonth() + 1) + '-' + padZero(d.getDate());
-}
-export const ArrayDateType = {
-    ...DateType,
-    name: '_date',
-    oid: DataTypeOIDs._date,
-    elementsOID: DataTypeOIDs.date,
-};
Index: node_modules/pg-cloudflare/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-cloudflare/package.json b/node_modules/pg-cloudflare/package.json
--- a/node_modules/pg-cloudflare/package.json	
+++ b/node_modules/pg-cloudflare/package.json	
@@ -1,8 +1,8 @@
 {
   "name": "pg-cloudflare",
-  "version": "1.1.1",
+  "version": "1.2.7",
   "description": "A socket implementation that can run on Cloudflare Workers using native TCP connections.",
-  "main": "dist/empty.js",
+  "main": "dist/index.js",
   "types": "dist/index.d.ts",
   "license": "MIT",
   "devDependencies": {
@@ -10,8 +10,13 @@
     "typescript": "^4.0.3"
   },
   "exports": {
-    "workerd": "./dist/index.js",
-    "default": "./dist/empty.js"
+    ".": {
+      "workerd": {
+        "import": "./esm/index.mjs",
+        "require": "./dist/index.js"
+      },
+      "default": "./dist/empty.js"
+    }
   },
   "scripts": {
     "build": "tsc",
@@ -26,7 +31,8 @@
   },
   "files": [
     "/dist/*{js,ts,map}",
-    "/src"
+    "/src",
+    "/esm"
   ],
-  "gitHead": "eaafac36dc8f4a13f1fecc9e3420d35559fd8e2b"
+  "gitHead": "8f8e7315e8f7c1bb01e98fdb41c8c92585510782"
 }
Index: node_modules/pg-protocol/src/outbound-serializer.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/outbound-serializer.test.ts b/node_modules/pg-protocol/src/outbound-serializer.test.ts
--- a/node_modules/pg-protocol/src/outbound-serializer.test.ts	
+++ b/node_modules/pg-protocol/src/outbound-serializer.test.ts	
@@ -46,7 +46,7 @@
   })
 
   it('builds query message', function () {
-    var txt = 'select * from boom'
+    const txt = 'select * from boom'
     const actual = serialize.query(txt)
     assert.deepEqual(actual, new BufferList().addCString(txt).join(true, 'Q'))
   })
@@ -54,7 +54,7 @@
   describe('parse message', () => {
     it('builds parse message', function () {
       const actual = serialize.parse({ text: '!' })
-      var expected = new BufferList().addCString('').addCString('!').addInt16(0).join(true, 'P')
+      const expected = new BufferList().addCString('').addCString('!').addInt16(0).join(true, 'P')
       assert.deepEqual(actual, expected)
     })
 
@@ -64,7 +64,7 @@
         text: 'select * from boom',
         types: [],
       })
-      var expected = new BufferList().addCString('boom').addCString('select * from boom').addInt16(0).join(true, 'P')
+      const expected = new BufferList().addCString('boom').addCString('select * from boom').addInt16(0).join(true, 'P')
       assert.deepEqual(actual, expected)
     })
 
@@ -74,7 +74,7 @@
         text: 'select * from bang where name = $1',
         types: [1, 2, 3, 4],
       })
-      var expected = new BufferList()
+      const expected = new BufferList()
         .addCString('force')
         .addCString('select * from bang where name = $1')
         .addInt16(4)
@@ -91,11 +91,12 @@
     it('with no values', function () {
       const actual = serialize.bind()
 
-      var expectedBuffer = new BufferList()
+      const expectedBuffer = new BufferList()
         .addCString('')
         .addCString('')
         .addInt16(0)
         .addInt16(0)
+        .addInt16(1)
         .addInt16(0)
         .join(true, 'B')
       assert.deepEqual(actual, expectedBuffer)
@@ -107,7 +108,7 @@
         statement: 'woo',
         values: ['1', 'hi', null, 'zing'],
       })
-      var expectedBuffer = new BufferList()
+      const expectedBuffer = new BufferList()
         .addCString('bang') // portal name
         .addCString('woo') // statement name
         .addInt16(4)
@@ -123,6 +124,7 @@
         .addInt32(-1)
         .addInt32(4)
         .add(Buffer.from('zing'))
+        .addInt16(1)
         .addInt16(0)
         .join(true, 'B')
       assert.deepEqual(actual, expectedBuffer)
@@ -136,7 +138,7 @@
       values: ['1', 'hi', null, 'zing'],
       valueMapper: () => null,
     })
-    var expectedBuffer = new BufferList()
+    const expectedBuffer = new BufferList()
       .addCString('bang') // portal name
       .addCString('woo') // statement name
       .addInt16(4)
@@ -149,6 +151,7 @@
       .addInt32(-1)
       .addInt32(-1)
       .addInt32(-1)
+      .addInt16(1)
       .addInt16(0)
       .join(true, 'B')
     assert.deepEqual(actual, expectedBuffer)
@@ -160,7 +163,7 @@
       statement: 'woo',
       values: ['1', 'hi', null, Buffer.from('zing', 'utf8')],
     })
-    var expectedBuffer = new BufferList()
+    const expectedBuffer = new BufferList()
       .addCString('bang') // portal name
       .addCString('woo') // statement name
       .addInt16(4) // value count
@@ -176,6 +179,7 @@
       .addInt32(-1)
       .addInt32(4)
       .add(Buffer.from('zing', 'utf-8'))
+      .addInt16(1)
       .addInt16(0)
       .join(true, 'B')
     assert.deepEqual(actual, expectedBuffer)
@@ -184,7 +188,7 @@
   describe('builds execute message', function () {
     it('for unamed portal with no row limit', function () {
       const actual = serialize.execute()
-      var expectedBuffer = new BufferList().addCString('').addInt32(0).join(true, 'E')
+      const expectedBuffer = new BufferList().addCString('').addInt32(0).join(true, 'E')
       assert.deepEqual(actual, expectedBuffer)
     })
 
@@ -193,39 +197,39 @@
         portal: 'my favorite portal',
         rows: 100,
       })
-      var expectedBuffer = new BufferList().addCString('my favorite portal').addInt32(100).join(true, 'E')
+      const expectedBuffer = new BufferList().addCString('my favorite portal').addInt32(100).join(true, 'E')
       assert.deepEqual(actual, expectedBuffer)
     })
   })
 
   it('builds flush command', function () {
     const actual = serialize.flush()
-    var expected = new BufferList().join(true, 'H')
+    const expected = new BufferList().join(true, 'H')
     assert.deepEqual(actual, expected)
   })
 
   it('builds sync command', function () {
     const actual = serialize.sync()
-    var expected = new BufferList().join(true, 'S')
+    const expected = new BufferList().join(true, 'S')
     assert.deepEqual(actual, expected)
   })
 
   it('builds end command', function () {
     const actual = serialize.end()
-    var expected = Buffer.from([0x58, 0, 0, 0, 4])
+    const expected = Buffer.from([0x58, 0, 0, 0, 4])
     assert.deepEqual(actual, expected)
   })
 
   describe('builds describe command', function () {
     it('describe statement', function () {
       const actual = serialize.describe({ type: 'S', name: 'bang' })
-      var expected = new BufferList().addChar('S').addCString('bang').join(true, 'D')
+      const expected = new BufferList().addChar('S').addCString('bang').join(true, 'D')
       assert.deepEqual(actual, expected)
     })
 
     it('describe unnamed portal', function () {
       const actual = serialize.describe({ type: 'P' })
-      var expected = new BufferList().addChar('P').addCString('').join(true, 'D')
+      const expected = new BufferList().addChar('P').addCString('').join(true, 'D')
       assert.deepEqual(actual, expected)
     })
   })
@@ -233,13 +237,13 @@
   describe('builds close command', function () {
     it('describe statement', function () {
       const actual = serialize.close({ type: 'S', name: 'bang' })
-      var expected = new BufferList().addChar('S').addCString('bang').join(true, 'C')
+      const expected = new BufferList().addChar('S').addCString('bang').join(true, 'C')
       assert.deepEqual(actual, expected)
     })
 
     it('describe unnamed portal', function () {
       const actual = serialize.close({ type: 'P' })
-      var expected = new BufferList().addChar('P').addCString('').join(true, 'C')
+      const expected = new BufferList().addChar('P').addCString('').join(true, 'C')
       assert.deepEqual(actual, expected)
     })
   })
Index: node_modules/postgresql-client/typings/data-type-map.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-type-map.d.ts b/node_modules/postgresql-client/typings/data-type-map.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-type-map.d.ts	
+++ /dev/null	
@@ -1,11 +0,0 @@
-import { DataType } from './interfaces/data-type.js';
-import { OID } from './types.js';
-export declare class DataTypeMap {
-    private _itemsByOID;
-    private _items;
-    constructor(other?: DataTypeMap);
-    get(oid: OID): DataType;
-    register(dataTypes: DataType | DataType[]): void;
-    determine(value: any): OID;
-}
-export declare const GlobalTypeMap: DataTypeMap;
Index: node_modules/postgresql-client/esm/data-types/float4-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/float4-type.js b/node_modules/postgresql-client/esm/data-types/float4-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/float4-type.js	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-export const Float4Type = {
-    name: 'float4',
-    oid: DataTypeOIDs.float4,
-    jsType: 'number',
-    parseBinary(v) {
-        return Math.round((v.readFloatBE(0) + Number.EPSILON) * 100) / 100;
-    },
-    encodeBinary(buf, v) {
-        buf.writeFloatBE(typeof v === 'number' ? v : parseFloat(v));
-    },
-    parseText: parseFloat,
-    isType(v) {
-        return typeof v === 'number';
-    },
-};
-export const ArrayFloat4Type = {
-    ...Float4Type,
-    name: '_float4',
-    oid: DataTypeOIDs._float4,
-    elementsOID: DataTypeOIDs.float4,
-};
Index: node_modules/postgresql-client/esm/data-types/int2-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/int2-type.js b/node_modules/postgresql-client/esm/data-types/int2-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/int2-type.js	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-import { fastParseInt } from '../util/fast-parseint.js';
-export const Int2Type = {
-    name: 'int2',
-    oid: DataTypeOIDs.int2,
-    jsType: 'number',
-    parseBinary(v) {
-        return v.readInt16BE(0);
-    },
-    encodeBinary(buf, v) {
-        buf.writeInt16BE(fastParseInt(v));
-    },
-    parseText: fastParseInt,
-    isType(v) {
-        return typeof v === 'number' && Number.isInteger(v) && v >= -32768 && v <= 32767;
-    },
-};
-export const ArrayInt2Type = {
-    ...Int2Type,
-    name: '_int2',
-    oid: DataTypeOIDs._int2,
-    elementsOID: DataTypeOIDs.int2,
-};
Index: node_modules/strict-typed-events/typings/typed-events.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/strict-typed-events/typings/typed-events.d.ts b/node_modules/strict-typed-events/typings/typed-events.d.ts
deleted file mode 100644
--- a/node_modules/strict-typed-events/typings/typed-events.d.ts	
+++ /dev/null	
@@ -1,45 +0,0 @@
-import type { FunctionKeys, Type } from 'ts-gems';
-export type Listener<TArgs extends any[] = any[]> = (...args: TArgs) => any;
-export declare function TypedEventEmitterClass<TEventRecord, TEmitRecord = TEventRecord, TEmitter = any>(emitter: TEmitter): Type<TypedEventEmitter<TEmitter, TEventRecord, TEmitRecord>>;
-export type TypedEventEmitter<TEmitter, TEventRecord, TEmitRecord = TEventRecord> = _TypedEventEmitter<TEmitter, TEventRecord, TEmitRecord>;
-type _TypedEventEmitter<TEmitter, TEventRecord, TEmitRecord, TEventEmitterOverride = _EventEmitterOverride<TEventRecord, TEmitRecord>, TKeysToOverride extends keyof TEventEmitterOverride = Extract<keyof TEventEmitterOverride, keyof TEmitter>> = Pick<TEmitter, Exclude<keyof TEmitter, TKeysToOverride>> & Pick<TEventEmitterOverride, TKeysToOverride>;
-type _ListenerParameters<T> = [T] extends [(...args: infer U) => any] ? U : [T] extends [void] ? [] : [T];
-declare const _assignmentCompatibilityHack: unique symbol;
-type _EventEmitterOverride<TEventRecord, TEmitRecord = TEventRecord, TEventRecordKeys extends keyof TEventRecord = Extract<keyof TEventRecord, FunctionKeys<TEventRecord>>, TEmitRecordKeys extends keyof TEmitRecord = Extract<keyof TEmitRecord, FunctionKeys<TEmitRecord>>> = {
-    addListener<P extends TEventRecordKeys, TThis>(this: TThis, event: P, listener: Listener<_ListenerParameters<TEventRecord[P]>>): TThis;
-    addListener(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    addEventListener<P extends TEventRecordKeys, TThis>(this: TThis, event: P, listener: Listener<_ListenerParameters<TEventRecord[P]>>): TThis;
-    addEventListener(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    emit<P extends TEmitRecordKeys, TThis>(this: TThis, event: P, ...args: _ListenerParameters<TEmitRecord[P]>): boolean;
-    emit(event: typeof _assignmentCompatibilityHack, ...args: any[]): void;
-    emitAsync<P extends TEmitRecordKeys, TThis>(this: TThis, event: P, ...args: _ListenerParameters<TEmitRecord[P]>): Promise<boolean>;
-    emitAsync(event: typeof _assignmentCompatibilityHack, ...args: any[]): Promise<void>;
-    emitAsyncSerial<P extends TEmitRecordKeys, TThis>(this: TThis, event: P, ...args: _ListenerParameters<TEmitRecord[P]>): Promise<boolean>;
-    emitAsyncSerial(event: typeof _assignmentCompatibilityHack, ...args: any[]): Promise<void>;
-    on<P extends TEventRecordKeys, TThis>(this: TThis, event: P, listener: Listener<_ListenerParameters<TEventRecord[P]>>): TThis;
-    on(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    once<P extends TEventRecordKeys, TThis>(this: TThis, event: P, listener: Listener<_ListenerParameters<TEventRecord[P]>>): TThis;
-    once(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    removeListener<TThis>(this: TThis, event: TEventRecordKeys, listener: Listener): TThis;
-    removeListener(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    removeEventListener<TThis>(this: TThis, event: TEventRecordKeys, listener: Listener): TThis;
-    removeEventListener(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    off<TThis>(this: TThis, event: TEventRecordKeys, listener: Listener): TThis;
-    off(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    removeAllListeners<TThis>(this: TThis, event: TEventRecordKeys): TThis;
-    removeAllListeners(event: typeof _assignmentCompatibilityHack): void;
-    prependListener<TThis>(this: TThis, event: TEventRecordKeys, listener: Listener): TThis;
-    prependListener(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    prependOnceListener<TThis>(this: TThis, event: TEventRecordKeys, listener: Listener): TThis;
-    prependOnceListener(event: typeof _assignmentCompatibilityHack, listener: Listener): void;
-    eventNames(): string[];
-    listeners<P extends TEventRecordKeys>(event: P): TEventRecord[P][];
-    listeners(event: typeof _assignmentCompatibilityHack): void;
-    rawListeners<P extends TEventRecordKeys>(event: P): TEventRecord[P][];
-    rawListeners(event: typeof _assignmentCompatibilityHack): void;
-    listenerCount(event: TEventRecordKeys): number;
-    listenerCount(event: typeof _assignmentCompatibilityHack): void;
-    getMaxListeners(): number;
-    setMaxListeners<TThis>(this: TThis, n: number): TThis;
-};
-export {};
Index: node_modules/side-channel/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/side-channel/index.js b/node_modules/side-channel/index.js
--- a/node_modules/side-channel/index.js	
+++ b/node_modules/side-channel/index.js	
@@ -1,129 +1,43 @@
 'use strict';
 
-var GetIntrinsic = require('get-intrinsic');
-var callBound = require('call-bind/callBound');
-var inspect = require('object-inspect');
-
 var $TypeError = require('es-errors/type');
-var $WeakMap = GetIntrinsic('%WeakMap%', true);
-var $Map = GetIntrinsic('%Map%', true);
-
-var $weakMapGet = callBound('WeakMap.prototype.get', true);
-var $weakMapSet = callBound('WeakMap.prototype.set', true);
-var $weakMapHas = callBound('WeakMap.prototype.has', true);
-var $mapGet = callBound('Map.prototype.get', true);
-var $mapSet = callBound('Map.prototype.set', true);
-var $mapHas = callBound('Map.prototype.has', true);
+var inspect = require('object-inspect');
+var getSideChannelList = require('side-channel-list');
+var getSideChannelMap = require('side-channel-map');
+var getSideChannelWeakMap = require('side-channel-weakmap');
 
-/*
-* This function traverses the list returning the node corresponding to the given key.
-*
-* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
-*/
-/** @type {import('.').listGetNode} */
-var listGetNode = function (list, key) { // eslint-disable-line consistent-return
-	/** @type {typeof list | NonNullable<(typeof list)['next']>} */
-	var prev = list;
-	/** @type {(typeof list)['next']} */
-	var curr;
-	for (; (curr = prev.next) !== null; prev = curr) {
-		if (curr.key === key) {
-			prev.next = curr.next;
-			// eslint-disable-next-line no-extra-parens
-			curr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);
-			list.next = curr; // eslint-disable-line no-param-reassign
-			return curr;
-		}
-	}
-};
-
-/** @type {import('.').listGet} */
-var listGet = function (objects, key) {
-	var node = listGetNode(objects, key);
-	return node && node.value;
-};
-/** @type {import('.').listSet} */
-var listSet = function (objects, key, value) {
-	var node = listGetNode(objects, key);
-	if (node) {
-		node.value = value;
-	} else {
-		// Prepend the new node to the beginning of the list
-		objects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens
-			key: key,
-			next: objects.next,
-			value: value
-		});
-	}
-};
-/** @type {import('.').listHas} */
-var listHas = function (objects, key) {
-	return !!listGetNode(objects, key);
-};
+var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;
 
 /** @type {import('.')} */
 module.exports = function getSideChannel() {
-	/** @type {WeakMap<object, unknown>} */ var $wm;
-	/** @type {Map<object, unknown>} */ var $m;
-	/** @type {import('.').RootNode<unknown>} */ var $o;
+	/** @typedef {ReturnType<typeof getSideChannel>} Channel */
 
-	/** @type {import('.').Channel} */
+	/** @type {Channel | undefined} */ var $channelData;
+
+	/** @type {Channel} */
 	var channel = {
 		assert: function (key) {
 			if (!channel.has(key)) {
 				throw new $TypeError('Side channel does not contain ' + inspect(key));
 			}
 		},
-		get: function (key) { // eslint-disable-line consistent-return
-			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
-				if ($wm) {
-					return $weakMapGet($wm, key);
-				}
-			} else if ($Map) {
-				if ($m) {
-					return $mapGet($m, key);
-				}
-			} else {
-				if ($o) { // eslint-disable-line no-lonely-if
-					return listGet($o, key);
-				}
-			}
+		'delete': function (key) {
+			return !!$channelData && $channelData['delete'](key);
+		},
+		get: function (key) {
+			return $channelData && $channelData.get(key);
 		},
 		has: function (key) {
-			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
-				if ($wm) {
-					return $weakMapHas($wm, key);
-				}
-			} else if ($Map) {
-				if ($m) {
-					return $mapHas($m, key);
-				}
-			} else {
-				if ($o) { // eslint-disable-line no-lonely-if
-					return listHas($o, key);
-				}
-			}
-			return false;
+			return !!$channelData && $channelData.has(key);
 		},
 		set: function (key, value) {
-			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
-				if (!$wm) {
-					$wm = new $WeakMap();
-				}
-				$weakMapSet($wm, key, value);
-			} else if ($Map) {
-				if (!$m) {
-					$m = new $Map();
-				}
-				$mapSet($m, key, value);
-			} else {
-				if (!$o) {
-					// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
-					$o = { key: {}, next: null };
-				}
-				listSet($o, key, value);
+			if (!$channelData) {
+				$channelData = makeChannel();
 			}
+
+			$channelData.set(key, value);
 		}
 	};
+	// @ts-expect-error TODO: figure out why this is erroring
 	return channel;
 };
Index: node_modules/pg-protocol/src/inbound-parser.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/inbound-parser.test.ts b/node_modules/pg-protocol/src/inbound-parser.test.ts
--- a/node_modules/pg-protocol/src/inbound-parser.test.ts	
+++ b/node_modules/pg-protocol/src/inbound-parser.test.ts	
@@ -5,27 +5,16 @@
 import { PassThrough } from 'stream'
 import { BackendMessage } from './messages'
 
-var authOkBuffer = buffers.authenticationOk()
-var paramStatusBuffer = buffers.parameterStatus('client_encoding', 'UTF8')
-var readyForQueryBuffer = buffers.readyForQuery()
-var backendKeyDataBuffer = buffers.backendKeyData(1, 2)
-var commandCompleteBuffer = buffers.commandComplete('SELECT 3')
-var parseCompleteBuffer = buffers.parseComplete()
-var bindCompleteBuffer = buffers.bindComplete()
-var portalSuspendedBuffer = buffers.portalSuspended()
+const authOkBuffer = buffers.authenticationOk()
+const paramStatusBuffer = buffers.parameterStatus('client_encoding', 'UTF8')
+const readyForQueryBuffer = buffers.readyForQuery()
+const backendKeyDataBuffer = buffers.backendKeyData(1, 2)
+const commandCompleteBuffer = buffers.commandComplete('SELECT 3')
+const parseCompleteBuffer = buffers.parseComplete()
+const bindCompleteBuffer = buffers.bindComplete()
+const portalSuspendedBuffer = buffers.portalSuspended()
 
-var addRow = function (bufferList: BufferList, name: string, offset: number) {
-  return bufferList
-    .addCString(name) // field name
-    .addInt32(offset++) // table id
-    .addInt16(offset++) // attribute of column number
-    .addInt32(offset++) // objectId of field's data type
-    .addInt16(offset++) // datatype size
-    .addInt32(offset++) // type modifier
-    .addInt16(0) // format code, 0 => text
-}
-
-var row1 = {
+const row1 = {
   name: 'id',
   tableID: 1,
   attributeNumber: 2,
@@ -34,10 +23,10 @@
   typeModifier: 5,
   formatCode: 0,
 }
-var oneRowDescBuff = buffers.rowDescription([row1])
+const oneRowDescBuff = buffers.rowDescription([row1])
 row1.name = 'bang'
 
-var twoRowBuf = buffers.rowDescription([
+const twoRowBuf = buffers.rowDescription([
   row1,
   {
     name: 'whoah',
@@ -50,58 +39,61 @@
   },
 ])
 
-var emptyRowFieldBuf = new BufferList().addInt16(0).join(true, 'D')
+const rowWithBigOids = {
+  name: 'bigoid',
+  tableID: 3000000001,
+  attributeNumber: 2,
+  dataTypeID: 3000000003,
+  dataTypeSize: 4,
+  typeModifier: 5,
+  formatCode: 0,
+}
+const bigOidDescBuff = buffers.rowDescription([rowWithBigOids])
 
-var emptyRowFieldBuf = buffers.dataRow([])
+const emptyRowFieldBuf = buffers.dataRow([])
 
-var oneFieldBuf = new BufferList()
-  .addInt16(1) // number of fields
-  .addInt32(5) // length of bytes of fields
-  .addCString('test')
-  .join(true, 'D')
+const oneFieldBuf = buffers.dataRow(['test'])
 
-var oneFieldBuf = buffers.dataRow(['test'])
-
-var expectedAuthenticationOkayMessage = {
+const expectedAuthenticationOkayMessage = {
   name: 'authenticationOk',
   length: 8,
 }
 
-var expectedParameterStatusMessage = {
+const expectedParameterStatusMessage = {
   name: 'parameterStatus',
   parameterName: 'client_encoding',
   parameterValue: 'UTF8',
   length: 25,
 }
 
-var expectedBackendKeyDataMessage = {
+const expectedBackendKeyDataMessage = {
   name: 'backendKeyData',
   processID: 1,
   secretKey: 2,
 }
 
-var expectedReadyForQueryMessage = {
+const expectedReadyForQueryMessage = {
   name: 'readyForQuery',
   length: 5,
   status: 'I',
 }
 
-var expectedCommandCompleteMessage = {
+const expectedCommandCompleteMessage = {
   name: 'commandComplete',
   length: 13,
   text: 'SELECT 3',
 }
-var emptyRowDescriptionBuffer = new BufferList()
+const emptyRowDescriptionBuffer = new BufferList()
   .addInt16(0) // number of fields
   .join(true, 'T')
 
-var expectedEmptyRowDescriptionMessage = {
+const expectedEmptyRowDescriptionMessage = {
   name: 'rowDescription',
   length: 6,
   fieldCount: 0,
   fields: [],
 }
-var expectedOneRowMessage = {
+const expectedOneRowMessage = {
   name: 'rowDescription',
   length: 27,
   fieldCount: 1,
@@ -118,7 +110,7 @@
   ],
 }
 
-var expectedTwoRowMessage = {
+const expectedTwoRowMessage = {
   name: 'rowDescription',
   length: 53,
   fieldCount: 2,
@@ -143,38 +135,54 @@
     },
   ],
 }
+const expectedBigOidMessage = {
+  name: 'rowDescription',
+  length: 31,
+  fieldCount: 1,
+  fields: [
+    {
+      name: 'bigoid',
+      tableID: 3000000001,
+      columnID: 2,
+      dataTypeID: 3000000003,
+      dataTypeSize: 4,
+      dataTypeModifier: 5,
+      format: 'text',
+    },
+  ],
+}
 
-var emptyParameterDescriptionBuffer = new BufferList()
+const emptyParameterDescriptionBuffer = new BufferList()
   .addInt16(0) // number of parameters
   .join(true, 't')
 
-var oneParameterDescBuf = buffers.parameterDescription([1111])
+const oneParameterDescBuf = buffers.parameterDescription([1111])
 
-var twoParameterDescBuf = buffers.parameterDescription([2222, 3333])
+const twoParameterDescBuf = buffers.parameterDescription([2222, 3333])
 
-var expectedEmptyParameterDescriptionMessage = {
+const expectedEmptyParameterDescriptionMessage = {
   name: 'parameterDescription',
   length: 6,
   parameterCount: 0,
   dataTypeIDs: [],
 }
 
-var expectedOneParameterMessage = {
+const expectedOneParameterMessage = {
   name: 'parameterDescription',
   length: 10,
   parameterCount: 1,
   dataTypeIDs: [1111],
 }
 
-var expectedTwoParameterMessage = {
+const expectedTwoParameterMessage = {
   name: 'parameterDescription',
   length: 14,
   parameterCount: 2,
   dataTypeIDs: [2222, 3333],
 }
 
-var testForMessage = function (buffer: Buffer, expectedMessage: any) {
-  it('recieves and parses ' + expectedMessage.name, async () => {
+const testForMessage = function (buffer: Buffer, expectedMessage: any) {
+  it('receives and parses ' + expectedMessage.name, async () => {
     const messages = await parseBuffers([buffer])
     const [lastMessage] = messages
 
@@ -184,38 +192,38 @@
   })
 }
 
-var plainPasswordBuffer = buffers.authenticationCleartextPassword()
-var md5PasswordBuffer = buffers.authenticationMD5Password()
-var SASLBuffer = buffers.authenticationSASL()
-var SASLContinueBuffer = buffers.authenticationSASLContinue()
-var SASLFinalBuffer = buffers.authenticationSASLFinal()
+const plainPasswordBuffer = buffers.authenticationCleartextPassword()
+const md5PasswordBuffer = buffers.authenticationMD5Password()
+const SASLBuffer = buffers.authenticationSASL()
+const SASLContinueBuffer = buffers.authenticationSASLContinue()
+const SASLFinalBuffer = buffers.authenticationSASLFinal()
 
-var expectedPlainPasswordMessage = {
+const expectedPlainPasswordMessage = {
   name: 'authenticationCleartextPassword',
 }
 
-var expectedMD5PasswordMessage = {
+const expectedMD5PasswordMessage = {
   name: 'authenticationMD5Password',
   salt: Buffer.from([1, 2, 3, 4]),
 }
 
-var expectedSASLMessage = {
+const expectedSASLMessage = {
   name: 'authenticationSASL',
   mechanisms: ['SCRAM-SHA-256'],
 }
 
-var expectedSASLContinueMessage = {
+const expectedSASLContinueMessage = {
   name: 'authenticationSASLContinue',
   data: 'data',
 }
 
-var expectedSASLFinalMessage = {
+const expectedSASLFinalMessage = {
   name: 'authenticationSASLFinal',
   data: 'data',
 }
 
-var notificationResponseBuffer = buffers.notification(4, 'hi', 'boom')
-var expectedNotificationResponseMessage = {
+const notificationResponseBuffer = buffers.notification(4, 'hi', 'boom')
+const expectedNotificationResponseMessage = {
   name: 'notification',
   processId: 4,
   channel: 'hi',
@@ -272,6 +280,7 @@
     testForMessage(emptyRowDescriptionBuffer, expectedEmptyRowDescriptionMessage)
     testForMessage(oneRowDescBuff, expectedOneRowMessage)
     testForMessage(twoRowBuf, expectedTwoRowMessage)
+    testForMessage(bigOidDescBuff, expectedBigOidMessage)
   })
 
   describe('parameterDescription messages', function () {
@@ -299,7 +308,7 @@
 
   describe('notice message', function () {
     // this uses the same logic as error message
-    var buff = buffers.notice([{ type: 'C', value: 'code' }])
+    const buff = buffers.notice([{ type: 'C', value: 'code' }])
     testForMessage(buff, {
       name: 'notice',
       code: 'code',
@@ -311,7 +320,7 @@
   })
 
   describe('with all the fields', function () {
-    var buffer = buffers.error([
+    const buffer = buffers.error([
       {
         type: 'S',
         value: 'ERROR',
@@ -457,7 +466,7 @@
   // tcp packets anywhere, we need to make sure we can parse every single
   // split on a tcp message
   describe('split buffer, single message parsing', function () {
-    var fullBuffer = buffers.dataRow([null, 'bang', 'zug zug', null, '!'])
+    const fullBuffer = buffers.dataRow([null, 'bang', 'zug zug', null, '!'])
 
     it('parses when full buffer comes in', async function () {
       const messages = await parseBuffers([fullBuffer])
@@ -470,12 +479,12 @@
       assert.equal(message.fields[4], '!')
     })
 
-    var testMessageRecievedAfterSpiltAt = async function (split: number) {
-      var firstBuffer = Buffer.alloc(fullBuffer.length - split)
-      var secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length)
+    const testMessageReceivedAfterSplitAt = async function (split: number) {
+      const firstBuffer = Buffer.alloc(fullBuffer.length - split)
+      const secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length)
       fullBuffer.copy(firstBuffer, 0, 0)
       fullBuffer.copy(secondBuffer, 0, firstBuffer.length)
-      const messages = await parseBuffers([fullBuffer])
+      const messages = await parseBuffers([firstBuffer, secondBuffer])
       const message = messages[0] as any
       assert.equal(message.fields.length, 5)
       assert.equal(message.fields[0], null)
@@ -486,28 +495,30 @@
     }
 
     it('parses when split in the middle', function () {
-      testMessageRecievedAfterSpiltAt(6)
+      return testMessageReceivedAfterSplitAt(6)
     })
 
     it('parses when split at end', function () {
-      testMessageRecievedAfterSpiltAt(2)
+      return testMessageReceivedAfterSplitAt(2)
     })
 
     it('parses when split at beginning', function () {
-      testMessageRecievedAfterSpiltAt(fullBuffer.length - 2)
-      testMessageRecievedAfterSpiltAt(fullBuffer.length - 1)
-      testMessageRecievedAfterSpiltAt(fullBuffer.length - 5)
+      return Promise.all([
+        testMessageReceivedAfterSplitAt(fullBuffer.length - 2),
+        testMessageReceivedAfterSplitAt(fullBuffer.length - 1),
+        testMessageReceivedAfterSplitAt(fullBuffer.length - 5),
+      ])
     })
   })
 
   describe('split buffer, multiple message parsing', function () {
-    var dataRowBuffer = buffers.dataRow(['!'])
-    var readyForQueryBuffer = buffers.readyForQuery()
-    var fullBuffer = Buffer.alloc(dataRowBuffer.length + readyForQueryBuffer.length)
+    const dataRowBuffer = buffers.dataRow(['!'])
+    const readyForQueryBuffer = buffers.readyForQuery()
+    const fullBuffer = Buffer.alloc(dataRowBuffer.length + readyForQueryBuffer.length)
     dataRowBuffer.copy(fullBuffer, 0, 0)
     readyForQueryBuffer.copy(fullBuffer, dataRowBuffer.length, 0)
 
-    var verifyMessages = function (messages: any[]) {
+    const verifyMessages = function (messages: any[]) {
       assert.strictEqual(messages.length, 2)
       assert.deepEqual(messages[0], {
         name: 'dataRow',
@@ -523,21 +534,21 @@
       })
     }
     // sanity check
-    it('recieves both messages when packet is not split', async function () {
+    it('receives both messages when packet is not split', async function () {
       const messages = await parseBuffers([fullBuffer])
       verifyMessages(messages)
     })
 
-    var splitAndVerifyTwoMessages = async function (split: number) {
-      var firstBuffer = Buffer.alloc(fullBuffer.length - split)
-      var secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length)
+    const splitAndVerifyTwoMessages = async function (split: number) {
+      const firstBuffer = Buffer.alloc(fullBuffer.length - split)
+      const secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length)
       fullBuffer.copy(firstBuffer, 0, 0)
       fullBuffer.copy(secondBuffer, 0, firstBuffer.length)
       const messages = await parseBuffers([firstBuffer, secondBuffer])
       verifyMessages(messages)
     }
 
-    describe('recieves both messages when packet is split', function () {
+    describe('receives both messages when packet is split', function () {
       it('in the middle', function () {
         return splitAndVerifyTwoMessages(11)
       })
Index: node_modules/has-proto/.eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/has-proto/.eslintrc b/node_modules/has-proto/.eslintrc
deleted file mode 100644
--- a/node_modules/has-proto/.eslintrc	
+++ /dev/null	
@@ -1,5 +0,0 @@
-{
-	"root": true,
-
-	"extends": "@ljharb",
-}
Index: node_modules/abbrev/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/abbrev/README.md b/node_modules/abbrev/README.md
deleted file mode 100644
--- a/node_modules/abbrev/README.md	
+++ /dev/null	
@@ -1,23 +0,0 @@
-# abbrev-js
-
-Just like [ruby's Abbrev](http://apidock.com/ruby/Abbrev).
-
-Usage:
-
-    var abbrev = require("abbrev");
-    abbrev("foo", "fool", "folding", "flop");
-    
-    // returns:
-    { fl: 'flop'
-    , flo: 'flop'
-    , flop: 'flop'
-    , fol: 'folding'
-    , fold: 'folding'
-    , foldi: 'folding'
-    , foldin: 'folding'
-    , folding: 'folding'
-    , foo: 'foo'
-    , fool: 'fool'
-    }
-
-This is handy for command-line scripts, or other cases where you want to be able to accept shorthands.
Index: node_modules/postgresql-client/cjs/protocol/frontend.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/protocol/frontend.js b/node_modules/postgresql-client/cjs/protocol/frontend.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/protocol/frontend.js	
+++ /dev/null	
@@ -1,218 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Frontend = void 0;
-const constants_js_1 = require("../constants.js");
-const encode_binaryarray_js_1 = require("../util/encode-binaryarray.js");
-const stringify_arrayliteral_js_1 = require("../util/stringify-arrayliteral.js");
-const protocol_js_1 = require("./protocol.js");
-const smart_buffer_js_1 = require("./smart-buffer.js");
-const DataFormat = protocol_js_1.Protocol.DataFormat;
-const StaticFlushBuffer = Buffer.from([protocol_js_1.Protocol.FrontendMessageCode.Flush, 0x00, 0x00, 0x00, 0x04]);
-const StaticTerminateBuffer = Buffer.from([protocol_js_1.Protocol.FrontendMessageCode.Terminate, 0x00, 0x00, 0x00, 0x04]);
-const StaticSyncBuffer = Buffer.from([protocol_js_1.Protocol.FrontendMessageCode.Sync, 0x00, 0x00, 0x00, 0x04]);
-class Frontend {
-    constructor(options) {
-        this._io = new smart_buffer_js_1.SmartBuffer(options?.buffer);
-    }
-    getSSLRequestMessage() {
-        return this._io
-            .start()
-            .writeUInt32BE(8) // Length of message contents in bytes, including self.
-            .writeUInt16BE(1234)
-            .writeUInt16BE(5679)
-            .flush();
-    }
-    getStartupMessage(args) {
-        const io = this._io
-            .start()
-            .writeInt32BE(0) // Preserve length
-            .writeInt16BE(protocol_js_1.Protocol.VERSION_MAJOR)
-            .writeInt16BE(protocol_js_1.Protocol.VERSION_MINOR);
-        for (const [k, v] of Object.entries(args)) {
-            if (k !== 'client_encoding')
-                io.writeCString(k, 'utf8').writeCString(v, 'utf8');
-        }
-        io.writeCString('client_encoding', 'utf8').writeCString('UTF8', 'utf8').writeUInt8(0);
-        return setLengthAndFlush(io, 0);
-    }
-    getPasswordMessage(password) {
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.PasswordMessage)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(password, 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getSASLMessage(sasl) {
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.PasswordMessage)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(sasl.mechanism, 'utf8')
-            .writeLString(sasl.clientFirstMessage);
-        return setLengthAndFlush(io, 1);
-    }
-    getSASLFinalMessage(session) {
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.PasswordMessage)
-            .writeInt32BE(0) // Preserve header
-            .writeString(session.clientFinalMessage);
-        return setLengthAndFlush(io, 1);
-    }
-    getParseMessage(args) {
-        if (args.statement && args.statement.length > 63)
-            throw new Error('Query name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.Parse)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(args.statement || '', 'utf8')
-            .writeCString(args.sql, 'utf8')
-            .writeUInt16BE(args.paramTypes ? args.paramTypes.length : 0);
-        if (args.paramTypes) {
-            for (const t of args.paramTypes) {
-                io.writeUInt32BE(t || 0);
-            }
-        }
-        return setLengthAndFlush(io, 1);
-    }
-    getBindMessage(args) {
-        if (args.portal && args.portal.length > 63)
-            throw new Error('Portal name length must be lower than 63');
-        if (args.statement && args.statement.length > 63)
-            throw new Error('Query name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.Bind)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(args.portal || '', 'utf8')
-            .writeCString(args.statement || '', 'utf8');
-        const { params, paramTypes, queryOptions } = args;
-        const columnFormat = queryOptions.columnFormat != null ? queryOptions.columnFormat : constants_js_1.DEFAULT_COLUMN_FORMAT;
-        if (params && params.length) {
-            io.writeInt16BE(params.length);
-            const formatOffset = io.offset;
-            for (let i = 0; i < params.length; i++) {
-                io.writeInt16BE(0); // Preserve
-            }
-            // Write parameter values
-            io.writeUInt16BE(params.length);
-            for (let i = 0; i < params?.length; i++) {
-                let v = params[i];
-                if (v == null) {
-                    io.writeInt32BE(-1);
-                    continue;
-                }
-                const dataTypeOid = paramTypes ? paramTypes[i] : undefined;
-                const dt = dataTypeOid ? args.typeMap.get(dataTypeOid) : undefined;
-                if (dt) {
-                    if (typeof dt.encodeBinary === 'function') {
-                        // Set param format to binary
-                        io.buffer.writeInt16BE(protocol_js_1.Protocol.DataFormat.binary, formatOffset + i * 2);
-                        // Preserve data length
-                        io.writeInt32BE(0);
-                        const dataOffset = io.offset;
-                        if (dt.elementsOID) {
-                            // If data type is array
-                            v = Array.isArray(v) ? v : [v];
-                            (0, encode_binaryarray_js_1.encodeBinaryArray)(io, v, dt.elementsOID, queryOptions, dt.encodeBinary, dt.encodeCalculateDim);
-                        }
-                        else {
-                            dt.encodeBinary(io, v, queryOptions);
-                        }
-                        io.buffer.writeInt32BE(io.length - dataOffset, dataOffset - 4); // Update length
-                    }
-                    else if (typeof dt.encodeText === 'function') {
-                        v = dt.elementsOID ? (0, stringify_arrayliteral_js_1.stringifyArrayLiteral)(v, queryOptions, dt.encodeText) : dt.encodeText(v, queryOptions);
-                        io.writeLString(v, 'utf8');
-                    }
-                }
-                else if (Buffer.isBuffer(v)) {
-                    // Set param format to binary
-                    io.buffer.writeInt16BE(protocol_js_1.Protocol.DataFormat.binary, formatOffset + i * 2);
-                    // Preserve data length
-                    io.writeInt32BE(0);
-                    const dataOffset = io.offset;
-                    io.writeBuffer(v);
-                    io.buffer.writeInt32BE(io.length - dataOffset, dataOffset - 4); // Update length
-                }
-                else {
-                    io.writeLString('' + v, 'utf8');
-                }
-            }
-        }
-        else {
-            io.writeUInt16BE(0);
-            io.writeUInt16BE(0);
-        }
-        if (Array.isArray(columnFormat)) {
-            io.writeUInt16BE(columnFormat.length);
-            for (let i = 0; i < columnFormat.length; i++) {
-                io.writeUInt16BE(columnFormat[i]);
-            }
-        }
-        else if (columnFormat === DataFormat.binary) {
-            io.writeUInt16BE(1);
-            io.writeUInt16BE(DataFormat.binary);
-        }
-        else
-            io.writeUInt16BE(0);
-        return setLengthAndFlush(io, 1);
-    }
-    getDescribeMessage(args) {
-        if (args.name && args.name.length > 63)
-            throw new Error(args.type === 'P' ? 'Portal' : 'Statement' + 'name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.Describe)
-            .writeInt32BE(0) // Preserve header
-            .writeUInt8(args.type.charCodeAt(0))
-            .writeCString(args.name || '', 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getExecuteMessage(args) {
-        if (args.fetchCount && (args.fetchCount < 0 || args.fetchCount > 4294967295))
-            throw new Error('fetchCount can be between 0 and 4294967295');
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.Execute)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(args.portal || '', 'utf8')
-            .writeUInt32BE(args.fetchCount || 0);
-        return setLengthAndFlush(io, 1);
-    }
-    getCloseMessage(args) {
-        if (args.name && args.name.length > 63)
-            throw new Error(args.type === 'P' ? 'Portal' : 'Statement' + 'name length must be lower than 63');
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.Close)
-            .writeInt32BE(0) // Preserve header
-            .writeUInt8(args.type.charCodeAt(0))
-            .writeCString(args.name || '', 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getQueryMessage(sql) {
-        const io = this._io
-            .start()
-            .writeInt8(protocol_js_1.Protocol.FrontendMessageCode.Query)
-            .writeInt32BE(0) // Preserve header
-            .writeCString(sql || '', 'utf8');
-        return setLengthAndFlush(io, 1);
-    }
-    getFlushMessage() {
-        return StaticFlushBuffer;
-    }
-    getTerminateMessage() {
-        return StaticTerminateBuffer;
-    }
-    getSyncMessage() {
-        return StaticSyncBuffer;
-    }
-}
-exports.Frontend = Frontend;
-function setLengthAndFlush(io, lengthOffset) {
-    io.buffer.writeUInt32BE(io.length - lengthOffset, lengthOffset);
-    return io.flush();
-}
Index: node_modules/lightning-pool/cjs/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/lightning-pool/cjs/index.js b/node_modules/lightning-pool/cjs/index.js
--- a/node_modules/lightning-pool/cjs/index.js	
+++ b/node_modules/lightning-pool/cjs/index.js	
@@ -1,25 +1,12 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __exportStar = (this && this.__exportStar) || function(m, exports) {
-    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.createPool = void 0;
+exports.createPool = createPool;
+const tslib_1 = require("tslib");
 const pool_js_1 = require("./pool.js");
-__exportStar(require("./definitions.js"), exports);
-__exportStar(require("./pool.js"), exports);
-__exportStar(require("./abort-error.js"), exports);
+tslib_1.__exportStar(require("./abort-error.js"), exports);
+tslib_1.__exportStar(require("./constants.js"), exports);
+tslib_1.__exportStar(require("./pool.js"), exports);
+tslib_1.__exportStar(require("./types.js"), exports);
 function createPool(factory, config) {
     return new pool_js_1.Pool(factory, config);
 }
-exports.createPool = createPool;
Index: node_modules/postgresql-client/typings/data-types/int2-vector-type.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/data-types/int2-vector-type.d.ts b/node_modules/postgresql-client/typings/data-types/int2-vector-type.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/data-types/int2-vector-type.d.ts	
+++ /dev/null	
@@ -1,3 +0,0 @@
-import type { DataType } from '../interfaces/data-type.js';
-export declare const Int2VectorType: DataType;
-export declare const ArrayInt2VectorType: DataType;
Index: node_modules/semver/functions/neq.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/neq.js b/node_modules/semver/functions/neq.js
--- a/node_modules/semver/functions/neq.js	
+++ b/node_modules/semver/functions/neq.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const neq = (a, b, loose) => compare(a, b, loose) !== 0
 module.exports = neq
Index: node_modules/power-tasks/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/package.json b/node_modules/power-tasks/package.json
--- a/node_modules/power-tasks/package.json	
+++ b/node_modules/power-tasks/package.json	
@@ -1,9 +1,32 @@
 {
   "name": "power-tasks",
   "description": "Powerful task management for JavaScript",
-  "version": "1.7.3",
+  "version": "1.11.0",
   "author": "Panates",
   "license": "MIT",
+  "dependencies": {
+    "doublylinked": "^2.5.4",
+    "strict-typed-events": "^2.8.0",
+    "tslib": "^2.6.3"
+  },
+  "type": "module",
+  "exports": {
+    ".": {
+      "import": {
+        "types": "./types/index.d.ts",
+        "default": "./esm/index.js"
+      },
+      "require": {
+        "types": "./types/index.d.cts",
+        "default": "./cjs/index.js"
+      },
+      "default": "./esm/index.js"
+    },
+    "./package.json": "./package.json"
+  },
+  "main": "./cjs/index.js",
+  "module": "./esm/index.js",
+  "types": "./types/index.d.ts",
   "contributors": [
     "Eray Hanoglu <e.hanoglu@panates.com>"
   ],
@@ -11,21 +34,13 @@
     "type": "git",
     "url": "https://github.com/panates/power-tasks.git"
   },
-  "type": "module",
-  "main": "./cjs/index.js",
-  "module": "./esm/index.js",
-  "types": "./typings/index.d.ts",
-  "dependencies": {
-    "doublylinked": "^2.5.4",
-    "strict-typed-events": "^2.3.3"
-  },
   "engines": {
     "node": ">=16.0"
   },
   "files": [
     "cjs/",
     "esm/",
-    "typings/",
+    "types/",
     "LICENSE",
     "README.md",
     "CHANGELOG.md"
Index: node_modules/postgresql-client/typings/util/decode-binaryarray.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/typings/util/decode-binaryarray.d.ts b/node_modules/postgresql-client/typings/util/decode-binaryarray.d.ts
deleted file mode 100644
--- a/node_modules/postgresql-client/typings/util/decode-binaryarray.d.ts	
+++ /dev/null	
@@ -1,4 +0,0 @@
-/// <reference types="node" />
-import { DataMappingOptions } from '../interfaces/data-mapping-options.js';
-import type { DecodeBinaryFunction, Nullable } from '../types.js';
-export declare function decodeBinaryArray<T = any>(buf: Buffer, decoder: DecodeBinaryFunction, options?: DataMappingOptions): Nullable<T[]>;
Index: node_modules/power-tasks/typings/utils.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/typings/utils.d.ts b/node_modules/power-tasks/typings/utils.d.ts
deleted file mode 100644
--- a/node_modules/power-tasks/typings/utils.d.ts	
+++ /dev/null	
@@ -1,2 +0,0 @@
-export declare function plural(word: string, isPlural: boolean | number, pluralWord?: string): string;
-export declare function delay(t: number): Promise<unknown>;
Index: node_modules/semver/functions/gte.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/semver/functions/gte.js b/node_modules/semver/functions/gte.js
--- a/node_modules/semver/functions/gte.js	
+++ b/node_modules/semver/functions/gte.js	
@@ -1,3 +1,5 @@
+'use strict'
+
 const compare = require('./compare')
 const gte = (a, b, loose) => compare(a, b, loose) >= 0
 module.exports = gte
Index: node_modules/postgresql-client/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/README.md b/node_modules/postgresql-client/README.md
--- a/node_modules/postgresql-client/README.md	
+++ b/node_modules/postgresql-client/README.md	
@@ -1,3 +1,7 @@
+> Warning!!: The name of the package has been changed to `postgrejs`(https://www.npmjs.com/package/postgrejs)
+> and repository has been moved to (https://github.com/panates/postgrejs)
+> Please consider to update dependencies in your package.json
+
 ## postgresql-client
   
 [![NPM Version][npm-image]][npm-url]
@@ -176,7 +180,7 @@
 When you open an issue please provide version of NodeJS and PostgreSQL server.
 
 ## Node Compatibility
-- node >= 14.x
+- node >= 16.x
  
   
 ## License
Index: node_modules/fill-range/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/fill-range/index.js b/node_modules/fill-range/index.js
--- a/node_modules/fill-range/index.js	
+++ b/node_modules/fill-range/index.js	
@@ -60,7 +60,7 @@
   return negative ? ('-' + input) : input;
 };
 
-const toSequence = (parts, options) => {
+const toSequence = (parts, options, maxLen) => {
   parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
   parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
 
@@ -70,11 +70,11 @@
   let result;
 
   if (parts.positives.length) {
-    positives = parts.positives.join('|');
+    positives = parts.positives.map(v => toMaxLen(String(v), maxLen)).join('|');
   }
 
   if (parts.negatives.length) {
-    negatives = `-(${prefix}${parts.negatives.join('|')})`;
+    negatives = `-(${prefix}${parts.negatives.map(v => toMaxLen(String(v), maxLen)).join('|')})`;
   }
 
   if (positives && negatives) {
@@ -172,7 +172,7 @@
 
   if (options.toRegex === true) {
     return step > 1
-      ? toSequence(parts, options)
+      ? toSequence(parts, options, maxLen)
       : toRegex(range, null, { wrap: false, ...options });
   }
 
@@ -184,7 +184,6 @@
     return invalidRange(start, end, options);
   }
 
-
   let format = options.transform || (val => String.fromCharCode(val));
   let a = `${start}`.charCodeAt(0);
   let b = `${end}`.charCodeAt(0);
Index: node_modules/postgresql-client/cjs/util/stringify-arrayliteral.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/util/stringify-arrayliteral.js b/node_modules/postgresql-client/cjs/util/stringify-arrayliteral.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/util/stringify-arrayliteral.js	
+++ /dev/null	
@@ -1,38 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.stringifyArrayLiteral = void 0;
-const array_calculatedim_js_1 = require("./array-calculatedim.js");
-function stringifyArrayLiteral(value, options, encode) {
-    const dim = (0, array_calculatedim_js_1.arrayCalculateDim)(value);
-    const writeDim = (arr, level) => {
-        const elemCount = dim[level];
-        const out = [];
-        for (let i = 0; i < elemCount; i++) {
-            let x = arr && arr[i];
-            if (level < dim.length - 1) {
-                if (x != null && !Array.isArray(x))
-                    x = [x];
-                out.push(writeDim(x, level + 1));
-                continue;
-            }
-            // if value is null
-            if (x == null) {
-                out.push('NULL');
-                continue;
-            }
-            if (Array.isArray(x)) {
-                out.push(stringifyArrayLiteral(x, options, encode));
-                continue;
-            }
-            if (encode)
-                x = encode(x, options || {});
-            out.push(escapeArrayItem('' + x));
-        }
-        return '{' + out.join(',') + '}';
-    };
-    return writeDim(value, 0);
-}
-exports.stringifyArrayLiteral = stringifyArrayLiteral;
-function escapeArrayItem(str) {
-    return '"' + str.replace(/\\/g, '\\\\').replace(/"/g, '\\"') + '"';
-}
Index: node_modules/call-bind/test/callBound.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/call-bind/test/callBound.js b/node_modules/call-bind/test/callBound.js
deleted file mode 100644
--- a/node_modules/call-bind/test/callBound.js	
+++ /dev/null	
@@ -1,54 +0,0 @@
-'use strict';
-
-var test = require('tape');
-
-var callBound = require('../callBound');
-
-test('callBound', function (t) {
-	// static primitive
-	t.equal(callBound('Array.length'), Array.length, 'Array.length yields itself');
-	t.equal(callBound('%Array.length%'), Array.length, '%Array.length% yields itself');
-
-	// static non-function object
-	t.equal(callBound('Array.prototype'), Array.prototype, 'Array.prototype yields itself');
-	t.equal(callBound('%Array.prototype%'), Array.prototype, '%Array.prototype% yields itself');
-	t.equal(callBound('Array.constructor'), Array.constructor, 'Array.constructor yields itself');
-	t.equal(callBound('%Array.constructor%'), Array.constructor, '%Array.constructor% yields itself');
-
-	// static function
-	t.equal(callBound('Date.parse'), Date.parse, 'Date.parse yields itself');
-	t.equal(callBound('%Date.parse%'), Date.parse, '%Date.parse% yields itself');
-
-	// prototype primitive
-	t.equal(callBound('Error.prototype.message'), Error.prototype.message, 'Error.prototype.message yields itself');
-	t.equal(callBound('%Error.prototype.message%'), Error.prototype.message, '%Error.prototype.message% yields itself');
-
-	// prototype function
-	t.notEqual(callBound('Object.prototype.toString'), Object.prototype.toString, 'Object.prototype.toString does not yield itself');
-	t.notEqual(callBound('%Object.prototype.toString%'), Object.prototype.toString, '%Object.prototype.toString% does not yield itself');
-	t.equal(callBound('Object.prototype.toString')(true), Object.prototype.toString.call(true), 'call-bound Object.prototype.toString calls into the original');
-	t.equal(callBound('%Object.prototype.toString%')(true), Object.prototype.toString.call(true), 'call-bound %Object.prototype.toString% calls into the original');
-
-	t['throws'](
-		function () { callBound('does not exist'); },
-		SyntaxError,
-		'nonexistent intrinsic throws'
-	);
-	t['throws'](
-		function () { callBound('does not exist', true); },
-		SyntaxError,
-		'allowMissing arg still throws for unknown intrinsic'
-	);
-
-	t.test('real but absent intrinsic', { skip: typeof WeakRef !== 'undefined' }, function (st) {
-		st['throws'](
-			function () { callBound('WeakRef'); },
-			TypeError,
-			'real but absent intrinsic throws'
-		);
-		st.equal(callBound('WeakRef', true), undefined, 'allowMissing arg avoids exception');
-		st.end();
-	});
-
-	t.end();
-});
Index: node_modules/postgresql-client/cjs/interfaces/script-execute-options.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/cjs/interfaces/script-execute-options.js b/node_modules/postgresql-client/cjs/interfaces/script-execute-options.js
deleted file mode 100644
--- a/node_modules/postgresql-client/cjs/interfaces/script-execute-options.js	
+++ /dev/null	
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
Index: node_modules/power-tasks/cjs/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/power-tasks/cjs/utils.js b/node_modules/power-tasks/cjs/utils.js
--- a/node_modules/power-tasks/cjs/utils.js	
+++ b/node_modules/power-tasks/cjs/utils.js	
@@ -1,13 +1,12 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.delay = exports.plural = void 0;
+exports.plural = plural;
+exports.delay = delay;
 function plural(word, isPlural, pluralWord) {
-    if ((typeof isPlural === 'number' && isPlural > 1) || isPlural)
-        return pluralWord ? pluralWord : word + 's';
+    if ((typeof isPlural === "number" && isPlural > 1) || isPlural)
+        return pluralWord ? pluralWord : word + "s";
     return word;
 }
-exports.plural = plural;
 function delay(t) {
-    return new Promise(resolve => setTimeout(resolve, t).unref());
+    return new Promise((resolve) => setTimeout(resolve, t).unref());
 }
-exports.delay = delay;
Index: node_modules/qs/test/stringify.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/test/stringify.js b/node_modules/qs/test/stringify.js
--- a/node_modules/qs/test/stringify.js	
+++ b/node_modules/qs/test/stringify.js	
@@ -6,6 +6,8 @@
 var iconv = require('iconv-lite');
 var SaferBuffer = require('safer-buffer').Buffer;
 var hasSymbols = require('has-symbols');
+var mockProperty = require('mock-property');
+var emptyTestCases = require('./empty-keys-cases').emptyTestCases;
 var hasBigInt = typeof BigInt === 'function';
 
 test('stringify()', function (t) {
@@ -63,6 +65,138 @@
         st.end();
     });
 
+    t.test('encodes dot in key of object when encodeDotInKeys and allowDots is provided', function (st) {
+        st.equal(
+            qs.stringify(
+                { 'name.obj': { first: 'John', last: 'Doe' } },
+                { allowDots: false, encodeDotInKeys: false }
+            ),
+            'name.obj%5Bfirst%5D=John&name.obj%5Blast%5D=Doe',
+            'with allowDots false and encodeDotInKeys false'
+        );
+        st.equal(
+            qs.stringify(
+                { 'name.obj': { first: 'John', last: 'Doe' } },
+                { allowDots: true, encodeDotInKeys: false }
+            ),
+            'name.obj.first=John&name.obj.last=Doe',
+            'with allowDots true and encodeDotInKeys false'
+        );
+        st.equal(
+            qs.stringify(
+                { 'name.obj': { first: 'John', last: 'Doe' } },
+                { allowDots: false, encodeDotInKeys: true }
+            ),
+            'name%252Eobj%5Bfirst%5D=John&name%252Eobj%5Blast%5D=Doe',
+            'with allowDots false and encodeDotInKeys true'
+        );
+        st.equal(
+            qs.stringify(
+                { 'name.obj': { first: 'John', last: 'Doe' } },
+                { allowDots: true, encodeDotInKeys: true }
+            ),
+            'name%252Eobj.first=John&name%252Eobj.last=Doe',
+            'with allowDots true and encodeDotInKeys true'
+        );
+
+        st.equal(
+            qs.stringify(
+                { 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } },
+                { allowDots: false, encodeDotInKeys: false }
+            ),
+            'name.obj.subobject%5Bfirst.godly.name%5D=John&name.obj.subobject%5Blast%5D=Doe',
+            'with allowDots false and encodeDotInKeys false'
+        );
+        st.equal(
+            qs.stringify(
+                { 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } },
+                { allowDots: true, encodeDotInKeys: false }
+            ),
+            'name.obj.subobject.first.godly.name=John&name.obj.subobject.last=Doe',
+            'with allowDots false and encodeDotInKeys false'
+        );
+        st.equal(
+            qs.stringify(
+                { 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } },
+                { allowDots: false, encodeDotInKeys: true }
+            ),
+            'name%252Eobj%252Esubobject%5Bfirst.godly.name%5D=John&name%252Eobj%252Esubobject%5Blast%5D=Doe',
+            'with allowDots false and encodeDotInKeys true'
+        );
+        st.equal(
+            qs.stringify(
+                { 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } },
+                { allowDots: true, encodeDotInKeys: true }
+            ),
+            'name%252Eobj%252Esubobject.first%252Egodly%252Ename=John&name%252Eobj%252Esubobject.last=Doe',
+            'with allowDots true and encodeDotInKeys true'
+        );
+
+        st.end();
+    });
+
+    t.test('should encode dot in key of object, and automatically set allowDots to `true` when encodeDotInKeys is true and allowDots in undefined', function (st) {
+        st.equal(
+            qs.stringify(
+                { 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } },
+                { encodeDotInKeys: true }
+            ),
+            'name%252Eobj%252Esubobject.first%252Egodly%252Ename=John&name%252Eobj%252Esubobject.last=Doe',
+            'with allowDots undefined and encodeDotInKeys true'
+        );
+        st.end();
+    });
+
+    t.test('should encode dot in key of object when encodeDotInKeys and allowDots is provided, and nothing else when encodeValuesOnly is provided', function (st) {
+        st.equal(
+            qs.stringify({ 'name.obj': { first: 'John', last: 'Doe' } }, {
+                encodeDotInKeys: true, allowDots: true, encodeValuesOnly: true
+            }),
+            'name%2Eobj.first=John&name%2Eobj.last=Doe'
+        );
+
+        st.equal(
+            qs.stringify({ 'name.obj.subobject': { 'first.godly.name': 'John', last: 'Doe' } }, { allowDots: true, encodeDotInKeys: true, encodeValuesOnly: true }),
+            'name%2Eobj%2Esubobject.first%2Egodly%2Ename=John&name%2Eobj%2Esubobject.last=Doe'
+        );
+
+        st.end();
+    });
+
+    t.test('throws when `commaRoundTrip` is not a boolean', function (st) {
+        st['throws'](
+            function () { qs.stringify({}, { commaRoundTrip: 'not a boolean' }); },
+            TypeError,
+            'throws when `commaRoundTrip` is not a boolean'
+        );
+
+        st.end();
+    });
+
+    t.test('throws when `encodeDotInKeys` is not a boolean', function (st) {
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { encodeDotInKeys: 'foobar' }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { encodeDotInKeys: 0 }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { encodeDotInKeys: NaN }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { encodeDotInKeys: null }); },
+            TypeError
+        );
+
+        st.end();
+    });
+
     t.test('adds query prefix', function (st) {
         st.equal(qs.stringify({ a: 'b' }, { addQueryPrefix: true }), '?a=b');
         st.end();
@@ -86,7 +220,7 @@
         st.end();
     });
 
-    t.test('stringifies a nested object with dots notation', function (st) {
+    t.test('`allowDots` option: stringifies a nested object with dots notation', function (st) {
         st.equal(qs.stringify({ a: { b: 'c' } }, { allowDots: true }), 'a.b=c');
         st.equal(qs.stringify({ a: { b: { c: { d: 'e' } } } }, { allowDots: true }), 'a.b.c.d=e');
         st.end();
@@ -108,6 +242,11 @@
             'a=b%2Cc%2Cd',
             'comma => comma'
         );
+        st.equal(
+            qs.stringify({ a: ['b', 'c', 'd'] }, { arrayFormat: 'comma', commaRoundTrip: true }),
+            'a=b%2Cc%2Cd',
+            'comma round trip => comma'
+        );
         st.equal(
             qs.stringify({ a: ['b', 'c', 'd'] }),
             'a%5B0%5D=b&a%5B1%5D=c&a%5B2%5D=d',
@@ -116,18 +255,75 @@
         st.end();
     });
 
-    t.test('omits nulls when asked', function (st) {
-        st.equal(qs.stringify({ a: 'b', c: null }, { skipNulls: true }), 'a=b');
-        st.end();
-    });
+    t.test('`skipNulls` option', function (st) {
+        st.equal(
+            qs.stringify({ a: 'b', c: null }, { skipNulls: true }),
+            'a=b',
+            'omits nulls when asked'
+        );
 
-    t.test('omits nested nulls when asked', function (st) {
-        st.equal(qs.stringify({ a: { b: 'c', d: null } }, { skipNulls: true }), 'a%5Bb%5D=c');
+        st.equal(
+            qs.stringify({ a: { b: 'c', d: null } }, { skipNulls: true }),
+            'a%5Bb%5D=c',
+            'omits nested nulls when asked'
+        );
+
         st.end();
     });
 
     t.test('omits array indices when asked', function (st) {
         st.equal(qs.stringify({ a: ['b', 'c', 'd'] }, { indices: false }), 'a=b&a=c&a=d');
+
+        st.end();
+    });
+
+    t.test('omits object key/value pair when value is empty array', function (st) {
+        st.equal(qs.stringify({ a: [], b: 'zz' }), 'b=zz');
+
+        st.end();
+    });
+
+    t.test('should not omit object key/value pair when value is empty array and when asked', function (st) {
+        st.equal(qs.stringify({ a: [], b: 'zz' }), 'b=zz');
+        st.equal(qs.stringify({ a: [], b: 'zz' }, { allowEmptyArrays: false }), 'b=zz');
+        st.equal(qs.stringify({ a: [], b: 'zz' }, { allowEmptyArrays: true }), 'a[]&b=zz');
+
+        st.end();
+    });
+
+    t.test('should throw when allowEmptyArrays is not of type boolean', function (st) {
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { allowEmptyArrays: 'foobar' }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { allowEmptyArrays: 0 }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { allowEmptyArrays: NaN }); },
+            TypeError
+        );
+
+        st['throws'](
+            function () { qs.stringify({ a: [], b: 'zz' }, { allowEmptyArrays: null }); },
+            TypeError
+        );
+
+        st.end();
+    });
+
+    t.test('allowEmptyArrays + strictNullHandling', function (st) {
+        st.equal(
+            qs.stringify(
+                { testEmptyArray: [] },
+                { strictNullHandling: true, allowEmptyArrays: true }
+            ),
+            'testEmptyArray[]'
+        );
+
         st.end();
     });
 
@@ -155,11 +351,22 @@
             s2t.equal(qs.stringify({ a: ['c', 'd'] }, { encodeValuesOnly: true, arrayFormat: 'indices' }), 'a[0]=c&a[1]=d');
             s2t.equal(qs.stringify({ a: ['c', 'd'] }, { encodeValuesOnly: true, arrayFormat: 'brackets' }), 'a[]=c&a[]=d');
             s2t.equal(qs.stringify({ a: ['c', 'd'] }, { encodeValuesOnly: true, arrayFormat: 'comma' }), 'a=c,d');
+            s2t.equal(qs.stringify({ a: ['c', 'd'] }, { encodeValuesOnly: true, arrayFormat: 'comma', commaRoundTrip: true }), 'a=c,d');
             s2t.equal(qs.stringify({ a: ['c', 'd'] }, { encodeValuesOnly: true }), 'a[0]=c&a[1]=d');
 
             s2t.end();
         });
 
+        st.test('array with multiple items with a comma inside', function (s2t) {
+            s2t.equal(qs.stringify({ a: ['c,d', 'e'] }, { encodeValuesOnly: true, arrayFormat: 'comma' }), 'a=c%2Cd,e');
+            s2t.equal(qs.stringify({ a: ['c,d', 'e'] }, { arrayFormat: 'comma' }), 'a=c%2Cd%2Ce');
+
+            s2t.equal(qs.stringify({ a: ['c,d', 'e'] }, { encodeValuesOnly: true, arrayFormat: 'comma', commaRoundTrip: true }), 'a=c%2Cd,e');
+            s2t.equal(qs.stringify({ a: ['c,d', 'e'] }, { arrayFormat: 'comma', commaRoundTrip: true }), 'a=c%2Cd%2Ce');
+
+            s2t.end();
+        });
+
         st.end();
     });
 
@@ -171,6 +378,44 @@
         st.end();
     });
 
+    t.test('stringifies comma and empty array values', function (st) {
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: false, arrayFormat: 'indices' }), 'a[0]=,&a[1]=&a[2]=c,d%');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: false, arrayFormat: 'brackets' }), 'a[]=,&a[]=&a[]=c,d%');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: false, arrayFormat: 'comma' }), 'a=,,,c,d%');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: false, arrayFormat: 'repeat' }), 'a=,&a=&a=c,d%');
+
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: true, arrayFormat: 'indices' }), 'a[0]=%2C&a[1]=&a[2]=c%2Cd%25');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: true, arrayFormat: 'brackets' }), 'a[]=%2C&a[]=&a[]=c%2Cd%25');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: true, arrayFormat: 'comma' }), 'a=%2C,,c%2Cd%25');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: true, arrayFormat: 'repeat' }), 'a=%2C&a=&a=c%2Cd%25');
+
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: false, arrayFormat: 'indices' }), 'a%5B0%5D=%2C&a%5B1%5D=&a%5B2%5D=c%2Cd%25');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: false, arrayFormat: 'brackets' }), 'a%5B%5D=%2C&a%5B%5D=&a%5B%5D=c%2Cd%25');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: false, arrayFormat: 'comma' }), 'a=%2C%2C%2Cc%2Cd%25');
+        st.equal(qs.stringify({ a: [',', '', 'c,d%'] }, { encode: true, encodeValuesOnly: false, arrayFormat: 'repeat' }), 'a=%2C&a=&a=c%2Cd%25');
+
+        st.end();
+    });
+
+    t.test('stringifies comma and empty non-array values', function (st) {
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: false, arrayFormat: 'indices' }), 'a=,&b=&c=c,d%');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: false, arrayFormat: 'brackets' }), 'a=,&b=&c=c,d%');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: false, arrayFormat: 'comma' }), 'a=,&b=&c=c,d%');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: false, arrayFormat: 'repeat' }), 'a=,&b=&c=c,d%');
+
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: true, arrayFormat: 'indices' }), 'a=%2C&b=&c=c%2Cd%25');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: true, arrayFormat: 'brackets' }), 'a=%2C&b=&c=c%2Cd%25');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: true, arrayFormat: 'comma' }), 'a=%2C&b=&c=c%2Cd%25');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: true, arrayFormat: 'repeat' }), 'a=%2C&b=&c=c%2Cd%25');
+
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: false, arrayFormat: 'indices' }), 'a=%2C&b=&c=c%2Cd%25');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: false, arrayFormat: 'brackets' }), 'a=%2C&b=&c=c%2Cd%25');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: false, arrayFormat: 'comma' }), 'a=%2C&b=&c=c%2Cd%25');
+        st.equal(qs.stringify({ a: ',', b: '', c: 'c,d%' }, { encode: true, encodeValuesOnly: false, arrayFormat: 'repeat' }), 'a=%2C&b=&c=c%2Cd%25');
+
+        st.end();
+    });
+
     t.test('stringifies a nested array value with dots notation', function (st) {
         st.equal(
             qs.stringify(
@@ -209,36 +454,44 @@
 
     t.test('stringifies an object inside an array', function (st) {
         st.equal(
-            qs.stringify({ a: [{ b: 'c' }] }, { arrayFormat: 'indices' }),
-            'a%5B0%5D%5Bb%5D=c', // a[0][b]=c
-            'indices => brackets'
+            qs.stringify({ a: [{ b: 'c' }] }, { arrayFormat: 'indices', encodeValuesOnly: true }),
+            'a[0][b]=c',
+            'indices => indices'
         );
         st.equal(
-            qs.stringify({ a: [{ b: 'c' }] }, { arrayFormat: 'brackets' }),
-            'a%5B%5D%5Bb%5D=c', // a[][b]=c
+            qs.stringify({ a: [{ b: 'c' }] }, { arrayFormat: 'repeat', encodeValuesOnly: true }),
+            'a[b]=c',
+            'repeat => repeat'
+        );
+        st.equal(
+            qs.stringify({ a: [{ b: 'c' }] }, { arrayFormat: 'brackets', encodeValuesOnly: true }),
+            'a[][b]=c',
             'brackets => brackets'
         );
         st.equal(
-            qs.stringify({ a: [{ b: 'c' }] }),
-            'a%5B0%5D%5Bb%5D=c',
+            qs.stringify({ a: [{ b: 'c' }] }, { encodeValuesOnly: true }),
+            'a[0][b]=c',
             'default => indices'
         );
 
         st.equal(
-            qs.stringify({ a: [{ b: { c: [1] } }] }, { arrayFormat: 'indices' }),
-            'a%5B0%5D%5Bb%5D%5Bc%5D%5B0%5D=1',
+            qs.stringify({ a: [{ b: { c: [1] } }] }, { arrayFormat: 'indices', encodeValuesOnly: true }),
+            'a[0][b][c][0]=1',
             'indices => indices'
         );
-
         st.equal(
-            qs.stringify({ a: [{ b: { c: [1] } }] }, { arrayFormat: 'brackets' }),
-            'a%5B%5D%5Bb%5D%5Bc%5D%5B%5D=1',
+            qs.stringify({ a: [{ b: { c: [1] } }] }, { arrayFormat: 'repeat', encodeValuesOnly: true }),
+            'a[b][c]=1',
+            'repeat => repeat'
+        );
+        st.equal(
+            qs.stringify({ a: [{ b: { c: [1] } }] }, { arrayFormat: 'brackets', encodeValuesOnly: true }),
+            'a[][b][c][]=1',
             'brackets => brackets'
         );
-
         st.equal(
-            qs.stringify({ a: [{ b: { c: [1] } }] }),
-            'a%5B0%5D%5Bb%5D%5Bc%5D%5B0%5D=1',
+            qs.stringify({ a: [{ b: { c: [1] } }] }, { encodeValuesOnly: true }),
+            'a[0][b][c][0]=1',
             'default => indices'
         );
 
@@ -340,17 +593,17 @@
         st.end();
     });
 
-    t.test('uses indices notation for arrays when no arrayFormat=indices', function (st) {
+    t.test('uses indices notation for arrays when arrayFormat=indices', function (st) {
         st.equal(qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' }), 'a%5B0%5D=b&a%5B1%5D=c');
         st.end();
     });
 
-    t.test('uses repeat notation for arrays when no arrayFormat=repeat', function (st) {
+    t.test('uses repeat notation for arrays when arrayFormat=repeat', function (st) {
         st.equal(qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' }), 'a=b&a=c');
         st.end();
     });
 
-    t.test('uses brackets notation for arrays when no arrayFormat=brackets', function (st) {
+    t.test('uses brackets notation for arrays when arrayFormat=brackets', function (st) {
         st.equal(qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' }), 'a%5B%5D=b&a%5B%5D=c');
         st.end();
     });
@@ -447,10 +700,11 @@
     });
 
     t.test('skips properties that are part of the object prototype', function (st) {
-        Object.prototype.crash = 'test';
+        st.intercept(Object.prototype, 'crash', { value: 'test' });
+
         st.equal(qs.stringify({ a: 'b' }), 'a=b');
         st.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');
-        delete Object.prototype.crash;
+
         st.end();
     });
 
@@ -474,10 +728,12 @@
     });
 
     t.test('does not blow up when Buffer global is missing', function (st) {
-        var tempBuffer = global.Buffer;
-        delete global.Buffer;
+        var restore = mockProperty(global, 'Buffer', { 'delete': true });
+
         var result = qs.stringify({ a: 'b', c: 'd' });
-        global.Buffer = tempBuffer;
+
+        restore();
+
         st.equal(result, 'a=b&c=d');
         st.end();
     });
@@ -526,9 +782,17 @@
         };
 
         st.equal(
-            qs.stringify({ filters: { $and: [p1, p2] } }, { encodeValuesOnly: true }),
+            qs.stringify({ filters: { $and: [p1, p2] } }, { encodeValuesOnly: true, arrayFormat: 'indices' }),
             'filters[$and][0][function]=gte&filters[$and][0][arguments][0][function]=hour_of_day&filters[$and][0][arguments][1]=0&filters[$and][1][function]=lte&filters[$and][1][arguments][0][function]=hour_of_day&filters[$and][1][arguments][1]=23'
         );
+        st.equal(
+            qs.stringify({ filters: { $and: [p1, p2] } }, { encodeValuesOnly: true, arrayFormat: 'brackets' }),
+            'filters[$and][][function]=gte&filters[$and][][arguments][][function]=hour_of_day&filters[$and][][arguments][]=0&filters[$and][][function]=lte&filters[$and][][arguments][][function]=hour_of_day&filters[$and][][arguments][]=23'
+        );
+        st.equal(
+            qs.stringify({ filters: { $and: [p1, p2] } }, { encodeValuesOnly: true, arrayFormat: 'repeat' }),
+            'filters[$and][function]=gte&filters[$and][arguments][function]=hour_of_day&filters[$and][arguments]=0&filters[$and][function]=lte&filters[$and][arguments][function]=hour_of_day&filters[$and][arguments]=23'
+        );
 
         st.end();
     });
@@ -641,13 +905,28 @@
         st.end();
     });
 
+    t.test('receives the default encoder as a second argument', function (st) {
+        st.plan(8);
+
+        qs.stringify({ a: 1, b: new Date(), c: true, d: [1] }, {
+            encoder: function (str) {
+                st.match(typeof str, /^(?:string|number|boolean)$/);
+                return '';
+            }
+        });
+
+        st.end();
+    });
+
     t.test('receives the default encoder as a second argument', function (st) {
         st.plan(2);
+
         qs.stringify({ a: 1 }, {
             encoder: function (str, defaultEncoder) {
                 st.equal(defaultEncoder, utils.encode);
             }
         });
+
         st.end();
     });
 
@@ -775,16 +1054,53 @@
         st.equal(
             qs.stringify(
                 { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },
-                { encodeValuesOnly: true }
+                { encodeValuesOnly: true, arrayFormat: 'indices' }
+            ),
+            'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h',
+            'encodeValuesOnly + indices'
+        );
+        st.equal(
+            qs.stringify(
+                { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },
+                { encodeValuesOnly: true, arrayFormat: 'brackets' }
+            ),
+            'a=b&c[]=d&c[]=e%3Df&f[][]=g&f[][]=h',
+            'encodeValuesOnly + brackets'
+        );
+        st.equal(
+            qs.stringify(
+                { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },
+                { encodeValuesOnly: true, arrayFormat: 'repeat' }
+            ),
+            'a=b&c=d&c=e%3Df&f=g&f=h',
+            'encodeValuesOnly + repeat'
+        );
+
+        st.equal(
+            qs.stringify(
+                { a: 'b', c: ['d', 'e'], f: [['g'], ['h']] },
+                { arrayFormat: 'indices' }
             ),
-            'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h'
+            'a=b&c%5B0%5D=d&c%5B1%5D=e&f%5B0%5D%5B0%5D=g&f%5B1%5D%5B0%5D=h',
+            'no encodeValuesOnly + indices'
+        );
+        st.equal(
+            qs.stringify(
+                { a: 'b', c: ['d', 'e'], f: [['g'], ['h']] },
+                { arrayFormat: 'brackets' }
+            ),
+            'a=b&c%5B%5D=d&c%5B%5D=e&f%5B%5D%5B%5D=g&f%5B%5D%5B%5D=h',
+            'no encodeValuesOnly + brackets'
         );
         st.equal(
             qs.stringify(
-                { a: 'b', c: ['d', 'e'], f: [['g'], ['h']] }
+                { a: 'b', c: ['d', 'e'], f: [['g'], ['h']] },
+                { arrayFormat: 'repeat' }
             ),
-            'a=b&c%5B0%5D=d&c%5B1%5D=e&f%5B0%5D%5B0%5D=g&f%5B1%5D%5B0%5D=h'
+            'a=b&c=d&c=e&f=g&f=h',
+            'no encodeValuesOnly + repeat'
         );
+
         st.end();
     });
 
@@ -821,13 +1137,19 @@
         st.end();
     });
 
-    t.test('adds the right sentinel when instructed to and the charset is utf-8', function (st) {
-        st.equal(qs.stringify({ a: 'æ' }, { charsetSentinel: true, charset: 'utf-8' }), 'utf8=%E2%9C%93&a=%C3%A6');
-        st.end();
-    });
+    t.test('`charsetSentinel` option', function (st) {
+        st.equal(
+            qs.stringify({ a: 'æ' }, { charsetSentinel: true, charset: 'utf-8' }),
+            'utf8=%E2%9C%93&a=%C3%A6',
+            'adds the right sentinel when instructed to and the charset is utf-8'
+        );
 
-    t.test('adds the right sentinel when instructed to and the charset is iso-8859-1', function (st) {
-        st.equal(qs.stringify({ a: 'æ' }, { charsetSentinel: true, charset: 'iso-8859-1' }), 'utf8=%26%2310003%3B&a=%E6');
+        st.equal(
+            qs.stringify({ a: 'æ' }, { charsetSentinel: true, charset: 'iso-8859-1' }),
+            'utf8=%26%2310003%3B&a=%E6',
+            'adds the right sentinel when instructed to and the charset is iso-8859-1'
+        );
+
         st.end();
     });
 
@@ -878,13 +1200,15 @@
         var withArray = { a: { b: [{ c: 'd', e: 'f' }] } };
 
         st.equal(qs.stringify(obj, { encode: false }), 'a[b][c]=d&a[b][e]=f', 'no array, no arrayFormat');
-        st.equal(qs.stringify(obj, { encode: false, arrayFormat: 'bracket' }), 'a[b][c]=d&a[b][e]=f', 'no array, bracket');
+        st.equal(qs.stringify(obj, { encode: false, arrayFormat: 'brackets' }), 'a[b][c]=d&a[b][e]=f', 'no array, bracket');
         st.equal(qs.stringify(obj, { encode: false, arrayFormat: 'indices' }), 'a[b][c]=d&a[b][e]=f', 'no array, indices');
+        st.equal(qs.stringify(obj, { encode: false, arrayFormat: 'repeat' }), 'a[b][c]=d&a[b][e]=f', 'no array, repeat');
         st.equal(qs.stringify(obj, { encode: false, arrayFormat: 'comma' }), 'a[b][c]=d&a[b][e]=f', 'no array, comma');
 
         st.equal(qs.stringify(withArray, { encode: false }), 'a[b][0][c]=d&a[b][0][e]=f', 'array, no arrayFormat');
-        st.equal(qs.stringify(withArray, { encode: false, arrayFormat: 'bracket' }), 'a[b][0][c]=d&a[b][0][e]=f', 'array, bracket');
+        st.equal(qs.stringify(withArray, { encode: false, arrayFormat: 'brackets' }), 'a[b][][c]=d&a[b][][e]=f', 'array, bracket');
         st.equal(qs.stringify(withArray, { encode: false, arrayFormat: 'indices' }), 'a[b][0][c]=d&a[b][0][e]=f', 'array, indices');
+        st.equal(qs.stringify(withArray, { encode: false, arrayFormat: 'repeat' }), 'a[b][c]=d&a[b][e]=f', 'array, repeat');
         st.equal(
             qs.stringify(withArray, { encode: false, arrayFormat: 'comma' }),
             '???',
@@ -897,13 +1221,78 @@
 
     t.test('stringifies sparse arrays', function (st) {
         /* eslint no-sparse-arrays: 0 */
-        st.equal(qs.stringify({ a: [, '2', , , '1'] }, { encodeValuesOnly: true }), 'a[1]=2&a[4]=1');
-        st.equal(qs.stringify({ a: [, { b: [, , { c: '1' }] }] }, { encodeValuesOnly: true }), 'a[1][b][2][c]=1');
-        st.equal(qs.stringify({ a: [, [, , [, , , { c: '1' }]]] }, { encodeValuesOnly: true }), 'a[1][2][3][c]=1');
-        st.equal(qs.stringify({ a: [, [, , [, , , { c: [, '1'] }]]] }, { encodeValuesOnly: true }), 'a[1][2][3][c][1]=1');
+        st.equal(qs.stringify({ a: [, '2', , , '1'] }, { encodeValuesOnly: true, arrayFormat: 'indices' }), 'a[1]=2&a[4]=1');
+        st.equal(qs.stringify({ a: [, '2', , , '1'] }, { encodeValuesOnly: true, arrayFormat: 'brackets' }), 'a[]=2&a[]=1');
+        st.equal(qs.stringify({ a: [, '2', , , '1'] }, { encodeValuesOnly: true, arrayFormat: 'repeat' }), 'a=2&a=1');
+
+        st.equal(qs.stringify({ a: [, { b: [, , { c: '1' }] }] }, { encodeValuesOnly: true, arrayFormat: 'indices' }), 'a[1][b][2][c]=1');
+        st.equal(qs.stringify({ a: [, { b: [, , { c: '1' }] }] }, { encodeValuesOnly: true, arrayFormat: 'brackets' }), 'a[][b][][c]=1');
+        st.equal(qs.stringify({ a: [, { b: [, , { c: '1' }] }] }, { encodeValuesOnly: true, arrayFormat: 'repeat' }), 'a[b][c]=1');
+
+        st.equal(qs.stringify({ a: [, [, , [, , , { c: '1' }]]] }, { encodeValuesOnly: true, arrayFormat: 'indices' }), 'a[1][2][3][c]=1');
+        st.equal(qs.stringify({ a: [, [, , [, , , { c: '1' }]]] }, { encodeValuesOnly: true, arrayFormat: 'brackets' }), 'a[][][][c]=1');
+        st.equal(qs.stringify({ a: [, [, , [, , , { c: '1' }]]] }, { encodeValuesOnly: true, arrayFormat: 'repeat' }), 'a[c]=1');
+
+        st.equal(qs.stringify({ a: [, [, , [, , , { c: [, '1'] }]]] }, { encodeValuesOnly: true, arrayFormat: 'indices' }), 'a[1][2][3][c][1]=1');
+        st.equal(qs.stringify({ a: [, [, , [, , , { c: [, '1'] }]]] }, { encodeValuesOnly: true, arrayFormat: 'brackets' }), 'a[][][][c][]=1');
+        st.equal(qs.stringify({ a: [, [, , [, , , { c: [, '1'] }]]] }, { encodeValuesOnly: true, arrayFormat: 'repeat' }), 'a[c]=1');
+
+        st.end();
+    });
+
+    t.test('encodes a very long string', function (st) {
+        var chars = [];
+        var expected = [];
+        for (var i = 0; i < 5e3; i++) {
+            chars.push(' ' + i);
+
+            expected.push('%20' + i);
+        }
+
+        var obj = {
+            foo: chars.join('')
+        };
+
+        st.equal(
+            qs.stringify(obj, { arrayFormat: 'bracket', charset: 'utf-8' }),
+            'foo=' + expected.join('')
+        );
 
         st.end();
     });
 
     t.end();
 });
+
+test('stringifies empty keys', function (t) {
+    emptyTestCases.forEach(function (testCase) {
+        t.test('stringifies an object with empty string key with ' + testCase.input, function (st) {
+            st.deepEqual(
+                qs.stringify(testCase.withEmptyKeys, { encode: false, arrayFormat: 'indices' }),
+                testCase.stringifyOutput.indices,
+                'test case: ' + testCase.input + ', indices'
+            );
+            st.deepEqual(
+                qs.stringify(testCase.withEmptyKeys, { encode: false, arrayFormat: 'brackets' }),
+                testCase.stringifyOutput.brackets,
+                'test case: ' + testCase.input + ', brackets'
+            );
+            st.deepEqual(
+                qs.stringify(testCase.withEmptyKeys, { encode: false, arrayFormat: 'repeat' }),
+                testCase.stringifyOutput.repeat,
+                'test case: ' + testCase.input + ', repeat'
+            );
+
+            st.end();
+        });
+    });
+
+    t.test('edge case with object/arrays', function (st) {
+        st.deepEqual(qs.stringify({ '': { '': [2, 3] } }, { encode: false }), '[][0]=2&[][1]=3');
+        st.deepEqual(qs.stringify({ '': { '': [2, 3], a: 2 } }, { encode: false }), '[][0]=2&[][1]=3&[a]=2');
+        st.deepEqual(qs.stringify({ '': { '': [2, 3] } }, { encode: false, arrayFormat: 'indices' }), '[][0]=2&[][1]=3');
+        st.deepEqual(qs.stringify({ '': { '': [2, 3], a: 2 } }, { encode: false, arrayFormat: 'indices' }), '[][0]=2&[][1]=3&[a]=2');
+
+        st.end();
+    });
+});
Index: node_modules/postgresql-client/esm/data-types/varchar-type.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/postgresql-client/esm/data-types/varchar-type.js b/node_modules/postgresql-client/esm/data-types/varchar-type.js
deleted file mode 100644
--- a/node_modules/postgresql-client/esm/data-types/varchar-type.js	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import { DataTypeOIDs } from '../constants.js';
-export const VarcharType = {
-    name: 'varchar',
-    oid: DataTypeOIDs.varchar,
-    jsType: 'string',
-    parseBinary(v) {
-        return v.toString('utf8');
-    },
-    encodeBinary(buf, v) {
-        buf.writeString('' + v, 'utf8');
-    },
-    parseText(v) {
-        return '' + v;
-    },
-    isType(v) {
-        return typeof v === 'string';
-    },
-};
-export const ArrayVarcharType = {
-    ...VarcharType,
-    name: '_varchar',
-    oid: DataTypeOIDs._varchar,
-    elementsOID: DataTypeOIDs.varchar,
-};
Index: node_modules/ts-gems/lib/nullish.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/ts-gems/lib/nullish.d.ts b/node_modules/ts-gems/lib/nullish.d.ts
--- a/node_modules/ts-gems/lib/nullish.d.ts	
+++ b/node_modules/ts-gems/lib/nullish.d.ts	
@@ -1,5 +1,5 @@
-import { IfNoDeepValue } from './helpers';
-import { IfNever } from './type-check';
+import { IfNoDeepValue } from './helpers.js';
+import { IfNever } from './type-check.js';
 
 /**
  * Make all properties in T nullish
@@ -12,26 +12,27 @@
  * Make all properties in T nullish deeply
  */
 export type DeepNullish<T> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: IfNoDeepValue< // Do not deep process No-Deep values
+  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: IfNoDeepValue<
+    // Do not deep process No-Deep values
     Exclude<T[K], undefined>
   > extends true
     ? T[K] | null
     : // Deep process objects
-      DeepNullish<Exclude<T[K], undefined>> | null;
+      DeepNullish<NonNullable<T[K]>> | null;
 };
 
 /**
  * Make all properties in T nullish deeply including arrays
  */
 export type DeeperNullish<T> = {
-  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: Exclude< // Deep process arrays
-    T[K],
-    undefined
+  [K in keyof T as IfNever<Exclude<T[K], undefined>, never, K>]?: NonNullable<
+    // Deep process arrays
+    T[K]
   > extends (infer U)[]
     ? DeeperNullish<U>[] | null
     : // Do not deep process No-Deep values
-      IfNoDeepValue<Exclude<T[K], undefined>> extends true
+      IfNoDeepValue<NonNullable<T[K]>> extends true
       ? T[K] | null
       : // Deep process objects
-        DeeperNullish<Exclude<T[K], undefined>> | null;
+        DeeperNullish<NonNullable<T[K]>> | null;
 };
Index: node_modules/pg-pool/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-pool/package.json b/node_modules/pg-pool/package.json
--- a/node_modules/pg-pool/package.json	
+++ b/node_modules/pg-pool/package.json	
@@ -1,8 +1,15 @@
 {
   "name": "pg-pool",
-  "version": "3.6.2",
+  "version": "3.10.1",
   "description": "Connection pool for node-postgres",
   "main": "index.js",
+  "exports": {
+    ".": {
+      "import": "./esm/index.mjs",
+      "require": "./index.js",
+      "default": "./index.js"
+    }
+  },
   "directories": {
     "test": "test"
   },
@@ -27,15 +34,18 @@
   },
   "homepage": "https://github.com/brianc/node-pg-pool#readme",
   "devDependencies": {
-    "bluebird": "3.4.1",
+    "bluebird": "3.7.2",
     "co": "4.6.0",
     "expect.js": "0.3.1",
     "lodash": "^4.17.11",
-    "mocha": "^7.1.2",
-    "pg-cursor": "^1.3.0"
+    "mocha": "^10.5.2"
   },
   "peerDependencies": {
     "pg": ">=8.0"
   },
-  "gitHead": "b03c071d2d15af259e1e008e9628191c865e58fa"
+  "files": [
+    "index.js",
+    "esm"
+  ],
+  "gitHead": "cd877a57612a39335a97b593111710d26126279d"
 }
Index: node_modules/encodeurl/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/encodeurl/package.json b/node_modules/encodeurl/package.json
--- a/node_modules/encodeurl/package.json	
+++ b/node_modules/encodeurl/package.json	
@@ -1,7 +1,7 @@
 {
   "name": "encodeurl",
   "description": "Encode a URL to a percent-encoded form, excluding already-encoded sequences",
-  "version": "1.0.2",
+  "version": "2.0.0",
   "contributors": [
     "Douglas Christopher Wilson <doug@somethingdoug.com>"
   ],
@@ -13,12 +13,12 @@
   ],
   "repository": "pillarjs/encodeurl",
   "devDependencies": {
-    "eslint": "3.19.0",
-    "eslint-config-standard": "10.2.1",
-    "eslint-plugin-import": "2.8.0",
-    "eslint-plugin-node": "5.2.1",
-    "eslint-plugin-promise": "3.6.0",
-    "eslint-plugin-standard": "3.0.1",
+    "eslint": "5.11.1",
+    "eslint-config-standard": "12.0.0",
+    "eslint-plugin-import": "2.14.0",
+    "eslint-plugin-node": "7.0.1",
+    "eslint-plugin-promise": "4.0.1",
+    "eslint-plugin-standard": "4.0.0",
     "istanbul": "0.4.5",
     "mocha": "2.5.3"
   },
Index: node_modules/qs/.editorconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/.editorconfig b/node_modules/qs/.editorconfig
--- a/node_modules/qs/.editorconfig	
+++ b/node_modules/qs/.editorconfig	
@@ -41,3 +41,6 @@
 
 [.nycrc]
 indent_style = tab
+
+[tea.yaml]
+indent_size = 2
Index: node_modules/putil-merge/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/putil-merge/package.json b/node_modules/putil-merge/package.json
deleted file mode 100644
--- a/node_modules/putil-merge/package.json	
+++ /dev/null	
@@ -1,48 +0,0 @@
-{
-  "name": "putil-merge",
-  "description": "Lightweight solution for merging multiple objects into one. Also it supports deep merge and deep clone",
-  "version": "3.12.1",
-  "author": "Panates Ltd.",
-  "contributors": [
-    "Eray Hanoglu <e.hanoglu@panates.com>"
-  ],
-  "license": "MIT",
-  "repository": {
-    "type": "git",
-    "url": "https://github.com/panates/putil-merge.git"
-  },
-  "main": "lib/merge.js",
-  "types": "lib/merge",
-  "keywords": [
-    "javascript",
-    "merge",
-    "object"
-  ],
-  "devDependencies": {
-    "@types/mocha": "^10.0.2",
-    "@types/node": "^20.8.6",
-    "eslint": "^8.51.0",
-    "eslint-config-google": "^0.14.0",
-    "mocha": "^10.2.0",
-    "nyc": "^15.1.0"
-  },
-  "engines": {
-    "node": ">= 10.0"
-  },
-  "directories": {
-    "lib": "./lib"
-  },
-  "files": [
-    "LICENSE",
-    "README.md",
-    "lib/"
-  ],
-  "nyc": {
-    "temp-dir": "./coverage/.nyc_output"
-  },
-  "scripts": {
-    "test": "mocha --require ./test/support/env --reporter spec --bail --check-leaks test/",
-    "cover": "nyc --reporter html --reporter text npm run test",
-    "travis-cover": "nyc --reporter lcovonly npm run test"
-  }
-}
Index: node_modules/pg-protocol/src/testing/buffer-list.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/pg-protocol/src/testing/buffer-list.ts b/node_modules/pg-protocol/src/testing/buffer-list.ts
--- a/node_modules/pg-protocol/src/testing/buffer-list.ts	
+++ b/node_modules/pg-protocol/src/testing/buffer-list.ts	
@@ -10,10 +10,10 @@
     return this.add(Buffer.from([val >>> 8, val >>> 0]), front)
   }
 
-  public getByteLength(initial?: number) {
+  public getByteLength() {
     return this.buffers.reduce(function (previous, current) {
       return previous + current.length
-    }, initial || 0)
+    }, 0)
   }
 
   public addInt32(val: number, first?: boolean) {
@@ -24,16 +24,16 @@
   }
 
   public addCString(val: string, front?: boolean) {
-    var len = Buffer.byteLength(val)
-    var buffer = Buffer.alloc(len + 1)
+    const len = Buffer.byteLength(val)
+    const buffer = Buffer.alloc(len + 1)
     buffer.write(val)
     buffer[len] = 0
     return this.add(buffer, front)
   }
 
   public addString(val: string, front?: boolean) {
-    var len = Buffer.byteLength(val)
-    var buffer = Buffer.alloc(len)
+    const len = Buffer.byteLength(val)
+    const buffer = Buffer.alloc(len)
     buffer.write(val)
     return this.add(buffer, front)
   }
@@ -47,7 +47,7 @@
   }
 
   public join(appendLength?: boolean, char?: string): Buffer {
-    var length = this.getByteLength()
+    let length = this.getByteLength()
     if (appendLength) {
       this.addInt32(length + 4, true)
       return this.join(false, char)
@@ -56,20 +56,12 @@
       this.addChar(char, true)
       length++
     }
-    var result = Buffer.alloc(length)
-    var index = 0
+    const result = Buffer.alloc(length)
+    let index = 0
     this.buffers.forEach(function (buffer) {
       buffer.copy(result, index, 0)
       index += buffer.length
     })
     return result
   }
-
-  public static concat(): Buffer {
-    var total = new BufferList()
-    for (var i = 0; i < arguments.length; i++) {
-      total.add(arguments[i])
-    }
-    return total.join()
-  }
 }
Index: node_modules/qs/dist/qs.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/qs/dist/qs.js b/node_modules/qs/dist/qs.js
--- a/node_modules/qs/dist/qs.js	
+++ b/node_modules/qs/dist/qs.js	
@@ -1,2054 +1,90 @@
 (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Qs = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
-'use strict';
-
-var replace = String.prototype.replace;
-var percentTwenties = /%20/g;
-
-var Format = {
-    RFC1738: 'RFC1738',
-    RFC3986: 'RFC3986'
-};
-
-module.exports = {
-    'default': Format.RFC3986,
-    formatters: {
-        RFC1738: function (value) {
-            return replace.call(value, percentTwenties, '+');
-        },
-        RFC3986: function (value) {
-            return String(value);
-        }
-    },
-    RFC1738: Format.RFC1738,
-    RFC3986: Format.RFC3986
-};
+"use strict";var replace=String.prototype.replace,percentTwenties=/%20/g,Format={RFC1738:"RFC1738",RFC3986:"RFC3986"};module.exports={default:Format.RFC3986,formatters:{RFC1738:function(e){return replace.call(e,percentTwenties,"+")},RFC3986:function(e){return String(e)}},RFC1738:Format.RFC1738,RFC3986:Format.RFC3986};
 
 },{}],2:[function(require,module,exports){
-'use strict';
-
-var stringify = require('./stringify');
-var parse = require('./parse');
-var formats = require('./formats');
-
-module.exports = {
-    formats: formats,
-    parse: parse,
-    stringify: stringify
-};
-
-},{"./formats":1,"./parse":3,"./stringify":4}],3:[function(require,module,exports){
-'use strict';
-
-var utils = require('./utils');
-
-var has = Object.prototype.hasOwnProperty;
-var isArray = Array.isArray;
-
-var defaults = {
-    allowDots: false,
-    allowPrototypes: false,
-    allowSparse: false,
-    arrayLimit: 20,
-    charset: 'utf-8',
-    charsetSentinel: false,
-    comma: false,
-    decoder: utils.decode,
-    delimiter: '&',
-    depth: 5,
-    ignoreQueryPrefix: false,
-    interpretNumericEntities: false,
-    parameterLimit: 1000,
-    parseArrays: true,
-    plainObjects: false,
-    strictNullHandling: false
-};
-
-var interpretNumericEntities = function (str) {
-    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
-        return String.fromCharCode(parseInt(numberStr, 10));
-    });
-};
-
-var parseArrayValue = function (val, options) {
-    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
-        return val.split(',');
-    }
-
-    return val;
-};
-
-// This is what browsers will submit when the ✓ character occurs in an
-// application/x-www-form-urlencoded body and the encoding of the page containing
-// the form is iso-8859-1, or when the submitted form has an accept-charset
-// attribute of iso-8859-1. Presumably also with other charsets that do not contain
-// the ✓ character, such as us-ascii.
-var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
-
-// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
-var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')
-
-var parseValues = function parseQueryStringValues(str, options) {
-    var obj = {};
-    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
-    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
-    var parts = cleanStr.split(options.delimiter, limit);
-    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
-    var i;
-
-    var charset = options.charset;
-    if (options.charsetSentinel) {
-        for (i = 0; i < parts.length; ++i) {
-            if (parts[i].indexOf('utf8=') === 0) {
-                if (parts[i] === charsetSentinel) {
-                    charset = 'utf-8';
-                } else if (parts[i] === isoSentinel) {
-                    charset = 'iso-8859-1';
-                }
-                skipIndex = i;
-                i = parts.length; // The eslint settings do not allow break;
-            }
-        }
-    }
-
-    for (i = 0; i < parts.length; ++i) {
-        if (i === skipIndex) {
-            continue;
-        }
-        var part = parts[i];
-
-        var bracketEqualsPos = part.indexOf(']=');
-        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
-
-        var key, val;
-        if (pos === -1) {
-            key = options.decoder(part, defaults.decoder, charset, 'key');
-            val = options.strictNullHandling ? null : '';
-        } else {
-            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
-            val = utils.maybeMap(
-                parseArrayValue(part.slice(pos + 1), options),
-                function (encodedVal) {
-                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
-                }
-            );
-        }
-
-        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
-            val = interpretNumericEntities(val);
-        }
-
-        if (part.indexOf('[]=') > -1) {
-            val = isArray(val) ? [val] : val;
-        }
-
-        if (has.call(obj, key)) {
-            obj[key] = utils.combine(obj[key], val);
-        } else {
-            obj[key] = val;
-        }
-    }
-
-    return obj;
-};
-
-var parseObject = function (chain, val, options, valuesParsed) {
-    var leaf = valuesParsed ? val : parseArrayValue(val, options);
-
-    for (var i = chain.length - 1; i >= 0; --i) {
-        var obj;
-        var root = chain[i];
-
-        if (root === '[]' && options.parseArrays) {
-            obj = [].concat(leaf);
-        } else {
-            obj = options.plainObjects ? Object.create(null) : {};
-            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
-            var index = parseInt(cleanRoot, 10);
-            if (!options.parseArrays && cleanRoot === '') {
-                obj = { 0: leaf };
-            } else if (
-                !isNaN(index)
-                && root !== cleanRoot
-                && String(index) === cleanRoot
-                && index >= 0
-                && (options.parseArrays && index <= options.arrayLimit)
-            ) {
-                obj = [];
-                obj[index] = leaf;
-            } else if (cleanRoot !== '__proto__') {
-                obj[cleanRoot] = leaf;
-            }
-        }
-
-        leaf = obj;
-    }
-
-    return leaf;
-};
-
-var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
-    if (!givenKey) {
-        return;
-    }
-
-    // Transform dot notation to bracket notation
-    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;
-
-    // The regex chunks
-
-    var brackets = /(\[[^[\]]*])/;
-    var child = /(\[[^[\]]*])/g;
-
-    // Get the parent
-
-    var segment = options.depth > 0 && brackets.exec(key);
-    var parent = segment ? key.slice(0, segment.index) : key;
-
-    // Stash the parent if it exists
-
-    var keys = [];
-    if (parent) {
-        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
-        if (!options.plainObjects && has.call(Object.prototype, parent)) {
-            if (!options.allowPrototypes) {
-                return;
-            }
-        }
-
-        keys.push(parent);
-    }
+"use strict";var stringify=require(4),parse=require(3),formats=require(1);module.exports={formats:formats,parse:parse,stringify:stringify};
 
-    // Loop through children appending to the array until we hit depth
+},{"1":1,"3":3,"4":4}],3:[function(require,module,exports){
+"use strict";var utils=require(5),has=Object.prototype.hasOwnProperty,isArray=Array.isArray,defaults={allowDots:!1,allowEmptyArrays:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decodeDotInKeys:!1,decoder:utils.decode,delimiter:"&",depth:5,duplicates:"combine",ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictDepth:!1,strictNullHandling:!1},interpretNumericEntities=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},parseArrayValue=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},isoSentinel="utf8=%26%2310003%3B",charsetSentinel="utf8=%E2%9C%93",parseValues=function parseQueryStringValues(e,t){var r={__proto__:null},a=t.ignoreQueryPrefix?e.replace(/^\?/,""):e;a=a.replace(/%5B/gi,"[").replace(/%5D/gi,"]");var i,o=t.parameterLimit===1/0?void 0:t.parameterLimit,l=a.split(t.delimiter,o),s=-1,n=t.charset;if(t.charsetSentinel)for(i=0;i<l.length;++i)0===l[i].indexOf("utf8=")&&(l[i]===charsetSentinel?n="utf-8":l[i]===isoSentinel&&(n="iso-8859-1"),s=i,i=l.length);for(i=0;i<l.length;++i)if(i!==s){var p,c,d=l[i],u=d.indexOf("]="),f=-1===u?d.indexOf("="):u+1;-1===f?(p=t.decoder(d,defaults.decoder,n,"key"),c=t.strictNullHandling?null:""):(p=t.decoder(d.slice(0,f),defaults.decoder,n,"key"),c=utils.maybeMap(parseArrayValue(d.slice(f+1),t),(function(e){return t.decoder(e,defaults.decoder,n,"value")}))),c&&t.interpretNumericEntities&&"iso-8859-1"===n&&(c=interpretNumericEntities(c)),d.indexOf("[]=")>-1&&(c=isArray(c)?[c]:c);var y=has.call(r,p);y&&"combine"===t.duplicates?r[p]=utils.combine(r[p],c):y&&"last"!==t.duplicates||(r[p]=c)}return r},parseObject=function(e,t,r,a){for(var i=a?t:parseArrayValue(t,r),o=e.length-1;o>=0;--o){var l,s=e[o];if("[]"===s&&r.parseArrays)l=r.allowEmptyArrays&&(""===i||r.strictNullHandling&&null===i)?[]:[].concat(i);else{l=r.plainObjects?Object.create(null):{};var n="["===s.charAt(0)&&"]"===s.charAt(s.length-1)?s.slice(1,-1):s,p=r.decodeDotInKeys?n.replace(/%2E/g,"."):n,c=parseInt(p,10);r.parseArrays||""!==p?!isNaN(c)&&s!==p&&String(c)===p&&c>=0&&r.parseArrays&&c<=r.arrayLimit?(l=[])[c]=i:"__proto__"!==p&&(l[p]=i):l={0:i}}i=l}return i},parseKeys=function parseQueryStringKeys(e,t,r,a){if(e){var i=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,o=/(\[[^[\]]*])/g,l=r.depth>0&&/(\[[^[\]]*])/.exec(i),s=l?i.slice(0,l.index):i,n=[];if(s){if(!r.plainObjects&&has.call(Object.prototype,s)&&!r.allowPrototypes)return;n.push(s)}for(var p=0;r.depth>0&&null!==(l=o.exec(i))&&p<r.depth;){if(p+=1,!r.plainObjects&&has.call(Object.prototype,l[1].slice(1,-1))&&!r.allowPrototypes)return;n.push(l[1])}if(l){if(!0===r.strictDepth)throw new RangeError("Input depth exceeded depth option of "+r.depth+" and strictDepth is true");n.push("["+i.slice(l.index)+"]")}return parseObject(n,t,r,a)}},normalizeParseOptions=function normalizeParseOptions(e){if(!e)return defaults;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.decodeDotInKeys&&"boolean"!=typeof e.decodeDotInKeys)throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?defaults.charset:e.charset,r=void 0===e.duplicates?defaults.duplicates:e.duplicates;if("combine"!==r&&"first"!==r&&"last"!==r)throw new TypeError("The duplicates option must be either combine, first, or last");return{allowDots:void 0===e.allowDots?!0===e.decodeDotInKeys||defaults.allowDots:!!e.allowDots,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:defaults.allowEmptyArrays,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:defaults.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:defaults.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:defaults.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:defaults.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:defaults.comma,decodeDotInKeys:"boolean"==typeof e.decodeDotInKeys?e.decodeDotInKeys:defaults.decodeDotInKeys,decoder:"function"==typeof e.decoder?e.decoder:defaults.decoder,delimiter:"string"==typeof e.delimiter||utils.isRegExp(e.delimiter)?e.delimiter:defaults.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:defaults.depth,duplicates:r,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:defaults.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:defaults.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:defaults.plainObjects,strictDepth:"boolean"==typeof e.strictDepth?!!e.strictDepth:defaults.strictDepth,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:defaults.strictNullHandling}};module.exports=function(e,t){var r=normalizeParseOptions(t);if(""===e||null==e)return r.plainObjects?Object.create(null):{};for(var a="string"==typeof e?parseValues(e,r):e,i=r.plainObjects?Object.create(null):{},o=Object.keys(a),l=0;l<o.length;++l){var s=o[l],n=parseKeys(s,a[s],r,"string"==typeof e);i=utils.merge(i,n,r)}return!0===r.allowSparse?i:utils.compact(i)};
 
-    var i = 0;
-    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
-        i += 1;
-        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
-            if (!options.allowPrototypes) {
-                return;
-            }
-        }
-        keys.push(segment[1]);
-    }
+},{"5":5}],4:[function(require,module,exports){
+"use strict";var getSideChannel=require(29),utils=require(5),formats=require(1),has=Object.prototype.hasOwnProperty,arrayPrefixGenerators={brackets:function brackets(e){return e+"[]"},comma:"comma",indices:function indices(e,r){return e+"["+r+"]"},repeat:function repeat(e){return e}},isArray=Array.isArray,push=Array.prototype.push,pushToArray=function(e,r){push.apply(e,isArray(r)?r:[r])},toISO=Date.prototype.toISOString,defaultFormat=formats.default,defaults={addQueryPrefix:!1,allowDots:!1,allowEmptyArrays:!1,arrayFormat:"indices",charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encodeDotInKeys:!1,encoder:utils.encode,encodeValuesOnly:!1,format:defaultFormat,formatter:formats.formatters[defaultFormat],indices:!1,serializeDate:function serializeDate(e){return toISO.call(e)},skipNulls:!1,strictNullHandling:!1},isNonNullishPrimitive=function isNonNullishPrimitive(e){return"string"==typeof e||"number"==typeof e||"boolean"==typeof e||"symbol"==typeof e||"bigint"==typeof e},sentinel={},stringify=function stringify(e,r,t,o,a,n,i,l,s,f,u,d,y,c,p,m,h,v){for(var w=e,b=v,g=0,A=!1;void 0!==(b=b.get(sentinel))&&!A;){var D=b.get(e);if(g+=1,void 0!==D){if(D===g)throw new RangeError("Cyclic object value");A=!0}void 0===b.get(sentinel)&&(g=0)}if("function"==typeof f?w=f(r,w):w instanceof Date?w=y(w):"comma"===t&&isArray(w)&&(w=utils.maybeMap(w,(function(e){return e instanceof Date?y(e):e}))),null===w){if(n)return s&&!m?s(r,defaults.encoder,h,"key",c):r;w=""}if(isNonNullishPrimitive(w)||utils.isBuffer(w))return s?[p(m?r:s(r,defaults.encoder,h,"key",c))+"="+p(s(w,defaults.encoder,h,"value",c))]:[p(r)+"="+p(String(w))];var E,N=[];if(void 0===w)return N;if("comma"===t&&isArray(w))m&&s&&(w=utils.maybeMap(w,s)),E=[{value:w.length>0?w.join(",")||null:void 0}];else if(isArray(f))E=f;else{var S=Object.keys(w);E=u?S.sort(u):S}var O=l?r.replace(/\./g,"%2E"):r,T=o&&isArray(w)&&1===w.length?O+"[]":O;if(a&&isArray(w)&&0===w.length)return T+"[]";for(var k=0;k<E.length;++k){var I=E[k],P="object"==typeof I&&void 0!==I.value?I.value:w[I];if(!i||null!==P){var x=d&&l?I.replace(/\./g,"%2E"):I,z=isArray(w)?"function"==typeof t?t(T,x):T:T+(d?"."+x:"["+x+"]");v.set(e,g);var K=getSideChannel();K.set(sentinel,v),pushToArray(N,stringify(P,z,t,o,a,n,i,l,"comma"===t&&m&&isArray(w)?null:s,f,u,d,y,c,p,m,h,K))}}return N},normalizeStringifyOptions=function normalizeStringifyOptions(e){if(!e)return defaults;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.encodeDotInKeys&&"boolean"!=typeof e.encodeDotInKeys)throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var r=e.charset||defaults.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=formats.default;if(void 0!==e.format){if(!has.call(formats.formatters,e.format))throw new TypeError("Unknown format option provided.");t=e.format}var o,a=formats.formatters[t],n=defaults.filter;if(("function"==typeof e.filter||isArray(e.filter))&&(n=e.filter),o=e.arrayFormat in arrayPrefixGenerators?e.arrayFormat:"indices"in e?e.indices?"indices":"repeat":defaults.arrayFormat,"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var i=void 0===e.allowDots?!0===e.encodeDotInKeys||defaults.allowDots:!!e.allowDots;return{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:defaults.addQueryPrefix,allowDots:i,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:defaults.allowEmptyArrays,arrayFormat:o,charset:r,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:defaults.charsetSentinel,commaRoundTrip:e.commaRoundTrip,delimiter:void 0===e.delimiter?defaults.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:defaults.encode,encodeDotInKeys:"boolean"==typeof e.encodeDotInKeys?e.encodeDotInKeys:defaults.encodeDotInKeys,encoder:"function"==typeof e.encoder?e.encoder:defaults.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:defaults.encodeValuesOnly,filter:n,format:t,formatter:a,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:defaults.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:defaults.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:defaults.strictNullHandling}};module.exports=function(e,r){var t,o=e,a=normalizeStringifyOptions(r);"function"==typeof a.filter?o=(0,a.filter)("",o):isArray(a.filter)&&(t=a.filter);var n=[];if("object"!=typeof o||null===o)return"";var i=arrayPrefixGenerators[a.arrayFormat],l="comma"===i&&a.commaRoundTrip;t||(t=Object.keys(o)),a.sort&&t.sort(a.sort);for(var s=getSideChannel(),f=0;f<t.length;++f){var u=t[f];a.skipNulls&&null===o[u]||pushToArray(n,stringify(o[u],u,i,l,a.allowEmptyArrays,a.strictNullHandling,a.skipNulls,a.encodeDotInKeys,a.encode?a.encoder:null,a.filter,a.sort,a.allowDots,a.serializeDate,a.format,a.formatter,a.encodeValuesOnly,a.charset,s))}var d=n.join(a.delimiter),y=!0===a.addQueryPrefix?"?":"";return a.charsetSentinel&&("iso-8859-1"===a.charset?y+="utf8=%26%2310003%3B&":y+="utf8=%E2%9C%93&"),d.length>0?y+d:""};
 
-    // If there's a remainder, just add whatever is left
+},{"1":1,"29":29,"5":5}],5:[function(require,module,exports){
+"use strict";var formats=require(1),has=Object.prototype.hasOwnProperty,isArray=Array.isArray,hexTable=function(){for(var e=[],r=0;r<256;++r)e.push("%"+((r<16?"0":"")+r.toString(16)).toUpperCase());return e}(),compactQueue=function compactQueue(e){for(;e.length>1;){var r=e.pop(),t=r.obj[r.prop];if(isArray(t)){for(var o=[],n=0;n<t.length;++n)void 0!==t[n]&&o.push(t[n]);r.obj[r.prop]=o}}},arrayToObject=function arrayToObject(e,r){for(var t=r&&r.plainObjects?Object.create(null):{},o=0;o<e.length;++o)void 0!==e[o]&&(t[o]=e[o]);return t},merge=function merge(e,r,t){if(!r)return e;if("object"!=typeof r){if(isArray(e))e.push(r);else{if(!e||"object"!=typeof e)return[e,r];(t&&(t.plainObjects||t.allowPrototypes)||!has.call(Object.prototype,r))&&(e[r]=!0)}return e}if(!e||"object"!=typeof e)return[e].concat(r);var o=e;return isArray(e)&&!isArray(r)&&(o=arrayToObject(e,t)),isArray(e)&&isArray(r)?(r.forEach((function(r,o){if(has.call(e,o)){var n=e[o];n&&"object"==typeof n&&r&&"object"==typeof r?e[o]=merge(n,r,t):e.push(r)}else e[o]=r})),e):Object.keys(r).reduce((function(e,o){var n=r[o];return has.call(e,o)?e[o]=merge(e[o],n,t):e[o]=n,e}),o)},assign=function assignSingleSource(e,r){return Object.keys(r).reduce((function(e,t){return e[t]=r[t],e}),e)},decode=function(e,r,t){var o=e.replace(/\+/g," ");if("iso-8859-1"===t)return o.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(o)}catch(e){return o}},limit=1024,encode=function encode(e,r,t,o,n){if(0===e.length)return e;var a=e;if("symbol"==typeof e?a=Symbol.prototype.toString.call(e):"string"!=typeof e&&(a=String(e)),"iso-8859-1"===t)return escape(a).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var c="",i=0;i<a.length;i+=limit){for(var u=a.length>=limit?a.slice(i,i+limit):a,p=[],s=0;s<u.length;++s){var f=u.charCodeAt(s);45===f||46===f||95===f||126===f||f>=48&&f<=57||f>=65&&f<=90||f>=97&&f<=122||n===formats.RFC1738&&(40===f||41===f)?p[p.length]=u.charAt(s):f<128?p[p.length]=hexTable[f]:f<2048?p[p.length]=hexTable[192|f>>6]+hexTable[128|63&f]:f<55296||f>=57344?p[p.length]=hexTable[224|f>>12]+hexTable[128|f>>6&63]+hexTable[128|63&f]:(s+=1,f=65536+((1023&f)<<10|1023&u.charCodeAt(s)),p[p.length]=hexTable[240|f>>18]+hexTable[128|f>>12&63]+hexTable[128|f>>6&63]+hexTable[128|63&f])}c+=p.join("")}return c},compact=function compact(e){for(var r=[{obj:{o:e},prop:"o"}],t=[],o=0;o<r.length;++o)for(var n=r[o],a=n.obj[n.prop],c=Object.keys(a),i=0;i<c.length;++i){var u=c[i],p=a[u];"object"==typeof p&&null!==p&&-1===t.indexOf(p)&&(r.push({obj:a,prop:u}),t.push(p))}return compactQueue(r),e},isRegExp=function isRegExp(e){return"[object RegExp]"===Object.prototype.toString.call(e)},isBuffer=function isBuffer(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},combine=function combine(e,r){return[].concat(e,r)},maybeMap=function maybeMap(e,r){if(isArray(e)){for(var t=[],o=0;o<e.length;o+=1)t.push(r(e[o]));return t}return r(e)};module.exports={/* common-shake removed: arrayToObject:arrayToObject *//* common-shake removed: assign:assign */combine:combine,compact:compact,decode:decode,encode:encode,isBuffer:isBuffer,isRegExp:isRegExp,maybeMap:maybeMap,merge:merge};
 
-    if (segment) {
-        keys.push('[' + key.slice(segment.index) + ']');
-    }
+},{"1":1}],29:[function(require,module,exports){
+"use strict";var GetIntrinsic=require(20),callBound=require(7),inspect=require(27),$TypeError=require(16),$WeakMap=GetIntrinsic("%WeakMap%",!0),$Map=GetIntrinsic("%Map%",!0),$weakMapGet=callBound("WeakMap.prototype.get",!0),$weakMapSet=callBound("WeakMap.prototype.set",!0),$weakMapHas=callBound("WeakMap.prototype.has",!0),$mapGet=callBound("Map.prototype.get",!0),$mapSet=callBound("Map.prototype.set",!0),$mapHas=callBound("Map.prototype.has",!0),listGetNode=function(e,t){for(var n,a=e;null!==(n=a.next);a=n)if(n.key===t)return a.next=n.next,n.next=e.next,e.next=n,n},listGet=function(e,t){var n=listGetNode(e,t);return n&&n.value},listSet=function(e,t,n){var a=listGetNode(e,t);a?a.value=n:e.next={key:t,next:e.next,value:n}},listHas=function(e,t){return!!listGetNode(e,t)};module.exports=function getSideChannel(){var e,t,n,a={assert:function(e){if(!a.has(e))throw new $TypeError("Side channel does not contain "+inspect(e))},get:function(a){if($WeakMap&&a&&("object"==typeof a||"function"==typeof a)){if(e)return $weakMapGet(e,a)}else if($Map){if(t)return $mapGet(t,a)}else if(n)return listGet(n,a)},has:function(a){if($WeakMap&&a&&("object"==typeof a||"function"==typeof a)){if(e)return $weakMapHas(e,a)}else if($Map){if(t)return $mapHas(t,a)}else if(n)return listHas(n,a);return!1},set:function(a,r){$WeakMap&&a&&("object"==typeof a||"function"==typeof a)?(e||(e=new $WeakMap),$weakMapSet(e,a,r)):$Map?(t||(t=new $Map),$mapSet(t,a,r)):(n||(n={key:{},next:null}),listSet(n,a,r))}};return a};
 
-    return parseObject(keys, val, options, valuesParsed);
-};
-
-var normalizeParseOptions = function normalizeParseOptions(opts) {
-    if (!opts) {
-        return defaults;
-    }
-
-    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
-        throw new TypeError('Decoder has to be a function.');
-    }
-
-    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
-        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
-    }
-    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
-
-    return {
-        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
-        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
-        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
-        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
-        charset: charset,
-        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
-        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
-        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
-        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
-        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
-        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
-        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
-        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
-        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
-        parseArrays: opts.parseArrays !== false,
-        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
-        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
-    };
-};
-
-module.exports = function (str, opts) {
-    var options = normalizeParseOptions(opts);
-
-    if (str === '' || str === null || typeof str === 'undefined') {
-        return options.plainObjects ? Object.create(null) : {};
-    }
-
-    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
-    var obj = options.plainObjects ? Object.create(null) : {};
-
-    // Iterate over the keys and setup the new object
-
-    var keys = Object.keys(tempObj);
-    for (var i = 0; i < keys.length; ++i) {
-        var key = keys[i];
-        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
-        obj = utils.merge(obj, newObj, options);
-    }
-
-    if (options.allowSparse === true) {
-        return obj;
-    }
-
-    return utils.compact(obj);
-};
-
-},{"./utils":5}],4:[function(require,module,exports){
-'use strict';
-
-var getSideChannel = require('side-channel');
-var utils = require('./utils');
-var formats = require('./formats');
-var has = Object.prototype.hasOwnProperty;
-
-var arrayPrefixGenerators = {
-    brackets: function brackets(prefix) {
-        return prefix + '[]';
-    },
-    comma: 'comma',
-    indices: function indices(prefix, key) {
-        return prefix + '[' + key + ']';
-    },
-    repeat: function repeat(prefix) {
-        return prefix;
-    }
-};
-
-var isArray = Array.isArray;
-var split = String.prototype.split;
-var push = Array.prototype.push;
-var pushToArray = function (arr, valueOrArray) {
-    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
-};
-
-var toISO = Date.prototype.toISOString;
-
-var defaultFormat = formats['default'];
-var defaults = {
-    addQueryPrefix: false,
-    allowDots: false,
-    charset: 'utf-8',
-    charsetSentinel: false,
-    delimiter: '&',
-    encode: true,
-    encoder: utils.encode,
-    encodeValuesOnly: false,
-    format: defaultFormat,
-    formatter: formats.formatters[defaultFormat],
-    // deprecated
-    indices: false,
-    serializeDate: function serializeDate(date) {
-        return toISO.call(date);
-    },
-    skipNulls: false,
-    strictNullHandling: false
-};
-
-var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
-    return typeof v === 'string'
-        || typeof v === 'number'
-        || typeof v === 'boolean'
-        || typeof v === 'symbol'
-        || typeof v === 'bigint';
-};
-
-var sentinel = {};
-
-var stringify = function stringify(
-    object,
-    prefix,
-    generateArrayPrefix,
-    commaRoundTrip,
-    strictNullHandling,
-    skipNulls,
-    encoder,
-    filter,
-    sort,
-    allowDots,
-    serializeDate,
-    format,
-    formatter,
-    encodeValuesOnly,
-    charset,
-    sideChannel
-) {
-    var obj = object;
-
-    var tmpSc = sideChannel;
-    var step = 0;
-    var findFlag = false;
-    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
-        // Where object last appeared in the ref tree
-        var pos = tmpSc.get(object);
-        step += 1;
-        if (typeof pos !== 'undefined') {
-            if (pos === step) {
-                throw new RangeError('Cyclic object value');
-            } else {
-                findFlag = true; // Break while
-            }
-        }
-        if (typeof tmpSc.get(sentinel) === 'undefined') {
-            step = 0;
-        }
-    }
-
-    if (typeof filter === 'function') {
-        obj = filter(prefix, obj);
-    } else if (obj instanceof Date) {
-        obj = serializeDate(obj);
-    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
-        obj = utils.maybeMap(obj, function (value) {
-            if (value instanceof Date) {
-                return serializeDate(value);
-            }
-            return value;
-        });
-    }
-
-    if (obj === null) {
-        if (strictNullHandling) {
-            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
-        }
-
-        obj = '';
-    }
-
-    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
-        if (encoder) {
-            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
-            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
-                var valuesArray = split.call(String(obj), ',');
-                var valuesJoined = '';
-                for (var i = 0; i < valuesArray.length; ++i) {
-                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));
-                }
-                return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];
-            }
-            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
-        }
-        return [formatter(prefix) + '=' + formatter(String(obj))];
-    }
-
-    var values = [];
-
-    if (typeof obj === 'undefined') {
-        return values;
-    }
-
-    var objKeys;
-    if (generateArrayPrefix === 'comma' && isArray(obj)) {
-        // we need to join elements in
-        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
-    } else if (isArray(filter)) {
-        objKeys = filter;
-    } else {
-        var keys = Object.keys(obj);
-        objKeys = sort ? keys.sort(sort) : keys;
-    }
-
-    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;
-
-    for (var j = 0; j < objKeys.length; ++j) {
-        var key = objKeys[j];
-        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];
-
-        if (skipNulls && value === null) {
-            continue;
-        }
-
-        var keyPrefix = isArray(obj)
-            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix
-            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');
-
-        sideChannel.set(object, step);
-        var valueSideChannel = getSideChannel();
-        valueSideChannel.set(sentinel, sideChannel);
-        pushToArray(values, stringify(
-            value,
-            keyPrefix,
-            generateArrayPrefix,
-            commaRoundTrip,
-            strictNullHandling,
-            skipNulls,
-            encoder,
-            filter,
-            sort,
-            allowDots,
-            serializeDate,
-            format,
-            formatter,
-            encodeValuesOnly,
-            charset,
-            valueSideChannel
-        ));
-    }
-
-    return values;
-};
-
-var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
-    if (!opts) {
-        return defaults;
-    }
-
-    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
-        throw new TypeError('Encoder has to be a function.');
-    }
-
-    var charset = opts.charset || defaults.charset;
-    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
-        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
-    }
-
-    var format = formats['default'];
-    if (typeof opts.format !== 'undefined') {
-        if (!has.call(formats.formatters, opts.format)) {
-            throw new TypeError('Unknown format option provided.');
-        }
-        format = opts.format;
-    }
-    var formatter = formats.formatters[format];
-
-    var filter = defaults.filter;
-    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
-        filter = opts.filter;
-    }
-
-    return {
-        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
-        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
-        charset: charset,
-        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
-        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
-        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
-        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
-        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
-        filter: filter,
-        format: format,
-        formatter: formatter,
-        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
-        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
-        sort: typeof opts.sort === 'function' ? opts.sort : null,
-        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
-    };
-};
-
-module.exports = function (object, opts) {
-    var obj = object;
-    var options = normalizeStringifyOptions(opts);
-
-    var objKeys;
-    var filter;
-
-    if (typeof options.filter === 'function') {
-        filter = options.filter;
-        obj = filter('', obj);
-    } else if (isArray(options.filter)) {
-        filter = options.filter;
-        objKeys = filter;
-    }
-
-    var keys = [];
-
-    if (typeof obj !== 'object' || obj === null) {
-        return '';
-    }
-
-    var arrayFormat;
-    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
-        arrayFormat = opts.arrayFormat;
-    } else if (opts && 'indices' in opts) {
-        arrayFormat = opts.indices ? 'indices' : 'repeat';
-    } else {
-        arrayFormat = 'indices';
-    }
-
-    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
-    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
-        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
-    }
-    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;
-
-    if (!objKeys) {
-        objKeys = Object.keys(obj);
-    }
-
-    if (options.sort) {
-        objKeys.sort(options.sort);
-    }
-
-    var sideChannel = getSideChannel();
-    for (var i = 0; i < objKeys.length; ++i) {
-        var key = objKeys[i];
-
-        if (options.skipNulls && obj[key] === null) {
-            continue;
-        }
-        pushToArray(keys, stringify(
-            obj[key],
-            key,
-            generateArrayPrefix,
-            commaRoundTrip,
-            options.strictNullHandling,
-            options.skipNulls,
-            options.encode ? options.encoder : null,
-            options.filter,
-            options.sort,
-            options.allowDots,
-            options.serializeDate,
-            options.format,
-            options.formatter,
-            options.encodeValuesOnly,
-            options.charset,
-            sideChannel
-        ));
-    }
-
-    var joined = keys.join(options.delimiter);
-    var prefix = options.addQueryPrefix === true ? '?' : '';
-
-    if (options.charsetSentinel) {
-        if (options.charset === 'iso-8859-1') {
-            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
-            prefix += 'utf8=%26%2310003%3B&';
-        } else {
-            // encodeURIComponent('✓')
-            prefix += 'utf8=%E2%9C%93&';
-        }
-    }
-
-    return joined.length > 0 ? prefix + joined : '';
-};
-
-},{"./formats":1,"./utils":5,"side-channel":16}],5:[function(require,module,exports){
-'use strict';
-
-var formats = require('./formats');
-
-var has = Object.prototype.hasOwnProperty;
-var isArray = Array.isArray;
-
-var hexTable = (function () {
-    var array = [];
-    for (var i = 0; i < 256; ++i) {
-        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
-    }
-
-    return array;
-}());
-
-var compactQueue = function compactQueue(queue) {
-    while (queue.length > 1) {
-        var item = queue.pop();
-        var obj = item.obj[item.prop];
-
-        if (isArray(obj)) {
-            var compacted = [];
-
-            for (var j = 0; j < obj.length; ++j) {
-                if (typeof obj[j] !== 'undefined') {
-                    compacted.push(obj[j]);
-                }
-            }
-
-            item.obj[item.prop] = compacted;
-        }
-    }
-};
-
-var arrayToObject = function arrayToObject(source, options) {
-    var obj = options && options.plainObjects ? Object.create(null) : {};
-    for (var i = 0; i < source.length; ++i) {
-        if (typeof source[i] !== 'undefined') {
-            obj[i] = source[i];
-        }
-    }
-
-    return obj;
-};
-
-var merge = function merge(target, source, options) {
-    /* eslint no-param-reassign: 0 */
-    if (!source) {
-        return target;
-    }
-
-    if (typeof source !== 'object') {
-        if (isArray(target)) {
-            target.push(source);
-        } else if (target && typeof target === 'object') {
-            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
-                target[source] = true;
-            }
-        } else {
-            return [target, source];
-        }
-
-        return target;
-    }
-
-    if (!target || typeof target !== 'object') {
-        return [target].concat(source);
-    }
-
-    var mergeTarget = target;
-    if (isArray(target) && !isArray(source)) {
-        mergeTarget = arrayToObject(target, options);
-    }
-
-    if (isArray(target) && isArray(source)) {
-        source.forEach(function (item, i) {
-            if (has.call(target, i)) {
-                var targetItem = target[i];
-                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
-                    target[i] = merge(targetItem, item, options);
-                } else {
-                    target.push(item);
-                }
-            } else {
-                target[i] = item;
-            }
-        });
-        return target;
-    }
-
-    return Object.keys(source).reduce(function (acc, key) {
-        var value = source[key];
-
-        if (has.call(acc, key)) {
-            acc[key] = merge(acc[key], value, options);
-        } else {
-            acc[key] = value;
-        }
-        return acc;
-    }, mergeTarget);
-};
-
-var assign = function assignSingleSource(target, source) {
-    return Object.keys(source).reduce(function (acc, key) {
-        acc[key] = source[key];
-        return acc;
-    }, target);
-};
-
-var decode = function (str, decoder, charset) {
-    var strWithoutPlus = str.replace(/\+/g, ' ');
-    if (charset === 'iso-8859-1') {
-        // unescape never throws, no try...catch needed:
-        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
-    }
-    // utf-8
-    try {
-        return decodeURIComponent(strWithoutPlus);
-    } catch (e) {
-        return strWithoutPlus;
-    }
-};
-
-var encode = function encode(str, defaultEncoder, charset, kind, format) {
-    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
-    // It has been adapted here for stricter adherence to RFC 3986
-    if (str.length === 0) {
-        return str;
-    }
-
-    var string = str;
-    if (typeof str === 'symbol') {
-        string = Symbol.prototype.toString.call(str);
-    } else if (typeof str !== 'string') {
-        string = String(str);
-    }
-
-    if (charset === 'iso-8859-1') {
-        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
-            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
-        });
-    }
-
-    var out = '';
-    for (var i = 0; i < string.length; ++i) {
-        var c = string.charCodeAt(i);
-
-        if (
-            c === 0x2D // -
-            || c === 0x2E // .
-            || c === 0x5F // _
-            || c === 0x7E // ~
-            || (c >= 0x30 && c <= 0x39) // 0-9
-            || (c >= 0x41 && c <= 0x5A) // a-z
-            || (c >= 0x61 && c <= 0x7A) // A-Z
-            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
-        ) {
-            out += string.charAt(i);
-            continue;
-        }
-
-        if (c < 0x80) {
-            out = out + hexTable[c];
-            continue;
-        }
-
-        if (c < 0x800) {
-            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
-            continue;
-        }
-
-        if (c < 0xD800 || c >= 0xE000) {
-            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
-            continue;
-        }
-
-        i += 1;
-        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
-        /* eslint operator-linebreak: [2, "before"] */
-        out += hexTable[0xF0 | (c >> 18)]
-            + hexTable[0x80 | ((c >> 12) & 0x3F)]
-            + hexTable[0x80 | ((c >> 6) & 0x3F)]
-            + hexTable[0x80 | (c & 0x3F)];
-    }
-
-    return out;
-};
-
-var compact = function compact(value) {
-    var queue = [{ obj: { o: value }, prop: 'o' }];
-    var refs = [];
-
-    for (var i = 0; i < queue.length; ++i) {
-        var item = queue[i];
-        var obj = item.obj[item.prop];
-
-        var keys = Object.keys(obj);
-        for (var j = 0; j < keys.length; ++j) {
-            var key = keys[j];
-            var val = obj[key];
-            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
-                queue.push({ obj: obj, prop: key });
-                refs.push(val);
-            }
-        }
-    }
-
-    compactQueue(queue);
-
-    return value;
-};
-
-var isRegExp = function isRegExp(obj) {
-    return Object.prototype.toString.call(obj) === '[object RegExp]';
-};
-
-var isBuffer = function isBuffer(obj) {
-    if (!obj || typeof obj !== 'object') {
-        return false;
-    }
-
-    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
-};
-
-var combine = function combine(a, b) {
-    return [].concat(a, b);
-};
-
-var maybeMap = function maybeMap(val, fn) {
-    if (isArray(val)) {
-        var mapped = [];
-        for (var i = 0; i < val.length; i += 1) {
-            mapped.push(fn(val[i]));
-        }
-        return mapped;
-    }
-    return fn(val);
-};
-
-module.exports = {
-    arrayToObject: arrayToObject,
-    assign: assign,
-    combine: combine,
-    compact: compact,
-    decode: decode,
-    encode: encode,
-    isBuffer: isBuffer,
-    isRegExp: isRegExp,
-    maybeMap: maybeMap,
-    merge: merge
-};
-
-},{"./formats":1}],6:[function(require,module,exports){
+},{"16":16,"20":20,"27":27,"7":7}],6:[function(require,module,exports){
 
 },{}],7:[function(require,module,exports){
-'use strict';
-
-var GetIntrinsic = require('get-intrinsic');
-
-var callBind = require('./');
-
-var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
-
-module.exports = function callBoundIntrinsic(name, allowMissing) {
-	var intrinsic = GetIntrinsic(name, !!allowMissing);
-	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
-		return callBind(intrinsic);
-	}
-	return intrinsic;
-};
-
-},{"./":8,"get-intrinsic":11}],8:[function(require,module,exports){
-'use strict';
-
-var bind = require('function-bind');
-var GetIntrinsic = require('get-intrinsic');
-
-var $apply = GetIntrinsic('%Function.prototype.apply%');
-var $call = GetIntrinsic('%Function.prototype.call%');
-var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
-
-var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
-var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
-var $max = GetIntrinsic('%Math.max%');
-
-if ($defineProperty) {
-	try {
-		$defineProperty({}, 'a', { value: 1 });
-	} catch (e) {
-		// IE 8 has a broken defineProperty
-		$defineProperty = null;
-	}
-}
-
-module.exports = function callBind(originalFunction) {
-	var func = $reflectApply(bind, $call, arguments);
-	if ($gOPD && $defineProperty) {
-		var desc = $gOPD(func, 'length');
-		if (desc.configurable) {
-			// original length, plus the receiver, minus any additional arguments (after the receiver)
-			$defineProperty(
-				func,
-				'length',
-				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
-			);
-		}
-	}
-	return func;
-};
-
-var applyBind = function applyBind() {
-	return $reflectApply(bind, $apply, arguments);
-};
-
-if ($defineProperty) {
-	$defineProperty(module.exports, 'apply', { value: applyBind });
-} else {
-	module.exports.apply = applyBind;
-}
-
-},{"function-bind":10,"get-intrinsic":11}],9:[function(require,module,exports){
-'use strict';
-
-/* eslint no-invalid-this: 1 */
-
-var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
-var slice = Array.prototype.slice;
-var toStr = Object.prototype.toString;
-var funcType = '[object Function]';
-
-module.exports = function bind(that) {
-    var target = this;
-    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
-        throw new TypeError(ERROR_MESSAGE + target);
-    }
-    var args = slice.call(arguments, 1);
-
-    var bound;
-    var binder = function () {
-        if (this instanceof bound) {
-            var result = target.apply(
-                this,
-                args.concat(slice.call(arguments))
-            );
-            if (Object(result) === result) {
-                return result;
-            }
-            return this;
-        } else {
-            return target.apply(
-                that,
-                args.concat(slice.call(arguments))
-            );
-        }
-    };
-
-    var boundLength = Math.max(0, target.length - args.length);
-    var boundArgs = [];
-    for (var i = 0; i < boundLength; i++) {
-        boundArgs.push('$' + i);
-    }
-
-    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
-
-    if (target.prototype) {
-        var Empty = function Empty() {};
-        Empty.prototype = target.prototype;
-        bound.prototype = new Empty();
-        Empty.prototype = null;
-    }
-
-    return bound;
-};
-
-},{}],10:[function(require,module,exports){
-'use strict';
-
-var implementation = require('./implementation');
-
-module.exports = Function.prototype.bind || implementation;
-
-},{"./implementation":9}],11:[function(require,module,exports){
-'use strict';
-
-var undefined;
-
-var $SyntaxError = SyntaxError;
-var $Function = Function;
-var $TypeError = TypeError;
-
-// eslint-disable-next-line consistent-return
-var getEvalledConstructor = function (expressionSyntax) {
-	try {
-		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
-	} catch (e) {}
-};
-
-var $gOPD = Object.getOwnPropertyDescriptor;
-if ($gOPD) {
-	try {
-		$gOPD({}, '');
-	} catch (e) {
-		$gOPD = null; // this is IE 8, which has a broken gOPD
-	}
-}
-
-var throwTypeError = function () {
-	throw new $TypeError();
-};
-var ThrowTypeError = $gOPD
-	? (function () {
-		try {
-			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
-			arguments.callee; // IE 8 does not throw here
-			return throwTypeError;
-		} catch (calleeThrows) {
-			try {
-				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
-				return $gOPD(arguments, 'callee').get;
-			} catch (gOPDthrows) {
-				return throwTypeError;
-			}
-		}
-	}())
-	: throwTypeError;
-
-var hasSymbols = require('has-symbols')();
-
-var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
-
-var needsEval = {};
-
-var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
-
-var INTRINSICS = {
-	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
-	'%Array%': Array,
-	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
-	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
-	'%AsyncFromSyncIteratorPrototype%': undefined,
-	'%AsyncFunction%': needsEval,
-	'%AsyncGenerator%': needsEval,
-	'%AsyncGeneratorFunction%': needsEval,
-	'%AsyncIteratorPrototype%': needsEval,
-	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
-	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
-	'%Boolean%': Boolean,
-	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
-	'%Date%': Date,
-	'%decodeURI%': decodeURI,
-	'%decodeURIComponent%': decodeURIComponent,
-	'%encodeURI%': encodeURI,
-	'%encodeURIComponent%': encodeURIComponent,
-	'%Error%': Error,
-	'%eval%': eval, // eslint-disable-line no-eval
-	'%EvalError%': EvalError,
-	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
-	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
-	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
-	'%Function%': $Function,
-	'%GeneratorFunction%': needsEval,
-	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
-	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
-	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
-	'%isFinite%': isFinite,
-	'%isNaN%': isNaN,
-	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
-	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
-	'%Map%': typeof Map === 'undefined' ? undefined : Map,
-	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
-	'%Math%': Math,
-	'%Number%': Number,
-	'%Object%': Object,
-	'%parseFloat%': parseFloat,
-	'%parseInt%': parseInt,
-	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
-	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
-	'%RangeError%': RangeError,
-	'%ReferenceError%': ReferenceError,
-	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
-	'%RegExp%': RegExp,
-	'%Set%': typeof Set === 'undefined' ? undefined : Set,
-	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
-	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
-	'%String%': String,
-	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
-	'%Symbol%': hasSymbols ? Symbol : undefined,
-	'%SyntaxError%': $SyntaxError,
-	'%ThrowTypeError%': ThrowTypeError,
-	'%TypedArray%': TypedArray,
-	'%TypeError%': $TypeError,
-	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
-	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
-	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
-	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
-	'%URIError%': URIError,
-	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
-	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
-	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
-};
-
-var doEval = function doEval(name) {
-	var value;
-	if (name === '%AsyncFunction%') {
-		value = getEvalledConstructor('async function () {}');
-	} else if (name === '%GeneratorFunction%') {
-		value = getEvalledConstructor('function* () {}');
-	} else if (name === '%AsyncGeneratorFunction%') {
-		value = getEvalledConstructor('async function* () {}');
-	} else if (name === '%AsyncGenerator%') {
-		var fn = doEval('%AsyncGeneratorFunction%');
-		if (fn) {
-			value = fn.prototype;
-		}
-	} else if (name === '%AsyncIteratorPrototype%') {
-		var gen = doEval('%AsyncGenerator%');
-		if (gen) {
-			value = getProto(gen.prototype);
-		}
-	}
+"use strict";var GetIntrinsic=require(20),callBind=require(8),$indexOf=callBind(GetIntrinsic("String.prototype.indexOf"));module.exports=function callBoundIntrinsic(i,n){var t=GetIntrinsic(i,!!n);return"function"==typeof t&&$indexOf(i,".prototype.")>-1?callBind(t):t};
 
-	INTRINSICS[name] = value;
+},{"20":20,"8":8}],20:[function(require,module,exports){
+"use strict";var undefined,$Error=require(12),$EvalError=require(11),$RangeError=require(13),$ReferenceError=require(14),$SyntaxError=require(15),$TypeError=require(16),$URIError=require(17),$Function=Function,getEvalledConstructor=function(r){try{return $Function('"use strict"; return ('+r+").constructor;")()}catch(r){}},$gOPD=Object.getOwnPropertyDescriptor;if($gOPD)try{$gOPD({},"")}catch(r){$gOPD=null}var throwTypeError=function(){throw new $TypeError},ThrowTypeError=$gOPD?function(){try{return throwTypeError}catch(r){try{return $gOPD(arguments,"callee").get}catch(r){return throwTypeError}}}():throwTypeError,hasSymbols=require(24)(),hasProto=require(23)(),getProto=Object.getPrototypeOf||(hasProto?function(r){return r.__proto__}:null),needsEval={},TypedArray="undefined"!=typeof Uint8Array&&getProto?getProto(Uint8Array):undefined,INTRINSICS={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?undefined:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?undefined:ArrayBuffer,"%ArrayIteratorPrototype%":hasSymbols&&getProto?getProto([][Symbol.iterator]()):undefined,"%AsyncFromSyncIteratorPrototype%":undefined,"%AsyncFunction%":needsEval,"%AsyncGenerator%":needsEval,"%AsyncGeneratorFunction%":needsEval,"%AsyncIteratorPrototype%":needsEval,"%Atomics%":"undefined"==typeof Atomics?undefined:Atomics,"%BigInt%":"undefined"==typeof BigInt?undefined:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?undefined:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?undefined:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?undefined:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":$Error,"%eval%":eval,"%EvalError%":$EvalError,"%Float32Array%":"undefined"==typeof Float32Array?undefined:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?undefined:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?undefined:FinalizationRegistry,"%Function%":$Function,"%GeneratorFunction%":needsEval,"%Int8Array%":"undefined"==typeof Int8Array?undefined:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?undefined:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?undefined:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":hasSymbols&&getProto?getProto(getProto([][Symbol.iterator]())):undefined,"%JSON%":"object"==typeof JSON?JSON:undefined,"%Map%":"undefined"==typeof Map?undefined:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&hasSymbols&&getProto?getProto((new Map)[Symbol.iterator]()):undefined,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?undefined:Promise,"%Proxy%":"undefined"==typeof Proxy?undefined:Proxy,"%RangeError%":$RangeError,"%ReferenceError%":$ReferenceError,"%Reflect%":"undefined"==typeof Reflect?undefined:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?undefined:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&hasSymbols&&getProto?getProto((new Set)[Symbol.iterator]()):undefined,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?undefined:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":hasSymbols&&getProto?getProto(""[Symbol.iterator]()):undefined,"%Symbol%":hasSymbols?Symbol:undefined,"%SyntaxError%":$SyntaxError,"%ThrowTypeError%":ThrowTypeError,"%TypedArray%":TypedArray,"%TypeError%":$TypeError,"%Uint8Array%":"undefined"==typeof Uint8Array?undefined:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?undefined:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?undefined:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?undefined:Uint32Array,"%URIError%":$URIError,"%WeakMap%":"undefined"==typeof WeakMap?undefined:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?undefined:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?undefined:WeakSet};if(getProto)try{null.error}catch(r){var errorProto=getProto(getProto(r));INTRINSICS["%Error.prototype%"]=errorProto}var doEval=function doEval(r){var e;if("%AsyncFunction%"===r)e=getEvalledConstructor("async function () {}");else if("%GeneratorFunction%"===r)e=getEvalledConstructor("function* () {}");else if("%AsyncGeneratorFunction%"===r)e=getEvalledConstructor("async function* () {}");else if("%AsyncGenerator%"===r){var t=doEval("%AsyncGeneratorFunction%");t&&(e=t.prototype)}else if("%AsyncIteratorPrototype%"===r){var o=doEval("%AsyncGenerator%");o&&getProto&&(e=getProto(o.prototype))}return INTRINSICS[r]=e,e},LEGACY_ALIASES={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},bind=require(19),hasOwn=require(26),$concat=bind.call(Function.call,Array.prototype.concat),$spliceApply=bind.call(Function.apply,Array.prototype.splice),$replace=bind.call(Function.call,String.prototype.replace),$strSlice=bind.call(Function.call,String.prototype.slice),$exec=bind.call(Function.call,RegExp.prototype.exec),rePropName=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=function stringToPath(r){var e=$strSlice(r,0,1),t=$strSlice(r,-1);if("%"===e&&"%"!==t)throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");if("%"===t&&"%"!==e)throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");var o=[];return $replace(r,rePropName,(function(r,e,t,n){o[o.length]=t?$replace(n,reEscapeChar,"$1"):e||r})),o},getBaseIntrinsic=function getBaseIntrinsic(r,e){var t,o=r;if(hasOwn(LEGACY_ALIASES,o)&&(o="%"+(t=LEGACY_ALIASES[o])[0]+"%"),hasOwn(INTRINSICS,o)){var n=INTRINSICS[o];if(n===needsEval&&(n=doEval(o)),void 0===n&&!e)throw new $TypeError("intrinsic "+r+" exists, but is not available. Please file an issue!");return{alias:t,name:o,value:n}}throw new $SyntaxError("intrinsic "+r+" does not exist!")};module.exports=function GetIntrinsic(r,e){if("string"!=typeof r||0===r.length)throw new $TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new $TypeError('"allowMissing" argument must be a boolean');if(null===$exec(/^%?[^%]*%?$/,r))throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var t=stringToPath(r),o=t.length>0?t[0]:"",n=getBaseIntrinsic("%"+o+"%",e),a=n.name,y=n.value,i=!1,p=n.alias;p&&(o=p[0],$spliceApply(t,$concat([0,1],p)));for(var d=1,s=!0;d<t.length;d+=1){var f=t[d],u=$strSlice(f,0,1),l=$strSlice(f,-1);if(('"'===u||"'"===u||"`"===u||'"'===l||"'"===l||"`"===l)&&u!==l)throw new $SyntaxError("property names with quotes must have matching quotes");if("constructor"!==f&&s||(i=!0),hasOwn(INTRINSICS,a="%"+(o+="."+f)+"%"))y=INTRINSICS[a];else if(null!=y){if(!(f in y)){if(!e)throw new $TypeError("base intrinsic for "+r+" exists, but the property is not available.");return}if($gOPD&&d+1>=t.length){var c=$gOPD(y,f);y=(s=!!c)&&"get"in c&&!("originalValue"in c.get)?c.get:y[f]}else s=hasOwn(y,f),y=y[f];s&&!i&&(INTRINSICS[a]=y)}}return y};
 
-	return value;
-};
+},{"11":11,"12":12,"13":13,"14":14,"15":15,"16":16,"17":17,"19":19,"23":23,"24":24,"26":26}],8:[function(require,module,exports){
+"use strict";var bind=require(19),GetIntrinsic=require(20),setFunctionLength=require(28),$TypeError=require(16),$apply=GetIntrinsic("%Function.prototype.apply%"),$call=GetIntrinsic("%Function.prototype.call%"),$reflectApply=GetIntrinsic("%Reflect.apply%",!0)||bind.call($call,$apply),$defineProperty=require(10),$max=GetIntrinsic("%Math.max%");module.exports=function callBind(e){if("function"!=typeof e)throw new $TypeError("a function is required");var n=$reflectApply(bind,$call,arguments);return setFunctionLength(n,1+$max(0,e.length-(arguments.length-1)),!0)};var applyBind=function applyBind(){return $reflectApply(bind,$apply,arguments)};$defineProperty?$defineProperty(module.exports,"apply",{value:applyBind}):module.exports.apply=applyBind;
 
-var LEGACY_ALIASES = {
-	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
-	'%ArrayPrototype%': ['Array', 'prototype'],
-	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
-	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
-	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
-	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
-	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
-	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
-	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
-	'%BooleanPrototype%': ['Boolean', 'prototype'],
-	'%DataViewPrototype%': ['DataView', 'prototype'],
-	'%DatePrototype%': ['Date', 'prototype'],
-	'%ErrorPrototype%': ['Error', 'prototype'],
-	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
-	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
-	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
-	'%FunctionPrototype%': ['Function', 'prototype'],
-	'%Generator%': ['GeneratorFunction', 'prototype'],
-	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
-	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
-	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
-	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
-	'%JSONParse%': ['JSON', 'parse'],
-	'%JSONStringify%': ['JSON', 'stringify'],
-	'%MapPrototype%': ['Map', 'prototype'],
-	'%NumberPrototype%': ['Number', 'prototype'],
-	'%ObjectPrototype%': ['Object', 'prototype'],
-	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
-	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
-	'%PromisePrototype%': ['Promise', 'prototype'],
-	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
-	'%Promise_all%': ['Promise', 'all'],
-	'%Promise_reject%': ['Promise', 'reject'],
-	'%Promise_resolve%': ['Promise', 'resolve'],
-	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
-	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
-	'%RegExpPrototype%': ['RegExp', 'prototype'],
-	'%SetPrototype%': ['Set', 'prototype'],
-	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
-	'%StringPrototype%': ['String', 'prototype'],
-	'%SymbolPrototype%': ['Symbol', 'prototype'],
-	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
-	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
-	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
-	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
-	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
-	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
-	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
-	'%URIErrorPrototype%': ['URIError', 'prototype'],
-	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
-	'%WeakSetPrototype%': ['WeakSet', 'prototype']
-};
+},{"10":10,"16":16,"19":19,"20":20,"28":28}],16:[function(require,module,exports){
+"use strict";module.exports=TypeError;
 
-var bind = require('function-bind');
-var hasOwn = require('has');
-var $concat = bind.call(Function.call, Array.prototype.concat);
-var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
-var $replace = bind.call(Function.call, String.prototype.replace);
-var $strSlice = bind.call(Function.call, String.prototype.slice);
+},{}],19:[function(require,module,exports){
+"use strict";var implementation=require(18);module.exports=Function.prototype.bind||implementation;
 
-/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
-var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
-var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
-var stringToPath = function stringToPath(string) {
-	var first = $strSlice(string, 0, 1);
-	var last = $strSlice(string, -1);
-	if (first === '%' && last !== '%') {
-		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
-	} else if (last === '%' && first !== '%') {
-		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
-	}
-	var result = [];
-	$replace(string, rePropName, function (match, number, quote, subString) {
-		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
-	});
-	return result;
-};
-/* end adaptation */
+},{"18":18}],10:[function(require,module,exports){
+"use strict";var GetIntrinsic=require(20),$defineProperty=GetIntrinsic("%Object.defineProperty%",!0)||!1;if($defineProperty)try{$defineProperty({},"a",{value:1})}catch(e){$defineProperty=!1}module.exports=$defineProperty;
 
-var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
-	var intrinsicName = name;
-	var alias;
-	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
-		alias = LEGACY_ALIASES[intrinsicName];
-		intrinsicName = '%' + alias[0] + '%';
-	}
+},{"20":20}],28:[function(require,module,exports){
+"use strict";var GetIntrinsic=require(20),define=require(9),hasDescriptors=require(22)(),gOPD=require(21),$TypeError=require(16),$floor=GetIntrinsic("%Math.floor%");module.exports=function setFunctionLength(e,r){if("function"!=typeof e)throw new $TypeError("`fn` is not a function");if("number"!=typeof r||r<0||r>4294967295||$floor(r)!==r)throw new $TypeError("`length` must be a positive 32-bit integer");var t=arguments.length>2&&!!arguments[2],i=!0,n=!0;if("length"in e&&gOPD){var o=gOPD(e,"length");o&&!o.configurable&&(i=!1),o&&!o.writable&&(n=!1)}return(i||n||!t)&&(hasDescriptors?define(e,"length",r,!0,!0):define(e,"length",r)),e};
 
-	if (hasOwn(INTRINSICS, intrinsicName)) {
-		var value = INTRINSICS[intrinsicName];
-		if (value === needsEval) {
-			value = doEval(intrinsicName);
-		}
-		if (typeof value === 'undefined' && !allowMissing) {
-			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
-		}
+},{"16":16,"20":20,"21":21,"22":22,"9":9}],9:[function(require,module,exports){
+"use strict";var $defineProperty=require(10),$SyntaxError=require(15),$TypeError=require(16),gopd=require(21);module.exports=function defineDataProperty(e,r,o){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new $TypeError("`obj` must be an object or a function`");if("string"!=typeof r&&"symbol"!=typeof r)throw new $TypeError("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new $TypeError("`loose`, if provided, must be a boolean");var n=arguments.length>3?arguments[3]:null,l=arguments.length>4?arguments[4]:null,t=arguments.length>5?arguments[5]:null,i=arguments.length>6&&arguments[6],a=!!gopd&&gopd(e,r);if($defineProperty)$defineProperty(e,r,{configurable:null===t&&a?a.configurable:!t,enumerable:null===n&&a?a.enumerable:!n,value:o,writable:null===l&&a?a.writable:!l});else{if(!i&&(n||l||t))throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[r]=o}};
 
-		return {
-			alias: alias,
-			name: intrinsicName,
-			value: value
-		};
-	}
+},{"10":10,"15":15,"16":16,"21":21}],15:[function(require,module,exports){
+"use strict";module.exports=SyntaxError;
 
-	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
-};
+},{}],21:[function(require,module,exports){
+"use strict";var GetIntrinsic=require(20),$gOPD=GetIntrinsic("%Object.getOwnPropertyDescriptor%",!0);if($gOPD)try{$gOPD([],"length")}catch(t){$gOPD=null}module.exports=$gOPD;
 
-module.exports = function GetIntrinsic(name, allowMissing) {
-	if (typeof name !== 'string' || name.length === 0) {
-		throw new $TypeError('intrinsic name must be a non-empty string');
-	}
-	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
-		throw new $TypeError('"allowMissing" argument must be a boolean');
-	}
+},{"20":20}],11:[function(require,module,exports){
+"use strict";module.exports=EvalError;
 
-	var parts = stringToPath(name);
-	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
+},{}],12:[function(require,module,exports){
+"use strict";module.exports=Error;
 
-	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
-	var intrinsicRealName = intrinsic.name;
-	var value = intrinsic.value;
-	var skipFurtherCaching = false;
-
-	var alias = intrinsic.alias;
-	if (alias) {
-		intrinsicBaseName = alias[0];
-		$spliceApply(parts, $concat([0, 1], alias));
-	}
-
-	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
-		var part = parts[i];
-		var first = $strSlice(part, 0, 1);
-		var last = $strSlice(part, -1);
-		if (
-			(
-				(first === '"' || first === "'" || first === '`')
-				|| (last === '"' || last === "'" || last === '`')
-			)
-			&& first !== last
-		) {
-			throw new $SyntaxError('property names with quotes must have matching quotes');
-		}
-		if (part === 'constructor' || !isOwn) {
-			skipFurtherCaching = true;
-		}
-
-		intrinsicBaseName += '.' + part;
-		intrinsicRealName = '%' + intrinsicBaseName + '%';
-
-		if (hasOwn(INTRINSICS, intrinsicRealName)) {
-			value = INTRINSICS[intrinsicRealName];
-		} else if (value != null) {
-			if (!(part in value)) {
-				if (!allowMissing) {
-					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
-				}
-				return void undefined;
-			}
-			if ($gOPD && (i + 1) >= parts.length) {
-				var desc = $gOPD(value, part);
-				isOwn = !!desc;
-
-				// By convention, when a data property is converted to an accessor
-				// property to emulate a data property that does not suffer from
-				// the override mistake, that accessor's getter is marked with
-				// an `originalValue` property. Here, when we detect this, we
-				// uphold the illusion by pretending to see that original data
-				// property, i.e., returning the value rather than the getter
-				// itself.
-				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
-					value = desc.get;
-				} else {
-					value = value[part];
-				}
-			} else {
-				isOwn = hasOwn(value, part);
-				value = value[part];
-			}
-
-			if (isOwn && !skipFurtherCaching) {
-				INTRINSICS[intrinsicRealName] = value;
-			}
-		}
-	}
-	return value;
-};
-
-},{"function-bind":10,"has":14,"has-symbols":12}],12:[function(require,module,exports){
-'use strict';
-
-var origSymbol = typeof Symbol !== 'undefined' && Symbol;
-var hasSymbolSham = require('./shams');
-
-module.exports = function hasNativeSymbols() {
-	if (typeof origSymbol !== 'function') { return false; }
-	if (typeof Symbol !== 'function') { return false; }
-	if (typeof origSymbol('foo') !== 'symbol') { return false; }
-	if (typeof Symbol('bar') !== 'symbol') { return false; }
-
-	return hasSymbolSham();
-};
-
-},{"./shams":13}],13:[function(require,module,exports){
-'use strict';
-
-/* eslint complexity: [2, 18], max-statements: [2, 33] */
-module.exports = function hasSymbols() {
-	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
-	if (typeof Symbol.iterator === 'symbol') { return true; }
-
-	var obj = {};
-	var sym = Symbol('test');
-	var symObj = Object(sym);
-	if (typeof sym === 'string') { return false; }
-
-	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
-	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }
-
-	// temp disabled per https://github.com/ljharb/object.assign/issues/17
-	// if (sym instanceof Symbol) { return false; }
-	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
-	// if (!(symObj instanceof Symbol)) { return false; }
-
-	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
-	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
-
-	var symVal = 42;
-	obj[sym] = symVal;
-	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
-	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }
-
-	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }
-
-	var syms = Object.getOwnPropertySymbols(obj);
-	if (syms.length !== 1 || syms[0] !== sym) { return false; }
-
-	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }
-
-	if (typeof Object.getOwnPropertyDescriptor === 'function') {
-		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
-		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
-	}
-
-	return true;
-};
+},{}],13:[function(require,module,exports){
+"use strict";module.exports=RangeError;
 
 },{}],14:[function(require,module,exports){
-'use strict';
-
-var bind = require('function-bind');
-
-module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
-
-},{"function-bind":10}],15:[function(require,module,exports){
-var hasMap = typeof Map === 'function' && Map.prototype;
-var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
-var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
-var mapForEach = hasMap && Map.prototype.forEach;
-var hasSet = typeof Set === 'function' && Set.prototype;
-var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
-var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
-var setForEach = hasSet && Set.prototype.forEach;
-var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
-var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
-var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
-var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
-var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
-var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
-var booleanValueOf = Boolean.prototype.valueOf;
-var objectToString = Object.prototype.toString;
-var functionToString = Function.prototype.toString;
-var $match = String.prototype.match;
-var $slice = String.prototype.slice;
-var $replace = String.prototype.replace;
-var $toUpperCase = String.prototype.toUpperCase;
-var $toLowerCase = String.prototype.toLowerCase;
-var $test = RegExp.prototype.test;
-var $concat = Array.prototype.concat;
-var $join = Array.prototype.join;
-var $arrSlice = Array.prototype.slice;
-var $floor = Math.floor;
-var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
-var gOPS = Object.getOwnPropertySymbols;
-var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
-var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
-// ie, `has-tostringtag/shams
-var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
-    ? Symbol.toStringTag
-    : null;
-var isEnumerable = Object.prototype.propertyIsEnumerable;
-
-var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
-    [].__proto__ === Array.prototype // eslint-disable-line no-proto
-        ? function (O) {
-            return O.__proto__; // eslint-disable-line no-proto
-        }
-        : null
-);
-
-function addNumericSeparator(num, str) {
-    if (
-        num === Infinity
-        || num === -Infinity
-        || num !== num
-        || (num && num > -1000 && num < 1000)
-        || $test.call(/e/, str)
-    ) {
-        return str;
-    }
-    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
-    if (typeof num === 'number') {
-        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
-        if (int !== num) {
-            var intStr = String(int);
-            var dec = $slice.call(str, intStr.length + 1);
-            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
-        }
-    }
-    return $replace.call(str, sepRegex, '$&_');
-}
-
-var utilInspect = require('./util.inspect');
-var inspectCustom = utilInspect.custom;
-var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
-
-module.exports = function inspect_(obj, options, depth, seen) {
-    var opts = options || {};
-
-    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
-        throw new TypeError('option "quoteStyle" must be "single" or "double"');
-    }
-    if (
-        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
-            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
-            : opts.maxStringLength !== null
-        )
-    ) {
-        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
-    }
-    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
-    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
-        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
-    }
-
-    if (
-        has(opts, 'indent')
-        && opts.indent !== null
-        && opts.indent !== '\t'
-        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
-    ) {
-        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
-    }
-    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
-        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
-    }
-    var numericSeparator = opts.numericSeparator;
-
-    if (typeof obj === 'undefined') {
-        return 'undefined';
-    }
-    if (obj === null) {
-        return 'null';
-    }
-    if (typeof obj === 'boolean') {
-        return obj ? 'true' : 'false';
-    }
-
-    if (typeof obj === 'string') {
-        return inspectString(obj, opts);
-    }
-    if (typeof obj === 'number') {
-        if (obj === 0) {
-            return Infinity / obj > 0 ? '0' : '-0';
-        }
-        var str = String(obj);
-        return numericSeparator ? addNumericSeparator(obj, str) : str;
-    }
-    if (typeof obj === 'bigint') {
-        var bigIntStr = String(obj) + 'n';
-        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
-    }
-
-    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
-    if (typeof depth === 'undefined') { depth = 0; }
-    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
-        return isArray(obj) ? '[Array]' : '[Object]';
-    }
-
-    var indent = getIndent(opts, depth);
-
-    if (typeof seen === 'undefined') {
-        seen = [];
-    } else if (indexOf(seen, obj) >= 0) {
-        return '[Circular]';
-    }
-
-    function inspect(value, from, noIndent) {
-        if (from) {
-            seen = $arrSlice.call(seen);
-            seen.push(from);
-        }
-        if (noIndent) {
-            var newOpts = {
-                depth: opts.depth
-            };
-            if (has(opts, 'quoteStyle')) {
-                newOpts.quoteStyle = opts.quoteStyle;
-            }
-            return inspect_(value, newOpts, depth + 1, seen);
-        }
-        return inspect_(value, opts, depth + 1, seen);
-    }
-
-    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
-        var name = nameOf(obj);
-        var keys = arrObjKeys(obj, inspect);
-        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
-    }
-    if (isSymbol(obj)) {
-        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
-        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
-    }
-    if (isElement(obj)) {
-        var s = '<' + $toLowerCase.call(String(obj.nodeName));
-        var attrs = obj.attributes || [];
-        for (var i = 0; i < attrs.length; i++) {
-            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
-        }
-        s += '>';
-        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
-        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
-        return s;
-    }
-    if (isArray(obj)) {
-        if (obj.length === 0) { return '[]'; }
-        var xs = arrObjKeys(obj, inspect);
-        if (indent && !singleLineValues(xs)) {
-            return '[' + indentedJoin(xs, indent) + ']';
-        }
-        return '[ ' + $join.call(xs, ', ') + ' ]';
-    }
-    if (isError(obj)) {
-        var parts = arrObjKeys(obj, inspect);
-        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
-            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
-        }
-        if (parts.length === 0) { return '[' + String(obj) + ']'; }
-        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
-    }
-    if (typeof obj === 'object' && customInspect) {
-        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
-            return utilInspect(obj, { depth: maxDepth - depth });
-        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
-            return obj.inspect();
-        }
-    }
-    if (isMap(obj)) {
-        var mapParts = [];
-        mapForEach.call(obj, function (value, key) {
-            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
-        });
-        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
-    }
-    if (isSet(obj)) {
-        var setParts = [];
-        setForEach.call(obj, function (value) {
-            setParts.push(inspect(value, obj));
-        });
-        return collectionOf('Set', setSize.call(obj), setParts, indent);
-    }
-    if (isWeakMap(obj)) {
-        return weakCollectionOf('WeakMap');
-    }
-    if (isWeakSet(obj)) {
-        return weakCollectionOf('WeakSet');
-    }
-    if (isWeakRef(obj)) {
-        return weakCollectionOf('WeakRef');
-    }
-    if (isNumber(obj)) {
-        return markBoxed(inspect(Number(obj)));
-    }
-    if (isBigInt(obj)) {
-        return markBoxed(inspect(bigIntValueOf.call(obj)));
-    }
-    if (isBoolean(obj)) {
-        return markBoxed(booleanValueOf.call(obj));
-    }
-    if (isString(obj)) {
-        return markBoxed(inspect(String(obj)));
-    }
-    if (!isDate(obj) && !isRegExp(obj)) {
-        var ys = arrObjKeys(obj, inspect);
-        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
-        var protoTag = obj instanceof Object ? '' : 'null prototype';
-        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
-        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
-        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
-        if (ys.length === 0) { return tag + '{}'; }
-        if (indent) {
-            return tag + '{' + indentedJoin(ys, indent) + '}';
-        }
-        return tag + '{ ' + $join.call(ys, ', ') + ' }';
-    }
-    return String(obj);
-};
-
-function wrapQuotes(s, defaultStyle, opts) {
-    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
-    return quoteChar + s + quoteChar;
-}
-
-function quote(s) {
-    return $replace.call(String(s), /"/g, '&quot;');
-}
-
-function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
-
-// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
-function isSymbol(obj) {
-    if (hasShammedSymbols) {
-        return obj && typeof obj === 'object' && obj instanceof Symbol;
-    }
-    if (typeof obj === 'symbol') {
-        return true;
-    }
-    if (!obj || typeof obj !== 'object' || !symToString) {
-        return false;
-    }
-    try {
-        symToString.call(obj);
-        return true;
-    } catch (e) {}
-    return false;
-}
-
-function isBigInt(obj) {
-    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
-        return false;
-    }
-    try {
-        bigIntValueOf.call(obj);
-        return true;
-    } catch (e) {}
-    return false;
-}
-
-var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
-function has(obj, key) {
-    return hasOwn.call(obj, key);
-}
-
-function toStr(obj) {
-    return objectToString.call(obj);
-}
-
-function nameOf(f) {
-    if (f.name) { return f.name; }
-    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
-    if (m) { return m[1]; }
-    return null;
-}
-
-function indexOf(xs, x) {
-    if (xs.indexOf) { return xs.indexOf(x); }
-    for (var i = 0, l = xs.length; i < l; i++) {
-        if (xs[i] === x) { return i; }
-    }
-    return -1;
-}
-
-function isMap(x) {
-    if (!mapSize || !x || typeof x !== 'object') {
-        return false;
-    }
-    try {
-        mapSize.call(x);
-        try {
-            setSize.call(x);
-        } catch (s) {
-            return true;
-        }
-        return x instanceof Map; // core-js workaround, pre-v2.5.0
-    } catch (e) {}
-    return false;
-}
-
-function isWeakMap(x) {
-    if (!weakMapHas || !x || typeof x !== 'object') {
-        return false;
-    }
-    try {
-        weakMapHas.call(x, weakMapHas);
-        try {
-            weakSetHas.call(x, weakSetHas);
-        } catch (s) {
-            return true;
-        }
-        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
-    } catch (e) {}
-    return false;
-}
-
-function isWeakRef(x) {
-    if (!weakRefDeref || !x || typeof x !== 'object') {
-        return false;
-    }
-    try {
-        weakRefDeref.call(x);
-        return true;
-    } catch (e) {}
-    return false;
-}
-
-function isSet(x) {
-    if (!setSize || !x || typeof x !== 'object') {
-        return false;
-    }
-    try {
-        setSize.call(x);
-        try {
-            mapSize.call(x);
-        } catch (m) {
-            return true;
-        }
-        return x instanceof Set; // core-js workaround, pre-v2.5.0
-    } catch (e) {}
-    return false;
-}
-
-function isWeakSet(x) {
-    if (!weakSetHas || !x || typeof x !== 'object') {
-        return false;
-    }
-    try {
-        weakSetHas.call(x, weakSetHas);
-        try {
-            weakMapHas.call(x, weakMapHas);
-        } catch (s) {
-            return true;
-        }
-        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
-    } catch (e) {}
-    return false;
-}
-
-function isElement(x) {
-    if (!x || typeof x !== 'object') { return false; }
-    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
-        return true;
-    }
-    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
-}
-
-function inspectString(str, opts) {
-    if (str.length > opts.maxStringLength) {
-        var remaining = str.length - opts.maxStringLength;
-        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
-        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
-    }
-    // eslint-disable-next-line no-control-regex
-    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
-    return wrapQuotes(s, 'single', opts);
-}
-
-function lowbyte(c) {
-    var n = c.charCodeAt(0);
-    var x = {
-        8: 'b',
-        9: 't',
-        10: 'n',
-        12: 'f',
-        13: 'r'
-    }[n];
-    if (x) { return '\\' + x; }
-    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
-}
-
-function markBoxed(str) {
-    return 'Object(' + str + ')';
-}
-
-function weakCollectionOf(type) {
-    return type + ' { ? }';
-}
-
-function collectionOf(type, size, entries, indent) {
-    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
-    return type + ' (' + size + ') {' + joinedEntries + '}';
-}
+"use strict";module.exports=ReferenceError;
 
-function singleLineValues(xs) {
-    for (var i = 0; i < xs.length; i++) {
-        if (indexOf(xs[i], '\n') >= 0) {
-            return false;
-        }
-    }
-    return true;
-}
+},{}],17:[function(require,module,exports){
+"use strict";module.exports=URIError;
 
-function getIndent(opts, depth) {
-    var baseIndent;
-    if (opts.indent === '\t') {
-        baseIndent = '\t';
-    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
-        baseIndent = $join.call(Array(opts.indent + 1), ' ');
-    } else {
-        return null;
-    }
-    return {
-        base: baseIndent,
-        prev: $join.call(Array(depth + 1), baseIndent)
-    };
-}
+},{}],18:[function(require,module,exports){
+"use strict";var ERROR_MESSAGE="Function.prototype.bind called on incompatible ",toStr=Object.prototype.toString,max=Math.max,funcType="[object Function]",concatty=function concatty(t,n){for(var r=[],o=0;o<t.length;o+=1)r[o]=t[o];for(var e=0;e<n.length;e+=1)r[e+t.length]=n[e];return r},slicy=function slicy(t,n){for(var r=[],o=n||0,e=0;o<t.length;o+=1,e+=1)r[e]=t[o];return r},joiny=function(t,n){for(var r="",o=0;o<t.length;o+=1)r+=t[o],o+1<t.length&&(r+=n);return r};module.exports=function bind(t){var n=this;if("function"!=typeof n||toStr.apply(n)!==funcType)throw new TypeError(ERROR_MESSAGE+n);for(var r,o=slicy(arguments,1),e=max(0,n.length-o.length),i=[],c=0;c<e;c++)i[c]="$"+c;if(r=Function("binder","return function ("+joiny(i,",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof r){var e=n.apply(this,concatty(o,arguments));return Object(e)===e?e:this}return n.apply(t,concatty(o,arguments))})),n.prototype){var p=function Empty(){};p.prototype=n.prototype,r.prototype=new p,p.prototype=null}return r};
 
-function indentedJoin(xs, indent) {
-    if (xs.length === 0) { return ''; }
-    var lineJoiner = '\n' + indent.prev + indent.base;
-    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
-}
+},{}],23:[function(require,module,exports){
+"use strict";var test={__proto__:null,foo:{}},$Object=Object;module.exports=function hasProto(){return{__proto__:test}.foo===test.foo&&!(test instanceof $Object)};
 
-function arrObjKeys(obj, inspect) {
-    var isArr = isArray(obj);
-    var xs = [];
-    if (isArr) {
-        xs.length = obj.length;
-        for (var i = 0; i < obj.length; i++) {
-            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
-        }
-    }
-    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
-    var symMap;
-    if (hasShammedSymbols) {
-        symMap = {};
-        for (var k = 0; k < syms.length; k++) {
-            symMap['$' + syms[k]] = syms[k];
-        }
-    }
+},{}],26:[function(require,module,exports){
+"use strict";var call=Function.prototype.call,$hasOwn=Object.prototype.hasOwnProperty,bind=require(19);module.exports=bind.call(call,$hasOwn);
 
-    for (var key in obj) { // eslint-disable-line no-restricted-syntax
-        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
-        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
-        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
-            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
-            continue; // eslint-disable-line no-restricted-syntax, no-continue
-        } else if ($test.call(/[^\w$]/, key)) {
-            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
-        } else {
-            xs.push(key + ': ' + inspect(obj[key], obj));
-        }
-    }
-    if (typeof gOPS === 'function') {
-        for (var j = 0; j < syms.length; j++) {
-            if (isEnumerable.call(obj, syms[j])) {
-                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
-            }
-        }
-    }
-    return xs;
-}
+},{"19":19}],24:[function(require,module,exports){
+"use strict";var origSymbol="undefined"!=typeof Symbol&&Symbol,hasSymbolSham=require(25);module.exports=function hasNativeSymbols(){return"function"==typeof origSymbol&&"function"==typeof Symbol&&"symbol"==typeof origSymbol("foo")&&"symbol"==typeof Symbol("bar")&&hasSymbolSham()};
 
-},{"./util.inspect":6}],16:[function(require,module,exports){
-'use strict';
+},{"25":25}],22:[function(require,module,exports){
+"use strict";var $defineProperty=require(10),hasPropertyDescriptors=function hasPropertyDescriptors(){return!!$defineProperty};hasPropertyDescriptors.hasArrayLengthDefineBug=function hasArrayLengthDefineBug(){if(!$defineProperty)return null;try{return 1!==$defineProperty([],"length",{value:1}).length}catch(r){return!0}},module.exports=hasPropertyDescriptors;
 
-var GetIntrinsic = require('get-intrinsic');
-var callBound = require('call-bind/callBound');
-var inspect = require('object-inspect');
+},{"10":10}],25:[function(require,module,exports){
+"use strict";module.exports=function hasSymbols(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var o=Object.getOwnPropertySymbols(t);if(1!==o.length||o[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var n=Object.getOwnPropertyDescriptor(t,e);if(42!==n.value||!0!==n.enumerable)return!1}return!0};
 
-var $TypeError = GetIntrinsic('%TypeError%');
-var $WeakMap = GetIntrinsic('%WeakMap%', true);
-var $Map = GetIntrinsic('%Map%', true);
+},{}],27:[function(require,module,exports){
+(function (global){(function (){
+var hasMap="function"==typeof Map&&Map.prototype,mapSizeDescriptor=Object.getOwnPropertyDescriptor&&hasMap?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,mapSize=hasMap&&mapSizeDescriptor&&"function"==typeof mapSizeDescriptor.get?mapSizeDescriptor.get:null,mapForEach=hasMap&&Map.prototype.forEach,hasSet="function"==typeof Set&&Set.prototype,setSizeDescriptor=Object.getOwnPropertyDescriptor&&hasSet?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,setSize=hasSet&&setSizeDescriptor&&"function"==typeof setSizeDescriptor.get?setSizeDescriptor.get:null,setForEach=hasSet&&Set.prototype.forEach,hasWeakMap="function"==typeof WeakMap&&WeakMap.prototype,weakMapHas=hasWeakMap?WeakMap.prototype.has:null,hasWeakSet="function"==typeof WeakSet&&WeakSet.prototype,weakSetHas=hasWeakSet?WeakSet.prototype.has:null,hasWeakRef="function"==typeof WeakRef&&WeakRef.prototype,weakRefDeref=hasWeakRef?WeakRef.prototype.deref:null,booleanValueOf=Boolean.prototype.valueOf,objectToString=Object.prototype.toString,functionToString=Function.prototype.toString,$match=String.prototype.match,$slice=String.prototype.slice,$replace=String.prototype.replace,$toUpperCase=String.prototype.toUpperCase,$toLowerCase=String.prototype.toLowerCase,$test=RegExp.prototype.test,$concat=Array.prototype.concat,$join=Array.prototype.join,$arrSlice=Array.prototype.slice,$floor=Math.floor,bigIntValueOf="function"==typeof BigInt?BigInt.prototype.valueOf:null,gOPS=Object.getOwnPropertySymbols,symToString="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,hasShammedSymbols="function"==typeof Symbol&&"object"==typeof Symbol.iterator,toStringTag="function"==typeof Symbol&&Symbol.toStringTag&&(Symbol.toStringTag,1)?Symbol.toStringTag:null,isEnumerable=Object.prototype.propertyIsEnumerable,gPO=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(t){return t.__proto__}:null);function addNumericSeparator(t,e){if(t===1/0||t===-1/0||t!=t||t&&t>-1e3&&t<1e3||$test.call(/e/,e))return e;var r=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof t){var n=t<0?-$floor(-t):$floor(t);if(n!==t){var o=String(n),i=$slice.call(e,o.length+1);return $replace.call(o,r,"$&_")+"."+$replace.call($replace.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return $replace.call(e,r,"$&_")}var utilInspect=require(6),inspectCustom=utilInspect.custom,inspectSymbol=isSymbol(inspectCustom)?inspectCustom:null;function wrapQuotes(t,e,r){var n="double"===(r.quoteStyle||e)?'"':"'";return n+t+n}function quote(t){return $replace.call(String(t),/"/g,"&quot;")}function isArray(t){return!("[object Array]"!==toStr(t)||toStringTag&&"object"==typeof t&&toStringTag in t)}function isDate(t){return!("[object Date]"!==toStr(t)||toStringTag&&"object"==typeof t&&toStringTag in t)}function isRegExp(t){return!("[object RegExp]"!==toStr(t)||toStringTag&&"object"==typeof t&&toStringTag in t)}function isError(t){return!("[object Error]"!==toStr(t)||toStringTag&&"object"==typeof t&&toStringTag in t)}function isString(t){return!("[object String]"!==toStr(t)||toStringTag&&"object"==typeof t&&toStringTag in t)}function isNumber(t){return!("[object Number]"!==toStr(t)||toStringTag&&"object"==typeof t&&toStringTag in t)}function isBoolean(t){return!("[object Boolean]"!==toStr(t)||toStringTag&&"object"==typeof t&&toStringTag in t)}function isSymbol(t){if(hasShammedSymbols)return t&&"object"==typeof t&&t instanceof Symbol;if("symbol"==typeof t)return!0;if(!t||"object"!=typeof t||!symToString)return!1;try{return symToString.call(t),!0}catch(t){}return!1}function isBigInt(t){if(!t||"object"!=typeof t||!bigIntValueOf)return!1;try{return bigIntValueOf.call(t),!0}catch(t){}return!1}module.exports=function inspect_(t,e,r,n){var o=e||{};if(has(o,"quoteStyle")&&"single"!==o.quoteStyle&&"double"!==o.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(has(o,"maxStringLength")&&("number"==typeof o.maxStringLength?o.maxStringLength<0&&o.maxStringLength!==1/0:null!==o.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var i=!has(o,"customInspect")||o.customInspect;if("boolean"!=typeof i&&"symbol"!==i)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(has(o,"indent")&&null!==o.indent&&"\t"!==o.indent&&!(parseInt(o.indent,10)===o.indent&&o.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(has(o,"numericSeparator")&&"boolean"!=typeof o.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var a=o.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return inspectString(t,o);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var c=String(t);return a?addNumericSeparator(t,c):c}if("bigint"==typeof t){var l=String(t)+"n";return a?addNumericSeparator(t,l):l}var p=void 0===o.depth?5:o.depth;if(void 0===r&&(r=0),r>=p&&p>0&&"object"==typeof t)return isArray(t)?"[Array]":"[Object]";var u=getIndent(o,r);if(void 0===n)n=[];else if(indexOf(n,t)>=0)return"[Circular]";function inspect(t,e,i){if(e&&(n=$arrSlice.call(n)).push(e),i){var a={depth:o.depth};return has(o,"quoteStyle")&&(a.quoteStyle=o.quoteStyle),inspect_(t,a,r+1,n)}return inspect_(t,o,r+1,n)}if("function"==typeof t&&!isRegExp(t)){var f=nameOf(t),s=arrObjKeys(t,inspect);return"[Function"+(f?": "+f:" (anonymous)")+"]"+(s.length>0?" { "+$join.call(s,", ")+" }":"")}if(isSymbol(t)){var y=hasShammedSymbols?$replace.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):symToString.call(t);return"object"!=typeof t||hasShammedSymbols?y:markBoxed(y)}if(isElement(t)){for(var S="<"+$toLowerCase.call(String(t.nodeName)),g=t.attributes||[],b=0;b<g.length;b++)S+=" "+g[b].name+"="+wrapQuotes(quote(g[b].value),"double",o);return S+=">",t.childNodes&&t.childNodes.length&&(S+="..."),S+"</"+$toLowerCase.call(String(t.nodeName))+">"}if(isArray(t)){if(0===t.length)return"[]";var m=arrObjKeys(t,inspect);return u&&!singleLineValues(m)?"["+indentedJoin(m,u)+"]":"[ "+$join.call(m,", ")+" ]"}if(isError(t)){var h=arrObjKeys(t,inspect);return"cause"in Error.prototype||!("cause"in t)||isEnumerable.call(t,"cause")?0===h.length?"["+String(t)+"]":"{ ["+String(t)+"] "+$join.call(h,", ")+" }":"{ ["+String(t)+"] "+$join.call($concat.call("[cause]: "+inspect(t.cause),h),", ")+" }"}if("object"==typeof t&&i){if(inspectSymbol&&"function"==typeof t[inspectSymbol]&&utilInspect)return utilInspect(t,{depth:p-r});if("symbol"!==i&&"function"==typeof t.inspect)return t.inspect()}if(isMap(t)){var d=[];return mapForEach&&mapForEach.call(t,(function(e,r){d.push(inspect(r,t,!0)+" => "+inspect(e,t))})),collectionOf("Map",mapSize.call(t),d,u)}if(isSet(t)){var j=[];return setForEach&&setForEach.call(t,(function(e){j.push(inspect(e,t))})),collectionOf("Set",setSize.call(t),j,u)}if(isWeakMap(t))return weakCollectionOf("WeakMap");if(isWeakSet(t))return weakCollectionOf("WeakSet");if(isWeakRef(t))return weakCollectionOf("WeakRef");if(isNumber(t))return markBoxed(inspect(Number(t)));if(isBigInt(t))return markBoxed(inspect(bigIntValueOf.call(t)));if(isBoolean(t))return markBoxed(booleanValueOf.call(t));if(isString(t))return markBoxed(inspect(String(t)));if("undefined"!=typeof window&&t===window)return"{ [object Window] }";if("undefined"!=typeof globalThis&&t===globalThis||"undefined"!=typeof global&&t===global)return"{ [object globalThis] }";if(!isDate(t)&&!isRegExp(t)){var O=arrObjKeys(t,inspect),w=gPO?gPO(t)===Object.prototype:t instanceof Object||t.constructor===Object,$=t instanceof Object?"":"null prototype",k=!w&&toStringTag&&Object(t)===t&&toStringTag in t?$slice.call(toStr(t),8,-1):$?"Object":"",v=(w||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(k||$?"["+$join.call($concat.call([],k||[],$||[]),": ")+"] ":"");return 0===O.length?v+"{}":u?v+"{"+indentedJoin(O,u)+"}":v+"{ "+$join.call(O,", ")+" }"}return String(t)};var hasOwn=Object.prototype.hasOwnProperty||function(t){return t in this};function has(t,e){return hasOwn.call(t,e)}function toStr(t){return objectToString.call(t)}function nameOf(t){if(t.name)return t.name;var e=$match.call(functionToString.call(t),/^function\s*([\w$]+)/);return e?e[1]:null}function indexOf(t,e){if(t.indexOf)return t.indexOf(e);for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}function isMap(t){if(!mapSize||!t||"object"!=typeof t)return!1;try{mapSize.call(t);try{setSize.call(t)}catch(t){return!0}return t instanceof Map}catch(t){}return!1}function isWeakMap(t){if(!weakMapHas||!t||"object"!=typeof t)return!1;try{weakMapHas.call(t,weakMapHas);try{weakSetHas.call(t,weakSetHas)}catch(t){return!0}return t instanceof WeakMap}catch(t){}return!1}function isWeakRef(t){if(!weakRefDeref||!t||"object"!=typeof t)return!1;try{return weakRefDeref.call(t),!0}catch(t){}return!1}function isSet(t){if(!setSize||!t||"object"!=typeof t)return!1;try{setSize.call(t);try{mapSize.call(t)}catch(t){return!0}return t instanceof Set}catch(t){}return!1}function isWeakSet(t){if(!weakSetHas||!t||"object"!=typeof t)return!1;try{weakSetHas.call(t,weakSetHas);try{weakMapHas.call(t,weakMapHas)}catch(t){return!0}return t instanceof WeakSet}catch(t){}return!1}function isElement(t){return!(!t||"object"!=typeof t)&&("undefined"!=typeof HTMLElement&&t instanceof HTMLElement||"string"==typeof t.nodeName&&"function"==typeof t.getAttribute)}function inspectString(t,e){if(t.length>e.maxStringLength){var r=t.length-e.maxStringLength,n="... "+r+" more character"+(r>1?"s":"");return inspectString($slice.call(t,0,e.maxStringLength),e)+n}return wrapQuotes($replace.call($replace.call(t,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,lowbyte),"single",e)}function lowbyte(t){var e=t.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return r?"\\"+r:"\\x"+(e<16?"0":"")+$toUpperCase.call(e.toString(16))}function markBoxed(t){return"Object("+t+")"}function weakCollectionOf(t){return t+" { ? }"}function collectionOf(t,e,r,n){return t+" ("+e+") {"+(n?indentedJoin(r,n):$join.call(r,", "))+"}"}function singleLineValues(t){for(var e=0;e<t.length;e++)if(indexOf(t[e],"\n")>=0)return!1;return!0}function getIndent(t,e){var r;if("\t"===t.indent)r="\t";else{if(!("number"==typeof t.indent&&t.indent>0))return null;r=$join.call(Array(t.indent+1)," ")}return{base:r,prev:$join.call(Array(e+1),r)}}function indentedJoin(t,e){if(0===t.length)return"";var r="\n"+e.prev+e.base;return r+$join.call(t,","+r)+"\n"+e.prev}function arrObjKeys(t,e){var r=isArray(t),n=[];if(r){n.length=t.length;for(var o=0;o<t.length;o++)n[o]=has(t,o)?e(t[o],t):""}var i,a="function"==typeof gOPS?gOPS(t):[];if(hasShammedSymbols){i={};for(var c=0;c<a.length;c++)i["$"+a[c]]=a[c]}for(var l in t)has(t,l)&&(r&&String(Number(l))===l&&l<t.length||hasShammedSymbols&&i["$"+l]instanceof Symbol||($test.call(/[^\w$]/,l)?n.push(e(l,t)+": "+e(t[l],t)):n.push(l+": "+e(t[l],t))));if("function"==typeof gOPS)for(var p=0;p<a.length;p++)isEnumerable.call(t,a[p])&&n.push("["+e(a[p])+"]: "+e(t[a[p]],t));return n}
 
-var $weakMapGet = callBound('WeakMap.prototype.get', true);
-var $weakMapSet = callBound('WeakMap.prototype.set', true);
-var $weakMapHas = callBound('WeakMap.prototype.has', true);
-var $mapGet = callBound('Map.prototype.get', true);
-var $mapSet = callBound('Map.prototype.set', true);
-var $mapHas = callBound('Map.prototype.has', true);
-
-/*
- * This function traverses the list returning the node corresponding to the
- * given key.
- *
- * That node is also moved to the head of the list, so that if it's accessed
- * again we don't need to traverse the whole list. By doing so, all the recently
- * used nodes can be accessed relatively quickly.
- */
-var listGetNode = function (list, key) { // eslint-disable-line consistent-return
-	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
-		if (curr.key === key) {
-			prev.next = curr.next;
-			curr.next = list.next;
-			list.next = curr; // eslint-disable-line no-param-reassign
-			return curr;
-		}
-	}
-};
-
-var listGet = function (objects, key) {
-	var node = listGetNode(objects, key);
-	return node && node.value;
-};
-var listSet = function (objects, key, value) {
-	var node = listGetNode(objects, key);
-	if (node) {
-		node.value = value;
-	} else {
-		// Prepend the new node to the beginning of the list
-		objects.next = { // eslint-disable-line no-param-reassign
-			key: key,
-			next: objects.next,
-			value: value
-		};
-	}
-};
-var listHas = function (objects, key) {
-	return !!listGetNode(objects, key);
-};
-
-module.exports = function getSideChannel() {
-	var $wm;
-	var $m;
-	var $o;
-	var channel = {
-		assert: function (key) {
-			if (!channel.has(key)) {
-				throw new $TypeError('Side channel does not contain ' + inspect(key));
-			}
-		},
-		get: function (key) { // eslint-disable-line consistent-return
-			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
-				if ($wm) {
-					return $weakMapGet($wm, key);
-				}
-			} else if ($Map) {
-				if ($m) {
-					return $mapGet($m, key);
-				}
-			} else {
-				if ($o) { // eslint-disable-line no-lonely-if
-					return listGet($o, key);
-				}
-			}
-		},
-		has: function (key) {
-			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
-				if ($wm) {
-					return $weakMapHas($wm, key);
-				}
-			} else if ($Map) {
-				if ($m) {
-					return $mapHas($m, key);
-				}
-			} else {
-				if ($o) { // eslint-disable-line no-lonely-if
-					return listHas($o, key);
-				}
-			}
-			return false;
-		},
-		set: function (key, value) {
-			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
-				if (!$wm) {
-					$wm = new $WeakMap();
-				}
-				$weakMapSet($wm, key, value);
-			} else if ($Map) {
-				if (!$m) {
-					$m = new $Map();
-				}
-				$mapSet($m, key, value);
-			} else {
-				if (!$o) {
-					/*
-					 * Initialize the linked list as an empty node, so that we don't have
-					 * to special-case handling of the first node: we can always refer to
-					 * it as (previous node).next, instead of something like (list).head
-					 */
-					$o = { key: {}, next: null };
-				}
-				listSet($o, key, value);
-			}
-		}
-	};
-	return channel;
-};
-
-},{"call-bind/callBound":7,"get-intrinsic":11,"object-inspect":15}]},{},[2])(2)
+}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
+},{"6":6}]},{},[2])(2)
 });
diff --git a/node_modules/nopt/.npmignore b/node_modules/nopt/.npmignore
deleted file mode 100644
diff --git a/node_modules/pg-pool/test/timeout.js b/node_modules/pg-pool/test/timeout.js
deleted file mode 100644
